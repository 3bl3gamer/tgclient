package mtproto

import (
	"github.com/ansel1/merry/v2"
)

const (
	TL_Layer                                                              = 166
	CRC_resPQ                                                             = 0x05162463
	CRC_p_q_inner_data                                                    = 0x83c95aec
	CRC_p_q_inner_data_dc                                                 = 0xa9f55f95
	CRC_p_q_inner_data_temp                                               = 0x3c6a84d4
	CRC_p_q_inner_data_temp_dc                                            = 0x56fddf88
	CRC_bind_auth_key_inner                                               = 0x75a3f765
	CRC_server_DH_params_fail                                             = 0x79cb045d
	CRC_server_DH_params_ok                                               = 0xd0e8075c
	CRC_server_DH_inner_data                                              = 0xb5890dba
	CRC_client_DH_inner_data                                              = 0x6643b654
	CRC_dh_gen_ok                                                         = 0x3bcbf734
	CRC_dh_gen_retry                                                      = 0x46dc1fb9
	CRC_dh_gen_fail                                                       = 0xa69dae02
	CRC_destroy_auth_key_ok                                               = 0xf660e1d4
	CRC_destroy_auth_key_none                                             = 0x0a9f2259
	CRC_destroy_auth_key_fail                                             = 0xea109b13
	CRC_req_pq                                                            = 0x60469778
	CRC_req_pq_multi                                                      = 0xbe7e8ef1
	CRC_req_DH_params                                                     = 0xd712e4be
	CRC_set_client_DH_params                                              = 0xf5045f1f
	CRC_destroy_auth_key                                                  = 0xd1435160
	CRC_msgs_ack                                                          = 0x62d6b459
	CRC_bad_msg_notification                                              = 0xa7eff811
	CRC_bad_server_salt                                                   = 0xedab447b
	CRC_msgs_state_req                                                    = 0xda69fb52
	CRC_msgs_state_info                                                   = 0x04deb57d
	CRC_msgs_all_info                                                     = 0x8cc0d131
	CRC_msg_detailed_info                                                 = 0x276d3ec6
	CRC_msg_new_detailed_info                                             = 0x809db6df
	CRC_msg_resend_req                                                    = 0x7d861a08
	CRC_rpc_error                                                         = 0x2144ca19
	CRC_rpc_answer_unknown                                                = 0x5e2ad36e
	CRC_rpc_answer_dropped_running                                        = 0xcd78e586
	CRC_rpc_answer_dropped                                                = 0xa43ad8b7
	CRC_future_salt                                                       = 0x0949d9dc
	CRC_future_salts                                                      = 0xae500895
	CRC_pong                                                              = 0x347773c5
	CRC_destroy_session_ok                                                = 0xe22045fc
	CRC_destroy_session_none                                              = 0x62d350c9
	CRC_new_session_created                                               = 0x9ec20908
	CRC_http_wait                                                         = 0x9299359f
	CRC_ipPort                                                            = 0xd433ad73
	CRC_ipPortSecret                                                      = 0x37982646
	CRC_accessPointRule                                                   = 0x4679b65f
	CRC_help_configSimple                                                 = 0x5a592a6c
	CRC_tlsClientHello                                                    = 0x6c52c484
	CRC_tlsBlockString                                                    = 0x4218a164
	CRC_tlsBlockRandom                                                    = 0x4d4dc41e
	CRC_tlsBlockZero                                                      = 0x09333afb
	CRC_tlsBlockDomain                                                    = 0x10e8636f
	CRC_tlsBlockGrease                                                    = 0xe675a1c1
	CRC_tlsBlockPublicKey                                                 = 0x9eb95b5c
	CRC_tlsBlockScope                                                     = 0xe725d44f
	CRC_tlsBlockPermutation                                               = 0xd51f148e
	CRC_rpc_drop_answer                                                   = 0x58e4a740
	CRC_get_future_salts                                                  = 0xb921bd04
	CRC_ping                                                              = 0x7abe77ec
	CRC_ping_delay_disconnect                                             = 0xf3427b8c
	CRC_destroy_session                                                   = 0xe7512126
	CRC_boolFalse                                                         = 0xbc799737
	CRC_boolTrue                                                          = 0x997275b5
	CRC_true                                                              = 0x3fedd339
	CRC_error                                                             = 0xc4b9f9bb
	CRC_null                                                              = 0x56730bcc
	CRC_inputPeerEmpty                                                    = 0x7f3b18ea
	CRC_inputPeerSelf                                                     = 0x7da07ec9
	CRC_inputPeerChat                                                     = 0x35a95cb9
	CRC_inputPeerUser                                                     = 0xdde8a54c
	CRC_inputPeerChannel                                                  = 0x27bcbbfc
	CRC_inputPeerUserFromMessage                                          = 0xa87b0a1c
	CRC_inputPeerChannelFromMessage                                       = 0xbd2a0840
	CRC_inputUserEmpty                                                    = 0xb98886cf
	CRC_inputUserSelf                                                     = 0xf7c1b13f
	CRC_inputUser                                                         = 0xf21158c6
	CRC_inputUserFromMessage                                              = 0x1da448e2
	CRC_inputPhoneContact                                                 = 0xf392b7f4
	CRC_inputFile                                                         = 0xf52ff27f
	CRC_inputFileBig                                                      = 0xfa4f0bb5
	CRC_inputMediaEmpty                                                   = 0x9664f57f
	CRC_inputMediaUploadedPhoto                                           = 0x1e287d04
	CRC_inputMediaPhoto                                                   = 0xb3ba0635
	CRC_inputMediaGeoPoint                                                = 0xf9c44144
	CRC_inputMediaContact                                                 = 0xf8ab7dfb
	CRC_inputMediaUploadedDocument                                        = 0x5b38c6c1
	CRC_inputMediaDocument                                                = 0x33473058
	CRC_inputMediaVenue                                                   = 0xc13d1c11
	CRC_inputMediaPhotoExternal                                           = 0xe5bbfe1a
	CRC_inputMediaDocumentExternal                                        = 0xfb52dc99
	CRC_inputMediaGame                                                    = 0xd33f43f3
	CRC_inputMediaInvoice                                                 = 0x8eb5a6d5
	CRC_inputMediaGeoLive                                                 = 0x971fa843
	CRC_inputMediaPoll                                                    = 0x0f94e5f1
	CRC_inputMediaDice                                                    = 0xe66fbf7b
	CRC_inputMediaStory                                                   = 0x89fdd778
	CRC_inputMediaWebPage                                                 = 0xc21b8849
	CRC_inputChatPhotoEmpty                                               = 0x1ca48f57
	CRC_inputChatUploadedPhoto                                            = 0xbdcdaec0
	CRC_inputChatPhoto                                                    = 0x8953ad37
	CRC_inputGeoPointEmpty                                                = 0xe4c123d6
	CRC_inputGeoPoint                                                     = 0x48222faf
	CRC_inputPhotoEmpty                                                   = 0x1cd7bf0d
	CRC_inputPhoto                                                        = 0x3bb3b94a
	CRC_inputFileLocation                                                 = 0xdfdaabe1
	CRC_inputEncryptedFileLocation                                        = 0xf5235d55
	CRC_inputDocumentFileLocation                                         = 0xbad07584
	CRC_inputSecureFileLocation                                           = 0xcbc7ee28
	CRC_inputTakeoutFileLocation                                          = 0x29be5899
	CRC_inputPhotoFileLocation                                            = 0x40181ffe
	CRC_inputPhotoLegacyFileLocation                                      = 0xd83466f3
	CRC_inputPeerPhotoFileLocation                                        = 0x37257e99
	CRC_inputStickerSetThumb                                              = 0x9d84f3db
	CRC_inputGroupCallStream                                              = 0x0598a92a
	CRC_peerUser                                                          = 0x59511722
	CRC_peerChat                                                          = 0x36c6019a
	CRC_peerChannel                                                       = 0xa2a5371e
	CRC_storage_fileUnknown                                               = 0xaa963b05
	CRC_storage_filePartial                                               = 0x40bc6f52
	CRC_storage_fileJpeg                                                  = 0x007efe0e
	CRC_storage_fileGif                                                   = 0xcae1aadf
	CRC_storage_filePng                                                   = 0x0a4f63c0
	CRC_storage_filePdf                                                   = 0xae1e508d
	CRC_storage_fileMp3                                                   = 0x528a0677
	CRC_storage_fileMov                                                   = 0x4b09ebbc
	CRC_storage_fileMp4                                                   = 0xb3cea0e4
	CRC_storage_fileWebp                                                  = 0x1081464c
	CRC_userEmpty                                                         = 0xd3bc4b7a
	CRC_user                                                              = 0xeb602f25
	CRC_userProfilePhotoEmpty                                             = 0x4f11bae1
	CRC_userProfilePhoto                                                  = 0x82d1f706
	CRC_userStatusEmpty                                                   = 0x09d05049
	CRC_userStatusOnline                                                  = 0xedb93949
	CRC_userStatusOffline                                                 = 0x008c703f
	CRC_userStatusRecently                                                = 0xe26f42f1
	CRC_userStatusLastWeek                                                = 0x07bf09fc
	CRC_userStatusLastMonth                                               = 0x77ebc742
	CRC_chatEmpty                                                         = 0x29562865
	CRC_chat                                                              = 0x41cbf256
	CRC_chatForbidden                                                     = 0x6592a1a7
	CRC_channel                                                           = 0x1981ea7e
	CRC_channelForbidden                                                  = 0x17d493d5
	CRC_chatFull                                                          = 0xc9d31138
	CRC_channelFull                                                       = 0x723027bd
	CRC_chatParticipant                                                   = 0xc02d4007
	CRC_chatParticipantCreator                                            = 0xe46bcee4
	CRC_chatParticipantAdmin                                              = 0xa0933f5b
	CRC_chatParticipantsForbidden                                         = 0x8763d3e1
	CRC_chatParticipants                                                  = 0x3cbc93f8
	CRC_chatPhotoEmpty                                                    = 0x37c1011c
	CRC_chatPhoto                                                         = 0x1c6e1c11
	CRC_messageEmpty                                                      = 0x90a6ca84
	CRC_message                                                           = 0x38116ee0
	CRC_messageService                                                    = 0x2b085862
	CRC_messageMediaEmpty                                                 = 0x3ded6320
	CRC_messageMediaPhoto                                                 = 0x695150d7
	CRC_messageMediaGeo                                                   = 0x56e0d474
	CRC_messageMediaContact                                               = 0x70322949
	CRC_messageMediaUnsupported                                           = 0x9f84f49e
	CRC_messageMediaDocument                                              = 0x4cf4d72d
	CRC_messageMediaWebPage                                               = 0xddf10c3b
	CRC_messageMediaVenue                                                 = 0x2ec0533f
	CRC_messageMediaGame                                                  = 0xfdb19008
	CRC_messageMediaInvoice                                               = 0xf6a548d3
	CRC_messageMediaGeoLive                                               = 0xb940c666
	CRC_messageMediaPoll                                                  = 0x4bd6e798
	CRC_messageMediaDice                                                  = 0x3f7ee58b
	CRC_messageMediaStory                                                 = 0x68cb6283
	CRC_messageMediaGiveaway                                              = 0x58260664
	CRC_messageActionEmpty                                                = 0xb6aef7b0
	CRC_messageActionChatCreate                                           = 0xbd47cbad
	CRC_messageActionChatEditTitle                                        = 0xb5a1ce5a
	CRC_messageActionChatEditPhoto                                        = 0x7fcb13a8
	CRC_messageActionChatDeletePhoto                                      = 0x95e3fbef
	CRC_messageActionChatAddUser                                          = 0x15cefd00
	CRC_messageActionChatDeleteUser                                       = 0xa43f30cc
	CRC_messageActionChatJoinedByLink                                     = 0x031224c3
	CRC_messageActionChannelCreate                                        = 0x95d2ac92
	CRC_messageActionChatMigrateTo                                        = 0xe1037f92
	CRC_messageActionChannelMigrateFrom                                   = 0xea3948e9
	CRC_messageActionPinMessage                                           = 0x94bd38ed
	CRC_messageActionHistoryClear                                         = 0x9fbab604
	CRC_messageActionGameScore                                            = 0x92a72876
	CRC_messageActionPaymentSentMe                                        = 0x8f31b327
	CRC_messageActionPaymentSent                                          = 0x96163f56
	CRC_messageActionPhoneCall                                            = 0x80e11a7f
	CRC_messageActionScreenshotTaken                                      = 0x4792929b
	CRC_messageActionCustomAction                                         = 0xfae69f56
	CRC_messageActionBotAllowed                                           = 0xc516d679
	CRC_messageActionSecureValuesSentMe                                   = 0x1b287353
	CRC_messageActionSecureValuesSent                                     = 0xd95c6154
	CRC_messageActionContactSignUp                                        = 0xf3f25f76
	CRC_messageActionGeoProximityReached                                  = 0x98e0d697
	CRC_messageActionGroupCall                                            = 0x7a0d7f42
	CRC_messageActionInviteToGroupCall                                    = 0x502f92f7
	CRC_messageActionSetMessagesTTL                                       = 0x3c134d7b
	CRC_messageActionGroupCallScheduled                                   = 0xb3a07661
	CRC_messageActionSetChatTheme                                         = 0xaa786345
	CRC_messageActionChatJoinedByRequest                                  = 0xebbca3cb
	CRC_messageActionWebViewDataSentMe                                    = 0x47dd8079
	CRC_messageActionWebViewDataSent                                      = 0xb4c38cb5
	CRC_messageActionGiftPremium                                          = 0xc83d6aec
	CRC_messageActionTopicCreate                                          = 0x0d999256
	CRC_messageActionTopicEdit                                            = 0xc0944820
	CRC_messageActionSuggestProfilePhoto                                  = 0x57de635e
	CRC_messageActionRequestedPeer                                        = 0xfe77345d
	CRC_messageActionSetChatWallPaper                                     = 0xbc44a927
	CRC_messageActionSetSameChatWallPaper                                 = 0xc0787d6d
	CRC_messageActionGiftCode                                             = 0xd2cfdb0e
	CRC_messageActionGiveawayLaunch                                       = 0x332ba9ed
	CRC_dialog                                                            = 0xd58a08c6
	CRC_dialogFolder                                                      = 0x71bd134c
	CRC_photoEmpty                                                        = 0x2331b22d
	CRC_photo                                                             = 0xfb197a65
	CRC_photoSizeEmpty                                                    = 0x0e17e23c
	CRC_photoSize                                                         = 0x75c78e60
	CRC_photoCachedSize                                                   = 0x021e1ad6
	CRC_photoStrippedSize                                                 = 0xe0b0bc2e
	CRC_photoSizeProgressive                                              = 0xfa3efb95
	CRC_photoPathSize                                                     = 0xd8214d41
	CRC_geoPointEmpty                                                     = 0x1117dd5f
	CRC_geoPoint                                                          = 0xb2a2f663
	CRC_auth_sentCode                                                     = 0x5e002502
	CRC_auth_sentCodeSuccess                                              = 0x2390fe44
	CRC_auth_authorization                                                = 0x2ea2c0d4
	CRC_auth_authorizationSignUpRequired                                  = 0x44747e9a
	CRC_auth_exportedAuthorization                                        = 0xb434e2b8
	CRC_inputNotifyPeer                                                   = 0xb8bc5b0c
	CRC_inputNotifyUsers                                                  = 0x193b4417
	CRC_inputNotifyChats                                                  = 0x4a95e84e
	CRC_inputNotifyBroadcasts                                             = 0xb1db7c7e
	CRC_inputNotifyForumTopic                                             = 0x5c467992
	CRC_inputPeerNotifySettings                                           = 0xcacb6ae2
	CRC_peerNotifySettings                                                = 0x99622c0c
	CRC_peerSettings                                                      = 0xa518110d
	CRC_wallPaper                                                         = 0xa437c3ed
	CRC_wallPaperNoFile                                                   = 0xe0804116
	CRC_inputReportReasonSpam                                             = 0x58dbcab8
	CRC_inputReportReasonViolence                                         = 0x1e22c78d
	CRC_inputReportReasonPornography                                      = 0x2e59d922
	CRC_inputReportReasonChildAbuse                                       = 0xadf44ee3
	CRC_inputReportReasonOther                                            = 0xc1e4a2b1
	CRC_inputReportReasonCopyright                                        = 0x9b89f93a
	CRC_inputReportReasonGeoIrrelevant                                    = 0xdbd4feed
	CRC_inputReportReasonFake                                             = 0xf5ddd6e7
	CRC_inputReportReasonIllegalDrugs                                     = 0x0a8eb2be
	CRC_inputReportReasonPersonalDetails                                  = 0x9ec7863d
	CRC_userFull                                                          = 0xb9b12c6c
	CRC_contact                                                           = 0x145ade0b
	CRC_importedContact                                                   = 0xc13e3c50
	CRC_contactStatus                                                     = 0x16d9703b
	CRC_contacts_contactsNotModified                                      = 0xb74ba9d2
	CRC_contacts_contacts                                                 = 0xeae87e42
	CRC_contacts_importedContacts                                         = 0x77d01c3b
	CRC_contacts_blocked                                                  = 0x0ade1591
	CRC_contacts_blockedSlice                                             = 0xe1664194
	CRC_messages_dialogs                                                  = 0x15ba6c40
	CRC_messages_dialogsSlice                                             = 0x71e094f3
	CRC_messages_dialogsNotModified                                       = 0xf0e3e596
	CRC_messages_messages                                                 = 0x8c718e87
	CRC_messages_messagesSlice                                            = 0x3a54685e
	CRC_messages_channelMessages                                          = 0xc776ba4e
	CRC_messages_messagesNotModified                                      = 0x74535f21
	CRC_messages_chats                                                    = 0x64ff9fd5
	CRC_messages_chatsSlice                                               = 0x9cd81144
	CRC_messages_chatFull                                                 = 0xe5d7d19c
	CRC_messages_affectedHistory                                          = 0xb45c69d1
	CRC_inputMessagesFilterEmpty                                          = 0x57e2f66c
	CRC_inputMessagesFilterPhotos                                         = 0x9609a51c
	CRC_inputMessagesFilterVideo                                          = 0x9fc00e65
	CRC_inputMessagesFilterPhotoVideo                                     = 0x56e9f0e4
	CRC_inputMessagesFilterDocument                                       = 0x9eddf188
	CRC_inputMessagesFilterUrl                                            = 0x7ef0dd87
	CRC_inputMessagesFilterGif                                            = 0xffc86587
	CRC_inputMessagesFilterVoice                                          = 0x50f5c392
	CRC_inputMessagesFilterMusic                                          = 0x3751b49e
	CRC_inputMessagesFilterChatPhotos                                     = 0x3a20ecb8
	CRC_inputMessagesFilterPhoneCalls                                     = 0x80c99768
	CRC_inputMessagesFilterRoundVoice                                     = 0x7a7c17a4
	CRC_inputMessagesFilterRoundVideo                                     = 0xb549da53
	CRC_inputMessagesFilterMyMentions                                     = 0xc1f8e69a
	CRC_inputMessagesFilterGeo                                            = 0xe7026d0d
	CRC_inputMessagesFilterContacts                                       = 0xe062db83
	CRC_inputMessagesFilterPinned                                         = 0x1bb00451
	CRC_updateNewMessage                                                  = 0x1f2b0afd
	CRC_updateMessageID                                                   = 0x4e90bfd6
	CRC_updateDeleteMessages                                              = 0xa20db0e5
	CRC_updateUserTyping                                                  = 0xc01e857f
	CRC_updateChatUserTyping                                              = 0x83487af0
	CRC_updateChatParticipants                                            = 0x07761198
	CRC_updateUserStatus                                                  = 0xe5bdf8de
	CRC_updateUserName                                                    = 0xa7848924
	CRC_updateNewAuthorization                                            = 0x8951abef
	CRC_updateNewEncryptedMessage                                         = 0x12bcbd9a
	CRC_updateEncryptedChatTyping                                         = 0x1710f156
	CRC_updateEncryption                                                  = 0xb4a2e88d
	CRC_updateEncryptedMessagesRead                                       = 0x38fe25b7
	CRC_updateChatParticipantAdd                                          = 0x3dda5451
	CRC_updateChatParticipantDelete                                       = 0xe32f3d77
	CRC_updateDcOptions                                                   = 0x8e5e9873
	CRC_updateNotifySettings                                              = 0xbec268ef
	CRC_updateServiceNotification                                         = 0xebe46819
	CRC_updatePrivacy                                                     = 0xee3b272a
	CRC_updateUserPhone                                                   = 0x05492a13
	CRC_updateReadHistoryInbox                                            = 0x9c974fdf
	CRC_updateReadHistoryOutbox                                           = 0x2f2f21bf
	CRC_updateWebPage                                                     = 0x7f891213
	CRC_updateReadMessagesContents                                        = 0xf8227181
	CRC_updateChannelTooLong                                              = 0x108d941f
	CRC_updateChannel                                                     = 0x635b4c09
	CRC_updateNewChannelMessage                                           = 0x62ba04d9
	CRC_updateReadChannelInbox                                            = 0x922e6e10
	CRC_updateDeleteChannelMessages                                       = 0xc32d5b12
	CRC_updateChannelMessageViews                                         = 0xf226ac08
	CRC_updateChatParticipantAdmin                                        = 0xd7ca61a2
	CRC_updateNewStickerSet                                               = 0x688a30aa
	CRC_updateStickerSetsOrder                                            = 0x0bb2d201
	CRC_updateStickerSets                                                 = 0x31c24808
	CRC_updateSavedGifs                                                   = 0x9375341e
	CRC_updateBotInlineQuery                                              = 0x496f379c
	CRC_updateBotInlineSend                                               = 0x12f12a07
	CRC_updateEditChannelMessage                                          = 0x1b3f4df7
	CRC_updateBotCallbackQuery                                            = 0xb9cfc48d
	CRC_updateEditMessage                                                 = 0xe40370a3
	CRC_updateInlineBotCallbackQuery                                      = 0x691e9052
	CRC_updateReadChannelOutbox                                           = 0xb75f99a9
	CRC_updateDraftMessage                                                = 0x1b49ec6d
	CRC_updateReadFeaturedStickers                                        = 0x571d2742
	CRC_updateRecentStickers                                              = 0x9a422c20
	CRC_updateConfig                                                      = 0xa229dd06
	CRC_updatePtsChanged                                                  = 0x3354678f
	CRC_updateChannelWebPage                                              = 0x2f2ba99f
	CRC_updateDialogPinned                                                = 0x6e6fe51c
	CRC_updatePinnedDialogs                                               = 0xfa0f3ca2
	CRC_updateBotWebhookJSON                                              = 0x8317c0c3
	CRC_updateBotWebhookJSONQuery                                         = 0x9b9240a6
	CRC_updateBotShippingQuery                                            = 0xb5aefd7d
	CRC_updateBotPrecheckoutQuery                                         = 0x8caa9a96
	CRC_updatePhoneCall                                                   = 0xab0f6b1e
	CRC_updateLangPackTooLong                                             = 0x46560264
	CRC_updateLangPack                                                    = 0x56022f4d
	CRC_updateFavedStickers                                               = 0xe511996d
	CRC_updateChannelReadMessagesContents                                 = 0xea29055d
	CRC_updateContactsReset                                               = 0x7084a7be
	CRC_updateChannelAvailableMessages                                    = 0xb23fc698
	CRC_updateDialogUnreadMark                                            = 0xe16459c3
	CRC_updateMessagePoll                                                 = 0xaca1657b
	CRC_updateChatDefaultBannedRights                                     = 0x54c01850
	CRC_updateFolderPeers                                                 = 0x19360dc0
	CRC_updatePeerSettings                                                = 0x6a7e7366
	CRC_updatePeerLocated                                                 = 0xb4afcfb0
	CRC_updateNewScheduledMessage                                         = 0x39a51dfb
	CRC_updateDeleteScheduledMessages                                     = 0x90866cee
	CRC_updateTheme                                                       = 0x8216fba3
	CRC_updateGeoLiveViewed                                               = 0x871fb939
	CRC_updateLoginToken                                                  = 0x564fe691
	CRC_updateMessagePollVote                                             = 0x24f40e77
	CRC_updateDialogFilter                                                = 0x26ffde7d
	CRC_updateDialogFilterOrder                                           = 0xa5d72105
	CRC_updateDialogFilters                                               = 0x3504914f
	CRC_updatePhoneCallSignalingData                                      = 0x2661bf09
	CRC_updateChannelMessageForwards                                      = 0xd29a27f4
	CRC_updateReadChannelDiscussionInbox                                  = 0xd6b19546
	CRC_updateReadChannelDiscussionOutbox                                 = 0x695c9e7c
	CRC_updatePeerBlocked                                                 = 0xebe07752
	CRC_updateChannelUserTyping                                           = 0x8c88c923
	CRC_updatePinnedMessages                                              = 0xed85eab5
	CRC_updatePinnedChannelMessages                                       = 0x5bb98608
	CRC_updateChat                                                        = 0xf89a6a4e
	CRC_updateGroupCallParticipants                                       = 0xf2ebdb4e
	CRC_updateGroupCall                                                   = 0x14b24500
	CRC_updatePeerHistoryTTL                                              = 0xbb9bb9a5
	CRC_updateChatParticipant                                             = 0xd087663a
	CRC_updateChannelParticipant                                          = 0x985d3abb
	CRC_updateBotStopped                                                  = 0xc4870a49
	CRC_updateGroupCallConnection                                         = 0x0b783982
	CRC_updateBotCommands                                                 = 0x4d712f2e
	CRC_updatePendingJoinRequests                                         = 0x7063c3db
	CRC_updateBotChatInviteRequester                                      = 0x11dfa986
	CRC_updateMessageReactions                                            = 0x5e1b3cb8
	CRC_updateAttachMenuBots                                              = 0x17b7a20b
	CRC_updateWebViewResultSent                                           = 0x1592b79d
	CRC_updateBotMenuButton                                               = 0x14b85813
	CRC_updateSavedRingtones                                              = 0x74d8be99
	CRC_updateTranscribedAudio                                            = 0x0084cd5a
	CRC_updateReadFeaturedEmojiStickers                                   = 0xfb4c496c
	CRC_updateUserEmojiStatus                                             = 0x28373599
	CRC_updateRecentEmojiStatuses                                         = 0x30f443db
	CRC_updateRecentReactions                                             = 0x6f7863f4
	CRC_updateMoveStickerSetToTop                                         = 0x86fccf85
	CRC_updateMessageExtendedMedia                                        = 0x5a73a98c
	CRC_updateChannelPinnedTopic                                          = 0x192efbe3
	CRC_updateChannelPinnedTopics                                         = 0xfe198602
	CRC_updateUser                                                        = 0x20529438
	CRC_updateAutoSaveSettings                                            = 0xec05b097
	CRC_updateGroupInvitePrivacyForbidden                                 = 0xccf08ad6
	CRC_updateStory                                                       = 0x75b3b798
	CRC_updateReadStories                                                 = 0xf74e932b
	CRC_updateStoryID                                                     = 0x1bf335b9
	CRC_updateStoriesStealthMode                                          = 0x2c084dc1
	CRC_updateSentStoryReaction                                           = 0x7d627683
	CRC_updates_state                                                     = 0xa56c2a3e
	CRC_updates_differenceEmpty                                           = 0x5d75a138
	CRC_updates_difference                                                = 0x00f49ca0
	CRC_updates_differenceSlice                                           = 0xa8fb1981
	CRC_updates_differenceTooLong                                         = 0x4afe8f6d
	CRC_updatesTooLong                                                    = 0xe317af7e
	CRC_updateShortMessage                                                = 0x313bc7f8
	CRC_updateShortChatMessage                                            = 0x4d6deea5
	CRC_updateShort                                                       = 0x78d4dec1
	CRC_updatesCombined                                                   = 0x725b04c3
	CRC_updates                                                           = 0x74ae4240
	CRC_updateShortSentMessage                                            = 0x9015e101
	CRC_photos_photos                                                     = 0x8dca6aa5
	CRC_photos_photosSlice                                                = 0x15051f54
	CRC_photos_photo                                                      = 0x20212ca8
	CRC_upload_file                                                       = 0x096a18d5
	CRC_upload_fileCdnRedirect                                            = 0xf18cda44
	CRC_dcOption                                                          = 0x18b7a10d
	CRC_config                                                            = 0xcc1a241e
	CRC_nearestDc                                                         = 0x8e1a1775
	CRC_help_appUpdate                                                    = 0xccbbce30
	CRC_help_noAppUpdate                                                  = 0xc45a6536
	CRC_help_inviteText                                                   = 0x18cb9f78
	CRC_encryptedChatEmpty                                                = 0xab7ec0a0
	CRC_encryptedChatWaiting                                              = 0x66b25953
	CRC_encryptedChatRequested                                            = 0x48f1d94c
	CRC_encryptedChat                                                     = 0x61f0d4c7
	CRC_encryptedChatDiscarded                                            = 0x1e1c7c45
	CRC_inputEncryptedChat                                                = 0xf141b5e1
	CRC_encryptedFileEmpty                                                = 0xc21f497e
	CRC_encryptedFile                                                     = 0xa8008cd8
	CRC_inputEncryptedFileEmpty                                           = 0x1837c364
	CRC_inputEncryptedFileUploaded                                        = 0x64bd0306
	CRC_inputEncryptedFile                                                = 0x5a17b5e5
	CRC_inputEncryptedFileBigUploaded                                     = 0x2dc173c8
	CRC_encryptedMessage                                                  = 0xed18c118
	CRC_encryptedMessageService                                           = 0x23734b06
	CRC_messages_dhConfigNotModified                                      = 0xc0e24635
	CRC_messages_dhConfig                                                 = 0x2c221edd
	CRC_messages_sentEncryptedMessage                                     = 0x560f8935
	CRC_messages_sentEncryptedFile                                        = 0x9493ff32
	CRC_inputDocumentEmpty                                                = 0x72f0eaae
	CRC_inputDocument                                                     = 0x1abfb575
	CRC_documentEmpty                                                     = 0x36f8c871
	CRC_document                                                          = 0x8fd4c4d8
	CRC_help_support                                                      = 0x17c6b5f6
	CRC_notifyPeer                                                        = 0x9fd40bd8
	CRC_notifyUsers                                                       = 0xb4c83b4c
	CRC_notifyChats                                                       = 0xc007cec3
	CRC_notifyBroadcasts                                                  = 0xd612e8ef
	CRC_notifyForumTopic                                                  = 0x226e6308
	CRC_sendMessageTypingAction                                           = 0x16bf744e
	CRC_sendMessageCancelAction                                           = 0xfd5ec8f5
	CRC_sendMessageRecordVideoAction                                      = 0xa187d66f
	CRC_sendMessageUploadVideoAction                                      = 0xe9763aec
	CRC_sendMessageRecordAudioAction                                      = 0xd52f73f7
	CRC_sendMessageUploadAudioAction                                      = 0xf351d7ab
	CRC_sendMessageUploadPhotoAction                                      = 0xd1d34a26
	CRC_sendMessageUploadDocumentAction                                   = 0xaa0cd9e4
	CRC_sendMessageGeoLocationAction                                      = 0x176f8ba1
	CRC_sendMessageChooseContactAction                                    = 0x628cbc6f
	CRC_sendMessageGamePlayAction                                         = 0xdd6a8f48
	CRC_sendMessageRecordRoundAction                                      = 0x88f27fbc
	CRC_sendMessageUploadRoundAction                                      = 0x243e1c66
	CRC_speakingInGroupCallAction                                         = 0xd92c2285
	CRC_sendMessageHistoryImportAction                                    = 0xdbda9246
	CRC_sendMessageChooseStickerAction                                    = 0xb05ac6b1
	CRC_sendMessageEmojiInteraction                                       = 0x25972bcb
	CRC_sendMessageEmojiInteractionSeen                                   = 0xb665902e
	CRC_contacts_found                                                    = 0xb3134d9d
	CRC_inputPrivacyKeyStatusTimestamp                                    = 0x4f96cb18
	CRC_inputPrivacyKeyChatInvite                                         = 0xbdfb0426
	CRC_inputPrivacyKeyPhoneCall                                          = 0xfabadc5f
	CRC_inputPrivacyKeyPhoneP2P                                           = 0xdb9e70d2
	CRC_inputPrivacyKeyForwards                                           = 0xa4dd4c08
	CRC_inputPrivacyKeyProfilePhoto                                       = 0x5719bacc
	CRC_inputPrivacyKeyPhoneNumber                                        = 0x0352dafa
	CRC_inputPrivacyKeyAddedByPhone                                       = 0xd1219bdd
	CRC_inputPrivacyKeyVoiceMessages                                      = 0xaee69d68
	CRC_inputPrivacyKeyAbout                                              = 0x3823cc40
	CRC_privacyKeyStatusTimestamp                                         = 0xbc2eab30
	CRC_privacyKeyChatInvite                                              = 0x500e6dfa
	CRC_privacyKeyPhoneCall                                               = 0x3d662b7b
	CRC_privacyKeyPhoneP2P                                                = 0x39491cc8
	CRC_privacyKeyForwards                                                = 0x69ec56a3
	CRC_privacyKeyProfilePhoto                                            = 0x96151fed
	CRC_privacyKeyPhoneNumber                                             = 0xd19ae46d
	CRC_privacyKeyAddedByPhone                                            = 0x42ffd42b
	CRC_privacyKeyVoiceMessages                                           = 0x0697f414
	CRC_privacyKeyAbout                                                   = 0xa486b761
	CRC_inputPrivacyValueAllowContacts                                    = 0x0d09e07b
	CRC_inputPrivacyValueAllowAll                                         = 0x184b35ce
	CRC_inputPrivacyValueAllowUsers                                       = 0x131cc67f
	CRC_inputPrivacyValueDisallowContacts                                 = 0x0ba52007
	CRC_inputPrivacyValueDisallowAll                                      = 0xd66b66c9
	CRC_inputPrivacyValueDisallowUsers                                    = 0x90110467
	CRC_inputPrivacyValueAllowChatParticipants                            = 0x840649cf
	CRC_inputPrivacyValueDisallowChatParticipants                         = 0xe94f0f86
	CRC_inputPrivacyValueAllowCloseFriends                                = 0x2f453e49
	CRC_privacyValueAllowContacts                                         = 0xfffe1bac
	CRC_privacyValueAllowAll                                              = 0x65427b82
	CRC_privacyValueAllowUsers                                            = 0xb8905fb2
	CRC_privacyValueDisallowContacts                                      = 0xf888fa1a
	CRC_privacyValueDisallowAll                                           = 0x8b73e763
	CRC_privacyValueDisallowUsers                                         = 0xe4621141
	CRC_privacyValueAllowChatParticipants                                 = 0x6b134e8e
	CRC_privacyValueDisallowChatParticipants                              = 0x41c87565
	CRC_privacyValueAllowCloseFriends                                     = 0xf7e8d89b
	CRC_account_privacyRules                                              = 0x50a04e45
	CRC_accountDaysTTL                                                    = 0xb8d0afdf
	CRC_documentAttributeImageSize                                        = 0x6c37c15c
	CRC_documentAttributeAnimated                                         = 0x11b58939
	CRC_documentAttributeSticker                                          = 0x6319d612
	CRC_documentAttributeVideo                                            = 0xd38ff1c2
	CRC_documentAttributeAudio                                            = 0x9852f9c6
	CRC_documentAttributeFilename                                         = 0x15590068
	CRC_documentAttributeHasStickers                                      = 0x9801d2f7
	CRC_documentAttributeCustomEmoji                                      = 0xfd149899
	CRC_messages_stickersNotModified                                      = 0xf1749a22
	CRC_messages_stickers                                                 = 0x30a6ec7e
	CRC_stickerPack                                                       = 0x12b299d4
	CRC_messages_allStickersNotModified                                   = 0xe86602c3
	CRC_messages_allStickers                                              = 0xcdbbcebb
	CRC_messages_affectedMessages                                         = 0x84d19185
	CRC_webPageEmpty                                                      = 0x211a1788
	CRC_webPagePending                                                    = 0xb0d13e47
	CRC_webPage                                                           = 0xe89c45b2
	CRC_webPageNotModified                                                = 0x7311ca11
	CRC_authorization                                                     = 0xad01d61d
	CRC_account_authorizations                                            = 0x4bff8ea0
	CRC_account_password                                                  = 0x957b50fb
	CRC_account_passwordSettings                                          = 0x9a5c33e5
	CRC_account_passwordInputSettings                                     = 0xc23727c9
	CRC_auth_passwordRecovery                                             = 0x137948a5
	CRC_receivedNotifyMessage                                             = 0xa384b779
	CRC_chatInviteExported                                                = 0x0ab4a819
	CRC_chatInvitePublicJoinRequests                                      = 0xed107ab7
	CRC_chatInviteAlready                                                 = 0x5a686d7c
	CRC_chatInvite                                                        = 0xcde0ec40
	CRC_chatInvitePeek                                                    = 0x61695cb0
	CRC_inputStickerSetEmpty                                              = 0xffb62b95
	CRC_inputStickerSetID                                                 = 0x9de7a269
	CRC_inputStickerSetShortName                                          = 0x861cc8a0
	CRC_inputStickerSetAnimatedEmoji                                      = 0x028703c8
	CRC_inputStickerSetDice                                               = 0xe67f520e
	CRC_inputStickerSetAnimatedEmojiAnimations                            = 0x0cde3739
	CRC_inputStickerSetPremiumGifts                                       = 0xc88b3b02
	CRC_inputStickerSetEmojiGenericAnimations                             = 0x04c4d4ce
	CRC_inputStickerSetEmojiDefaultStatuses                               = 0x29d0f5ee
	CRC_inputStickerSetEmojiDefaultTopicIcons                             = 0x44c1f8e9
	CRC_stickerSet                                                        = 0x2dd14edc
	CRC_messages_stickerSet                                               = 0x6e153f16
	CRC_messages_stickerSetNotModified                                    = 0xd3f924eb
	CRC_botCommand                                                        = 0xc27ac8c7
	CRC_botInfo                                                           = 0x8f300b57
	CRC_keyboardButton                                                    = 0xa2fa4880
	CRC_keyboardButtonUrl                                                 = 0x258aff05
	CRC_keyboardButtonCallback                                            = 0x35bbdb6b
	CRC_keyboardButtonRequestPhone                                        = 0xb16a6c29
	CRC_keyboardButtonRequestGeoLocation                                  = 0xfc796b3f
	CRC_keyboardButtonSwitchInline                                        = 0x93b9fbb5
	CRC_keyboardButtonGame                                                = 0x50f41ccf
	CRC_keyboardButtonBuy                                                 = 0xafd93fbb
	CRC_keyboardButtonUrlAuth                                             = 0x10b78d29
	CRC_inputKeyboardButtonUrlAuth                                        = 0xd02e7fd4
	CRC_keyboardButtonRequestPoll                                         = 0xbbc7515d
	CRC_inputKeyboardButtonUserProfile                                    = 0xe988037b
	CRC_keyboardButtonUserProfile                                         = 0x308660c1
	CRC_keyboardButtonWebView                                             = 0x13767230
	CRC_keyboardButtonSimpleWebView                                       = 0xa0c0505c
	CRC_keyboardButtonRequestPeer                                         = 0x0d0b468c
	CRC_keyboardButtonRow                                                 = 0x77608b83
	CRC_replyKeyboardHide                                                 = 0xa03e5b85
	CRC_replyKeyboardForceReply                                           = 0x86b40b08
	CRC_replyKeyboardMarkup                                               = 0x85dd99d1
	CRC_replyInlineMarkup                                                 = 0x48a30254
	CRC_messageEntityUnknown                                              = 0xbb92ba95
	CRC_messageEntityMention                                              = 0xfa04579d
	CRC_messageEntityHashtag                                              = 0x6f635b0d
	CRC_messageEntityBotCommand                                           = 0x6cef8ac7
	CRC_messageEntityUrl                                                  = 0x6ed02538
	CRC_messageEntityEmail                                                = 0x64e475c2
	CRC_messageEntityBold                                                 = 0xbd610bc9
	CRC_messageEntityItalic                                               = 0x826f8b60
	CRC_messageEntityCode                                                 = 0x28a20571
	CRC_messageEntityPre                                                  = 0x73924be0
	CRC_messageEntityTextUrl                                              = 0x76a6d327
	CRC_messageEntityMentionName                                          = 0xdc7b1140
	CRC_inputMessageEntityMentionName                                     = 0x208e68c9
	CRC_messageEntityPhone                                                = 0x9b69e34b
	CRC_messageEntityCashtag                                              = 0x4c4e743f
	CRC_messageEntityUnderline                                            = 0x9c4e7e8b
	CRC_messageEntityStrike                                               = 0xbf0693d4
	CRC_messageEntityBankCard                                             = 0x761e6af4
	CRC_messageEntitySpoiler                                              = 0x32ca960f
	CRC_messageEntityCustomEmoji                                          = 0xc8cf05f8
	CRC_messageEntityBlockquote                                           = 0x020df5d0
	CRC_inputChannelEmpty                                                 = 0xee8c1e86
	CRC_inputChannel                                                      = 0xf35aec28
	CRC_inputChannelFromMessage                                           = 0x5b934f9d
	CRC_contacts_resolvedPeer                                             = 0x7f077ad9
	CRC_messageRange                                                      = 0x0ae30253
	CRC_updates_channelDifferenceEmpty                                    = 0x3e11affb
	CRC_updates_channelDifferenceTooLong                                  = 0xa4bcc6fe
	CRC_updates_channelDifference                                         = 0x2064674e
	CRC_channelMessagesFilterEmpty                                        = 0x94d42ee7
	CRC_channelMessagesFilter                                             = 0xcd77d957
	CRC_channelParticipant                                                = 0xc00c07c0
	CRC_channelParticipantSelf                                            = 0x35a8bfa7
	CRC_channelParticipantCreator                                         = 0x2fe601d3
	CRC_channelParticipantAdmin                                           = 0x34c3bb53
	CRC_channelParticipantBanned                                          = 0x6df8014e
	CRC_channelParticipantLeft                                            = 0x1b03f006
	CRC_channelParticipantsRecent                                         = 0xde3f3c79
	CRC_channelParticipantsAdmins                                         = 0xb4608969
	CRC_channelParticipantsKicked                                         = 0xa3b54985
	CRC_channelParticipantsBots                                           = 0xb0d1865b
	CRC_channelParticipantsBanned                                         = 0x1427a5e1
	CRC_channelParticipantsSearch                                         = 0x0656ac4b
	CRC_channelParticipantsContacts                                       = 0xbb6ae88d
	CRC_channelParticipantsMentions                                       = 0xe04b5ceb
	CRC_channels_channelParticipants                                      = 0x9ab0feaf
	CRC_channels_channelParticipantsNotModified                           = 0xf0173fe9
	CRC_channels_channelParticipant                                       = 0xdfb80317
	CRC_help_termsOfService                                               = 0x780a0310
	CRC_messages_savedGifsNotModified                                     = 0xe8025ca2
	CRC_messages_savedGifs                                                = 0x84a02a0d
	CRC_inputBotInlineMessageMediaAuto                                    = 0x3380c786
	CRC_inputBotInlineMessageText                                         = 0x3dcd7a87
	CRC_inputBotInlineMessageMediaGeo                                     = 0x96929a85
	CRC_inputBotInlineMessageMediaVenue                                   = 0x417bbf11
	CRC_inputBotInlineMessageMediaContact                                 = 0xa6edbffd
	CRC_inputBotInlineMessageGame                                         = 0x4b425864
	CRC_inputBotInlineMessageMediaInvoice                                 = 0xd7e78225
	CRC_inputBotInlineMessageMediaWebPage                                 = 0xbddcc510
	CRC_inputBotInlineResult                                              = 0x88bf9319
	CRC_inputBotInlineResultPhoto                                         = 0xa8d864a7
	CRC_inputBotInlineResultDocument                                      = 0xfff8fdc4
	CRC_inputBotInlineResultGame                                          = 0x4fa417f2
	CRC_botInlineMessageMediaAuto                                         = 0x764cf810
	CRC_botInlineMessageText                                              = 0x8c7f65e2
	CRC_botInlineMessageMediaGeo                                          = 0x051846fd
	CRC_botInlineMessageMediaVenue                                        = 0x8a86659c
	CRC_botInlineMessageMediaContact                                      = 0x18d1cdc2
	CRC_botInlineMessageMediaInvoice                                      = 0x354a9b09
	CRC_botInlineMessageMediaWebPage                                      = 0x809ad9a6
	CRC_botInlineResult                                                   = 0x11965f3a
	CRC_botInlineMediaResult                                              = 0x17db940b
	CRC_messages_botResults                                               = 0xe021f2f6
	CRC_exportedMessageLink                                               = 0x5dab1af4
	CRC_messageFwdHeader                                                  = 0x5f777dce
	CRC_auth_codeTypeSms                                                  = 0x72a3158c
	CRC_auth_codeTypeCall                                                 = 0x741cd3e3
	CRC_auth_codeTypeFlashCall                                            = 0x226ccefb
	CRC_auth_codeTypeMissedCall                                           = 0xd61ad6ee
	CRC_auth_codeTypeFragmentSms                                          = 0x06ed998c
	CRC_auth_sentCodeTypeApp                                              = 0x3dbb5986
	CRC_auth_sentCodeTypeSms                                              = 0xc000bba2
	CRC_auth_sentCodeTypeCall                                             = 0x5353e5a7
	CRC_auth_sentCodeTypeFlashCall                                        = 0xab03c6d9
	CRC_auth_sentCodeTypeMissedCall                                       = 0x82006484
	CRC_auth_sentCodeTypeEmailCode                                        = 0xf450f59b
	CRC_auth_sentCodeTypeSetUpEmailRequired                               = 0xa5491dea
	CRC_auth_sentCodeTypeFragmentSms                                      = 0xd9565c39
	CRC_auth_sentCodeTypeFirebaseSms                                      = 0xe57b1432
	CRC_messages_botCallbackAnswer                                        = 0x36585ea4
	CRC_messages_messageEditData                                          = 0x26b5dde6
	CRC_inputBotInlineMessageID                                           = 0x890c3d89
	CRC_inputBotInlineMessageID64                                         = 0xb6d915d7
	CRC_inlineBotSwitchPM                                                 = 0x3c20629f
	CRC_messages_peerDialogs                                              = 0x3371c354
	CRC_topPeer                                                           = 0xedcdc05b
	CRC_topPeerCategoryBotsPM                                             = 0xab661b5b
	CRC_topPeerCategoryBotsInline                                         = 0x148677e2
	CRC_topPeerCategoryCorrespondents                                     = 0x0637b7ed
	CRC_topPeerCategoryGroups                                             = 0xbd17a14a
	CRC_topPeerCategoryChannels                                           = 0x161d9628
	CRC_topPeerCategoryPhoneCalls                                         = 0x1e76a78c
	CRC_topPeerCategoryForwardUsers                                       = 0xa8406ca9
	CRC_topPeerCategoryForwardChats                                       = 0xfbeec0f0
	CRC_topPeerCategoryPeers                                              = 0xfb834291
	CRC_contacts_topPeersNotModified                                      = 0xde266ef5
	CRC_contacts_topPeers                                                 = 0x70b772a8
	CRC_contacts_topPeersDisabled                                         = 0xb52c939d
	CRC_draftMessageEmpty                                                 = 0x1b0c841a
	CRC_draftMessage                                                      = 0x3fccf7ef
	CRC_messages_featuredStickersNotModified                              = 0xc6dc0c66
	CRC_messages_featuredStickers                                         = 0xbe382906
	CRC_messages_recentStickersNotModified                                = 0x0b17f890
	CRC_messages_recentStickers                                           = 0x88d37c56
	CRC_messages_archivedStickers                                         = 0x4fcba9c8
	CRC_messages_stickerSetInstallResultSuccess                           = 0x38641628
	CRC_messages_stickerSetInstallResultArchive                           = 0x35e410a8
	CRC_stickerSetCovered                                                 = 0x6410a5d2
	CRC_stickerSetMultiCovered                                            = 0x3407e51b
	CRC_stickerSetFullCovered                                             = 0x40d13c0e
	CRC_stickerSetNoCovered                                               = 0x77b15d1c
	CRC_maskCoords                                                        = 0xaed6dbb2
	CRC_inputStickeredMediaPhoto                                          = 0x4a992157
	CRC_inputStickeredMediaDocument                                       = 0x0438865b
	CRC_game                                                              = 0xbdf9653b
	CRC_inputGameID                                                       = 0x032c3e77
	CRC_inputGameShortName                                                = 0xc331e80a
	CRC_highScore                                                         = 0x73a379eb
	CRC_messages_highScores                                               = 0x9a3bfd99
	CRC_textEmpty                                                         = 0xdc3d824f
	CRC_textPlain                                                         = 0x744694e0
	CRC_textBold                                                          = 0x6724abc4
	CRC_textItalic                                                        = 0xd912a59c
	CRC_textUnderline                                                     = 0xc12622c4
	CRC_textStrike                                                        = 0x9bf8bb95
	CRC_textFixed                                                         = 0x6c3f19b9
	CRC_textUrl                                                           = 0x3c2884c1
	CRC_textEmail                                                         = 0xde5a0dd6
	CRC_textConcat                                                        = 0x7e6260d7
	CRC_textSubscript                                                     = 0xed6a8504
	CRC_textSuperscript                                                   = 0xc7fb5e01
	CRC_textMarked                                                        = 0x034b8621
	CRC_textPhone                                                         = 0x1ccb966a
	CRC_textImage                                                         = 0x081ccf4f
	CRC_textAnchor                                                        = 0x35553762
	CRC_pageBlockUnsupported                                              = 0x13567e8a
	CRC_pageBlockTitle                                                    = 0x70abc3fd
	CRC_pageBlockSubtitle                                                 = 0x8ffa9a1f
	CRC_pageBlockAuthorDate                                               = 0xbaafe5e0
	CRC_pageBlockHeader                                                   = 0xbfd064ec
	CRC_pageBlockSubheader                                                = 0xf12bb6e1
	CRC_pageBlockParagraph                                                = 0x467a0766
	CRC_pageBlockPreformatted                                             = 0xc070d93e
	CRC_pageBlockFooter                                                   = 0x48870999
	CRC_pageBlockDivider                                                  = 0xdb20b188
	CRC_pageBlockAnchor                                                   = 0xce0d37b0
	CRC_pageBlockList                                                     = 0xe4e88011
	CRC_pageBlockBlockquote                                               = 0x263d7c26
	CRC_pageBlockPullquote                                                = 0x4f4456d3
	CRC_pageBlockPhoto                                                    = 0x1759c560
	CRC_pageBlockVideo                                                    = 0x7c8fe7b6
	CRC_pageBlockCover                                                    = 0x39f23300
	CRC_pageBlockEmbed                                                    = 0xa8718dc5
	CRC_pageBlockEmbedPost                                                = 0xf259a80b
	CRC_pageBlockCollage                                                  = 0x65a0fa4d
	CRC_pageBlockSlideshow                                                = 0x031f9590
	CRC_pageBlockChannel                                                  = 0xef1751b5
	CRC_pageBlockAudio                                                    = 0x804361ea
	CRC_pageBlockKicker                                                   = 0x1e148390
	CRC_pageBlockTable                                                    = 0xbf4dea82
	CRC_pageBlockOrderedList                                              = 0x9a8ae1e1
	CRC_pageBlockDetails                                                  = 0x76768bed
	CRC_pageBlockRelatedArticles                                          = 0x16115a96
	CRC_pageBlockMap                                                      = 0xa44f3ef6
	CRC_phoneCallDiscardReasonMissed                                      = 0x85e42301
	CRC_phoneCallDiscardReasonDisconnect                                  = 0xe095c1a0
	CRC_phoneCallDiscardReasonHangup                                      = 0x57adc690
	CRC_phoneCallDiscardReasonBusy                                        = 0xfaf7e8c9
	CRC_dataJSON                                                          = 0x7d748d04
	CRC_labeledPrice                                                      = 0xcb296bf8
	CRC_invoice                                                           = 0x5db95a15
	CRC_paymentCharge                                                     = 0xea02c27e
	CRC_postAddress                                                       = 0x1e8caaeb
	CRC_paymentRequestedInfo                                              = 0x909c3f94
	CRC_paymentSavedCredentialsCard                                       = 0xcdc27a1f
	CRC_webDocument                                                       = 0x1c570ed1
	CRC_webDocumentNoProxy                                                = 0xf9c8bcc6
	CRC_inputWebDocument                                                  = 0x9bed434d
	CRC_inputWebFileLocation                                              = 0xc239d686
	CRC_inputWebFileGeoPointLocation                                      = 0x9f2221c9
	CRC_inputWebFileAudioAlbumThumbLocation                               = 0xf46fe924
	CRC_upload_webFile                                                    = 0x21e753bc
	CRC_payments_paymentForm                                              = 0xa0058751
	CRC_payments_validatedRequestedInfo                                   = 0xd1451883
	CRC_payments_paymentResult                                            = 0x4e5f810d
	CRC_payments_paymentVerificationNeeded                                = 0xd8411139
	CRC_payments_paymentReceipt                                           = 0x70c4fe03
	CRC_payments_savedInfo                                                = 0xfb8fe43c
	CRC_inputPaymentCredentialsSaved                                      = 0xc10eb2cf
	CRC_inputPaymentCredentials                                           = 0x3417d728
	CRC_inputPaymentCredentialsApplePay                                   = 0x0aa1c39f
	CRC_inputPaymentCredentialsGooglePay                                  = 0x8ac32801
	CRC_account_tmpPassword                                               = 0xdb64fd34
	CRC_shippingOption                                                    = 0xb6213cdf
	CRC_inputStickerSetItem                                               = 0x32da9e9c
	CRC_inputPhoneCall                                                    = 0x1e36fded
	CRC_phoneCallEmpty                                                    = 0x5366c915
	CRC_phoneCallWaiting                                                  = 0xc5226f17
	CRC_phoneCallRequested                                                = 0x14b0ed0c
	CRC_phoneCallAccepted                                                 = 0x3660c311
	CRC_phoneCall                                                         = 0x967f7c67
	CRC_phoneCallDiscarded                                                = 0x50ca4de1
	CRC_phoneConnection                                                   = 0x9cc123c7
	CRC_phoneConnectionWebrtc                                             = 0x635fe375
	CRC_phoneCallProtocol                                                 = 0xfc878fc8
	CRC_phone_phoneCall                                                   = 0xec82e140
	CRC_upload_cdnFileReuploadNeeded                                      = 0xeea8e46e
	CRC_upload_cdnFile                                                    = 0xa99fca4f
	CRC_cdnPublicKey                                                      = 0xc982eaba
	CRC_cdnConfig                                                         = 0x5725e40a
	CRC_langPackString                                                    = 0xcad181f6
	CRC_langPackStringPluralized                                          = 0x6c47ac9f
	CRC_langPackStringDeleted                                             = 0x2979eeb2
	CRC_langPackDifference                                                = 0xf385c1f6
	CRC_langPackLanguage                                                  = 0xeeca5ce3
	CRC_channelAdminLogEventActionChangeTitle                             = 0xe6dfb825
	CRC_channelAdminLogEventActionChangeAbout                             = 0x55188a2e
	CRC_channelAdminLogEventActionChangeUsername                          = 0x6a4afc38
	CRC_channelAdminLogEventActionChangePhoto                             = 0x434bd2af
	CRC_channelAdminLogEventActionToggleInvites                           = 0x1b7907ae
	CRC_channelAdminLogEventActionToggleSignatures                        = 0x26ae0971
	CRC_channelAdminLogEventActionUpdatePinned                            = 0xe9e82c18
	CRC_channelAdminLogEventActionEditMessage                             = 0x709b2405
	CRC_channelAdminLogEventActionDeleteMessage                           = 0x42e047bb
	CRC_channelAdminLogEventActionParticipantJoin                         = 0x183040d3
	CRC_channelAdminLogEventActionParticipantLeave                        = 0xf89777f2
	CRC_channelAdminLogEventActionParticipantInvite                       = 0xe31c34d8
	CRC_channelAdminLogEventActionParticipantToggleBan                    = 0xe6d83d7e
	CRC_channelAdminLogEventActionParticipantToggleAdmin                  = 0xd5676710
	CRC_channelAdminLogEventActionChangeStickerSet                        = 0xb1c3caa7
	CRC_channelAdminLogEventActionTogglePreHistoryHidden                  = 0x5f5c95f1
	CRC_channelAdminLogEventActionDefaultBannedRights                     = 0x2df5fc0a
	CRC_channelAdminLogEventActionStopPoll                                = 0x8f079643
	CRC_channelAdminLogEventActionChangeLinkedChat                        = 0x050c7ac8
	CRC_channelAdminLogEventActionChangeLocation                          = 0x0e6b76ae
	CRC_channelAdminLogEventActionToggleSlowMode                          = 0x53909779
	CRC_channelAdminLogEventActionStartGroupCall                          = 0x23209745
	CRC_channelAdminLogEventActionDiscardGroupCall                        = 0xdb9f9140
	CRC_channelAdminLogEventActionParticipantMute                         = 0xf92424d2
	CRC_channelAdminLogEventActionParticipantUnmute                       = 0xe64429c0
	CRC_channelAdminLogEventActionToggleGroupCallSetting                  = 0x56d6a247
	CRC_channelAdminLogEventActionParticipantJoinByInvite                 = 0xfe9fc158
	CRC_channelAdminLogEventActionExportedInviteDelete                    = 0x5a50fca4
	CRC_channelAdminLogEventActionExportedInviteRevoke                    = 0x410a134e
	CRC_channelAdminLogEventActionExportedInviteEdit                      = 0xe90ebb59
	CRC_channelAdminLogEventActionParticipantVolume                       = 0x3e7f6847
	CRC_channelAdminLogEventActionChangeHistoryTTL                        = 0x6e941a38
	CRC_channelAdminLogEventActionParticipantJoinByRequest                = 0xafb6144a
	CRC_channelAdminLogEventActionToggleNoForwards                        = 0xcb2ac766
	CRC_channelAdminLogEventActionSendMessage                             = 0x278f2868
	CRC_channelAdminLogEventActionChangeAvailableReactions                = 0xbe4e0ef8
	CRC_channelAdminLogEventActionChangeUsernames                         = 0xf04fb3a9
	CRC_channelAdminLogEventActionToggleForum                             = 0x02cc6383
	CRC_channelAdminLogEventActionCreateTopic                             = 0x58707d28
	CRC_channelAdminLogEventActionEditTopic                               = 0xf06fe208
	CRC_channelAdminLogEventActionDeleteTopic                             = 0xae168909
	CRC_channelAdminLogEventActionPinTopic                                = 0x5d8d353b
	CRC_channelAdminLogEventActionToggleAntiSpam                          = 0x64f36dfc
	CRC_channelAdminLogEventActionChangeColor                             = 0x3c2b247b
	CRC_channelAdminLogEventActionChangeBackgroundEmoji                   = 0x445fc434
	CRC_channelAdminLogEvent                                              = 0x1fad68cd
	CRC_channels_adminLogResults                                          = 0xed8af74d
	CRC_channelAdminLogEventsFilter                                       = 0xea107ae4
	CRC_popularContact                                                    = 0x5ce14175
	CRC_messages_favedStickersNotModified                                 = 0x9e8fa6d3
	CRC_messages_favedStickers                                            = 0x2cb51097
	CRC_recentMeUrlUnknown                                                = 0x46e1d13d
	CRC_recentMeUrlUser                                                   = 0xb92c09e2
	CRC_recentMeUrlChat                                                   = 0xb2da71d2
	CRC_recentMeUrlChatInvite                                             = 0xeb49081d
	CRC_recentMeUrlStickerSet                                             = 0xbc0a57dc
	CRC_help_recentMeUrls                                                 = 0x0e0310d7
	CRC_inputSingleMedia                                                  = 0x1cc6e91f
	CRC_webAuthorization                                                  = 0xa6f8f452
	CRC_account_webAuthorizations                                         = 0xed56c9fc
	CRC_inputMessageID                                                    = 0xa676a322
	CRC_inputMessageReplyTo                                               = 0xbad88395
	CRC_inputMessagePinned                                                = 0x86872538
	CRC_inputMessageCallbackQuery                                         = 0xacfa1a7e
	CRC_inputDialogPeer                                                   = 0xfcaafeb7
	CRC_inputDialogPeerFolder                                             = 0x64600527
	CRC_dialogPeer                                                        = 0xe56dbf05
	CRC_dialogPeerFolder                                                  = 0x514519e2
	CRC_messages_foundStickerSetsNotModified                              = 0x0d54b65d
	CRC_messages_foundStickerSets                                         = 0x8af09dd2
	CRC_fileHash                                                          = 0xf39b035c
	CRC_inputClientProxy                                                  = 0x75588b3f
	CRC_help_termsOfServiceUpdateEmpty                                    = 0xe3309f7f
	CRC_help_termsOfServiceUpdate                                         = 0x28ecf961
	CRC_inputSecureFileUploaded                                           = 0x3334b0f0
	CRC_inputSecureFile                                                   = 0x5367e5be
	CRC_secureFileEmpty                                                   = 0x64199744
	CRC_secureFile                                                        = 0x7d09c27e
	CRC_secureData                                                        = 0x8aeabec3
	CRC_securePlainPhone                                                  = 0x7d6099dd
	CRC_securePlainEmail                                                  = 0x21ec5a5f
	CRC_secureValueTypePersonalDetails                                    = 0x9d2a81e3
	CRC_secureValueTypePassport                                           = 0x3dac6a00
	CRC_secureValueTypeDriverLicense                                      = 0x06e425c4
	CRC_secureValueTypeIdentityCard                                       = 0xa0d0744b
	CRC_secureValueTypeInternalPassport                                   = 0x99a48f23
	CRC_secureValueTypeAddress                                            = 0xcbe31e26
	CRC_secureValueTypeUtilityBill                                        = 0xfc36954e
	CRC_secureValueTypeBankStatement                                      = 0x89137c0d
	CRC_secureValueTypeRentalAgreement                                    = 0x8b883488
	CRC_secureValueTypePassportRegistration                               = 0x99e3806a
	CRC_secureValueTypeTemporaryRegistration                              = 0xea02ec33
	CRC_secureValueTypePhone                                              = 0xb320aadb
	CRC_secureValueTypeEmail                                              = 0x8e3ca7ee
	CRC_secureValue                                                       = 0x187fa0ca
	CRC_inputSecureValue                                                  = 0xdb21d0a7
	CRC_secureValueHash                                                   = 0xed1ecdb0
	CRC_secureValueErrorData                                              = 0xe8a40bd9
	CRC_secureValueErrorFrontSide                                         = 0x00be3dfa
	CRC_secureValueErrorReverseSide                                       = 0x868a2aa5
	CRC_secureValueErrorSelfie                                            = 0xe537ced6
	CRC_secureValueErrorFile                                              = 0x7a700873
	CRC_secureValueErrorFiles                                             = 0x666220e9
	CRC_secureValueError                                                  = 0x869d758f
	CRC_secureValueErrorTranslationFile                                   = 0xa1144770
	CRC_secureValueErrorTranslationFiles                                  = 0x34636dd8
	CRC_secureCredentialsEncrypted                                        = 0x33f0ea47
	CRC_account_authorizationForm                                         = 0xad2e1cd8
	CRC_account_sentEmailCode                                             = 0x811f854f
	CRC_help_deepLinkInfoEmpty                                            = 0x66afa166
	CRC_help_deepLinkInfo                                                 = 0x6a4ee832
	CRC_savedPhoneContact                                                 = 0x1142bd56
	CRC_account_takeout                                                   = 0x4dba4501
	CRC_passwordKdfAlgoUnknown                                            = 0xd45ab096
	CRC_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow = 0x3a912d4a
	CRC_securePasswordKdfAlgoUnknown                                      = 0x004a8537
	CRC_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000                   = 0xbbf2dda0
	CRC_securePasswordKdfAlgoSHA512                                       = 0x86471d92
	CRC_secureSecretSettings                                              = 0x1527bcac
	CRC_inputCheckPasswordEmpty                                           = 0x9880f658
	CRC_inputCheckPasswordSRP                                             = 0xd27ff082
	CRC_secureRequiredType                                                = 0x829d99da
	CRC_secureRequiredTypeOneOf                                           = 0x027477b4
	CRC_help_passportConfigNotModified                                    = 0xbfb9f457
	CRC_help_passportConfig                                               = 0xa098d6af
	CRC_inputAppEvent                                                     = 0x1d1b1245
	CRC_jsonObjectValue                                                   = 0xc0de1bd9
	CRC_jsonNull                                                          = 0x3f6d7b68
	CRC_jsonBool                                                          = 0xc7345e6a
	CRC_jsonNumber                                                        = 0x2be0dfa4
	CRC_jsonString                                                        = 0xb71e767a
	CRC_jsonArray                                                         = 0xf7444763
	CRC_jsonObject                                                        = 0x99c1d49d
	CRC_pageTableCell                                                     = 0x34566b6a
	CRC_pageTableRow                                                      = 0xe0c0c5e5
	CRC_pageCaption                                                       = 0x6f747657
	CRC_pageListItemText                                                  = 0xb92fb6cd
	CRC_pageListItemBlocks                                                = 0x25e073fc
	CRC_pageListOrderedItemText                                           = 0x5e068047
	CRC_pageListOrderedItemBlocks                                         = 0x98dd8936
	CRC_pageRelatedArticle                                                = 0xb390dc08
	CRC_page                                                              = 0x98657f0d
	CRC_help_supportName                                                  = 0x8c05f1c9
	CRC_help_userInfoEmpty                                                = 0xf3ae2eed
	CRC_help_userInfo                                                     = 0x01eb3758
	CRC_pollAnswer                                                        = 0x6ca9c2e9
	CRC_poll                                                              = 0x86e18161
	CRC_pollAnswerVoters                                                  = 0x3b6ddad2
	CRC_pollResults                                                       = 0x7adf2420
	CRC_chatOnlines                                                       = 0xf041e250
	CRC_statsURL                                                          = 0x47a971e0
	CRC_chatAdminRights                                                   = 0x5fb224d5
	CRC_chatBannedRights                                                  = 0x9f120418
	CRC_inputWallPaper                                                    = 0xe630b979
	CRC_inputWallPaperSlug                                                = 0x72091c80
	CRC_inputWallPaperNoFile                                              = 0x967a462e
	CRC_account_wallPapersNotModified                                     = 0x1c199183
	CRC_account_wallPapers                                                = 0xcdc3858c
	CRC_codeSettings                                                      = 0xad253d78
	CRC_wallPaperSettings                                                 = 0x1dc1bca4
	CRC_autoDownloadSettings                                              = 0xbaa57628
	CRC_account_autoDownloadSettings                                      = 0x63cacf26
	CRC_emojiKeyword                                                      = 0xd5b3b9f9
	CRC_emojiKeywordDeleted                                               = 0x236df622
	CRC_emojiKeywordsDifference                                           = 0x5cc761bd
	CRC_emojiURL                                                          = 0xa575739d
	CRC_emojiLanguage                                                     = 0xb3fb5361
	CRC_folder                                                            = 0xff544e65
	CRC_inputFolderPeer                                                   = 0xfbd2c296
	CRC_folderPeer                                                        = 0xe9baa668
	CRC_messages_searchCounter                                            = 0xe844ebff
	CRC_urlAuthResultRequest                                              = 0x92d33a0e
	CRC_urlAuthResultAccepted                                             = 0x8f8c0e4e
	CRC_urlAuthResultDefault                                              = 0xa9d6db1f
	CRC_channelLocationEmpty                                              = 0xbfb5ad8b
	CRC_channelLocation                                                   = 0x209b82db
	CRC_peerLocated                                                       = 0xca461b5d
	CRC_peerSelfLocated                                                   = 0xf8ec284b
	CRC_restrictionReason                                                 = 0xd072acb4
	CRC_inputTheme                                                        = 0x3c5693e9
	CRC_inputThemeSlug                                                    = 0xf5890df1
	CRC_theme                                                             = 0xa00e67d6
	CRC_account_themesNotModified                                         = 0xf41eb622
	CRC_account_themes                                                    = 0x9a3d8c6d
	CRC_auth_loginToken                                                   = 0x629f1980
	CRC_auth_loginTokenMigrateTo                                          = 0x068e9916
	CRC_auth_loginTokenSuccess                                            = 0x390d5c5e
	CRC_account_contentSettings                                           = 0x57e28221
	CRC_messages_inactiveChats                                            = 0xa927fec5
	CRC_baseThemeClassic                                                  = 0xc3a12462
	CRC_baseThemeDay                                                      = 0xfbd81688
	CRC_baseThemeNight                                                    = 0xb7b31ea8
	CRC_baseThemeTinted                                                   = 0x6d5f77ee
	CRC_baseThemeArctic                                                   = 0x5b11125a
	CRC_inputThemeSettings                                                = 0x8fde504f
	CRC_themeSettings                                                     = 0xfa58b6d4
	CRC_webPageAttributeTheme                                             = 0x54b56617
	CRC_webPageAttributeStory                                             = 0x2e94c3e7
	CRC_messages_votesList                                                = 0x4899484e
	CRC_bankCardOpenUrl                                                   = 0xf568028a
	CRC_payments_bankCardData                                             = 0x3e24e573
	CRC_dialogFilter                                                      = 0x7438f7e8
	CRC_dialogFilterDefault                                               = 0x363293ae
	CRC_dialogFilterChatlist                                              = 0xd64a04a8
	CRC_dialogFilterSuggested                                             = 0x77744d4a
	CRC_statsDateRangeDays                                                = 0xb637edaf
	CRC_statsAbsValueAndPrev                                              = 0xcb43acde
	CRC_statsPercentValue                                                 = 0xcbce2fe0
	CRC_statsGraphAsync                                                   = 0x4a27eb2d
	CRC_statsGraphError                                                   = 0xbedc9822
	CRC_statsGraph                                                        = 0x8ea464b6
	CRC_messageInteractionCounters                                        = 0xad4fc9bd
	CRC_stats_broadcastStats                                              = 0xbdf78394
	CRC_help_promoDataEmpty                                               = 0x98f6ac75
	CRC_help_promoData                                                    = 0x8c39793f
	CRC_videoSize                                                         = 0xde33b094
	CRC_videoSizeEmojiMarkup                                              = 0xf85c413c
	CRC_videoSizeStickerMarkup                                            = 0x0da082fe
	CRC_statsGroupTopPoster                                               = 0x9d04af9b
	CRC_statsGroupTopAdmin                                                = 0xd7584c87
	CRC_statsGroupTopInviter                                              = 0x535f779d
	CRC_stats_megagroupStats                                              = 0xef7ff916
	CRC_globalPrivacySettings                                             = 0x734c4ccb
	CRC_help_countryCode                                                  = 0x4203c5ef
	CRC_help_country                                                      = 0xc3878e23
	CRC_help_countriesListNotModified                                     = 0x93cc1f32
	CRC_help_countriesList                                                = 0x87d0759e
	CRC_messageViews                                                      = 0x455b853d
	CRC_messages_messageViews                                             = 0xb6c4f543
	CRC_messages_discussionMessage                                        = 0xa6341782
	CRC_messageReplyHeader                                                = 0x6eebcabd
	CRC_messageReplyStoryHeader                                           = 0x9c98bfc1
	CRC_messageReplies                                                    = 0x83d60fc2
	CRC_peerBlocked                                                       = 0xe8fd8014
	CRC_stats_messageStats                                                = 0x8999f295
	CRC_groupCallDiscarded                                                = 0x7780bcb4
	CRC_groupCall                                                         = 0xd597650c
	CRC_inputGroupCall                                                    = 0xd8aa840f
	CRC_groupCallParticipant                                              = 0xeba636fe
	CRC_phone_groupCall                                                   = 0x9e727aad
	CRC_phone_groupParticipants                                           = 0xf47751b6
	CRC_inlineQueryPeerTypeSameBotPM                                      = 0x3081ed9d
	CRC_inlineQueryPeerTypePM                                             = 0x833c0fac
	CRC_inlineQueryPeerTypeChat                                           = 0xd766c50a
	CRC_inlineQueryPeerTypeMegagroup                                      = 0x5ec4be43
	CRC_inlineQueryPeerTypeBroadcast                                      = 0x6334ee9a
	CRC_inlineQueryPeerTypeBotPM                                          = 0x0e3b2d0c
	CRC_messages_historyImport                                            = 0x1662af0b
	CRC_messages_historyImportParsed                                      = 0x5e0fb7b9
	CRC_messages_affectedFoundMessages                                    = 0xef8d3e6c
	CRC_chatInviteImporter                                                = 0x8c5adfd9
	CRC_messages_exportedChatInvites                                      = 0xbdc62dcc
	CRC_messages_exportedChatInvite                                       = 0x1871be50
	CRC_messages_exportedChatInviteReplaced                               = 0x222600ef
	CRC_messages_chatInviteImporters                                      = 0x81b6b00a
	CRC_chatAdminWithInvites                                              = 0xf2ecef23
	CRC_messages_chatAdminsWithInvites                                    = 0xb69b72d7
	CRC_messages_checkedHistoryImportPeer                                 = 0xa24de717
	CRC_phone_joinAsPeers                                                 = 0xafe5623f
	CRC_phone_exportedGroupCallInvite                                     = 0x204bd158
	CRC_groupCallParticipantVideoSourceGroup                              = 0xdcb118b7
	CRC_groupCallParticipantVideo                                         = 0x67753ac8
	CRC_stickers_suggestedShortName                                       = 0x85fea03f
	CRC_botCommandScopeDefault                                            = 0x2f6cb2ab
	CRC_botCommandScopeUsers                                              = 0x3c4f04d8
	CRC_botCommandScopeChats                                              = 0x6fe1a881
	CRC_botCommandScopeChatAdmins                                         = 0xb9aa606a
	CRC_botCommandScopePeer                                               = 0xdb9d897d
	CRC_botCommandScopePeerAdmins                                         = 0x3fd863d1
	CRC_botCommandScopePeerUser                                           = 0x0a1321f3
	CRC_account_resetPasswordFailedWait                                   = 0xe3779861
	CRC_account_resetPasswordRequestedWait                                = 0xe9effc7d
	CRC_account_resetPasswordOk                                           = 0xe926d63e
	CRC_sponsoredMessage                                                  = 0xdaafff6b
	CRC_messages_sponsoredMessages                                        = 0xc9ee1d87
	CRC_messages_sponsoredMessagesEmpty                                   = 0x1839490f
	CRC_searchResultsCalendarPeriod                                       = 0xc9b0539f
	CRC_messages_searchResultsCalendar                                    = 0x147ee23c
	CRC_searchResultPosition                                              = 0x7f648b67
	CRC_messages_searchResultsPositions                                   = 0x53b22baf
	CRC_channels_sendAsPeers                                              = 0xf496b0c6
	CRC_users_userFull                                                    = 0x3b6d152e
	CRC_messages_peerSettings                                             = 0x6880b94d
	CRC_auth_loggedOut                                                    = 0xc3a2835f
	CRC_reactionCount                                                     = 0xa3d1cb80
	CRC_messageReactions                                                  = 0x4f2b9479
	CRC_messages_messageReactionsList                                     = 0x31bd492d
	CRC_availableReaction                                                 = 0xc077ec01
	CRC_messages_availableReactionsNotModified                            = 0x9f071957
	CRC_messages_availableReactions                                       = 0x768e3aad
	CRC_messagePeerReaction                                               = 0x8c79b63c
	CRC_groupCallStreamChannel                                            = 0x80eb48af
	CRC_phone_groupCallStreamChannels                                     = 0xd0e482b2
	CRC_phone_groupCallStreamRtmpUrl                                      = 0x2dbf3432
	CRC_attachMenuBotIconColor                                            = 0x4576f3f0
	CRC_attachMenuBotIcon                                                 = 0xb2a7386b
	CRC_attachMenuBot                                                     = 0xd90d8dfe
	CRC_attachMenuBotsNotModified                                         = 0xf1d88a5c
	CRC_attachMenuBots                                                    = 0x3c4301c0
	CRC_attachMenuBotsBot                                                 = 0x93bf667f
	CRC_webViewResultUrl                                                  = 0x0c14557c
	CRC_simpleWebViewResultUrl                                            = 0x882f76bb
	CRC_webViewMessageSent                                                = 0x0c94511c
	CRC_botMenuButtonDefault                                              = 0x7533a588
	CRC_botMenuButtonCommands                                             = 0x4258c205
	CRC_botMenuButton                                                     = 0xc7b57ce6
	CRC_account_savedRingtonesNotModified                                 = 0xfbf6e8b1
	CRC_account_savedRingtones                                            = 0xc1e92cc5
	CRC_notificationSoundDefault                                          = 0x97e8bebe
	CRC_notificationSoundNone                                             = 0x6f0c34df
	CRC_notificationSoundLocal                                            = 0x830b9ae4
	CRC_notificationSoundRingtone                                         = 0xff6c8049
	CRC_account_savedRingtone                                             = 0xb7263f6d
	CRC_account_savedRingtoneConverted                                    = 0x1f307eb7
	CRC_attachMenuPeerTypeSameBotPM                                       = 0x7d6be90e
	CRC_attachMenuPeerTypeBotPM                                           = 0xc32bfa1a
	CRC_attachMenuPeerTypePM                                              = 0xf146d31f
	CRC_attachMenuPeerTypeChat                                            = 0x0509113f
	CRC_attachMenuPeerTypeBroadcast                                       = 0x7bfbdefc
	CRC_inputInvoiceMessage                                               = 0xc5b56859
	CRC_inputInvoiceSlug                                                  = 0xc326caef
	CRC_inputInvoicePremiumGiftCode                                       = 0x98986c0d
	CRC_payments_exportedInvoice                                          = 0xaed0cbd9
	CRC_messages_transcribedAudio                                         = 0x93752c52
	CRC_help_premiumPromo                                                 = 0x5334759c
	CRC_inputStorePaymentPremiumSubscription                              = 0xa6751e66
	CRC_inputStorePaymentGiftPremium                                      = 0x616f7fe8
	CRC_inputStorePaymentPremiumGiftCode                                  = 0xa3805f3f
	CRC_inputStorePaymentPremiumGiveaway                                  = 0x7c9375e6
	CRC_premiumGiftOption                                                 = 0x74c34319
	CRC_paymentFormMethod                                                 = 0x88f8f21b
	CRC_emojiStatusEmpty                                                  = 0x2de11aae
	CRC_emojiStatus                                                       = 0x929b619d
	CRC_emojiStatusUntil                                                  = 0xfa30a8c7
	CRC_account_emojiStatusesNotModified                                  = 0xd08ce645
	CRC_account_emojiStatuses                                             = 0x90c467d1
	CRC_reactionEmpty                                                     = 0x79f5d419
	CRC_reactionEmoji                                                     = 0x1b2286b8
	CRC_reactionCustomEmoji                                               = 0x8935fc73
	CRC_chatReactionsNone                                                 = 0xeafc32bc
	CRC_chatReactionsAll                                                  = 0x52928bca
	CRC_chatReactionsSome                                                 = 0x661d4037
	CRC_messages_reactionsNotModified                                     = 0xb06fdbdf
	CRC_messages_reactions                                                = 0xeafdf716
	CRC_emailVerifyPurposeLoginSetup                                      = 0x4345be73
	CRC_emailVerifyPurposeLoginChange                                     = 0x527d22eb
	CRC_emailVerifyPurposePassport                                        = 0xbbf51685
	CRC_emailVerificationCode                                             = 0x922e55a9
	CRC_emailVerificationGoogle                                           = 0xdb909ec2
	CRC_emailVerificationApple                                            = 0x96d074fd
	CRC_account_emailVerified                                             = 0x2b96cd1b
	CRC_account_emailVerifiedLogin                                        = 0xe1bb0d61
	CRC_premiumSubscriptionOption                                         = 0x5f2d1df2
	CRC_sendAsPeer                                                        = 0xb81c7034
	CRC_messageExtendedMediaPreview                                       = 0xad628cc8
	CRC_messageExtendedMedia                                              = 0xee479c64
	CRC_stickerKeyword                                                    = 0xfcfeb29c
	CRC_username                                                          = 0xb4073647
	CRC_forumTopicDeleted                                                 = 0x023f109b
	CRC_forumTopic                                                        = 0x71701da9
	CRC_messages_forumTopics                                              = 0x367617d3
	CRC_defaultHistoryTTL                                                 = 0x43b46b20
	CRC_exportedContactToken                                              = 0x41bf109b
	CRC_requestPeerTypeUser                                               = 0x5f3b8a00
	CRC_requestPeerTypeChat                                               = 0xc9f06e1b
	CRC_requestPeerTypeBroadcast                                          = 0x339bef6c
	CRC_emojiListNotModified                                              = 0x481eadfa
	CRC_emojiList                                                         = 0x7a1e11d1
	CRC_emojiGroup                                                        = 0x7a9abda9
	CRC_messages_emojiGroupsNotModified                                   = 0x6fb4ad87
	CRC_messages_emojiGroups                                              = 0x881fb94b
	CRC_textWithEntities                                                  = 0x751f3146
	CRC_messages_translateResult                                          = 0x33db32f8
	CRC_autoSaveSettings                                                  = 0xc84834ce
	CRC_autoSaveException                                                 = 0x81602d47
	CRC_account_autoSaveSettings                                          = 0x4c3e069d
	CRC_help_appConfigNotModified                                         = 0x7cde641d
	CRC_help_appConfig                                                    = 0xdd18782e
	CRC_inputBotAppID                                                     = 0xa920bd7a
	CRC_inputBotAppShortName                                              = 0x908c0407
	CRC_botAppNotModified                                                 = 0x5da674b7
	CRC_botApp                                                            = 0x95fcd1d6
	CRC_messages_botApp                                                   = 0xeb50adf5
	CRC_appWebViewResultUrl                                               = 0x3c1b4f0d
	CRC_inlineBotWebView                                                  = 0xb57295d5
	CRC_readParticipantDate                                               = 0x4a4ff172
	CRC_inputChatlistDialogFilter                                         = 0xf3e0da33
	CRC_exportedChatlistInvite                                            = 0x0c5181ac
	CRC_chatlists_exportedChatlistInvite                                  = 0x10e6e3a6
	CRC_chatlists_exportedInvites                                         = 0x10ab6dc7
	CRC_chatlists_chatlistInviteAlready                                   = 0xfa87f659
	CRC_chatlists_chatlistInvite                                          = 0x1dcd839d
	CRC_chatlists_chatlistUpdates                                         = 0x93bd878d
	CRC_bots_botInfo                                                      = 0xe8a775b0
	CRC_messagePeerVote                                                   = 0xb6cc2d5c
	CRC_messagePeerVoteInputOption                                        = 0x74cda504
	CRC_messagePeerVoteMultiple                                           = 0x4628f6e6
	CRC_sponsoredWebPage                                                  = 0x3db8ec63
	CRC_storyViews                                                        = 0x8d595cd6
	CRC_storyItemDeleted                                                  = 0x51e6ee4f
	CRC_storyItemSkipped                                                  = 0xffadc913
	CRC_storyItem                                                         = 0x44c457ce
	CRC_stories_allStoriesNotModified                                     = 0x1158fe3e
	CRC_stories_allStories                                                = 0x6efc5e81
	CRC_stories_stories                                                   = 0x5dd8c3c8
	CRC_storyView                                                         = 0xb0bdeac5
	CRC_stories_storyViewsList                                            = 0x46e9b9ec
	CRC_stories_storyViews                                                = 0xde9eed1d
	CRC_inputReplyToMessage                                               = 0x073ec805
	CRC_inputReplyToStory                                                 = 0x15b0f283
	CRC_exportedStoryLink                                                 = 0x3fc9053b
	CRC_storiesStealthMode                                                = 0x712e27fd
	CRC_mediaAreaCoordinates                                              = 0x03d1ea4e
	CRC_mediaAreaVenue                                                    = 0xbe82db9c
	CRC_inputMediaAreaVenue                                               = 0xb282217f
	CRC_mediaAreaGeoPoint                                                 = 0xdf8b3b22
	CRC_mediaAreaSuggestedReaction                                        = 0x14455871
	CRC_peerStories                                                       = 0x9a35e999
	CRC_stories_peerStories                                               = 0xcae68768
	CRC_messages_webPage                                                  = 0xfd5e12bd
	CRC_premiumGiftCodeOption                                             = 0x257e962b
	CRC_payments_checkedGiftCode                                          = 0xb722f158
	CRC_payments_giveawayInfo                                             = 0x4367daa0
	CRC_payments_giveawayInfoResults                                      = 0x00cd5570
	CRC_prepaidGiveaway                                                   = 0xb2539d54
	CRC_boost                                                             = 0x2a1c8c71
	CRC_premium_boostsList                                                = 0x86f8613c
	CRC_myBoost                                                           = 0xc448415c
	CRC_premium_myBoosts                                                  = 0x9ae228e2
	CRC_premium_boostsStatus                                              = 0x4959427a
	CRC_invokeAfterMsg                                                    = 0xcb9f372d
	CRC_invokeAfterMsgs                                                   = 0x3dc4b4f0
	CRC_initConnection                                                    = 0xc1cd5ea9
	CRC_invokeWithLayer                                                   = 0xda9b0d0d
	CRC_invokeWithoutUpdates                                              = 0xbf9459b7
	CRC_invokeWithMessagesRange                                           = 0x365275f2
	CRC_invokeWithTakeout                                                 = 0xaca9fd2e
	CRC_auth_sendCode                                                     = 0xa677244f
	CRC_auth_signUp                                                       = 0x80eee427
	CRC_auth_signIn                                                       = 0x8d52a951
	CRC_auth_logOut                                                       = 0x3e72ba19
	CRC_auth_resetAuthorizations                                          = 0x9fab0d1a
	CRC_auth_exportAuthorization                                          = 0xe5bfffcd
	CRC_auth_importAuthorization                                          = 0xa57a7dad
	CRC_auth_bindTempAuthKey                                              = 0xcdd42a05
	CRC_auth_importBotAuthorization                                       = 0x67a3ff2c
	CRC_auth_checkPassword                                                = 0xd18b4d16
	CRC_auth_requestPasswordRecovery                                      = 0xd897bc66
	CRC_auth_recoverPassword                                              = 0x37096c70
	CRC_auth_resendCode                                                   = 0x3ef1a9bf
	CRC_auth_cancelCode                                                   = 0x1f040578
	CRC_auth_dropTempAuthKeys                                             = 0x8e48a188
	CRC_auth_exportLoginToken                                             = 0xb7e085fe
	CRC_auth_importLoginToken                                             = 0x95ac5ce4
	CRC_auth_acceptLoginToken                                             = 0xe894ad4d
	CRC_auth_checkRecoveryPassword                                        = 0x0d36bf79
	CRC_auth_importWebTokenAuthorization                                  = 0x2db873a9
	CRC_auth_requestFirebaseSms                                           = 0x89464b50
	CRC_auth_resetLoginEmail                                              = 0x7e960193
	CRC_account_registerDevice                                            = 0xec86017a
	CRC_account_unregisterDevice                                          = 0x6a0d3206
	CRC_account_updateNotifySettings                                      = 0x84be5b93
	CRC_account_getNotifySettings                                         = 0x12b3ad31
	CRC_account_resetNotifySettings                                       = 0xdb7e1747
	CRC_account_updateProfile                                             = 0x78515775
	CRC_account_updateStatus                                              = 0x6628562c
	CRC_account_getWallPapers                                             = 0x07967d36
	CRC_account_reportPeer                                                = 0xc5ba3d86
	CRC_account_checkUsername                                             = 0x2714d86c
	CRC_account_updateUsername                                            = 0x3e0bdd7c
	CRC_account_getPrivacy                                                = 0xdadbc950
	CRC_account_setPrivacy                                                = 0xc9f81ce8
	CRC_account_deleteAccount                                             = 0xa2c0cf74
	CRC_account_getAccountTTL                                             = 0x08fc711d
	CRC_account_setAccountTTL                                             = 0x2442485e
	CRC_account_sendChangePhoneCode                                       = 0x82574ae5
	CRC_account_changePhone                                               = 0x70c32edb
	CRC_account_updateDeviceLocked                                        = 0x38df3532
	CRC_account_getAuthorizations                                         = 0xe320c158
	CRC_account_resetAuthorization                                        = 0xdf77f3bc
	CRC_account_getPassword                                               = 0x548a30f5
	CRC_account_getPasswordSettings                                       = 0x9cd4eaf9
	CRC_account_updatePasswordSettings                                    = 0xa59b102f
	CRC_account_sendConfirmPhoneCode                                      = 0x1b3faa88
	CRC_account_confirmPhone                                              = 0x5f2178c3
	CRC_account_getTmpPassword                                            = 0x449e0b51
	CRC_account_getWebAuthorizations                                      = 0x182e6d6f
	CRC_account_resetWebAuthorization                                     = 0x2d01b9ef
	CRC_account_resetWebAuthorizations                                    = 0x682d2594
	CRC_account_getAllSecureValues                                        = 0xb288bc7d
	CRC_account_getSecureValue                                            = 0x73665bc2
	CRC_account_saveSecureValue                                           = 0x899fe31d
	CRC_account_deleteSecureValue                                         = 0xb880bc4b
	CRC_account_getAuthorizationForm                                      = 0xa929597a
	CRC_account_acceptAuthorization                                       = 0xf3ed4c73
	CRC_account_sendVerifyPhoneCode                                       = 0xa5a356f9
	CRC_account_verifyPhone                                               = 0x4dd3a7f6
	CRC_account_sendVerifyEmailCode                                       = 0x98e037bb
	CRC_account_verifyEmail                                               = 0x032da4cf
	CRC_account_initTakeoutSession                                        = 0x8ef3eab0
	CRC_account_finishTakeoutSession                                      = 0x1d2652ee
	CRC_account_confirmPasswordEmail                                      = 0x8fdf1920
	CRC_account_resendPasswordEmail                                       = 0x7a7f2a15
	CRC_account_cancelPasswordEmail                                       = 0xc1cbd5b6
	CRC_account_getContactSignUpNotification                              = 0x9f07c728
	CRC_account_setContactSignUpNotification                              = 0xcff43f61
	CRC_account_getNotifyExceptions                                       = 0x53577479
	CRC_account_getWallPaper                                              = 0xfc8ddbea
	CRC_account_uploadWallPaper                                           = 0xe39a8f03
	CRC_account_saveWallPaper                                             = 0x6c5a5b37
	CRC_account_installWallPaper                                          = 0xfeed5769
	CRC_account_resetWallPapers                                           = 0xbb3b9804
	CRC_account_getAutoDownloadSettings                                   = 0x56da0b3f
	CRC_account_saveAutoDownloadSettings                                  = 0x76f36233
	CRC_account_uploadTheme                                               = 0x1c3db333
	CRC_account_createTheme                                               = 0x652e4400
	CRC_account_updateTheme                                               = 0x2bf40ccc
	CRC_account_saveTheme                                                 = 0xf257106c
	CRC_account_installTheme                                              = 0xc727bb3b
	CRC_account_getTheme                                                  = 0x3a5869ec
	CRC_account_getThemes                                                 = 0x7206e458
	CRC_account_setContentSettings                                        = 0xb574b16b
	CRC_account_getContentSettings                                        = 0x8b9b4dae
	CRC_account_getMultiWallPapers                                        = 0x65ad71dc
	CRC_account_getGlobalPrivacySettings                                  = 0xeb2b4cf6
	CRC_account_setGlobalPrivacySettings                                  = 0x1edaaac2
	CRC_account_reportProfilePhoto                                        = 0xfa8cc6f5
	CRC_account_resetPassword                                             = 0x9308ce1b
	CRC_account_declinePasswordReset                                      = 0x4c9409f6
	CRC_account_getChatThemes                                             = 0xd638de89
	CRC_account_setAuthorizationTTL                                       = 0xbf899aa0
	CRC_account_changeAuthorizationSettings                               = 0x40f48462
	CRC_account_getSavedRingtones                                         = 0xe1902288
	CRC_account_saveRingtone                                              = 0x3dea5b03
	CRC_account_uploadRingtone                                            = 0x831a83a2
	CRC_account_updateEmojiStatus                                         = 0xfbd3de6b
	CRC_account_getDefaultEmojiStatuses                                   = 0xd6753386
	CRC_account_getRecentEmojiStatuses                                    = 0x0f578105
	CRC_account_clearRecentEmojiStatuses                                  = 0x18201aae
	CRC_account_reorderUsernames                                          = 0xef500eab
	CRC_account_toggleUsername                                            = 0x58d6b376
	CRC_account_getDefaultProfilePhotoEmojis                              = 0xe2750328
	CRC_account_getDefaultGroupPhotoEmojis                                = 0x915860ae
	CRC_account_getAutoSaveSettings                                       = 0xadcbbcda
	CRC_account_saveAutoSaveSettings                                      = 0xd69b8361
	CRC_account_deleteAutoSaveExceptions                                  = 0x53bc0020
	CRC_account_invalidateSignInCodes                                     = 0xca8ae8ba
	CRC_account_updateColor                                               = 0xa001cc43
	CRC_account_getDefaultBackgroundEmojis                                = 0xa60ab9ce
	CRC_users_getUsers                                                    = 0x0d91a548
	CRC_users_getFullUser                                                 = 0xb60f5918
	CRC_users_setSecureValueErrors                                        = 0x90c894b5
	CRC_contacts_getContactIDs                                            = 0x7adc669d
	CRC_contacts_getStatuses                                              = 0xc4a353ee
	CRC_contacts_getContacts                                              = 0x5dd69e12
	CRC_contacts_importContacts                                           = 0x2c800be5
	CRC_contacts_deleteContacts                                           = 0x096a0e00
	CRC_contacts_deleteByPhones                                           = 0x1013fd9e
	CRC_contacts_block                                                    = 0x2e2e8734
	CRC_contacts_unblock                                                  = 0xb550d328
	CRC_contacts_getBlocked                                               = 0x9a868f80
	CRC_contacts_search                                                   = 0x11f812d8
	CRC_contacts_resolveUsername                                          = 0xf93ccba3
	CRC_contacts_getTopPeers                                              = 0x973478b6
	CRC_contacts_resetTopPeerRating                                       = 0x1ae373ac
	CRC_contacts_resetSaved                                               = 0x879537f1
	CRC_contacts_getSaved                                                 = 0x82f1e39f
	CRC_contacts_toggleTopPeers                                           = 0x8514bdda
	CRC_contacts_addContact                                               = 0xe8f463d0
	CRC_contacts_acceptContact                                            = 0xf831a20f
	CRC_contacts_getLocated                                               = 0xd348bc44
	CRC_contacts_blockFromReplies                                         = 0x29a8962c
	CRC_contacts_resolvePhone                                             = 0x8af94344
	CRC_contacts_exportContactToken                                       = 0xf8654027
	CRC_contacts_importContactToken                                       = 0x13005788
	CRC_contacts_editCloseFriends                                         = 0xba6705f0
	CRC_contacts_setBlocked                                               = 0x94c65c76
	CRC_messages_getMessages                                              = 0x63c66506
	CRC_messages_getDialogs                                               = 0xa0f4cb4f
	CRC_messages_getHistory                                               = 0x4423e6c5
	CRC_messages_search                                                   = 0xa0fda762
	CRC_messages_readHistory                                              = 0x0e306d3a
	CRC_messages_deleteHistory                                            = 0xb08f922a
	CRC_messages_deleteMessages                                           = 0xe58e95d2
	CRC_messages_receivedMessages                                         = 0x05a954c0
	CRC_messages_setTyping                                                = 0x58943ee2
	CRC_messages_sendMessage                                              = 0x280d096f
	CRC_messages_sendMedia                                                = 0x72ccc23d
	CRC_messages_forwardMessages                                          = 0xc661bbc4
	CRC_messages_reportSpam                                               = 0xcf1592db
	CRC_messages_getPeerSettings                                          = 0xefd9a6a2
	CRC_messages_report                                                   = 0x8953ab4e
	CRC_messages_getChats                                                 = 0x49e9528f
	CRC_messages_getFullChat                                              = 0xaeb00b34
	CRC_messages_editChatTitle                                            = 0x73783ffd
	CRC_messages_editChatPhoto                                            = 0x35ddd674
	CRC_messages_addChatUser                                              = 0xf24753e3
	CRC_messages_deleteChatUser                                           = 0xa2185cab
	CRC_messages_createChat                                               = 0x0034a818
	CRC_messages_getDhConfig                                              = 0x26cf8950
	CRC_messages_requestEncryption                                        = 0xf64daf43
	CRC_messages_acceptEncryption                                         = 0x3dbc0415
	CRC_messages_discardEncryption                                        = 0xf393aea0
	CRC_messages_setEncryptedTyping                                       = 0x791451ed
	CRC_messages_readEncryptedHistory                                     = 0x7f4b690a
	CRC_messages_sendEncrypted                                            = 0x44fa7a15
	CRC_messages_sendEncryptedFile                                        = 0x5559481d
	CRC_messages_sendEncryptedService                                     = 0x32d439a4
	CRC_messages_receivedQueue                                            = 0x55a5bb66
	CRC_messages_reportEncryptedSpam                                      = 0x4b0c8c0f
	CRC_messages_readMessageContents                                      = 0x36a73f77
	CRC_messages_getStickers                                              = 0xd5a5d3a1
	CRC_messages_getAllStickers                                           = 0xb8a0a1a8
	CRC_messages_getWebPagePreview                                        = 0x8b68b0cc
	CRC_messages_exportChatInvite                                         = 0xa02ce5d5
	CRC_messages_checkChatInvite                                          = 0x3eadb1bb
	CRC_messages_importChatInvite                                         = 0x6c50051c
	CRC_messages_getStickerSet                                            = 0xc8a0ec74
	CRC_messages_installStickerSet                                        = 0xc78fe460
	CRC_messages_uninstallStickerSet                                      = 0xf96e55de
	CRC_messages_startBot                                                 = 0xe6df7378
	CRC_messages_getMessagesViews                                         = 0x5784d3e1
	CRC_messages_editChatAdmin                                            = 0xa85bd1c2
	CRC_messages_migrateChat                                              = 0xa2875319
	CRC_messages_searchGlobal                                             = 0x4bc6589a
	CRC_messages_reorderStickerSets                                       = 0x78337739
	CRC_messages_getDocumentByHash                                        = 0xb1f2061f
	CRC_messages_getSavedGifs                                             = 0x5cf09635
	CRC_messages_saveGif                                                  = 0x327a30cb
	CRC_messages_getInlineBotResults                                      = 0x514e999d
	CRC_messages_setInlineBotResults                                      = 0xbb12a419
	CRC_messages_sendInlineBotResult                                      = 0xf7bc68ba
	CRC_messages_getMessageEditData                                       = 0xfda68d36
	CRC_messages_editMessage                                              = 0x48f71778
	CRC_messages_editInlineBotMessage                                     = 0x83557dba
	CRC_messages_getBotCallbackAnswer                                     = 0x9342ca07
	CRC_messages_setBotCallbackAnswer                                     = 0xd58f130a
	CRC_messages_getPeerDialogs                                           = 0xe470bcfd
	CRC_messages_saveDraft                                                = 0x7ff3b806
	CRC_messages_getAllDrafts                                             = 0x6a3f8d65
	CRC_messages_getFeaturedStickers                                      = 0x64780b14
	CRC_messages_readFeaturedStickers                                     = 0x5b118126
	CRC_messages_getRecentStickers                                        = 0x9da9403b
	CRC_messages_saveRecentSticker                                        = 0x392718f8
	CRC_messages_clearRecentStickers                                      = 0x8999602d
	CRC_messages_getArchivedStickers                                      = 0x57f17692
	CRC_messages_getMaskStickers                                          = 0x640f82b8
	CRC_messages_getAttachedStickers                                      = 0xcc5b67cc
	CRC_messages_setGameScore                                             = 0x8ef8ecc0
	CRC_messages_setInlineGameScore                                       = 0x15ad9f64
	CRC_messages_getGameHighScores                                        = 0xe822649d
	CRC_messages_getInlineGameHighScores                                  = 0x0f635e1b
	CRC_messages_getCommonChats                                           = 0xe40ca104
	CRC_messages_getWebPage                                               = 0x8d9692a3
	CRC_messages_toggleDialogPin                                          = 0xa731e257
	CRC_messages_reorderPinnedDialogs                                     = 0x3b1adf37
	CRC_messages_getPinnedDialogs                                         = 0xd6b94df2
	CRC_messages_setBotShippingResults                                    = 0xe5f672fa
	CRC_messages_setBotPrecheckoutResults                                 = 0x09c2dd95
	CRC_messages_uploadMedia                                              = 0x519bc2b1
	CRC_messages_sendScreenshotNotification                               = 0xa1405817
	CRC_messages_getFavedStickers                                         = 0x04f1aaa9
	CRC_messages_faveSticker                                              = 0xb9ffc55b
	CRC_messages_getUnreadMentions                                        = 0xf107e790
	CRC_messages_readMentions                                             = 0x36e5bf4d
	CRC_messages_getRecentLocations                                       = 0x702a40e0
	CRC_messages_sendMultiMedia                                           = 0x456e8987
	CRC_messages_uploadEncryptedFile                                      = 0x5057c497
	CRC_messages_searchStickerSets                                        = 0x35705b8a
	CRC_messages_getSplitRanges                                           = 0x1cff7e08
	CRC_messages_markDialogUnread                                         = 0xc286d98f
	CRC_messages_getDialogUnreadMarks                                     = 0x22e24e22
	CRC_messages_clearAllDrafts                                           = 0x7e58ee9c
	CRC_messages_updatePinnedMessage                                      = 0xd2aaf7ec
	CRC_messages_sendVote                                                 = 0x10ea6184
	CRC_messages_getPollResults                                           = 0x73bb643b
	CRC_messages_getOnlines                                               = 0x6e2be050
	CRC_messages_editChatAbout                                            = 0xdef60797
	CRC_messages_editChatDefaultBannedRights                              = 0xa5866b41
	CRC_messages_getEmojiKeywords                                         = 0x35a0e062
	CRC_messages_getEmojiKeywordsDifference                               = 0x1508b6af
	CRC_messages_getEmojiKeywordsLanguages                                = 0x4e9963b2
	CRC_messages_getEmojiURL                                              = 0xd5b10c26
	CRC_messages_getSearchCounters                                        = 0x00ae7cc1
	CRC_messages_requestUrlAuth                                           = 0x198fb446
	CRC_messages_acceptUrlAuth                                            = 0xb12c7125
	CRC_messages_hidePeerSettingsBar                                      = 0x4facb138
	CRC_messages_getScheduledHistory                                      = 0xf516760b
	CRC_messages_getScheduledMessages                                     = 0xbdbb0464
	CRC_messages_sendScheduledMessages                                    = 0xbd38850a
	CRC_messages_deleteScheduledMessages                                  = 0x59ae2b16
	CRC_messages_getPollVotes                                             = 0xb86e380e
	CRC_messages_toggleStickerSets                                        = 0xb5052fea
	CRC_messages_getDialogFilters                                         = 0xf19ed96d
	CRC_messages_getSuggestedDialogFilters                                = 0xa29cd42c
	CRC_messages_updateDialogFilter                                       = 0x1ad4a04a
	CRC_messages_updateDialogFiltersOrder                                 = 0xc563c1e4
	CRC_messages_getOldFeaturedStickers                                   = 0x7ed094a1
	CRC_messages_getReplies                                               = 0x22ddd30c
	CRC_messages_getDiscussionMessage                                     = 0x446972fd
	CRC_messages_readDiscussion                                           = 0xf731a9f4
	CRC_messages_unpinAllMessages                                         = 0xee22b9a8
	CRC_messages_deleteChat                                               = 0x5bd0ee50
	CRC_messages_deletePhoneCallHistory                                   = 0xf9cbe409
	CRC_messages_checkHistoryImport                                       = 0x43fe19f3
	CRC_messages_initHistoryImport                                        = 0x34090c3b
	CRC_messages_uploadImportedMedia                                      = 0x2a862092
	CRC_messages_startHistoryImport                                       = 0xb43df344
	CRC_messages_getExportedChatInvites                                   = 0xa2b5a3f6
	CRC_messages_getExportedChatInvite                                    = 0x73746f5c
	CRC_messages_editExportedChatInvite                                   = 0xbdca2f75
	CRC_messages_deleteRevokedExportedChatInvites                         = 0x56987bd5
	CRC_messages_deleteExportedChatInvite                                 = 0xd464a42b
	CRC_messages_getAdminsWithInvites                                     = 0x3920e6ef
	CRC_messages_getChatInviteImporters                                   = 0xdf04dd4e
	CRC_messages_setHistoryTTL                                            = 0xb80e5fe4
	CRC_messages_checkHistoryImportPeer                                   = 0x5dc60f03
	CRC_messages_setChatTheme                                             = 0xe63be13f
	CRC_messages_getMessageReadParticipants                               = 0x31c1c44f
	CRC_messages_getSearchResultsCalendar                                 = 0x49f0bde9
	CRC_messages_getSearchResultsPositions                                = 0x6e9583a3
	CRC_messages_hideChatJoinRequest                                      = 0x7fe7e815
	CRC_messages_hideAllChatJoinRequests                                  = 0xe085f4ea
	CRC_messages_toggleNoForwards                                         = 0xb11eafa2
	CRC_messages_saveDefaultSendAs                                        = 0xccfddf96
	CRC_messages_sendReaction                                             = 0xd30d78d4
	CRC_messages_getMessagesReactions                                     = 0x8bba90e6
	CRC_messages_getMessageReactionsList                                  = 0x461b3f48
	CRC_messages_setChatAvailableReactions                                = 0xfeb16771
	CRC_messages_getAvailableReactions                                    = 0x18dea0ac
	CRC_messages_setDefaultReaction                                       = 0x4f47a016
	CRC_messages_translateText                                            = 0x63183030
	CRC_messages_getUnreadReactions                                       = 0x3223495b
	CRC_messages_readReactions                                            = 0x54aa7f8e
	CRC_messages_searchSentMedia                                          = 0x107e31a0
	CRC_messages_getAttachMenuBots                                        = 0x16fcc2cb
	CRC_messages_getAttachMenuBot                                         = 0x77216192
	CRC_messages_toggleBotInAttachMenu                                    = 0x69f59d69
	CRC_messages_requestWebView                                           = 0x269dc2c1
	CRC_messages_prolongWebView                                           = 0xb0d81a83
	CRC_messages_requestSimpleWebView                                     = 0x1a46500a
	CRC_messages_sendWebViewResultMessage                                 = 0x0a4314f5
	CRC_messages_sendWebViewData                                          = 0xdc0242c8
	CRC_messages_transcribeAudio                                          = 0x269e9a49
	CRC_messages_rateTranscribedAudio                                     = 0x7f1d072f
	CRC_messages_getCustomEmojiDocuments                                  = 0xd9ab0f54
	CRC_messages_getEmojiStickers                                         = 0xfbfca18f
	CRC_messages_getFeaturedEmojiStickers                                 = 0x0ecf6736
	CRC_messages_reportReaction                                           = 0x3f64c076
	CRC_messages_getTopReactions                                          = 0xbb8125ba
	CRC_messages_getRecentReactions                                       = 0x39461db2
	CRC_messages_clearRecentReactions                                     = 0x9dfeefb4
	CRC_messages_getExtendedMedia                                         = 0x84f80814
	CRC_messages_setDefaultHistoryTTL                                     = 0x9eb51445
	CRC_messages_getDefaultHistoryTTL                                     = 0x658b7188
	CRC_messages_sendBotRequestedPeer                                     = 0xfe38d01b
	CRC_messages_getEmojiGroups                                           = 0x7488ce5b
	CRC_messages_getEmojiStatusGroups                                     = 0x2ecd56cd
	CRC_messages_getEmojiProfilePhotoGroups                               = 0x21a548f3
	CRC_messages_searchCustomEmoji                                        = 0x2c11c0d7
	CRC_messages_togglePeerTranslations                                   = 0xe47cb579
	CRC_messages_getBotApp                                                = 0x34fdc5c3
	CRC_messages_requestAppWebView                                        = 0x8c5a3b3c
	CRC_messages_setChatWallPaper                                         = 0x8ffacae1
	CRC_updates_getState                                                  = 0xedd4882a
	CRC_updates_getDifference                                             = 0x19c2f763
	CRC_updates_getChannelDifference                                      = 0x03173d78
	CRC_photos_updateProfilePhoto                                         = 0x09e82039
	CRC_photos_uploadProfilePhoto                                         = 0x0388a3b5
	CRC_photos_deletePhotos                                               = 0x87cf7f2f
	CRC_photos_getUserPhotos                                              = 0x91cd32a8
	CRC_photos_uploadContactProfilePhoto                                  = 0xe14c4a71
	CRC_upload_saveFilePart                                               = 0xb304a621
	CRC_upload_getFile                                                    = 0xbe5335be
	CRC_upload_saveBigFilePart                                            = 0xde7b673d
	CRC_upload_getWebFile                                                 = 0x24e6818d
	CRC_upload_getCdnFile                                                 = 0x395f69da
	CRC_upload_reuploadCdnFile                                            = 0x9b2754a8
	CRC_upload_getCdnFileHashes                                           = 0x91dc3f31
	CRC_upload_getFileHashes                                              = 0x9156982a
	CRC_help_getConfig                                                    = 0xc4f9186b
	CRC_help_getNearestDc                                                 = 0x1fb33026
	CRC_help_getAppUpdate                                                 = 0x522d5a7d
	CRC_help_getInviteText                                                = 0x4d392343
	CRC_help_getSupport                                                   = 0x9cdf08cd
	CRC_help_getAppChangelog                                              = 0x9010ef6f
	CRC_help_setBotUpdatesStatus                                          = 0xec22cfcd
	CRC_help_getCdnConfig                                                 = 0x52029342
	CRC_help_getRecentMeUrls                                              = 0x3dc0f114
	CRC_help_getTermsOfServiceUpdate                                      = 0x2ca51fd1
	CRC_help_acceptTermsOfService                                         = 0xee72f79a
	CRC_help_getDeepLinkInfo                                              = 0x3fedc75f
	CRC_help_getAppConfig                                                 = 0x61e3f854
	CRC_help_saveAppLog                                                   = 0x6f02f748
	CRC_help_getPassportConfig                                            = 0xc661ad08
	CRC_help_getSupportName                                               = 0xd360e72c
	CRC_help_getUserInfo                                                  = 0x038a08d3
	CRC_help_editUserInfo                                                 = 0x66b91b70
	CRC_help_getPromoData                                                 = 0xc0977421
	CRC_help_hidePromoData                                                = 0x1e251c95
	CRC_help_dismissSuggestion                                            = 0xf50dbaa1
	CRC_help_getCountriesList                                             = 0x735787a8
	CRC_help_getPremiumPromo                                              = 0xb81b93d4
	CRC_channels_readHistory                                              = 0xcc104937
	CRC_channels_deleteMessages                                           = 0x84c1fd4e
	CRC_channels_reportSpam                                               = 0xf44a8315
	CRC_channels_getMessages                                              = 0xad8c9a23
	CRC_channels_getParticipants                                          = 0x77ced9d0
	CRC_channels_getParticipant                                           = 0xa0ab6cc6
	CRC_channels_getChannels                                              = 0x0a7f6bbb
	CRC_channels_getFullChannel                                           = 0x08736a09
	CRC_channels_createChannel                                            = 0x91006707
	CRC_channels_editAdmin                                                = 0xd33c8902
	CRC_channels_editTitle                                                = 0x566decd0
	CRC_channels_editPhoto                                                = 0xf12e57c9
	CRC_channels_checkUsername                                            = 0x10e6bd2c
	CRC_channels_updateUsername                                           = 0x3514b3de
	CRC_channels_joinChannel                                              = 0x24b524c5
	CRC_channels_leaveChannel                                             = 0xf836aa95
	CRC_channels_inviteToChannel                                          = 0x199f3a6c
	CRC_channels_deleteChannel                                            = 0xc0111fe3
	CRC_channels_exportMessageLink                                        = 0xe63fadeb
	CRC_channels_toggleSignatures                                         = 0x1f69b606
	CRC_channels_getAdminedPublicChannels                                 = 0xf8b036af
	CRC_channels_editBanned                                               = 0x96e6cd81
	CRC_channels_getAdminLog                                              = 0x33ddf480
	CRC_channels_setStickers                                              = 0xea8ca4f9
	CRC_channels_readMessageContents                                      = 0xeab5dc38
	CRC_channels_deleteHistory                                            = 0x9baa9647
	CRC_channels_togglePreHistoryHidden                                   = 0xeabbb94c
	CRC_channels_getLeftChannels                                          = 0x8341ecc0
	CRC_channels_getGroupsForDiscussion                                   = 0xf5dad378
	CRC_channels_setDiscussionGroup                                       = 0x40582bb2
	CRC_channels_editCreator                                              = 0x8f38cd1f
	CRC_channels_editLocation                                             = 0x58e63f6d
	CRC_channels_toggleSlowMode                                           = 0xedd49ef0
	CRC_channels_getInactiveChannels                                      = 0x11e831ee
	CRC_channels_convertToGigagroup                                       = 0x0b290c69
	CRC_channels_viewSponsoredMessage                                     = 0xbeaedb94
	CRC_channels_getSponsoredMessages                                     = 0xec210fbf
	CRC_channels_getSendAs                                                = 0x0dc770ee
	CRC_channels_deleteParticipantHistory                                 = 0x367544db
	CRC_channels_toggleJoinToSend                                         = 0xe4cb9580
	CRC_channels_toggleJoinRequest                                        = 0x4c2985b6
	CRC_channels_reorderUsernames                                         = 0xb45ced1d
	CRC_channels_toggleUsername                                           = 0x50f24105
	CRC_channels_deactivateAllUsernames                                   = 0x0a245dd3
	CRC_channels_toggleForum                                              = 0xa4298b29
	CRC_channels_createForumTopic                                         = 0xf40c0224
	CRC_channels_getForumTopics                                           = 0x0de560d1
	CRC_channels_getForumTopicsByID                                       = 0xb0831eb9
	CRC_channels_editForumTopic                                           = 0xf4dfa185
	CRC_channels_updatePinnedForumTopic                                   = 0x6c2d9026
	CRC_channels_deleteTopicHistory                                       = 0x34435f2d
	CRC_channels_reorderPinnedForumTopics                                 = 0x2950a18f
	CRC_channels_toggleAntiSpam                                           = 0x68f3e4eb
	CRC_channels_reportAntiSpamFalsePositive                              = 0xa850a693
	CRC_channels_toggleParticipantsHidden                                 = 0x6a6e7854
	CRC_channels_clickSponsoredMessage                                    = 0x18afbc93
	CRC_channels_updateColor                                              = 0x621a201f
	CRC_bots_sendCustomRequest                                            = 0xaa2769ed
	CRC_bots_answerWebhookJSONQuery                                       = 0xe6213f4d
	CRC_bots_setBotCommands                                               = 0x0517165a
	CRC_bots_resetBotCommands                                             = 0x3d8de0f9
	CRC_bots_getBotCommands                                               = 0xe34c0dd6
	CRC_bots_setBotMenuButton                                             = 0x4504d54f
	CRC_bots_getBotMenuButton                                             = 0x9c60eb28
	CRC_bots_setBotBroadcastDefaultAdminRights                            = 0x788464e1
	CRC_bots_setBotGroupDefaultAdminRights                                = 0x925ec9ea
	CRC_bots_setBotInfo                                                   = 0x10cf3123
	CRC_bots_getBotInfo                                                   = 0xdcd914fd
	CRC_bots_reorderUsernames                                             = 0x9709b1c2
	CRC_bots_toggleUsername                                               = 0x053ca973
	CRC_bots_canSendMessage                                               = 0x1359f4e6
	CRC_bots_allowSendMessage                                             = 0xf132e3ef
	CRC_bots_invokeWebViewCustomMethod                                    = 0x087fc5e7
	CRC_payments_getPaymentForm                                           = 0x37148dbb
	CRC_payments_getPaymentReceipt                                        = 0x2478d1cc
	CRC_payments_validateRequestedInfo                                    = 0xb6c8f12b
	CRC_payments_sendPaymentForm                                          = 0x2d03522f
	CRC_payments_getSavedInfo                                             = 0x227d824b
	CRC_payments_clearSavedInfo                                           = 0xd83d70c1
	CRC_payments_getBankCardData                                          = 0x2e79d779
	CRC_payments_exportInvoice                                            = 0x0f91b065
	CRC_payments_assignAppStoreTransaction                                = 0x80ed747d
	CRC_payments_assignPlayMarketTransaction                              = 0xdffd50d3
	CRC_payments_canPurchasePremium                                       = 0x9fc19eb6
	CRC_payments_getPremiumGiftCodeOptions                                = 0x2757ba54
	CRC_payments_checkGiftCode                                            = 0x8e51b4c1
	CRC_payments_applyGiftCode                                            = 0xf6e26854
	CRC_payments_getGiveawayInfo                                          = 0xf4239425
	CRC_payments_launchPrepaidGiveaway                                    = 0x5ff58f20
	CRC_stickers_createStickerSet                                         = 0x9021ab67
	CRC_stickers_removeStickerFromSet                                     = 0xf7760f51
	CRC_stickers_changeStickerPosition                                    = 0xffb6d4ca
	CRC_stickers_addStickerToSet                                          = 0x8653febe
	CRC_stickers_setStickerSetThumb                                       = 0xa76a5392
	CRC_stickers_checkShortName                                           = 0x284b3639
	CRC_stickers_suggestShortName                                         = 0x4dafc503
	CRC_stickers_changeSticker                                            = 0xf5537ebc
	CRC_stickers_renameStickerSet                                         = 0x124b1c00
	CRC_stickers_deleteStickerSet                                         = 0x87704394
	CRC_phone_getCallConfig                                               = 0x55451fa9
	CRC_phone_requestCall                                                 = 0x42ff96ed
	CRC_phone_acceptCall                                                  = 0x3bd2b4a0
	CRC_phone_confirmCall                                                 = 0x2efe1722
	CRC_phone_receivedCall                                                = 0x17d54f61
	CRC_phone_discardCall                                                 = 0xb2cbc1c0
	CRC_phone_setCallRating                                               = 0x59ead627
	CRC_phone_saveCallDebug                                               = 0x277add7e
	CRC_phone_sendSignalingData                                           = 0xff7a9383
	CRC_phone_createGroupCall                                             = 0x48cdc6d8
	CRC_phone_joinGroupCall                                               = 0xb132ff7b
	CRC_phone_leaveGroupCall                                              = 0x500377f9
	CRC_phone_inviteToGroupCall                                           = 0x7b393160
	CRC_phone_discardGroupCall                                            = 0x7a777135
	CRC_phone_toggleGroupCallSettings                                     = 0x74bbb43d
	CRC_phone_getGroupCall                                                = 0x041845db
	CRC_phone_getGroupParticipants                                        = 0xc558d8ab
	CRC_phone_checkGroupCall                                              = 0xb59cf977
	CRC_phone_toggleGroupCallRecord                                       = 0xf128c708
	CRC_phone_editGroupCallParticipant                                    = 0xa5273abf
	CRC_phone_editGroupCallTitle                                          = 0x1ca6ac0a
	CRC_phone_getGroupCallJoinAs                                          = 0xef7c213a
	CRC_phone_exportGroupCallInvite                                       = 0xe6aa647f
	CRC_phone_toggleGroupCallStartSubscription                            = 0x219c34e6
	CRC_phone_startScheduledGroupCall                                     = 0x5680e342
	CRC_phone_saveDefaultGroupCallJoinAs                                  = 0x575e1f8c
	CRC_phone_joinGroupCallPresentation                                   = 0xcbea6bc4
	CRC_phone_leaveGroupCallPresentation                                  = 0x1c50d144
	CRC_phone_getGroupCallStreamChannels                                  = 0x1ab21940
	CRC_phone_getGroupCallStreamRtmpUrl                                   = 0xdeb3abbf
	CRC_phone_saveCallLog                                                 = 0x41248786
	CRC_langpack_getLangPack                                              = 0xf2f2330a
	CRC_langpack_getStrings                                               = 0xefea3803
	CRC_langpack_getDifference                                            = 0xcd984aa5
	CRC_langpack_getLanguages                                             = 0x42c6978f
	CRC_langpack_getLanguage                                              = 0x6a596502
	CRC_folders_editPeerFolders                                           = 0x6847d0ab
	CRC_stats_getBroadcastStats                                           = 0xab42441a
	CRC_stats_loadAsyncGraph                                              = 0x621d5fa0
	CRC_stats_getMegagroupStats                                           = 0xdcdf8607
	CRC_stats_getMessagePublicForwards                                    = 0x5630281b
	CRC_stats_getMessageStats                                             = 0xb6e0a3f5
	CRC_chatlists_exportChatlistInvite                                    = 0x8472478e
	CRC_chatlists_deleteExportedInvite                                    = 0x719c5c5e
	CRC_chatlists_editExportedInvite                                      = 0x653db63d
	CRC_chatlists_getExportedInvites                                      = 0xce03da83
	CRC_chatlists_checkChatlistInvite                                     = 0x41c10fff
	CRC_chatlists_joinChatlistInvite                                      = 0xa6b1e39a
	CRC_chatlists_getChatlistUpdates                                      = 0x89419521
	CRC_chatlists_joinChatlistUpdates                                     = 0xe089f8f5
	CRC_chatlists_hideChatlistUpdates                                     = 0x66e486fb
	CRC_chatlists_getLeaveChatlistSuggestions                             = 0xfdbcd714
	CRC_chatlists_leaveChatlist                                           = 0x74fae13a
	CRC_stories_canSendStory                                              = 0xc7dfdfdd
	CRC_stories_sendStory                                                 = 0xbcb73644
	CRC_stories_editStory                                                 = 0xb583ba46
	CRC_stories_deleteStories                                             = 0xae59db5f
	CRC_stories_togglePinned                                              = 0x9a75a1ef
	CRC_stories_getAllStories                                             = 0xeeb0d625
	CRC_stories_getPinnedStories                                          = 0x5821a5dc
	CRC_stories_getStoriesArchive                                         = 0xb4352016
	CRC_stories_getStoriesByID                                            = 0x5774ca74
	CRC_stories_toggleAllStoriesHidden                                    = 0x7c2557c4
	CRC_stories_readStories                                               = 0xa556dac8
	CRC_stories_incrementStoryViews                                       = 0xb2028afb
	CRC_stories_getStoryViewsList                                         = 0x7ed23c57
	CRC_stories_getStoriesViews                                           = 0x28e16cc8
	CRC_stories_exportStoryLink                                           = 0x7b8def20
	CRC_stories_report                                                    = 0x1923fa8c
	CRC_stories_activateStealthMode                                       = 0x57bbd166
	CRC_stories_sendReaction                                              = 0x7fd736b2
	CRC_stories_getPeerStories                                            = 0x2c4ada50
	CRC_stories_getAllReadPeerStories                                     = 0x9b5ae7f9
	CRC_stories_getPeerMaxIDs                                             = 0x535983c3
	CRC_stories_getChatsToSend                                            = 0xa56a8b60
	CRC_stories_togglePeerStoriesHidden                                   = 0xbd0415c4
	CRC_premium_getBoostsList                                             = 0x60f67660
	CRC_premium_getMyBoosts                                               = 0x0be77b4a
	CRC_premium_applyBoost                                                = 0x6b7da746
	CRC_premium_getBoostsStatus                                           = 0x042f1f61
)

// Constructs ResPQ
type TL_resPQ struct {
	Nonce                       [16]byte
	ServerNonce                 [16]byte
	Pq                          string
	ServerPublicKeyFingerprints []int64
}

// Constructs P_Q_inner_data
type TL_p_q_inner_data struct {
	Pq          string
	P           string
	Q           string
	Nonce       [16]byte
	ServerNonce [16]byte
	NewNonce    [32]byte
}

// Constructs P_Q_inner_data
type TL_p_q_inner_data_dc struct {
	Pq          string
	P           string
	Q           string
	Nonce       [16]byte
	ServerNonce [16]byte
	NewNonce    [32]byte
	Dc          int32
}

// Constructs P_Q_inner_data
type TL_p_q_inner_data_temp struct {
	Pq          string
	P           string
	Q           string
	Nonce       [16]byte
	ServerNonce [16]byte
	NewNonce    [32]byte
	ExpiresIn   int32
}

// Constructs P_Q_inner_data
type TL_p_q_inner_data_temp_dc struct {
	Pq          string
	P           string
	Q           string
	Nonce       [16]byte
	ServerNonce [16]byte
	NewNonce    [32]byte
	Dc          int32
	ExpiresIn   int32
}

// Constructs BindAuthKeyInner
type TL_bind_auth_key_inner struct {
	Nonce         int64
	TempAuthKeyID int64
	PermAuthKeyID int64
	TempSessionID int64
	ExpiresAt     int32
}

// Constructs Server_DH_Params
type TL_server_DH_params_fail struct {
	Nonce        [16]byte
	ServerNonce  [16]byte
	NewNonceHash [16]byte
}

// Constructs Server_DH_Params
type TL_server_DH_params_ok struct {
	Nonce           [16]byte
	ServerNonce     [16]byte
	EncryptedAnswer string
}

// Constructs Server_DH_inner_data
type TL_server_DH_inner_data struct {
	Nonce       [16]byte
	ServerNonce [16]byte
	G           int32
	DhPrime     string
	GA          string
	ServerTime  int32
}

// Constructs Client_DH_Inner_Data
type TL_client_DH_inner_data struct {
	Nonce       [16]byte
	ServerNonce [16]byte
	RetryID     int64
	GB          string
}

// Constructs Set_client_DH_params_answer
type TL_dh_gen_ok struct {
	Nonce         [16]byte
	ServerNonce   [16]byte
	NewNonceHash1 [16]byte
}

// Constructs Set_client_DH_params_answer
type TL_dh_gen_retry struct {
	Nonce         [16]byte
	ServerNonce   [16]byte
	NewNonceHash2 [16]byte
}

// Constructs Set_client_DH_params_answer
type TL_dh_gen_fail struct {
	Nonce         [16]byte
	ServerNonce   [16]byte
	NewNonceHash3 [16]byte
}

// Constructs DestroyAuthKeyRes
type TL_destroy_auth_key_ok struct {
}

// Constructs DestroyAuthKeyRes
type TL_destroy_auth_key_none struct {
}

// Constructs DestroyAuthKeyRes
type TL_destroy_auth_key_fail struct {
}

// Returns ResPQ: TL_resPQ
type TL_req_pq struct {
	Nonce [16]byte
}

// Returns ResPQ: TL_resPQ
type TL_req_pq_multi struct {
	Nonce [16]byte
}

// Returns Server_DH_Params: TL_server_DH_params_fail | TL_server_DH_params_ok
type TL_req_DH_params struct {
	Nonce                [16]byte
	ServerNonce          [16]byte
	P                    string
	Q                    string
	PublicKeyFingerprint int64
	EncryptedData        string
}

// Returns Set_client_DH_params_answer: TL_dh_gen_ok | TL_dh_gen_retry | TL_dh_gen_fail
type TL_set_client_DH_params struct {
	Nonce         [16]byte
	ServerNonce   [16]byte
	EncryptedData string
}

// Returns DestroyAuthKeyRes: TL_destroy_auth_key_ok | TL_destroy_auth_key_none | TL_destroy_auth_key_fail
type TL_destroy_auth_key struct {
}

// Constructs MsgsAck
type TL_msgs_ack struct {
	MsgIds []int64
}

// Constructs BadMsgNotification
type TL_bad_msg_notification struct {
	BadMsgID    int64
	BadMsgSeqno int32
	ErrorCode   int32
}

// Constructs BadMsgNotification
type TL_bad_server_salt struct {
	BadMsgID      int64
	BadMsgSeqno   int32
	ErrorCode     int32
	NewServerSalt int64
}

// Constructs MsgsStateReq
type TL_msgs_state_req struct {
	MsgIds []int64
}

// Constructs MsgsStateInfo
type TL_msgs_state_info struct {
	ReqMsgID int64
	Info     string
}

// Constructs MsgsAllInfo
type TL_msgs_all_info struct {
	MsgIds []int64
	Info   string
}

// Constructs MsgDetailedInfo
type TL_msg_detailed_info struct {
	MsgID       int64
	AnswerMsgID int64
	Bytes       int32
	Status      int32
}

// Constructs MsgDetailedInfo
type TL_msg_new_detailed_info struct {
	AnswerMsgID int64
	Bytes       int32
	Status      int32
}

// Constructs MsgResendReq
type TL_msg_resend_req struct {
	MsgIds []int64
}

// Constructs RpcError
type TL_rpc_error struct {
	ErrorCode    int32
	ErrorMessage string
}

// Constructs RpcDropAnswer
type TL_rpc_answer_unknown struct {
}

// Constructs RpcDropAnswer
type TL_rpc_answer_dropped_running struct {
}

// Constructs RpcDropAnswer
type TL_rpc_answer_dropped struct {
	MsgID int64
	SeqNo int32
	Bytes int32
}

// Constructs FutureSalt
type TL_future_salt struct {
	ValidSince int32
	ValidUntil int32
	Salt       int64
}

// Constructs FutureSalts
type TL_future_salts struct {
	ReqMsgID int64
	Now      int32
	Salts    []TL // future_salt:
}

// Constructs Pong
type TL_pong struct {
	MsgID  int64
	PingID int64
}

// Constructs DestroySessionRes
type TL_destroy_session_ok struct {
	SessionID int64
}

// Constructs DestroySessionRes
type TL_destroy_session_none struct {
	SessionID int64
}

// Constructs NewSession
type TL_new_session_created struct {
	FirstMsgID int64
	UniqueID   int64
	ServerSalt int64
}

// Constructs HttpWait
type TL_http_wait struct {
	MaxDelay  int32
	WaitAfter int32
	MaxWait   int32
}

// Constructs IpPort
type TL_ipPort struct {
	Ipv4 int32
	Port int32
}

// Constructs IpPort
type TL_ipPortSecret struct {
	Ipv4   int32
	Port   int32
	Secret []byte
}

// Constructs AccessPointRule
type TL_accessPointRule struct {
	PhonePrefixRules string
	DcID             int32
	Ips              []TL // IpPort: TL_ipPort | TL_ipPortSecret
}

// Constructs help.ConfigSimple
type TL_help_configSimple struct {
	Date    int32
	Expires int32
	Rules   []TL // AccessPointRule: TL_accessPointRule
}

// Constructs TlsClientHello
type TL_tlsClientHello struct {
	Blocks []TL // TlsBlock: TL_tlsBlockString | TL_tlsBlockRandom | TL_tlsBlockZero | TL_tlsBlockDomain | TL_tlsBlockGrease | TL_tlsBlockPublicKey | TL_tlsBlockScope | TL_tlsBlockPermutation
}

// Constructs TlsBlock
type TL_tlsBlockString struct {
	Data string
}

// Constructs TlsBlock
type TL_tlsBlockRandom struct {
	Length int32
}

// Constructs TlsBlock
type TL_tlsBlockZero struct {
	Length int32
}

// Constructs TlsBlock
type TL_tlsBlockDomain struct {
}

// Constructs TlsBlock
type TL_tlsBlockGrease struct {
	Seed int32
}

// Constructs TlsBlock
type TL_tlsBlockPublicKey struct {
}

// Constructs TlsBlock
type TL_tlsBlockScope struct {
	Entries []TL // TlsBlock: TL_tlsBlockString | TL_tlsBlockRandom | TL_tlsBlockZero | TL_tlsBlockDomain | TL_tlsBlockGrease | TL_tlsBlockPublicKey | TL_tlsBlockScope | TL_tlsBlockPermutation
}

// Constructs TlsBlock
type TL_tlsBlockPermutation struct {
	Entries [][]TL // TlsBlock: TL_tlsBlockString | TL_tlsBlockRandom | TL_tlsBlockZero | TL_tlsBlockDomain | TL_tlsBlockGrease | TL_tlsBlockPublicKey | TL_tlsBlockScope | TL_tlsBlockPermutation
}

// Returns RpcDropAnswer: TL_rpc_answer_unknown | TL_rpc_answer_dropped_running | TL_rpc_answer_dropped
type TL_rpc_drop_answer struct {
	ReqMsgID int64
}

// Returns FutureSalts: TL_future_salts
type TL_get_future_salts struct {
	Num int32
}

// Returns Pong: TL_pong
type TL_ping struct {
	PingID int64
}

// Returns Pong: TL_pong
type TL_ping_delay_disconnect struct {
	PingID          int64
	DisconnectDelay int32
}

// Returns DestroySessionRes: TL_destroy_session_ok | TL_destroy_session_none
type TL_destroy_session struct {
	SessionID int64
}

// Constructs Bool
type TL_boolFalse struct {
}

// Constructs Bool
type TL_boolTrue struct {
}

// Constructs True
type TL_true struct {
}

// Constructs Error
type TL_error struct {
	Code int32
	Text string
}

// Constructs Null
type TL_null struct {
}

// Constructs InputPeer
type TL_inputPeerEmpty struct {
}

// Constructs InputPeer
type TL_inputPeerSelf struct {
}

// Constructs InputPeer
type TL_inputPeerChat struct {
	ChatID int64
}

// Constructs InputPeer
type TL_inputPeerUser struct {
	UserID     int64
	AccessHash int64
}

// Constructs InputPeer
type TL_inputPeerChannel struct {
	ChannelID  int64
	AccessHash int64
}

// Constructs InputPeer
type TL_inputPeerUserFromMessage struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID  int32
	UserID int64
}

// Constructs InputPeer
type TL_inputPeerChannelFromMessage struct {
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID     int32
	ChannelID int64
}

// Constructs InputUser
type TL_inputUserEmpty struct {
}

// Constructs InputUser
type TL_inputUserSelf struct {
}

// Constructs InputUser
type TL_inputUser struct {
	UserID     int64
	AccessHash int64
}

// Constructs InputUser
type TL_inputUserFromMessage struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID  int32
	UserID int64
}

// Constructs InputContact
type TL_inputPhoneContact struct {
	ClientID  int64
	Phone     string
	FirstName string
	LastName  string
}

// Constructs InputFile
type TL_inputFile struct {
	ID          int64
	Parts       int32
	Name        string
	Md5Checksum string
}

// Constructs InputFile
type TL_inputFileBig struct {
	ID    int64
	Parts int32
	Name  string
}

// Constructs InputMedia
type TL_inputMediaEmpty struct {
}

// Constructs InputMedia
type TL_inputMediaUploadedPhoto struct {
	Spoiler    bool
	File       TL            // InputFile: TL_inputFile | TL_inputFileBig
	Stickers   []TL          // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	TtlSeconds Option[int32] // (optional)
}

// Constructs InputMedia
type TL_inputMediaPhoto struct {
	Spoiler    bool
	ID         TL            // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
	TtlSeconds Option[int32] // (optional)
}

// Constructs InputMedia
type TL_inputMediaGeoPoint struct {
	GeoPoint TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
}

// Constructs InputMedia
type TL_inputMediaContact struct {
	PhoneNumber string
	FirstName   string
	LastName    string
	Vcard       string
}

// Constructs InputMedia
type TL_inputMediaUploadedDocument struct {
	NosoundVideo bool
	ForceFile    bool
	Spoiler      bool
	File         TL // InputFile: TL_inputFile | TL_inputFileBig
	Thumb        TL // (optional) InputFile: TL_inputFile | TL_inputFileBig
	MimeType     string
	Attributes   []TL          // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
	Stickers     []TL          // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	TtlSeconds   Option[int32] // (optional)
}

// Constructs InputMedia
type TL_inputMediaDocument struct {
	Spoiler    bool
	ID         TL             // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	TtlSeconds Option[int32]  // (optional)
	Query      Option[string] // (optional)
}

// Constructs InputMedia
type TL_inputMediaVenue struct {
	GeoPoint  TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Title     string
	Address   string
	Provider  string
	VenueID   string
	VenueType string
}

// Constructs InputMedia
type TL_inputMediaPhotoExternal struct {
	Spoiler    bool
	Url        string
	TtlSeconds Option[int32] // (optional)
}

// Constructs InputMedia
type TL_inputMediaDocumentExternal struct {
	Spoiler    bool
	Url        string
	TtlSeconds Option[int32] // (optional)
}

// Constructs InputMedia
type TL_inputMediaGame struct {
	ID TL // InputGame: TL_inputGameID | TL_inputGameShortName
}

// Constructs InputMedia
type TL_inputMediaInvoice struct {
	Title         string
	Description   string
	Photo         TL // (optional) InputWebDocument: TL_inputWebDocument
	Invoice       TL // Invoice: TL_invoice
	Payload       []byte
	Provider      string
	ProviderData  TL             // DataJSON: TL_dataJSON
	StartParam    Option[string] // (optional)
	ExtendedMedia TL             // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
}

// Constructs InputMedia
type TL_inputMediaGeoLive struct {
	Stopped                     bool
	GeoPoint                    TL            // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Heading                     Option[int32] // (optional)
	Period                      Option[int32] // (optional)
	ProximityNotificationRadius Option[int32] // (optional)
}

// Constructs InputMedia
type TL_inputMediaPoll struct {
	Poll             TL             // Poll: TL_poll
	CorrectAnswers   [][]byte       // (optional)
	Solution         Option[string] // (optional)
	SolutionEntities []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs InputMedia
type TL_inputMediaDice struct {
	Emoticon string
}

// Constructs InputMedia
type TL_inputMediaStory struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   int32
}

// Constructs InputMedia
type TL_inputMediaWebPage struct {
	ForceLargeMedia bool
	ForceSmallMedia bool
	Optional        bool
	Url             string
}

// Constructs InputChatPhoto
type TL_inputChatPhotoEmpty struct {
}

// Constructs InputChatPhoto
type TL_inputChatUploadedPhoto struct {
	File             TL              // (optional) InputFile: TL_inputFile | TL_inputFileBig
	Video            TL              // (optional) InputFile: TL_inputFile | TL_inputFileBig
	VideoStartTs     Option[float64] // (optional)
	VideoEmojiMarkup TL              // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
}

// Constructs InputChatPhoto
type TL_inputChatPhoto struct {
	ID TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
}

// Constructs InputGeoPoint
type TL_inputGeoPointEmpty struct {
}

// Constructs InputGeoPoint
type TL_inputGeoPoint struct {
	Lat            float64
	Long           float64
	AccuracyRadius Option[int32] // (optional)
}

// Constructs InputPhoto
type TL_inputPhotoEmpty struct {
}

// Constructs InputPhoto
type TL_inputPhoto struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
}

// Constructs InputFileLocation
type TL_inputFileLocation struct {
	VolumeID      int64
	LocalID       int32
	Secret        int64
	FileReference []byte
}

// Constructs InputFileLocation
type TL_inputEncryptedFileLocation struct {
	ID         int64
	AccessHash int64
}

// Constructs InputFileLocation
type TL_inputDocumentFileLocation struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
	ThumbSize     string
}

// Constructs InputFileLocation
type TL_inputSecureFileLocation struct {
	ID         int64
	AccessHash int64
}

// Constructs InputFileLocation
type TL_inputTakeoutFileLocation struct {
}

// Constructs InputFileLocation
type TL_inputPhotoFileLocation struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
	ThumbSize     string
}

// Constructs InputFileLocation
type TL_inputPhotoLegacyFileLocation struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
	VolumeID      int64
	LocalID       int32
	Secret        int64
}

// Constructs InputFileLocation
type TL_inputPeerPhotoFileLocation struct {
	Big     bool
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	PhotoID int64
}

// Constructs InputFileLocation
type TL_inputStickerSetThumb struct {
	Stickerset   TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
	ThumbVersion int32
}

// Constructs InputFileLocation
type TL_inputGroupCallStream struct {
	Call         TL // InputGroupCall: TL_inputGroupCall
	TimeMs       int64
	Scale        int32
	VideoChannel Option[int32] // (optional)
	VideoQuality Option[int32] // (optional)
}

// Constructs Peer
type TL_peerUser struct {
	UserID int64
}

// Constructs Peer
type TL_peerChat struct {
	ChatID int64
}

// Constructs Peer
type TL_peerChannel struct {
	ChannelID int64
}

// Constructs storage.FileType
type TL_storage_fileUnknown struct {
}

// Constructs storage.FileType
type TL_storage_filePartial struct {
}

// Constructs storage.FileType
type TL_storage_fileJpeg struct {
}

// Constructs storage.FileType
type TL_storage_fileGif struct {
}

// Constructs storage.FileType
type TL_storage_filePng struct {
}

// Constructs storage.FileType
type TL_storage_filePdf struct {
}

// Constructs storage.FileType
type TL_storage_fileMp3 struct {
}

// Constructs storage.FileType
type TL_storage_fileMov struct {
}

// Constructs storage.FileType
type TL_storage_fileMp4 struct {
}

// Constructs storage.FileType
type TL_storage_fileWebp struct {
}

// Constructs User
type TL_userEmpty struct {
	ID int64
}

// Constructs User
type TL_user struct {
	Self                 bool
	Contact              bool
	MutualContact        bool
	Deleted              bool
	Bot                  bool
	BotChatHistory       bool
	BotNochats           bool
	Verified             bool
	Restricted           bool
	Min                  bool
	BotInlineGeo         bool
	Support              bool
	Scam                 bool
	ApplyMinPhoto        bool
	Fake                 bool
	BotAttachMenu        bool
	Premium              bool
	AttachMenuEnabled    bool
	BotCanEdit           bool
	CloseFriend          bool
	StoriesHidden        bool
	StoriesUnavailable   bool
	ID                   int64
	AccessHash           Option[int64]  // (optional)
	FirstName            Option[string] // (optional)
	LastName             Option[string] // (optional)
	Username             Option[string] // (optional)
	Phone                Option[string] // (optional)
	Photo                TL             // (optional) UserProfilePhoto: TL_userProfilePhotoEmpty | TL_userProfilePhoto
	Status               TL             // (optional) UserStatus: TL_userStatusEmpty | TL_userStatusOnline | TL_userStatusOffline | TL_userStatusRecently | TL_userStatusLastWeek | TL_userStatusLastMonth
	BotInfoVersion       Option[int32]  // (optional)
	RestrictionReason    []TL           // (optional) RestrictionReason: TL_restrictionReason
	BotInlinePlaceholder Option[string] // (optional)
	LangCode             Option[string] // (optional)
	EmojiStatus          TL             // (optional) EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
	Usernames            []TL           // (optional) Username: TL_username
	StoriesMaxID         Option[int32]  // (optional)
	Color                Option[int32]  // (optional)
	BackgroundEmojiID    Option[int64]  // (optional)
}

// Constructs UserProfilePhoto
type TL_userProfilePhotoEmpty struct {
}

// Constructs UserProfilePhoto
type TL_userProfilePhoto struct {
	HasVideo      bool
	Personal      bool
	PhotoID       int64
	StrippedThumb []byte // (optional)
	DcID          int32
}

// Constructs UserStatus
type TL_userStatusEmpty struct {
}

// Constructs UserStatus
type TL_userStatusOnline struct {
	Expires int32
}

// Constructs UserStatus
type TL_userStatusOffline struct {
	WasOnline int32
}

// Constructs UserStatus
type TL_userStatusRecently struct {
}

// Constructs UserStatus
type TL_userStatusLastWeek struct {
}

// Constructs UserStatus
type TL_userStatusLastMonth struct {
}

// Constructs Chat
type TL_chatEmpty struct {
	ID int64
}

// Constructs Chat
type TL_chat struct {
	Creator             bool
	Left                bool
	Deactivated         bool
	CallActive          bool
	CallNotEmpty        bool
	Noforwards          bool
	ID                  int64
	Title               string
	Photo               TL // ChatPhoto: TL_chatPhotoEmpty | TL_chatPhoto
	ParticipantsCount   int32
	Date                int32
	Version             int32
	MigratedTo          TL // (optional) InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	AdminRights         TL // (optional) ChatAdminRights: TL_chatAdminRights
	DefaultBannedRights TL // (optional) ChatBannedRights: TL_chatBannedRights
}

// Constructs Chat
type TL_chatForbidden struct {
	ID    int64
	Title string
}

// Constructs Chat
type TL_channel struct {
	Creator             bool
	Left                bool
	Broadcast           bool
	Verified            bool
	Megagroup           bool
	Restricted          bool
	Signatures          bool
	Min                 bool
	Scam                bool
	HasLink             bool
	HasGeo              bool
	SlowmodeEnabled     bool
	CallActive          bool
	CallNotEmpty        bool
	Fake                bool
	Gigagroup           bool
	Noforwards          bool
	JoinToSend          bool
	JoinRequest         bool
	Forum               bool
	StoriesHidden       bool
	StoriesHiddenMin    bool
	StoriesUnavailable  bool
	ID                  int64
	AccessHash          Option[int64] // (optional)
	Title               string
	Username            Option[string] // (optional)
	Photo               TL             // ChatPhoto: TL_chatPhotoEmpty | TL_chatPhoto
	Date                int32
	RestrictionReason   []TL          // (optional) RestrictionReason: TL_restrictionReason
	AdminRights         TL            // (optional) ChatAdminRights: TL_chatAdminRights
	BannedRights        TL            // (optional) ChatBannedRights: TL_chatBannedRights
	DefaultBannedRights TL            // (optional) ChatBannedRights: TL_chatBannedRights
	ParticipantsCount   Option[int32] // (optional)
	Usernames           []TL          // (optional) Username: TL_username
	StoriesMaxID        Option[int32] // (optional)
	Color               Option[int32] // (optional)
	BackgroundEmojiID   Option[int64] // (optional)
}

// Constructs Chat
type TL_channelForbidden struct {
	Broadcast  bool
	Megagroup  bool
	ID         int64
	AccessHash int64
	Title      string
	UntilDate  Option[int32] // (optional)
}

// Constructs ChatFull
type TL_chatFull struct {
	CanSetUsername         bool
	HasScheduled           bool
	TranslationsDisabled   bool
	ID                     int64
	About                  string
	Participants           TL             // ChatParticipants: TL_chatParticipantsForbidden | TL_chatParticipants
	ChatPhoto              TL             // (optional) Photo: TL_photoEmpty | TL_photo
	NotifySettings         TL             // PeerNotifySettings: TL_peerNotifySettings
	ExportedInvite         TL             // (optional) ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	BotInfo                []TL           // (optional) BotInfo: TL_botInfo
	PinnedMsgID            Option[int32]  // (optional)
	FolderID               Option[int32]  // (optional)
	Call                   TL             // (optional) InputGroupCall: TL_inputGroupCall
	TtlPeriod              Option[int32]  // (optional)
	GroupcallDefaultJoinAs TL             // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ThemeEmoticon          Option[string] // (optional)
	RequestsPending        Option[int32]  // (optional)
	RecentRequesters       []int64        // (optional)
	AvailableReactions     TL             // (optional) ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
}

// Constructs ChatFull
type TL_channelFull struct {
	CanViewParticipants    bool
	CanSetUsername         bool
	CanSetStickers         bool
	HiddenPrehistory       bool
	CanSetLocation         bool
	HasScheduled           bool
	CanViewStats           bool
	Blocked                bool
	CanDeleteChannel       bool
	Antispam               bool
	ParticipantsHidden     bool
	TranslationsDisabled   bool
	StoriesPinnedAvailable bool
	ID                     int64
	About                  string
	ParticipantsCount      Option[int32] // (optional)
	AdminsCount            Option[int32] // (optional)
	KickedCount            Option[int32] // (optional)
	BannedCount            Option[int32] // (optional)
	OnlineCount            Option[int32] // (optional)
	ReadInboxMaxID         int32
	ReadOutboxMaxID        int32
	UnreadCount            int32
	ChatPhoto              TL            // Photo: TL_photoEmpty | TL_photo
	NotifySettings         TL            // PeerNotifySettings: TL_peerNotifySettings
	ExportedInvite         TL            // (optional) ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	BotInfo                []TL          // BotInfo: TL_botInfo
	MigratedFromChatID     Option[int64] // (optional)
	MigratedFromMaxID      Option[int32] // (optional)
	PinnedMsgID            Option[int32] // (optional)
	Stickerset             TL            // (optional) StickerSet: TL_stickerSet
	AvailableMinID         Option[int32] // (optional)
	FolderID               Option[int32] // (optional)
	LinkedChatID           Option[int64] // (optional)
	Location               TL            // (optional) ChannelLocation: TL_channelLocationEmpty | TL_channelLocation
	SlowmodeSeconds        Option[int32] // (optional)
	SlowmodeNextSendDate   Option[int32] // (optional)
	StatsDc                Option[int32] // (optional)
	Pts                    int32
	Call                   TL             // (optional) InputGroupCall: TL_inputGroupCall
	TtlPeriod              Option[int32]  // (optional)
	PendingSuggestions     []string       // (optional)
	GroupcallDefaultJoinAs TL             // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ThemeEmoticon          Option[string] // (optional)
	RequestsPending        Option[int32]  // (optional)
	RecentRequesters       []int64        // (optional)
	DefaultSendAs          TL             // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	AvailableReactions     TL             // (optional) ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
	Stories                TL             // (optional) PeerStories: TL_peerStories
}

// Constructs ChatParticipant
type TL_chatParticipant struct {
	UserID    int64
	InviterID int64
	Date      int32
}

// Constructs ChatParticipant
type TL_chatParticipantCreator struct {
	UserID int64
}

// Constructs ChatParticipant
type TL_chatParticipantAdmin struct {
	UserID    int64
	InviterID int64
	Date      int32
}

// Constructs ChatParticipants
type TL_chatParticipantsForbidden struct {
	ChatID          int64
	SelfParticipant TL // (optional) ChatParticipant: TL_chatParticipant | TL_chatParticipantCreator | TL_chatParticipantAdmin
}

// Constructs ChatParticipants
type TL_chatParticipants struct {
	ChatID       int64
	Participants []TL // ChatParticipant: TL_chatParticipant | TL_chatParticipantCreator | TL_chatParticipantAdmin
	Version      int32
}

// Constructs ChatPhoto
type TL_chatPhotoEmpty struct {
}

// Constructs ChatPhoto
type TL_chatPhoto struct {
	HasVideo      bool
	PhotoID       int64
	StrippedThumb []byte // (optional)
	DcID          int32
}

// Constructs Message
type TL_messageEmpty struct {
	ID     int32
	PeerID TL // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs Message
type TL_message struct {
	Out               bool
	Mentioned         bool
	MediaUnread       bool
	Silent            bool
	Post              bool
	FromScheduled     bool
	Legacy            bool
	EditHide          bool
	Pinned            bool
	Noforwards        bool
	InvertMedia       bool
	ID                int32
	FromID            TL            // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	PeerID            TL            // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	FwdFrom           TL            // (optional) MessageFwdHeader: TL_messageFwdHeader
	ViaBotID          Option[int64] // (optional)
	ReplyTo           TL            // (optional) MessageReplyHeader: TL_messageReplyHeader | TL_messageReplyStoryHeader
	Date              int32
	Message           string
	Media             TL             // (optional) MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway
	ReplyMarkup       TL             // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities          []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Views             Option[int32]  // (optional)
	Forwards          Option[int32]  // (optional)
	Replies           TL             // (optional) MessageReplies: TL_messageReplies
	EditDate          Option[int32]  // (optional)
	PostAuthor        Option[string] // (optional)
	GroupedID         Option[int64]  // (optional)
	Reactions         TL             // (optional) MessageReactions: TL_messageReactions
	RestrictionReason []TL           // (optional) RestrictionReason: TL_restrictionReason
	TtlPeriod         Option[int32]  // (optional)
}

// Constructs Message
type TL_messageService struct {
	Out         bool
	Mentioned   bool
	MediaUnread bool
	Silent      bool
	Post        bool
	Legacy      bool
	ID          int32
	FromID      TL // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	PeerID      TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ReplyTo     TL // (optional) MessageReplyHeader: TL_messageReplyHeader | TL_messageReplyStoryHeader
	Date        int32
	Action      TL            // MessageAction: TL_messageActionEmpty | TL_messageActionChatCreate | TL_messageActionChatEditTitle | TL_messageActionChatEditPhoto | TL_messageActionChatDeletePhoto | TL_messageActionChatAddUser | TL_messageActionChatDeleteUser | TL_messageActionChatJoinedByLink | TL_messageActionChannelCreate | TL_messageActionChatMigrateTo | TL_messageActionChannelMigrateFrom | TL_messageActionPinMessage | TL_messageActionHistoryClear | TL_messageActionGameScore | TL_messageActionPaymentSentMe | TL_messageActionPaymentSent | TL_messageActionPhoneCall | TL_messageActionScreenshotTaken | TL_messageActionCustomAction | TL_messageActionBotAllowed | TL_messageActionSecureValuesSentMe | TL_messageActionSecureValuesSent | TL_messageActionContactSignUp | TL_messageActionGeoProximityReached | TL_messageActionGroupCall | TL_messageActionInviteToGroupCall | TL_messageActionSetMessagesTTL | TL_messageActionGroupCallScheduled | TL_messageActionSetChatTheme | TL_messageActionChatJoinedByRequest | TL_messageActionWebViewDataSentMe | TL_messageActionWebViewDataSent | TL_messageActionGiftPremium | TL_messageActionTopicCreate | TL_messageActionTopicEdit | TL_messageActionSuggestProfilePhoto | TL_messageActionRequestedPeer | TL_messageActionSetChatWallPaper | TL_messageActionSetSameChatWallPaper | TL_messageActionGiftCode | TL_messageActionGiveawayLaunch
	TtlPeriod   Option[int32] // (optional)
}

// Constructs MessageMedia
type TL_messageMediaEmpty struct {
}

// Constructs MessageMedia
type TL_messageMediaPhoto struct {
	Spoiler    bool
	Photo      TL            // (optional) Photo: TL_photoEmpty | TL_photo
	TtlSeconds Option[int32] // (optional)
}

// Constructs MessageMedia
type TL_messageMediaGeo struct {
	Geo TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
}

// Constructs MessageMedia
type TL_messageMediaContact struct {
	PhoneNumber string
	FirstName   string
	LastName    string
	Vcard       string
	UserID      int64
}

// Constructs MessageMedia
type TL_messageMediaUnsupported struct {
}

// Constructs MessageMedia
type TL_messageMediaDocument struct {
	Nopremium   bool
	Spoiler     bool
	Document    TL            // (optional) Document: TL_documentEmpty | TL_document
	AltDocument TL            // (optional) Document: TL_documentEmpty | TL_document
	TtlSeconds  Option[int32] // (optional)
}

// Constructs MessageMedia
type TL_messageMediaWebPage struct {
	ForceLargeMedia bool
	ForceSmallMedia bool
	Manual          bool
	Safe            bool
	Webpage         TL // WebPage: TL_webPageEmpty | TL_webPagePending | TL_webPage | TL_webPageNotModified
}

// Constructs MessageMedia
type TL_messageMediaVenue struct {
	Geo       TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Title     string
	Address   string
	Provider  string
	VenueID   string
	VenueType string
}

// Constructs MessageMedia
type TL_messageMediaGame struct {
	Game TL // Game: TL_game
}

// Constructs MessageMedia
type TL_messageMediaInvoice struct {
	ShippingAddressRequested bool
	Test                     bool
	Title                    string
	Description              string
	Photo                    TL            // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	ReceiptMsgID             Option[int32] // (optional)
	Currency                 string
	TotalAmount              int64
	StartParam               string
	ExtendedMedia            TL // (optional) MessageExtendedMedia: TL_messageExtendedMediaPreview | TL_messageExtendedMedia
}

// Constructs MessageMedia
type TL_messageMediaGeoLive struct {
	Geo                         TL            // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Heading                     Option[int32] // (optional)
	Period                      int32
	ProximityNotificationRadius Option[int32] // (optional)
}

// Constructs MessageMedia
type TL_messageMediaPoll struct {
	Poll    TL // Poll: TL_poll
	Results TL // PollResults: TL_pollResults
}

// Constructs MessageMedia
type TL_messageMediaDice struct {
	Value    int32
	Emoticon string
}

// Constructs MessageMedia
type TL_messageMediaStory struct {
	ViaMention bool
	Peer       TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ID         int32
	Story      TL // (optional) StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs MessageMedia
type TL_messageMediaGiveaway struct {
	OnlyNewSubscribers bool
	Channels           []int64
	CountriesIso2      []string // (optional)
	Quantity           int32
	Months             int32
	UntilDate          int32
}

// Constructs MessageAction
type TL_messageActionEmpty struct {
}

// Constructs MessageAction
type TL_messageActionChatCreate struct {
	Title string
	Users []int64
}

// Constructs MessageAction
type TL_messageActionChatEditTitle struct {
	Title string
}

// Constructs MessageAction
type TL_messageActionChatEditPhoto struct {
	Photo TL // Photo: TL_photoEmpty | TL_photo
}

// Constructs MessageAction
type TL_messageActionChatDeletePhoto struct {
}

// Constructs MessageAction
type TL_messageActionChatAddUser struct {
	Users []int64
}

// Constructs MessageAction
type TL_messageActionChatDeleteUser struct {
	UserID int64
}

// Constructs MessageAction
type TL_messageActionChatJoinedByLink struct {
	InviterID int64
}

// Constructs MessageAction
type TL_messageActionChannelCreate struct {
	Title string
}

// Constructs MessageAction
type TL_messageActionChatMigrateTo struct {
	ChannelID int64
}

// Constructs MessageAction
type TL_messageActionChannelMigrateFrom struct {
	Title  string
	ChatID int64
}

// Constructs MessageAction
type TL_messageActionPinMessage struct {
}

// Constructs MessageAction
type TL_messageActionHistoryClear struct {
}

// Constructs MessageAction
type TL_messageActionGameScore struct {
	GameID int64
	Score  int32
}

// Constructs MessageAction
type TL_messageActionPaymentSentMe struct {
	RecurringInit    bool
	RecurringUsed    bool
	Currency         string
	TotalAmount      int64
	Payload          []byte
	Info             TL             // (optional) PaymentRequestedInfo: TL_paymentRequestedInfo
	ShippingOptionID Option[string] // (optional)
	Charge           TL             // PaymentCharge: TL_paymentCharge
}

// Constructs MessageAction
type TL_messageActionPaymentSent struct {
	RecurringInit bool
	RecurringUsed bool
	Currency      string
	TotalAmount   int64
	InvoiceSlug   Option[string] // (optional)
}

// Constructs MessageAction
type TL_messageActionPhoneCall struct {
	Video    bool
	CallID   int64
	Reason   TL            // (optional) PhoneCallDiscardReason: TL_phoneCallDiscardReasonMissed | TL_phoneCallDiscardReasonDisconnect | TL_phoneCallDiscardReasonHangup | TL_phoneCallDiscardReasonBusy
	Duration Option[int32] // (optional)
}

// Constructs MessageAction
type TL_messageActionScreenshotTaken struct {
}

// Constructs MessageAction
type TL_messageActionCustomAction struct {
	Message string
}

// Constructs MessageAction
type TL_messageActionBotAllowed struct {
	AttachMenu  bool
	FromRequest bool
	Domain      Option[string] // (optional)
	App         TL             // (optional) BotApp: TL_botAppNotModified | TL_botApp
}

// Constructs MessageAction
type TL_messageActionSecureValuesSentMe struct {
	Values      []TL // SecureValue: TL_secureValue
	Credentials TL   // SecureCredentialsEncrypted: TL_secureCredentialsEncrypted
}

// Constructs MessageAction
type TL_messageActionSecureValuesSent struct {
	Types []TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
}

// Constructs MessageAction
type TL_messageActionContactSignUp struct {
}

// Constructs MessageAction
type TL_messageActionGeoProximityReached struct {
	FromID   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ToID     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Distance int32
}

// Constructs MessageAction
type TL_messageActionGroupCall struct {
	Call     TL            // InputGroupCall: TL_inputGroupCall
	Duration Option[int32] // (optional)
}

// Constructs MessageAction
type TL_messageActionInviteToGroupCall struct {
	Call  TL // InputGroupCall: TL_inputGroupCall
	Users []int64
}

// Constructs MessageAction
type TL_messageActionSetMessagesTTL struct {
	Period          int32
	AutoSettingFrom Option[int64] // (optional)
}

// Constructs MessageAction
type TL_messageActionGroupCallScheduled struct {
	Call         TL // InputGroupCall: TL_inputGroupCall
	ScheduleDate int32
}

// Constructs MessageAction
type TL_messageActionSetChatTheme struct {
	Emoticon string
}

// Constructs MessageAction
type TL_messageActionChatJoinedByRequest struct {
}

// Constructs MessageAction
type TL_messageActionWebViewDataSentMe struct {
	Text string
	Data string
}

// Constructs MessageAction
type TL_messageActionWebViewDataSent struct {
	Text string
}

// Constructs MessageAction
type TL_messageActionGiftPremium struct {
	Currency       string
	Amount         int64
	Months         int32
	CryptoCurrency Option[string] // (optional)
	CryptoAmount   Option[int64]  // (optional)
}

// Constructs MessageAction
type TL_messageActionTopicCreate struct {
	Title       string
	IconColor   int32
	IconEmojiID Option[int64] // (optional)
}

// Constructs MessageAction
type TL_messageActionTopicEdit struct {
	Title       Option[string] // (optional)
	IconEmojiID Option[int64]  // (optional)
	Closed      Option[bool]   // (optional)
	Hidden      Option[bool]   // (optional)
}

// Constructs MessageAction
type TL_messageActionSuggestProfilePhoto struct {
	Photo TL // Photo: TL_photoEmpty | TL_photo
}

// Constructs MessageAction
type TL_messageActionRequestedPeer struct {
	ButtonID int32
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs MessageAction
type TL_messageActionSetChatWallPaper struct {
	Wallpaper TL // WallPaper: TL_wallPaper | TL_wallPaperNoFile
}

// Constructs MessageAction
type TL_messageActionSetSameChatWallPaper struct {
	Wallpaper TL // WallPaper: TL_wallPaper | TL_wallPaperNoFile
}

// Constructs MessageAction
type TL_messageActionGiftCode struct {
	ViaGiveaway bool
	Unclaimed   bool
	BoostPeer   TL // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Months      int32
	Slug        string
}

// Constructs MessageAction
type TL_messageActionGiveawayLaunch struct {
}

// Constructs Dialog
type TL_dialog struct {
	Pinned               bool
	UnreadMark           bool
	Peer                 TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TopMessage           int32
	ReadInboxMaxID       int32
	ReadOutboxMaxID      int32
	UnreadCount          int32
	UnreadMentionsCount  int32
	UnreadReactionsCount int32
	NotifySettings       TL            // PeerNotifySettings: TL_peerNotifySettings
	Pts                  Option[int32] // (optional)
	Draft                TL            // (optional) DraftMessage: TL_draftMessageEmpty | TL_draftMessage
	FolderID             Option[int32] // (optional)
	TtlPeriod            Option[int32] // (optional)
}

// Constructs Dialog
type TL_dialogFolder struct {
	Pinned                     bool
	Folder                     TL // Folder: TL_folder
	Peer                       TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TopMessage                 int32
	UnreadMutedPeersCount      int32
	UnreadUnmutedPeersCount    int32
	UnreadMutedMessagesCount   int32
	UnreadUnmutedMessagesCount int32
}

// Constructs Photo
type TL_photoEmpty struct {
	ID int64
}

// Constructs Photo
type TL_photo struct {
	HasStickers   bool
	ID            int64
	AccessHash    int64
	FileReference []byte
	Date          int32
	Sizes         []TL // PhotoSize: TL_photoSizeEmpty | TL_photoSize | TL_photoCachedSize | TL_photoStrippedSize | TL_photoSizeProgressive | TL_photoPathSize
	VideoSizes    []TL // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
	DcID          int32
}

// Constructs PhotoSize
type TL_photoSizeEmpty struct {
	Type string
}

// Constructs PhotoSize
type TL_photoSize struct {
	Type string
	W    int32
	H    int32
	Size int32
}

// Constructs PhotoSize
type TL_photoCachedSize struct {
	Type  string
	W     int32
	H     int32
	Bytes []byte
}

// Constructs PhotoSize
type TL_photoStrippedSize struct {
	Type  string
	Bytes []byte
}

// Constructs PhotoSize
type TL_photoSizeProgressive struct {
	Type  string
	W     int32
	H     int32
	Sizes []int32
}

// Constructs PhotoSize
type TL_photoPathSize struct {
	Type  string
	Bytes []byte
}

// Constructs GeoPoint
type TL_geoPointEmpty struct {
}

// Constructs GeoPoint
type TL_geoPoint struct {
	Long           float64
	Lat            float64
	AccessHash     int64
	AccuracyRadius Option[int32] // (optional)
}

// Constructs auth.SentCode
type TL_auth_sentCode struct {
	Type          TL // auth.SentCodeType: TL_auth_sentCodeTypeApp | TL_auth_sentCodeTypeSms | TL_auth_sentCodeTypeCall | TL_auth_sentCodeTypeFlashCall | TL_auth_sentCodeTypeMissedCall | TL_auth_sentCodeTypeEmailCode | TL_auth_sentCodeTypeSetUpEmailRequired | TL_auth_sentCodeTypeFragmentSms | TL_auth_sentCodeTypeFirebaseSms
	PhoneCodeHash string
	NextType      TL            // (optional) auth.CodeType: TL_auth_codeTypeSms | TL_auth_codeTypeCall | TL_auth_codeTypeFlashCall | TL_auth_codeTypeMissedCall | TL_auth_codeTypeFragmentSms
	Timeout       Option[int32] // (optional)
}

// Constructs auth.SentCode
type TL_auth_sentCodeSuccess struct {
	Authorization TL // auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
}

// Constructs auth.Authorization
type TL_auth_authorization struct {
	SetupPasswordRequired bool
	OtherwiseReloginDays  Option[int32] // (optional)
	TmpSessions           Option[int32] // (optional)
	FutureAuthToken       []byte        // (optional)
	User                  TL            // User: TL_userEmpty | TL_user
}

// Constructs auth.Authorization
type TL_auth_authorizationSignUpRequired struct {
	TermsOfService TL // (optional) help.TermsOfService: TL_help_termsOfService
}

// Constructs auth.ExportedAuthorization
type TL_auth_exportedAuthorization struct {
	ID    int64
	Bytes []byte
}

// Constructs InputNotifyPeer
type TL_inputNotifyPeer struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs InputNotifyPeer
type TL_inputNotifyUsers struct {
}

// Constructs InputNotifyPeer
type TL_inputNotifyChats struct {
}

// Constructs InputNotifyPeer
type TL_inputNotifyBroadcasts struct {
}

// Constructs InputNotifyPeer
type TL_inputNotifyForumTopic struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID int32
}

// Constructs InputPeerNotifySettings
type TL_inputPeerNotifySettings struct {
	ShowPreviews      Option[bool]  // (optional)
	Silent            Option[bool]  // (optional)
	MuteUntil         Option[int32] // (optional)
	Sound             TL            // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	StoriesMuted      Option[bool]  // (optional)
	StoriesHideSender Option[bool]  // (optional)
	StoriesSound      TL            // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
}

// Constructs PeerNotifySettings
type TL_peerNotifySettings struct {
	ShowPreviews        Option[bool]  // (optional)
	Silent              Option[bool]  // (optional)
	MuteUntil           Option[int32] // (optional)
	IosSound            TL            // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	AndroidSound        TL            // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	OtherSound          TL            // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	StoriesMuted        Option[bool]  // (optional)
	StoriesHideSender   Option[bool]  // (optional)
	StoriesIosSound     TL            // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	StoriesAndroidSound TL            // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	StoriesOtherSound   TL            // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
}

// Constructs PeerSettings
type TL_peerSettings struct {
	ReportSpam            bool
	AddContact            bool
	BlockContact          bool
	ShareContact          bool
	NeedContactsException bool
	ReportGeo             bool
	Autoarchived          bool
	InviteMembers         bool
	RequestChatBroadcast  bool
	GeoDistance           Option[int32]  // (optional)
	RequestChatTitle      Option[string] // (optional)
	RequestChatDate       Option[int32]  // (optional)
}

// Constructs WallPaper
type TL_wallPaper struct {
	ID         int64
	Creator    bool
	Default    bool
	Pattern    bool
	Dark       bool
	AccessHash int64
	Slug       string
	Document   TL // Document: TL_documentEmpty | TL_document
	Settings   TL // (optional) WallPaperSettings: TL_wallPaperSettings
}

// Constructs WallPaper
type TL_wallPaperNoFile struct {
	ID       int64
	Default  bool
	Dark     bool
	Settings TL // (optional) WallPaperSettings: TL_wallPaperSettings
}

// Constructs ReportReason
type TL_inputReportReasonSpam struct {
}

// Constructs ReportReason
type TL_inputReportReasonViolence struct {
}

// Constructs ReportReason
type TL_inputReportReasonPornography struct {
}

// Constructs ReportReason
type TL_inputReportReasonChildAbuse struct {
}

// Constructs ReportReason
type TL_inputReportReasonOther struct {
}

// Constructs ReportReason
type TL_inputReportReasonCopyright struct {
}

// Constructs ReportReason
type TL_inputReportReasonGeoIrrelevant struct {
}

// Constructs ReportReason
type TL_inputReportReasonFake struct {
}

// Constructs ReportReason
type TL_inputReportReasonIllegalDrugs struct {
}

// Constructs ReportReason
type TL_inputReportReasonPersonalDetails struct {
}

// Constructs UserFull
type TL_userFull struct {
	Blocked                 bool
	PhoneCallsAvailable     bool
	PhoneCallsPrivate       bool
	CanPinMessage           bool
	HasScheduled            bool
	VideoCallsAvailable     bool
	VoiceMessagesForbidden  bool
	TranslationsDisabled    bool
	StoriesPinnedAvailable  bool
	BlockedMyStoriesFrom    bool
	ID                      int64
	About                   Option[string] // (optional)
	Settings                TL             // PeerSettings: TL_peerSettings
	PersonalPhoto           TL             // (optional) Photo: TL_photoEmpty | TL_photo
	ProfilePhoto            TL             // (optional) Photo: TL_photoEmpty | TL_photo
	FallbackPhoto           TL             // (optional) Photo: TL_photoEmpty | TL_photo
	NotifySettings          TL             // PeerNotifySettings: TL_peerNotifySettings
	BotInfo                 TL             // (optional) BotInfo: TL_botInfo
	PinnedMsgID             Option[int32]  // (optional)
	CommonChatsCount        int32
	FolderID                Option[int32]  // (optional)
	TtlPeriod               Option[int32]  // (optional)
	ThemeEmoticon           Option[string] // (optional)
	PrivateForwardName      Option[string] // (optional)
	BotGroupAdminRights     TL             // (optional) ChatAdminRights: TL_chatAdminRights
	BotBroadcastAdminRights TL             // (optional) ChatAdminRights: TL_chatAdminRights
	PremiumGifts            []TL           // (optional) PremiumGiftOption: TL_premiumGiftOption
	Wallpaper               TL             // (optional) WallPaper: TL_wallPaper | TL_wallPaperNoFile
	Stories                 TL             // (optional) PeerStories: TL_peerStories
}

// Constructs Contact
type TL_contact struct {
	UserID int64
	Mutual bool
}

// Constructs ImportedContact
type TL_importedContact struct {
	UserID   int64
	ClientID int64
}

// Constructs ContactStatus
type TL_contactStatus struct {
	UserID int64
	Status TL // UserStatus: TL_userStatusEmpty | TL_userStatusOnline | TL_userStatusOffline | TL_userStatusRecently | TL_userStatusLastWeek | TL_userStatusLastMonth
}

// Constructs contacts.Contacts
type TL_contacts_contactsNotModified struct {
}

// Constructs contacts.Contacts
type TL_contacts_contacts struct {
	Contacts   []TL // Contact: TL_contact
	SavedCount int32
	Users      []TL // User: TL_userEmpty | TL_user
}

// Constructs contacts.ImportedContacts
type TL_contacts_importedContacts struct {
	Imported       []TL // ImportedContact: TL_importedContact
	PopularInvites []TL // PopularContact: TL_popularContact
	RetryContacts  []int64
	Users          []TL // User: TL_userEmpty | TL_user
}

// Constructs contacts.Blocked
type TL_contacts_blocked struct {
	Blocked []TL // PeerBlocked: TL_peerBlocked
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs contacts.Blocked
type TL_contacts_blockedSlice struct {
	Count   int32
	Blocked []TL // PeerBlocked: TL_peerBlocked
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.Dialogs
type TL_messages_dialogs struct {
	Dialogs  []TL // Dialog: TL_dialog | TL_dialogFolder
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.Dialogs
type TL_messages_dialogsSlice struct {
	Count    int32
	Dialogs  []TL // Dialog: TL_dialog | TL_dialogFolder
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.Dialogs
type TL_messages_dialogsNotModified struct {
	Count int32
}

// Constructs messages.Messages
type TL_messages_messages struct {
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.Messages
type TL_messages_messagesSlice struct {
	Inexact        bool
	Count          int32
	NextRate       Option[int32] // (optional)
	OffsetIdOffset Option[int32] // (optional)
	Messages       []TL          // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats          []TL          // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users          []TL          // User: TL_userEmpty | TL_user
}

// Constructs messages.Messages
type TL_messages_channelMessages struct {
	Inexact        bool
	Pts            int32
	Count          int32
	OffsetIdOffset Option[int32] // (optional)
	Messages       []TL          // Message: TL_messageEmpty | TL_message | TL_messageService
	Topics         []TL          // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
	Chats          []TL          // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users          []TL          // User: TL_userEmpty | TL_user
}

// Constructs messages.Messages
type TL_messages_messagesNotModified struct {
	Count int32
}

// Constructs messages.Chats
type TL_messages_chats struct {
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
}

// Constructs messages.Chats
type TL_messages_chatsSlice struct {
	Count int32
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
}

// Constructs messages.ChatFull
type TL_messages_chatFull struct {
	FullChat TL   // ChatFull: TL_chatFull | TL_channelFull
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.AffectedHistory
type TL_messages_affectedHistory struct {
	Pts      int32
	PtsCount int32
	Offset   int32
}

// Constructs MessagesFilter
type TL_inputMessagesFilterEmpty struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterPhotos struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterVideo struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterPhotoVideo struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterDocument struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterUrl struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterGif struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterVoice struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterMusic struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterChatPhotos struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterPhoneCalls struct {
	Missed bool
}

// Constructs MessagesFilter
type TL_inputMessagesFilterRoundVoice struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterRoundVideo struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterMyMentions struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterGeo struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterContacts struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterPinned struct {
}

// Constructs Update
type TL_updateNewMessage struct {
	Message  TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Pts      int32
	PtsCount int32
}

// Constructs Update
type TL_updateMessageID struct {
	ID       int32
	RandomID int64
}

// Constructs Update
type TL_updateDeleteMessages struct {
	Messages []int32
	Pts      int32
	PtsCount int32
}

// Constructs Update
type TL_updateUserTyping struct {
	UserID int64
	Action TL // SendMessageAction: TL_sendMessageTypingAction | TL_sendMessageCancelAction | TL_sendMessageRecordVideoAction | TL_sendMessageUploadVideoAction | TL_sendMessageRecordAudioAction | TL_sendMessageUploadAudioAction | TL_sendMessageUploadPhotoAction | TL_sendMessageUploadDocumentAction | TL_sendMessageGeoLocationAction | TL_sendMessageChooseContactAction | TL_sendMessageGamePlayAction | TL_sendMessageRecordRoundAction | TL_sendMessageUploadRoundAction | TL_speakingInGroupCallAction | TL_sendMessageHistoryImportAction | TL_sendMessageChooseStickerAction | TL_sendMessageEmojiInteraction | TL_sendMessageEmojiInteractionSeen
}

// Constructs Update
type TL_updateChatUserTyping struct {
	ChatID int64
	FromID TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Action TL // SendMessageAction: TL_sendMessageTypingAction | TL_sendMessageCancelAction | TL_sendMessageRecordVideoAction | TL_sendMessageUploadVideoAction | TL_sendMessageRecordAudioAction | TL_sendMessageUploadAudioAction | TL_sendMessageUploadPhotoAction | TL_sendMessageUploadDocumentAction | TL_sendMessageGeoLocationAction | TL_sendMessageChooseContactAction | TL_sendMessageGamePlayAction | TL_sendMessageRecordRoundAction | TL_sendMessageUploadRoundAction | TL_speakingInGroupCallAction | TL_sendMessageHistoryImportAction | TL_sendMessageChooseStickerAction | TL_sendMessageEmojiInteraction | TL_sendMessageEmojiInteractionSeen
}

// Constructs Update
type TL_updateChatParticipants struct {
	Participants TL // ChatParticipants: TL_chatParticipantsForbidden | TL_chatParticipants
}

// Constructs Update
type TL_updateUserStatus struct {
	UserID int64
	Status TL // UserStatus: TL_userStatusEmpty | TL_userStatusOnline | TL_userStatusOffline | TL_userStatusRecently | TL_userStatusLastWeek | TL_userStatusLastMonth
}

// Constructs Update
type TL_updateUserName struct {
	UserID    int64
	FirstName string
	LastName  string
	Usernames []TL // Username: TL_username
}

// Constructs Update
type TL_updateNewAuthorization struct {
	Unconfirmed bool
	Hash        int64
	Date        Option[int32]  // (optional)
	Device      Option[string] // (optional)
	Location    Option[string] // (optional)
}

// Constructs Update
type TL_updateNewEncryptedMessage struct {
	Message TL // EncryptedMessage: TL_encryptedMessage | TL_encryptedMessageService
	Qts     int32
}

// Constructs Update
type TL_updateEncryptedChatTyping struct {
	ChatID int32
}

// Constructs Update
type TL_updateEncryption struct {
	Chat TL // EncryptedChat: TL_encryptedChatEmpty | TL_encryptedChatWaiting | TL_encryptedChatRequested | TL_encryptedChat | TL_encryptedChatDiscarded
	Date int32
}

// Constructs Update
type TL_updateEncryptedMessagesRead struct {
	ChatID  int32
	MaxDate int32
	Date    int32
}

// Constructs Update
type TL_updateChatParticipantAdd struct {
	ChatID    int64
	UserID    int64
	InviterID int64
	Date      int32
	Version   int32
}

// Constructs Update
type TL_updateChatParticipantDelete struct {
	ChatID  int64
	UserID  int64
	Version int32
}

// Constructs Update
type TL_updateDcOptions struct {
	DcOptions []TL // DcOption: TL_dcOption
}

// Constructs Update
type TL_updateNotifySettings struct {
	Peer           TL // NotifyPeer: TL_notifyPeer | TL_notifyUsers | TL_notifyChats | TL_notifyBroadcasts | TL_notifyForumTopic
	NotifySettings TL // PeerNotifySettings: TL_peerNotifySettings
}

// Constructs Update
type TL_updateServiceNotification struct {
	Popup       bool
	InvertMedia bool
	InboxDate   Option[int32] // (optional)
	Type        string
	Message     string
	Media       TL   // MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway
	Entities    []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs Update
type TL_updatePrivacy struct {
	Key   TL   // PrivacyKey: TL_privacyKeyStatusTimestamp | TL_privacyKeyChatInvite | TL_privacyKeyPhoneCall | TL_privacyKeyPhoneP2P | TL_privacyKeyForwards | TL_privacyKeyProfilePhoto | TL_privacyKeyPhoneNumber | TL_privacyKeyAddedByPhone | TL_privacyKeyVoiceMessages | TL_privacyKeyAbout
	Rules []TL // PrivacyRule: TL_privacyValueAllowContacts | TL_privacyValueAllowAll | TL_privacyValueAllowUsers | TL_privacyValueDisallowContacts | TL_privacyValueDisallowAll | TL_privacyValueDisallowUsers | TL_privacyValueAllowChatParticipants | TL_privacyValueDisallowChatParticipants | TL_privacyValueAllowCloseFriends
}

// Constructs Update
type TL_updateUserPhone struct {
	UserID int64
	Phone  string
}

// Constructs Update
type TL_updateReadHistoryInbox struct {
	FolderID         Option[int32] // (optional)
	Peer             TL            // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MaxID            int32
	StillUnreadCount int32
	Pts              int32
	PtsCount         int32
}

// Constructs Update
type TL_updateReadHistoryOutbox struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MaxID    int32
	Pts      int32
	PtsCount int32
}

// Constructs Update
type TL_updateWebPage struct {
	Webpage  TL // WebPage: TL_webPageEmpty | TL_webPagePending | TL_webPage | TL_webPageNotModified
	Pts      int32
	PtsCount int32
}

// Constructs Update
type TL_updateReadMessagesContents struct {
	Messages []int32
	Pts      int32
	PtsCount int32
	Date     Option[int32] // (optional)
}

// Constructs Update
type TL_updateChannelTooLong struct {
	ChannelID int64
	Pts       Option[int32] // (optional)
}

// Constructs Update
type TL_updateChannel struct {
	ChannelID int64
}

// Constructs Update
type TL_updateNewChannelMessage struct {
	Message  TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Pts      int32
	PtsCount int32
}

// Constructs Update
type TL_updateReadChannelInbox struct {
	FolderID         Option[int32] // (optional)
	ChannelID        int64
	MaxID            int32
	StillUnreadCount int32
	Pts              int32
}

// Constructs Update
type TL_updateDeleteChannelMessages struct {
	ChannelID int64
	Messages  []int32
	Pts       int32
	PtsCount  int32
}

// Constructs Update
type TL_updateChannelMessageViews struct {
	ChannelID int64
	ID        int32
	Views     int32
}

// Constructs Update
type TL_updateChatParticipantAdmin struct {
	ChatID  int64
	UserID  int64
	IsAdmin bool
	Version int32
}

// Constructs Update
type TL_updateNewStickerSet struct {
	Stickerset TL // messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
}

// Constructs Update
type TL_updateStickerSetsOrder struct {
	Masks  bool
	Emojis bool
	Order  []int64
}

// Constructs Update
type TL_updateStickerSets struct {
	Masks  bool
	Emojis bool
}

// Constructs Update
type TL_updateSavedGifs struct {
}

// Constructs Update
type TL_updateBotInlineQuery struct {
	QueryID  int64
	UserID   int64
	Query    string
	Geo      TL // (optional) GeoPoint: TL_geoPointEmpty | TL_geoPoint
	PeerType TL // (optional) InlineQueryPeerType: TL_inlineQueryPeerTypeSameBotPM | TL_inlineQueryPeerTypePM | TL_inlineQueryPeerTypeChat | TL_inlineQueryPeerTypeMegagroup | TL_inlineQueryPeerTypeBroadcast | TL_inlineQueryPeerTypeBotPM
	Offset   string
}

// Constructs Update
type TL_updateBotInlineSend struct {
	UserID int64
	Query  string
	Geo    TL // (optional) GeoPoint: TL_geoPointEmpty | TL_geoPoint
	ID     string
	MsgID  TL // (optional) InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
}

// Constructs Update
type TL_updateEditChannelMessage struct {
	Message  TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Pts      int32
	PtsCount int32
}

// Constructs Update
type TL_updateBotCallbackQuery struct {
	QueryID       int64
	UserID        int64
	Peer          TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID         int32
	ChatInstance  int64
	Data          []byte         // (optional)
	GameShortName Option[string] // (optional)
}

// Constructs Update
type TL_updateEditMessage struct {
	Message  TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Pts      int32
	PtsCount int32
}

// Constructs Update
type TL_updateInlineBotCallbackQuery struct {
	QueryID       int64
	UserID        int64
	MsgID         TL // InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
	ChatInstance  int64
	Data          []byte         // (optional)
	GameShortName Option[string] // (optional)
}

// Constructs Update
type TL_updateReadChannelOutbox struct {
	ChannelID int64
	MaxID     int32
}

// Constructs Update
type TL_updateDraftMessage struct {
	Peer     TL            // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TopMsgID Option[int32] // (optional)
	Draft    TL            // DraftMessage: TL_draftMessageEmpty | TL_draftMessage
}

// Constructs Update
type TL_updateReadFeaturedStickers struct {
}

// Constructs Update
type TL_updateRecentStickers struct {
}

// Constructs Update
type TL_updateConfig struct {
}

// Constructs Update
type TL_updatePtsChanged struct {
}

// Constructs Update
type TL_updateChannelWebPage struct {
	ChannelID int64
	Webpage   TL // WebPage: TL_webPageEmpty | TL_webPagePending | TL_webPage | TL_webPageNotModified
	Pts       int32
	PtsCount  int32
}

// Constructs Update
type TL_updateDialogPinned struct {
	Pinned   bool
	FolderID Option[int32] // (optional)
	Peer     TL            // DialogPeer: TL_dialogPeer | TL_dialogPeerFolder
}

// Constructs Update
type TL_updatePinnedDialogs struct {
	FolderID Option[int32] // (optional)
	Order    []TL          // (optional) DialogPeer: TL_dialogPeer | TL_dialogPeerFolder
}

// Constructs Update
type TL_updateBotWebhookJSON struct {
	Data TL // DataJSON: TL_dataJSON
}

// Constructs Update
type TL_updateBotWebhookJSONQuery struct {
	QueryID int64
	Data    TL // DataJSON: TL_dataJSON
	Timeout int32
}

// Constructs Update
type TL_updateBotShippingQuery struct {
	QueryID         int64
	UserID          int64
	Payload         []byte
	ShippingAddress TL // PostAddress: TL_postAddress
}

// Constructs Update
type TL_updateBotPrecheckoutQuery struct {
	QueryID          int64
	UserID           int64
	Payload          []byte
	Info             TL             // (optional) PaymentRequestedInfo: TL_paymentRequestedInfo
	ShippingOptionID Option[string] // (optional)
	Currency         string
	TotalAmount      int64
}

// Constructs Update
type TL_updatePhoneCall struct {
	PhoneCall TL // PhoneCall: TL_phoneCallEmpty | TL_phoneCallWaiting | TL_phoneCallRequested | TL_phoneCallAccepted | TL_phoneCall | TL_phoneCallDiscarded
}

// Constructs Update
type TL_updateLangPackTooLong struct {
	LangCode string
}

// Constructs Update
type TL_updateLangPack struct {
	Difference TL // LangPackDifference: TL_langPackDifference
}

// Constructs Update
type TL_updateFavedStickers struct {
}

// Constructs Update
type TL_updateChannelReadMessagesContents struct {
	ChannelID int64
	TopMsgID  Option[int32] // (optional)
	Messages  []int32
}

// Constructs Update
type TL_updateContactsReset struct {
}

// Constructs Update
type TL_updateChannelAvailableMessages struct {
	ChannelID      int64
	AvailableMinID int32
}

// Constructs Update
type TL_updateDialogUnreadMark struct {
	Unread bool
	Peer   TL // DialogPeer: TL_dialogPeer | TL_dialogPeerFolder
}

// Constructs Update
type TL_updateMessagePoll struct {
	PollID  int64
	Poll    TL // (optional) Poll: TL_poll
	Results TL // PollResults: TL_pollResults
}

// Constructs Update
type TL_updateChatDefaultBannedRights struct {
	Peer                TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	DefaultBannedRights TL // ChatBannedRights: TL_chatBannedRights
	Version             int32
}

// Constructs Update
type TL_updateFolderPeers struct {
	FolderPeers []TL // FolderPeer: TL_folderPeer
	Pts         int32
	PtsCount    int32
}

// Constructs Update
type TL_updatePeerSettings struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Settings TL // PeerSettings: TL_peerSettings
}

// Constructs Update
type TL_updatePeerLocated struct {
	Peers []TL // PeerLocated: TL_peerLocated | TL_peerSelfLocated
}

// Constructs Update
type TL_updateNewScheduledMessage struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs Update
type TL_updateDeleteScheduledMessages struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Messages []int32
}

// Constructs Update
type TL_updateTheme struct {
	Theme TL // Theme: TL_theme
}

// Constructs Update
type TL_updateGeoLiveViewed struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID int32
}

// Constructs Update
type TL_updateLoginToken struct {
}

// Constructs Update
type TL_updateMessagePollVote struct {
	PollID  int64
	Peer    TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Options [][]byte
	Qts     int32
}

// Constructs Update
type TL_updateDialogFilter struct {
	ID     int32
	Filter TL // (optional) DialogFilter: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
}

// Constructs Update
type TL_updateDialogFilterOrder struct {
	Order []int32
}

// Constructs Update
type TL_updateDialogFilters struct {
}

// Constructs Update
type TL_updatePhoneCallSignalingData struct {
	PhoneCallID int64
	Data        []byte
}

// Constructs Update
type TL_updateChannelMessageForwards struct {
	ChannelID int64
	ID        int32
	Forwards  int32
}

// Constructs Update
type TL_updateReadChannelDiscussionInbox struct {
	ChannelID     int64
	TopMsgID      int32
	ReadMaxID     int32
	BroadcastID   Option[int64] // (optional)
	BroadcastPost Option[int32] // (optional)
}

// Constructs Update
type TL_updateReadChannelDiscussionOutbox struct {
	ChannelID int64
	TopMsgID  int32
	ReadMaxID int32
}

// Constructs Update
type TL_updatePeerBlocked struct {
	Blocked              bool
	BlockedMyStoriesFrom bool
	PeerID               TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs Update
type TL_updateChannelUserTyping struct {
	ChannelID int64
	TopMsgID  Option[int32] // (optional)
	FromID    TL            // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Action    TL            // SendMessageAction: TL_sendMessageTypingAction | TL_sendMessageCancelAction | TL_sendMessageRecordVideoAction | TL_sendMessageUploadVideoAction | TL_sendMessageRecordAudioAction | TL_sendMessageUploadAudioAction | TL_sendMessageUploadPhotoAction | TL_sendMessageUploadDocumentAction | TL_sendMessageGeoLocationAction | TL_sendMessageChooseContactAction | TL_sendMessageGamePlayAction | TL_sendMessageRecordRoundAction | TL_sendMessageUploadRoundAction | TL_speakingInGroupCallAction | TL_sendMessageHistoryImportAction | TL_sendMessageChooseStickerAction | TL_sendMessageEmojiInteraction | TL_sendMessageEmojiInteractionSeen
}

// Constructs Update
type TL_updatePinnedMessages struct {
	Pinned   bool
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Messages []int32
	Pts      int32
	PtsCount int32
}

// Constructs Update
type TL_updatePinnedChannelMessages struct {
	Pinned    bool
	ChannelID int64
	Messages  []int32
	Pts       int32
	PtsCount  int32
}

// Constructs Update
type TL_updateChat struct {
	ChatID int64
}

// Constructs Update
type TL_updateGroupCallParticipants struct {
	Call         TL   // InputGroupCall: TL_inputGroupCall
	Participants []TL // GroupCallParticipant: TL_groupCallParticipant
	Version      int32
}

// Constructs Update
type TL_updateGroupCall struct {
	ChatID int64
	Call   TL // GroupCall: TL_groupCallDiscarded | TL_groupCall
}

// Constructs Update
type TL_updatePeerHistoryTTL struct {
	Peer      TL            // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TtlPeriod Option[int32] // (optional)
}

// Constructs Update
type TL_updateChatParticipant struct {
	ChatID          int64
	Date            int32
	ActorID         int64
	UserID          int64
	PrevParticipant TL // (optional) ChatParticipant: TL_chatParticipant | TL_chatParticipantCreator | TL_chatParticipantAdmin
	NewParticipant  TL // (optional) ChatParticipant: TL_chatParticipant | TL_chatParticipantCreator | TL_chatParticipantAdmin
	Invite          TL // (optional) ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	Qts             int32
}

// Constructs Update
type TL_updateChannelParticipant struct {
	ViaChatlist     bool
	ChannelID       int64
	Date            int32
	ActorID         int64
	UserID          int64
	PrevParticipant TL // (optional) ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	NewParticipant  TL // (optional) ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	Invite          TL // (optional) ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	Qts             int32
}

// Constructs Update
type TL_updateBotStopped struct {
	UserID  int64
	Date    int32
	Stopped bool
	Qts     int32
}

// Constructs Update
type TL_updateGroupCallConnection struct {
	Presentation bool
	Params       TL // DataJSON: TL_dataJSON
}

// Constructs Update
type TL_updateBotCommands struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	BotID    int64
	Commands []TL // BotCommand: TL_botCommand
}

// Constructs Update
type TL_updatePendingJoinRequests struct {
	Peer             TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	RequestsPending  int32
	RecentRequesters []int64
}

// Constructs Update
type TL_updateBotChatInviteRequester struct {
	Peer   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date   int32
	UserID int64
	About  string
	Invite TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	Qts    int32
}

// Constructs Update
type TL_updateMessageReactions struct {
	Peer      TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID     int32
	TopMsgID  Option[int32] // (optional)
	Reactions TL            // MessageReactions: TL_messageReactions
}

// Constructs Update
type TL_updateAttachMenuBots struct {
}

// Constructs Update
type TL_updateWebViewResultSent struct {
	QueryID int64
}

// Constructs Update
type TL_updateBotMenuButton struct {
	BotID  int64
	Button TL // BotMenuButton: TL_botMenuButtonDefault | TL_botMenuButtonCommands | TL_botMenuButton
}

// Constructs Update
type TL_updateSavedRingtones struct {
}

// Constructs Update
type TL_updateTranscribedAudio struct {
	Pending         bool
	Peer            TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID           int32
	TranscriptionID int64
	Text            string
}

// Constructs Update
type TL_updateReadFeaturedEmojiStickers struct {
}

// Constructs Update
type TL_updateUserEmojiStatus struct {
	UserID      int64
	EmojiStatus TL // EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
}

// Constructs Update
type TL_updateRecentEmojiStatuses struct {
}

// Constructs Update
type TL_updateRecentReactions struct {
}

// Constructs Update
type TL_updateMoveStickerSetToTop struct {
	Masks      bool
	Emojis     bool
	Stickerset int64
}

// Constructs Update
type TL_updateMessageExtendedMedia struct {
	Peer          TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID         int32
	ExtendedMedia TL // MessageExtendedMedia: TL_messageExtendedMediaPreview | TL_messageExtendedMedia
}

// Constructs Update
type TL_updateChannelPinnedTopic struct {
	Pinned    bool
	ChannelID int64
	TopicID   int32
}

// Constructs Update
type TL_updateChannelPinnedTopics struct {
	ChannelID int64
	Order     []int32 // (optional)
}

// Constructs Update
type TL_updateUser struct {
	UserID int64
}

// Constructs Update
type TL_updateAutoSaveSettings struct {
}

// Constructs Update
type TL_updateGroupInvitePrivacyForbidden struct {
	UserID int64
}

// Constructs Update
type TL_updateStory struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Story TL // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs Update
type TL_updateReadStories struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MaxID int32
}

// Constructs Update
type TL_updateStoryID struct {
	ID       int32
	RandomID int64
}

// Constructs Update
type TL_updateStoriesStealthMode struct {
	StealthMode TL // StoriesStealthMode: TL_storiesStealthMode
}

// Constructs Update
type TL_updateSentStoryReaction struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	StoryID  int32
	Reaction TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Constructs updates.State
type TL_updates_state struct {
	Pts         int32
	Qts         int32
	Date        int32
	Seq         int32
	UnreadCount int32
}

// Constructs updates.Difference
type TL_updates_differenceEmpty struct {
	Date int32
	Seq  int32
}

// Constructs updates.Difference
type TL_updates_difference struct {
	NewMessages          []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	NewEncryptedMessages []TL // EncryptedMessage: TL_encryptedMessage | TL_encryptedMessageService
	OtherUpdates         []TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDcOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGifs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePtsChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateGroupInvitePrivacyForbidden | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction
	Chats                []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users                []TL // User: TL_userEmpty | TL_user
	State                TL   // updates.State: TL_updates_state
}

// Constructs updates.Difference
type TL_updates_differenceSlice struct {
	NewMessages          []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	NewEncryptedMessages []TL // EncryptedMessage: TL_encryptedMessage | TL_encryptedMessageService
	OtherUpdates         []TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDcOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGifs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePtsChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateGroupInvitePrivacyForbidden | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction
	Chats                []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users                []TL // User: TL_userEmpty | TL_user
	IntermediateState    TL   // updates.State: TL_updates_state
}

// Constructs updates.Difference
type TL_updates_differenceTooLong struct {
	Pts int32
}

// Constructs Updates
type TL_updatesTooLong struct {
}

// Constructs Updates
type TL_updateShortMessage struct {
	Out         bool
	Mentioned   bool
	MediaUnread bool
	Silent      bool
	ID          int32
	UserID      int64
	Message     string
	Pts         int32
	PtsCount    int32
	Date        int32
	FwdFrom     TL            // (optional) MessageFwdHeader: TL_messageFwdHeader
	ViaBotID    Option[int64] // (optional)
	ReplyTo     TL            // (optional) MessageReplyHeader: TL_messageReplyHeader | TL_messageReplyStoryHeader
	Entities    []TL          // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	TtlPeriod   Option[int32] // (optional)
}

// Constructs Updates
type TL_updateShortChatMessage struct {
	Out         bool
	Mentioned   bool
	MediaUnread bool
	Silent      bool
	ID          int32
	FromID      int64
	ChatID      int64
	Message     string
	Pts         int32
	PtsCount    int32
	Date        int32
	FwdFrom     TL            // (optional) MessageFwdHeader: TL_messageFwdHeader
	ViaBotID    Option[int64] // (optional)
	ReplyTo     TL            // (optional) MessageReplyHeader: TL_messageReplyHeader | TL_messageReplyStoryHeader
	Entities    []TL          // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	TtlPeriod   Option[int32] // (optional)
}

// Constructs Updates
type TL_updateShort struct {
	Update TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDcOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGifs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePtsChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateGroupInvitePrivacyForbidden | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction
	Date   int32
}

// Constructs Updates
type TL_updatesCombined struct {
	Updates  []TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDcOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGifs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePtsChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateGroupInvitePrivacyForbidden | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction
	Users    []TL // User: TL_userEmpty | TL_user
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Date     int32
	SeqStart int32
	Seq      int32
}

// Constructs Updates
type TL_updates struct {
	Updates []TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDcOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGifs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePtsChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateGroupInvitePrivacyForbidden | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction
	Users   []TL // User: TL_userEmpty | TL_user
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Date    int32
	Seq     int32
}

// Constructs Updates
type TL_updateShortSentMessage struct {
	Out       bool
	ID        int32
	Pts       int32
	PtsCount  int32
	Date      int32
	Media     TL            // (optional) MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway
	Entities  []TL          // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	TtlPeriod Option[int32] // (optional)
}

// Constructs photos.Photos
type TL_photos_photos struct {
	Photos []TL // Photo: TL_photoEmpty | TL_photo
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs photos.Photos
type TL_photos_photosSlice struct {
	Count  int32
	Photos []TL // Photo: TL_photoEmpty | TL_photo
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs photos.Photo
type TL_photos_photo struct {
	Photo TL   // Photo: TL_photoEmpty | TL_photo
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs upload.File
type TL_upload_file struct {
	Type  TL // storage.FileType: TL_storage_fileUnknown | TL_storage_filePartial | TL_storage_fileJpeg | TL_storage_fileGif | TL_storage_filePng | TL_storage_filePdf | TL_storage_fileMp3 | TL_storage_fileMov | TL_storage_fileMp4 | TL_storage_fileWebp
	Mtime int32
	Bytes []byte
}

// Constructs upload.File
type TL_upload_fileCdnRedirect struct {
	DcID          int32
	FileToken     []byte
	EncryptionKey []byte
	EncryptionIv  []byte
	FileHashes    []TL // FileHash: TL_fileHash
}

// Constructs DcOption
type TL_dcOption struct {
	Ipv6         bool
	MediaOnly    bool
	TcpoOnly     bool
	Cdn          bool
	Static       bool
	ThisPortOnly bool
	ID           int32
	IpAddress    string
	Port         int32
	Secret       []byte // (optional)
}

// Constructs Config
type TL_config struct {
	DefaultP2pContacts      bool
	PreloadFeaturedStickers bool
	RevokePmInbox           bool
	BlockedMode             bool
	ForceTryIpv6            bool
	Date                    int32
	Expires                 int32
	TestMode                bool
	ThisDc                  int32
	DcOptions               []TL // DcOption: TL_dcOption
	DcTxtDomainName         string
	ChatSizeMax             int32
	MegagroupSizeMax        int32
	ForwardedCountMax       int32
	OnlineUpdatePeriodMs    int32
	OfflineBlurTimeoutMs    int32
	OfflineIdleTimeoutMs    int32
	OnlineCloudTimeoutMs    int32
	NotifyCloudDelayMs      int32
	NotifyDefaultDelayMs    int32
	PushChatPeriodMs        int32
	PushChatLimit           int32
	EditTimeLimit           int32
	RevokeTimeLimit         int32
	RevokePmTimeLimit       int32
	RatingEDecay            int32
	StickersRecentLimit     int32
	ChannelsReadMediaPeriod int32
	TmpSessions             Option[int32] // (optional)
	CallReceiveTimeoutMs    int32
	CallRingTimeoutMs       int32
	CallConnectTimeoutMs    int32
	CallPacketTimeoutMs     int32
	MeUrlPrefix             string
	AutoupdateUrlPrefix     Option[string] // (optional)
	GifSearchUsername       Option[string] // (optional)
	VenueSearchUsername     Option[string] // (optional)
	ImgSearchUsername       Option[string] // (optional)
	StaticMapsProvider      Option[string] // (optional)
	CaptionLengthMax        int32
	MessageLengthMax        int32
	WebfileDcID             int32
	SuggestedLangCode       Option[string] // (optional)
	LangPackVersion         Option[int32]  // (optional)
	BaseLangPackVersion     Option[int32]  // (optional)
	ReactionsDefault        TL             // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
	AutologinToken          Option[string] // (optional)
}

// Constructs NearestDc
type TL_nearestDc struct {
	Country   string
	ThisDc    int32
	NearestDc int32
}

// Constructs help.AppUpdate
type TL_help_appUpdate struct {
	CanNotSkip bool
	ID         int32
	Version    string
	Text       string
	Entities   []TL           // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Document   TL             // (optional) Document: TL_documentEmpty | TL_document
	Url        Option[string] // (optional)
	Sticker    TL             // (optional) Document: TL_documentEmpty | TL_document
}

// Constructs help.AppUpdate
type TL_help_noAppUpdate struct {
}

// Constructs help.InviteText
type TL_help_inviteText struct {
	Message string
}

// Constructs EncryptedChat
type TL_encryptedChatEmpty struct {
	ID int32
}

// Constructs EncryptedChat
type TL_encryptedChatWaiting struct {
	ID            int32
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
}

// Constructs EncryptedChat
type TL_encryptedChatRequested struct {
	FolderID      Option[int32] // (optional)
	ID            int32
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
	GA            []byte
}

// Constructs EncryptedChat
type TL_encryptedChat struct {
	ID             int32
	AccessHash     int64
	Date           int32
	AdminID        int64
	ParticipantID  int64
	GAOrB          []byte
	KeyFingerprint int64
}

// Constructs EncryptedChat
type TL_encryptedChatDiscarded struct {
	HistoryDeleted bool
	ID             int32
}

// Constructs InputEncryptedChat
type TL_inputEncryptedChat struct {
	ChatID     int32
	AccessHash int64
}

// Constructs EncryptedFile
type TL_encryptedFileEmpty struct {
}

// Constructs EncryptedFile
type TL_encryptedFile struct {
	ID             int64
	AccessHash     int64
	Size           int64
	DcID           int32
	KeyFingerprint int32
}

// Constructs InputEncryptedFile
type TL_inputEncryptedFileEmpty struct {
}

// Constructs InputEncryptedFile
type TL_inputEncryptedFileUploaded struct {
	ID             int64
	Parts          int32
	Md5Checksum    string
	KeyFingerprint int32
}

// Constructs InputEncryptedFile
type TL_inputEncryptedFile struct {
	ID         int64
	AccessHash int64
}

// Constructs InputEncryptedFile
type TL_inputEncryptedFileBigUploaded struct {
	ID             int64
	Parts          int32
	KeyFingerprint int32
}

// Constructs EncryptedMessage
type TL_encryptedMessage struct {
	RandomID int64
	ChatID   int32
	Date     int32
	Bytes    []byte
	File     TL // EncryptedFile: TL_encryptedFileEmpty | TL_encryptedFile
}

// Constructs EncryptedMessage
type TL_encryptedMessageService struct {
	RandomID int64
	ChatID   int32
	Date     int32
	Bytes    []byte
}

// Constructs messages.DhConfig
type TL_messages_dhConfigNotModified struct {
	Random []byte
}

// Constructs messages.DhConfig
type TL_messages_dhConfig struct {
	G       int32
	P       []byte
	Version int32
	Random  []byte
}

// Constructs messages.SentEncryptedMessage
type TL_messages_sentEncryptedMessage struct {
	Date int32
}

// Constructs messages.SentEncryptedMessage
type TL_messages_sentEncryptedFile struct {
	Date int32
	File TL // EncryptedFile: TL_encryptedFileEmpty | TL_encryptedFile
}

// Constructs InputDocument
type TL_inputDocumentEmpty struct {
}

// Constructs InputDocument
type TL_inputDocument struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
}

// Constructs Document
type TL_documentEmpty struct {
	ID int64
}

// Constructs Document
type TL_document struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
	Date          int32
	MimeType      string
	Size          int64
	Thumbs        []TL // (optional) PhotoSize: TL_photoSizeEmpty | TL_photoSize | TL_photoCachedSize | TL_photoStrippedSize | TL_photoSizeProgressive | TL_photoPathSize
	VideoThumbs   []TL // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
	DcID          int32
	Attributes    []TL // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
}

// Constructs help.Support
type TL_help_support struct {
	PhoneNumber string
	User        TL // User: TL_userEmpty | TL_user
}

// Constructs NotifyPeer
type TL_notifyPeer struct {
	Peer TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs NotifyPeer
type TL_notifyUsers struct {
}

// Constructs NotifyPeer
type TL_notifyChats struct {
}

// Constructs NotifyPeer
type TL_notifyBroadcasts struct {
}

// Constructs NotifyPeer
type TL_notifyForumTopic struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TopMsgID int32
}

// Constructs SendMessageAction
type TL_sendMessageTypingAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageCancelAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageRecordVideoAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageUploadVideoAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageRecordAudioAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageUploadAudioAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageUploadPhotoAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageUploadDocumentAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageGeoLocationAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageChooseContactAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageGamePlayAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageRecordRoundAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageUploadRoundAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_speakingInGroupCallAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageHistoryImportAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageChooseStickerAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageEmojiInteraction struct {
	Emoticon    string
	MsgID       int32
	Interaction TL // DataJSON: TL_dataJSON
}

// Constructs SendMessageAction
type TL_sendMessageEmojiInteractionSeen struct {
	Emoticon string
}

// Constructs contacts.Found
type TL_contacts_found struct {
	MyResults []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Results   []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats     []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users     []TL // User: TL_userEmpty | TL_user
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyStatusTimestamp struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyChatInvite struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyPhoneCall struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyPhoneP2P struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyForwards struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyProfilePhoto struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyPhoneNumber struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyAddedByPhone struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyVoiceMessages struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyAbout struct {
}

// Constructs PrivacyKey
type TL_privacyKeyStatusTimestamp struct {
}

// Constructs PrivacyKey
type TL_privacyKeyChatInvite struct {
}

// Constructs PrivacyKey
type TL_privacyKeyPhoneCall struct {
}

// Constructs PrivacyKey
type TL_privacyKeyPhoneP2P struct {
}

// Constructs PrivacyKey
type TL_privacyKeyForwards struct {
}

// Constructs PrivacyKey
type TL_privacyKeyProfilePhoto struct {
}

// Constructs PrivacyKey
type TL_privacyKeyPhoneNumber struct {
}

// Constructs PrivacyKey
type TL_privacyKeyAddedByPhone struct {
}

// Constructs PrivacyKey
type TL_privacyKeyVoiceMessages struct {
}

// Constructs PrivacyKey
type TL_privacyKeyAbout struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowContacts struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowAll struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowUsers struct {
	Users []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueDisallowContacts struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueDisallowAll struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueDisallowUsers struct {
	Users []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowChatParticipants struct {
	Chats []int64
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueDisallowChatParticipants struct {
	Chats []int64
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowCloseFriends struct {
}

// Constructs PrivacyRule
type TL_privacyValueAllowContacts struct {
}

// Constructs PrivacyRule
type TL_privacyValueAllowAll struct {
}

// Constructs PrivacyRule
type TL_privacyValueAllowUsers struct {
	Users []int64
}

// Constructs PrivacyRule
type TL_privacyValueDisallowContacts struct {
}

// Constructs PrivacyRule
type TL_privacyValueDisallowAll struct {
}

// Constructs PrivacyRule
type TL_privacyValueDisallowUsers struct {
	Users []int64
}

// Constructs PrivacyRule
type TL_privacyValueAllowChatParticipants struct {
	Chats []int64
}

// Constructs PrivacyRule
type TL_privacyValueDisallowChatParticipants struct {
	Chats []int64
}

// Constructs PrivacyRule
type TL_privacyValueAllowCloseFriends struct {
}

// Constructs account.PrivacyRules
type TL_account_privacyRules struct {
	Rules []TL // PrivacyRule: TL_privacyValueAllowContacts | TL_privacyValueAllowAll | TL_privacyValueAllowUsers | TL_privacyValueDisallowContacts | TL_privacyValueDisallowAll | TL_privacyValueDisallowUsers | TL_privacyValueAllowChatParticipants | TL_privacyValueDisallowChatParticipants | TL_privacyValueAllowCloseFriends
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs AccountDaysTTL
type TL_accountDaysTTL struct {
	Days int32
}

// Constructs DocumentAttribute
type TL_documentAttributeImageSize struct {
	W int32
	H int32
}

// Constructs DocumentAttribute
type TL_documentAttributeAnimated struct {
}

// Constructs DocumentAttribute
type TL_documentAttributeSticker struct {
	Mask       bool
	Alt        string
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
	MaskCoords TL // (optional) MaskCoords: TL_maskCoords
}

// Constructs DocumentAttribute
type TL_documentAttributeVideo struct {
	RoundMessage      bool
	SupportsStreaming bool
	Nosound           bool
	Duration          float64
	W                 int32
	H                 int32
	PreloadPrefixSize Option[int32] // (optional)
}

// Constructs DocumentAttribute
type TL_documentAttributeAudio struct {
	Voice     bool
	Duration  int32
	Title     Option[string] // (optional)
	Performer Option[string] // (optional)
	Waveform  []byte         // (optional)
}

// Constructs DocumentAttribute
type TL_documentAttributeFilename struct {
	FileName string
}

// Constructs DocumentAttribute
type TL_documentAttributeHasStickers struct {
}

// Constructs DocumentAttribute
type TL_documentAttributeCustomEmoji struct {
	Free       bool
	TextColor  bool
	Alt        string
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
}

// Constructs messages.Stickers
type TL_messages_stickersNotModified struct {
}

// Constructs messages.Stickers
type TL_messages_stickers struct {
	Hash     int64
	Stickers []TL // Document: TL_documentEmpty | TL_document
}

// Constructs StickerPack
type TL_stickerPack struct {
	Emoticon  string
	Documents []int64
}

// Constructs messages.AllStickers
type TL_messages_allStickersNotModified struct {
}

// Constructs messages.AllStickers
type TL_messages_allStickers struct {
	Hash int64
	Sets []TL // StickerSet: TL_stickerSet
}

// Constructs messages.AffectedMessages
type TL_messages_affectedMessages struct {
	Pts      int32
	PtsCount int32
}

// Constructs WebPage
type TL_webPageEmpty struct {
	ID  int64
	Url Option[string] // (optional)
}

// Constructs WebPage
type TL_webPagePending struct {
	ID   int64
	Url  Option[string] // (optional)
	Date int32
}

// Constructs WebPage
type TL_webPage struct {
	HasLargeMedia bool
	ID            int64
	Url           string
	DisplayUrl    string
	Hash          int32
	Type          Option[string] // (optional)
	SiteName      Option[string] // (optional)
	Title         Option[string] // (optional)
	Description   Option[string] // (optional)
	Photo         TL             // (optional) Photo: TL_photoEmpty | TL_photo
	EmbedUrl      Option[string] // (optional)
	EmbedType     Option[string] // (optional)
	EmbedWidth    Option[int32]  // (optional)
	EmbedHeight   Option[int32]  // (optional)
	Duration      Option[int32]  // (optional)
	Author        Option[string] // (optional)
	Document      TL             // (optional) Document: TL_documentEmpty | TL_document
	CachedPage    TL             // (optional) Page: TL_page
	Attributes    []TL           // (optional) WebPageAttribute: TL_webPageAttributeTheme | TL_webPageAttributeStory
}

// Constructs WebPage
type TL_webPageNotModified struct {
	CachedPageViews Option[int32] // (optional)
}

// Constructs Authorization
type TL_authorization struct {
	Current                   bool
	OfficialApp               bool
	PasswordPending           bool
	EncryptedRequestsDisabled bool
	CallRequestsDisabled      bool
	Unconfirmed               bool
	Hash                      int64
	DeviceModel               string
	Platform                  string
	SystemVersion             string
	ApiID                     int32
	AppName                   string
	AppVersion                string
	DateCreated               int32
	DateActive                int32
	Ip                        string
	Country                   string
	Region                    string
}

// Constructs account.Authorizations
type TL_account_authorizations struct {
	AuthorizationTtlDays int32
	Authorizations       []TL // Authorization: TL_authorization
}

// Constructs account.Password
type TL_account_password struct {
	HasRecovery             bool
	HasSecureValues         bool
	HasPassword             bool
	CurrentAlgo             TL             // (optional) PasswordKdfAlgo: TL_passwordKdfAlgoUnknown | TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
	SrpB                    []byte         // (optional)
	SrpID                   Option[int64]  // (optional)
	Hint                    Option[string] // (optional)
	EmailUnconfirmedPattern Option[string] // (optional)
	NewAlgo                 TL             // PasswordKdfAlgo: TL_passwordKdfAlgoUnknown | TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
	NewSecureAlgo           TL             // SecurePasswordKdfAlgo: TL_securePasswordKdfAlgoUnknown | TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 | TL_securePasswordKdfAlgoSHA512
	SecureRandom            []byte
	PendingResetDate        Option[int32]  // (optional)
	LoginEmailPattern       Option[string] // (optional)
}

// Constructs account.PasswordSettings
type TL_account_passwordSettings struct {
	Email          Option[string] // (optional)
	SecureSettings TL             // (optional) SecureSecretSettings: TL_secureSecretSettings
}

// Constructs account.PasswordInputSettings
type TL_account_passwordInputSettings struct {
	NewAlgo           TL             // (optional) PasswordKdfAlgo: TL_passwordKdfAlgoUnknown | TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
	NewPasswordHash   []byte         // (optional)
	Hint              Option[string] // (optional)
	Email             Option[string] // (optional)
	NewSecureSettings TL             // (optional) SecureSecretSettings: TL_secureSecretSettings
}

// Constructs auth.PasswordRecovery
type TL_auth_passwordRecovery struct {
	EmailPattern string
}

// Constructs ReceivedNotifyMessage
type TL_receivedNotifyMessage struct {
	ID    int32
	Flags int32
}

// Constructs ExportedChatInvite
type TL_chatInviteExported struct {
	Revoked       bool
	Permanent     bool
	RequestNeeded bool
	Link          string
	AdminID       int64
	Date          int32
	StartDate     Option[int32]  // (optional)
	ExpireDate    Option[int32]  // (optional)
	UsageLimit    Option[int32]  // (optional)
	Usage         Option[int32]  // (optional)
	Requested     Option[int32]  // (optional)
	Title         Option[string] // (optional)
}

// Constructs ExportedChatInvite
type TL_chatInvitePublicJoinRequests struct {
}

// Constructs ChatInvite
type TL_chatInviteAlready struct {
	Chat TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
}

// Constructs ChatInvite
type TL_chatInvite struct {
	Channel           bool
	Broadcast         bool
	Public            bool
	Megagroup         bool
	RequestNeeded     bool
	Verified          bool
	Scam              bool
	Fake              bool
	Title             string
	About             Option[string] // (optional)
	Photo             TL             // Photo: TL_photoEmpty | TL_photo
	ParticipantsCount int32
	Participants      []TL // (optional) User: TL_userEmpty | TL_user
	Color             int32
}

// Constructs ChatInvite
type TL_chatInvitePeek struct {
	Chat    TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Expires int32
}

// Constructs InputStickerSet
type TL_inputStickerSetEmpty struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetID struct {
	ID         int64
	AccessHash int64
}

// Constructs InputStickerSet
type TL_inputStickerSetShortName struct {
	ShortName string
}

// Constructs InputStickerSet
type TL_inputStickerSetAnimatedEmoji struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetDice struct {
	Emoticon string
}

// Constructs InputStickerSet
type TL_inputStickerSetAnimatedEmojiAnimations struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetPremiumGifts struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetEmojiGenericAnimations struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetEmojiDefaultStatuses struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetEmojiDefaultTopicIcons struct {
}

// Constructs StickerSet
type TL_stickerSet struct {
	Archived        bool
	Official        bool
	Masks           bool
	Animated        bool
	Videos          bool
	Emojis          bool
	TextColor       bool
	InstalledDate   Option[int32] // (optional)
	ID              int64
	AccessHash      int64
	Title           string
	ShortName       string
	Thumbs          []TL          // (optional) PhotoSize: TL_photoSizeEmpty | TL_photoSize | TL_photoCachedSize | TL_photoStrippedSize | TL_photoSizeProgressive | TL_photoPathSize
	ThumbDcID       Option[int32] // (optional)
	ThumbVersion    Option[int32] // (optional)
	ThumbDocumentID Option[int64] // (optional)
	Count           int32
	Hash            int32
}

// Constructs messages.StickerSet
type TL_messages_stickerSet struct {
	Set       TL   // StickerSet: TL_stickerSet
	Packs     []TL // StickerPack: TL_stickerPack
	Keywords  []TL // StickerKeyword: TL_stickerKeyword
	Documents []TL // Document: TL_documentEmpty | TL_document
}

// Constructs messages.StickerSet
type TL_messages_stickerSetNotModified struct {
}

// Constructs BotCommand
type TL_botCommand struct {
	Command     string
	Description string
}

// Constructs BotInfo
type TL_botInfo struct {
	UserID              Option[int64]  // (optional)
	Description         Option[string] // (optional)
	DescriptionPhoto    TL             // (optional) Photo: TL_photoEmpty | TL_photo
	DescriptionDocument TL             // (optional) Document: TL_documentEmpty | TL_document
	Commands            []TL           // (optional) BotCommand: TL_botCommand
	MenuButton          TL             // (optional) BotMenuButton: TL_botMenuButtonDefault | TL_botMenuButtonCommands | TL_botMenuButton
}

// Constructs KeyboardButton
type TL_keyboardButton struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonUrl struct {
	Text string
	Url  string
}

// Constructs KeyboardButton
type TL_keyboardButtonCallback struct {
	RequiresPassword bool
	Text             string
	Data             []byte
}

// Constructs KeyboardButton
type TL_keyboardButtonRequestPhone struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonRequestGeoLocation struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonSwitchInline struct {
	SamePeer  bool
	Text      string
	Query     string
	PeerTypes []TL // (optional) InlineQueryPeerType: TL_inlineQueryPeerTypeSameBotPM | TL_inlineQueryPeerTypePM | TL_inlineQueryPeerTypeChat | TL_inlineQueryPeerTypeMegagroup | TL_inlineQueryPeerTypeBroadcast | TL_inlineQueryPeerTypeBotPM
}

// Constructs KeyboardButton
type TL_keyboardButtonGame struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonBuy struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonUrlAuth struct {
	Text     string
	FwdText  Option[string] // (optional)
	Url      string
	ButtonID int32
}

// Constructs KeyboardButton
type TL_inputKeyboardButtonUrlAuth struct {
	RequestWriteAccess bool
	Text               string
	FwdText            Option[string] // (optional)
	Url                string
	Bot                TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs KeyboardButton
type TL_keyboardButtonRequestPoll struct {
	Quiz Option[bool] // (optional)
	Text string
}

// Constructs KeyboardButton
type TL_inputKeyboardButtonUserProfile struct {
	Text   string
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs KeyboardButton
type TL_keyboardButtonUserProfile struct {
	Text   string
	UserID int64
}

// Constructs KeyboardButton
type TL_keyboardButtonWebView struct {
	Text string
	Url  string
}

// Constructs KeyboardButton
type TL_keyboardButtonSimpleWebView struct {
	Text string
	Url  string
}

// Constructs KeyboardButton
type TL_keyboardButtonRequestPeer struct {
	Text     string
	ButtonID int32
	PeerType TL // RequestPeerType: TL_requestPeerTypeUser | TL_requestPeerTypeChat | TL_requestPeerTypeBroadcast
}

// Constructs KeyboardButtonRow
type TL_keyboardButtonRow struct {
	Buttons []TL // KeyboardButton: TL_keyboardButton | TL_keyboardButtonUrl | TL_keyboardButtonCallback | TL_keyboardButtonRequestPhone | TL_keyboardButtonRequestGeoLocation | TL_keyboardButtonSwitchInline | TL_keyboardButtonGame | TL_keyboardButtonBuy | TL_keyboardButtonUrlAuth | TL_inputKeyboardButtonUrlAuth | TL_keyboardButtonRequestPoll | TL_inputKeyboardButtonUserProfile | TL_keyboardButtonUserProfile | TL_keyboardButtonWebView | TL_keyboardButtonSimpleWebView | TL_keyboardButtonRequestPeer
}

// Constructs ReplyMarkup
type TL_replyKeyboardHide struct {
	Selective bool
}

// Constructs ReplyMarkup
type TL_replyKeyboardForceReply struct {
	SingleUse   bool
	Selective   bool
	Placeholder Option[string] // (optional)
}

// Constructs ReplyMarkup
type TL_replyKeyboardMarkup struct {
	Resize      bool
	SingleUse   bool
	Selective   bool
	Persistent  bool
	Rows        []TL           // KeyboardButtonRow: TL_keyboardButtonRow
	Placeholder Option[string] // (optional)
}

// Constructs ReplyMarkup
type TL_replyInlineMarkup struct {
	Rows []TL // KeyboardButtonRow: TL_keyboardButtonRow
}

// Constructs MessageEntity
type TL_messageEntityUnknown struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityMention struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityHashtag struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityBotCommand struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityUrl struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityEmail struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityBold struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityItalic struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityCode struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityPre struct {
	Offset   int32
	Length   int32
	Language string
}

// Constructs MessageEntity
type TL_messageEntityTextUrl struct {
	Offset int32
	Length int32
	Url    string
}

// Constructs MessageEntity
type TL_messageEntityMentionName struct {
	Offset int32
	Length int32
	UserID int64
}

// Constructs MessageEntity
type TL_inputMessageEntityMentionName struct {
	Offset int32
	Length int32
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs MessageEntity
type TL_messageEntityPhone struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityCashtag struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityUnderline struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityStrike struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityBankCard struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntitySpoiler struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityCustomEmoji struct {
	Offset     int32
	Length     int32
	DocumentID int64
}

// Constructs MessageEntity
type TL_messageEntityBlockquote struct {
	Offset int32
	Length int32
}

// Constructs InputChannel
type TL_inputChannelEmpty struct {
}

// Constructs InputChannel
type TL_inputChannel struct {
	ChannelID  int64
	AccessHash int64
}

// Constructs InputChannel
type TL_inputChannelFromMessage struct {
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID     int32
	ChannelID int64
}

// Constructs contacts.ResolvedPeer
type TL_contacts_resolvedPeer struct {
	Peer  TL   // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs MessageRange
type TL_messageRange struct {
	MinID int32
	MaxID int32
}

// Constructs updates.ChannelDifference
type TL_updates_channelDifferenceEmpty struct {
	Final   bool
	Pts     int32
	Timeout Option[int32] // (optional)
}

// Constructs updates.ChannelDifference
type TL_updates_channelDifferenceTooLong struct {
	Final    bool
	Timeout  Option[int32] // (optional)
	Dialog   TL            // Dialog: TL_dialog | TL_dialogFolder
	Messages []TL          // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL          // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL          // User: TL_userEmpty | TL_user
}

// Constructs updates.ChannelDifference
type TL_updates_channelDifference struct {
	Final        bool
	Pts          int32
	Timeout      Option[int32] // (optional)
	NewMessages  []TL          // Message: TL_messageEmpty | TL_message | TL_messageService
	OtherUpdates []TL          // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDcOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGifs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePtsChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateGroupInvitePrivacyForbidden | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction
	Chats        []TL          // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL          // User: TL_userEmpty | TL_user
}

// Constructs ChannelMessagesFilter
type TL_channelMessagesFilterEmpty struct {
}

// Constructs ChannelMessagesFilter
type TL_channelMessagesFilter struct {
	ExcludeNewMessages bool
	Ranges             []TL // MessageRange: TL_messageRange
}

// Constructs ChannelParticipant
type TL_channelParticipant struct {
	UserID int64
	Date   int32
}

// Constructs ChannelParticipant
type TL_channelParticipantSelf struct {
	ViaRequest bool
	UserID     int64
	InviterID  int64
	Date       int32
}

// Constructs ChannelParticipant
type TL_channelParticipantCreator struct {
	UserID      int64
	AdminRights TL             // ChatAdminRights: TL_chatAdminRights
	Rank        Option[string] // (optional)
}

// Constructs ChannelParticipant
type TL_channelParticipantAdmin struct {
	CanEdit     bool
	Self        bool
	UserID      int64
	InviterID   Option[int64] // (optional)
	PromotedBy  int64
	Date        int32
	AdminRights TL             // ChatAdminRights: TL_chatAdminRights
	Rank        Option[string] // (optional)
}

// Constructs ChannelParticipant
type TL_channelParticipantBanned struct {
	Left         bool
	Peer         TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	KickedBy     int64
	Date         int32
	BannedRights TL // ChatBannedRights: TL_chatBannedRights
}

// Constructs ChannelParticipant
type TL_channelParticipantLeft struct {
	Peer TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsRecent struct {
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsAdmins struct {
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsKicked struct {
	Q string
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsBots struct {
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsBanned struct {
	Q string
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsSearch struct {
	Q string
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsContacts struct {
	Q string
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsMentions struct {
	Q        Option[string] // (optional)
	TopMsgID Option[int32]  // (optional)
}

// Constructs channels.ChannelParticipants
type TL_channels_channelParticipants struct {
	Count        int32
	Participants []TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
}

// Constructs channels.ChannelParticipants
type TL_channels_channelParticipantsNotModified struct {
}

// Constructs channels.ChannelParticipant
type TL_channels_channelParticipant struct {
	Participant TL   // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	Chats       []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users       []TL // User: TL_userEmpty | TL_user
}

// Constructs help.TermsOfService
type TL_help_termsOfService struct {
	Popup         bool
	ID            TL // DataJSON: TL_dataJSON
	Text          string
	Entities      []TL          // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	MinAgeConfirm Option[int32] // (optional)
}

// Constructs messages.SavedGifs
type TL_messages_savedGifsNotModified struct {
}

// Constructs messages.SavedGifs
type TL_messages_savedGifs struct {
	Hash int64
	Gifs []TL // Document: TL_documentEmpty | TL_document
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaAuto struct {
	InvertMedia bool
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ReplyMarkup TL   // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageText struct {
	NoWebpage   bool
	InvertMedia bool
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ReplyMarkup TL   // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaGeo struct {
	GeoPoint                    TL            // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Heading                     Option[int32] // (optional)
	Period                      Option[int32] // (optional)
	ProximityNotificationRadius Option[int32] // (optional)
	ReplyMarkup                 TL            // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaVenue struct {
	GeoPoint    TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Title       string
	Address     string
	Provider    string
	VenueID     string
	VenueType   string
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaContact struct {
	PhoneNumber string
	FirstName   string
	LastName    string
	Vcard       string
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageGame struct {
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaInvoice struct {
	Title        string
	Description  string
	Photo        TL // (optional) InputWebDocument: TL_inputWebDocument
	Invoice      TL // Invoice: TL_invoice
	Payload      []byte
	Provider     string
	ProviderData TL // DataJSON: TL_dataJSON
	ReplyMarkup  TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaWebPage struct {
	InvertMedia     bool
	ForceLargeMedia bool
	ForceSmallMedia bool
	Optional        bool
	Message         string
	Entities        []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Url             string
	ReplyMarkup     TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineResult
type TL_inputBotInlineResult struct {
	ID          string
	Type        string
	Title       Option[string] // (optional)
	Description Option[string] // (optional)
	Url         Option[string] // (optional)
	Thumb       TL             // (optional) InputWebDocument: TL_inputWebDocument
	Content     TL             // (optional) InputWebDocument: TL_inputWebDocument
	SendMessage TL             // InputBotInlineMessage: TL_inputBotInlineMessageMediaAuto | TL_inputBotInlineMessageText | TL_inputBotInlineMessageMediaGeo | TL_inputBotInlineMessageMediaVenue | TL_inputBotInlineMessageMediaContact | TL_inputBotInlineMessageGame | TL_inputBotInlineMessageMediaInvoice | TL_inputBotInlineMessageMediaWebPage
}

// Constructs InputBotInlineResult
type TL_inputBotInlineResultPhoto struct {
	ID          string
	Type        string
	Photo       TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
	SendMessage TL // InputBotInlineMessage: TL_inputBotInlineMessageMediaAuto | TL_inputBotInlineMessageText | TL_inputBotInlineMessageMediaGeo | TL_inputBotInlineMessageMediaVenue | TL_inputBotInlineMessageMediaContact | TL_inputBotInlineMessageGame | TL_inputBotInlineMessageMediaInvoice | TL_inputBotInlineMessageMediaWebPage
}

// Constructs InputBotInlineResult
type TL_inputBotInlineResultDocument struct {
	ID          string
	Type        string
	Title       Option[string] // (optional)
	Description Option[string] // (optional)
	Document    TL             // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	SendMessage TL             // InputBotInlineMessage: TL_inputBotInlineMessageMediaAuto | TL_inputBotInlineMessageText | TL_inputBotInlineMessageMediaGeo | TL_inputBotInlineMessageMediaVenue | TL_inputBotInlineMessageMediaContact | TL_inputBotInlineMessageGame | TL_inputBotInlineMessageMediaInvoice | TL_inputBotInlineMessageMediaWebPage
}

// Constructs InputBotInlineResult
type TL_inputBotInlineResultGame struct {
	ID          string
	ShortName   string
	SendMessage TL // InputBotInlineMessage: TL_inputBotInlineMessageMediaAuto | TL_inputBotInlineMessageText | TL_inputBotInlineMessageMediaGeo | TL_inputBotInlineMessageMediaVenue | TL_inputBotInlineMessageMediaContact | TL_inputBotInlineMessageGame | TL_inputBotInlineMessageMediaInvoice | TL_inputBotInlineMessageMediaWebPage
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaAuto struct {
	InvertMedia bool
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ReplyMarkup TL   // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageText struct {
	NoWebpage   bool
	InvertMedia bool
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ReplyMarkup TL   // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaGeo struct {
	Geo                         TL            // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Heading                     Option[int32] // (optional)
	Period                      Option[int32] // (optional)
	ProximityNotificationRadius Option[int32] // (optional)
	ReplyMarkup                 TL            // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaVenue struct {
	Geo         TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Title       string
	Address     string
	Provider    string
	VenueID     string
	VenueType   string
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaContact struct {
	PhoneNumber string
	FirstName   string
	LastName    string
	Vcard       string
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaInvoice struct {
	ShippingAddressRequested bool
	Test                     bool
	Title                    string
	Description              string
	Photo                    TL // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Currency                 string
	TotalAmount              int64
	ReplyMarkup              TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaWebPage struct {
	InvertMedia     bool
	ForceLargeMedia bool
	ForceSmallMedia bool
	Manual          bool
	Safe            bool
	Message         string
	Entities        []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Url             string
	ReplyMarkup     TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineResult
type TL_botInlineResult struct {
	ID          string
	Type        string
	Title       Option[string] // (optional)
	Description Option[string] // (optional)
	Url         Option[string] // (optional)
	Thumb       TL             // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Content     TL             // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	SendMessage TL             // BotInlineMessage: TL_botInlineMessageMediaAuto | TL_botInlineMessageText | TL_botInlineMessageMediaGeo | TL_botInlineMessageMediaVenue | TL_botInlineMessageMediaContact | TL_botInlineMessageMediaInvoice | TL_botInlineMessageMediaWebPage
}

// Constructs BotInlineResult
type TL_botInlineMediaResult struct {
	ID          string
	Type        string
	Photo       TL             // (optional) Photo: TL_photoEmpty | TL_photo
	Document    TL             // (optional) Document: TL_documentEmpty | TL_document
	Title       Option[string] // (optional)
	Description Option[string] // (optional)
	SendMessage TL             // BotInlineMessage: TL_botInlineMessageMediaAuto | TL_botInlineMessageText | TL_botInlineMessageMediaGeo | TL_botInlineMessageMediaVenue | TL_botInlineMessageMediaContact | TL_botInlineMessageMediaInvoice | TL_botInlineMessageMediaWebPage
}

// Constructs messages.BotResults
type TL_messages_botResults struct {
	Gallery       bool
	QueryID       int64
	NextOffset    Option[string] // (optional)
	SwitchPm      TL             // (optional) InlineBotSwitchPM: TL_inlineBotSwitchPM
	SwitchWebview TL             // (optional) InlineBotWebView: TL_inlineBotWebView
	Results       []TL           // BotInlineResult: TL_botInlineResult | TL_botInlineMediaResult
	CacheTime     int32
	Users         []TL // User: TL_userEmpty | TL_user
}

// Constructs ExportedMessageLink
type TL_exportedMessageLink struct {
	Link string
	Html string
}

// Constructs MessageFwdHeader
type TL_messageFwdHeader struct {
	Imported       bool
	FromID         TL             // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	FromName       Option[string] // (optional)
	Date           int32
	ChannelPost    Option[int32]  // (optional)
	PostAuthor     Option[string] // (optional)
	SavedFromPeer  TL             // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	SavedFromMsgID Option[int32]  // (optional)
	PsaType        Option[string] // (optional)
}

// Constructs auth.CodeType
type TL_auth_codeTypeSms struct {
}

// Constructs auth.CodeType
type TL_auth_codeTypeCall struct {
}

// Constructs auth.CodeType
type TL_auth_codeTypeFlashCall struct {
}

// Constructs auth.CodeType
type TL_auth_codeTypeMissedCall struct {
}

// Constructs auth.CodeType
type TL_auth_codeTypeFragmentSms struct {
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeApp struct {
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeSms struct {
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeCall struct {
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeFlashCall struct {
	Pattern string
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeMissedCall struct {
	Prefix string
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeEmailCode struct {
	AppleSigninAllowed   bool
	GoogleSigninAllowed  bool
	EmailPattern         string
	Length               int32
	ResetAvailablePeriod Option[int32] // (optional)
	ResetPendingDate     Option[int32] // (optional)
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeSetUpEmailRequired struct {
	AppleSigninAllowed  bool
	GoogleSigninAllowed bool
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeFragmentSms struct {
	Url    string
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeFirebaseSms struct {
	Nonce       []byte         // (optional)
	Receipt     Option[string] // (optional)
	PushTimeout Option[int32]  // (optional)
	Length      int32
}

// Constructs messages.BotCallbackAnswer
type TL_messages_botCallbackAnswer struct {
	Alert     bool
	HasUrl    bool
	NativeUi  bool
	Message   Option[string] // (optional)
	Url       Option[string] // (optional)
	CacheTime int32
}

// Constructs messages.MessageEditData
type TL_messages_messageEditData struct {
	Caption bool
}

// Constructs InputBotInlineMessageID
type TL_inputBotInlineMessageID struct {
	DcID       int32
	ID         int64
	AccessHash int64
}

// Constructs InputBotInlineMessageID
type TL_inputBotInlineMessageID64 struct {
	DcID       int32
	OwnerID    int64
	ID         int32
	AccessHash int64
}

// Constructs InlineBotSwitchPM
type TL_inlineBotSwitchPM struct {
	Text       string
	StartParam string
}

// Constructs messages.PeerDialogs
type TL_messages_peerDialogs struct {
	Dialogs  []TL // Dialog: TL_dialog | TL_dialogFolder
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
	State    TL   // updates.State: TL_updates_state
}

// Constructs TopPeer
type TL_topPeer struct {
	Peer   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Rating float64
}

// Constructs TopPeerCategory
type TL_topPeerCategoryBotsPM struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryBotsInline struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryCorrespondents struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryGroups struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryChannels struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryPhoneCalls struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryForwardUsers struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryForwardChats struct {
}

// Constructs TopPeerCategoryPeers
type TL_topPeerCategoryPeers struct {
	Category TL // TopPeerCategory: TL_topPeerCategoryBotsPM | TL_topPeerCategoryBotsInline | TL_topPeerCategoryCorrespondents | TL_topPeerCategoryGroups | TL_topPeerCategoryChannels | TL_topPeerCategoryPhoneCalls | TL_topPeerCategoryForwardUsers | TL_topPeerCategoryForwardChats
	Count    int32
	Peers    []TL // TopPeer: TL_topPeer
}

// Constructs contacts.TopPeers
type TL_contacts_topPeersNotModified struct {
}

// Constructs contacts.TopPeers
type TL_contacts_topPeers struct {
	Categories []TL // TopPeerCategoryPeers: TL_topPeerCategoryPeers
	Chats      []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL // User: TL_userEmpty | TL_user
}

// Constructs contacts.TopPeers
type TL_contacts_topPeersDisabled struct {
}

// Constructs DraftMessage
type TL_draftMessageEmpty struct {
	Date Option[int32] // (optional)
}

// Constructs DraftMessage
type TL_draftMessage struct {
	NoWebpage   bool
	InvertMedia bool
	ReplyTo     TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Media       TL   // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
	Date        int32
}

// Constructs messages.FeaturedStickers
type TL_messages_featuredStickersNotModified struct {
	Count int32
}

// Constructs messages.FeaturedStickers
type TL_messages_featuredStickers struct {
	Premium bool
	Hash    int64
	Count   int32
	Sets    []TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
	Unread  []int64
}

// Constructs messages.RecentStickers
type TL_messages_recentStickersNotModified struct {
}

// Constructs messages.RecentStickers
type TL_messages_recentStickers struct {
	Hash     int64
	Packs    []TL // StickerPack: TL_stickerPack
	Stickers []TL // Document: TL_documentEmpty | TL_document
	Dates    []int32
}

// Constructs messages.ArchivedStickers
type TL_messages_archivedStickers struct {
	Count int32
	Sets  []TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
}

// Constructs messages.StickerSetInstallResult
type TL_messages_stickerSetInstallResultSuccess struct {
}

// Constructs messages.StickerSetInstallResult
type TL_messages_stickerSetInstallResultArchive struct {
	Sets []TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
}

// Constructs StickerSetCovered
type TL_stickerSetCovered struct {
	Set   TL // StickerSet: TL_stickerSet
	Cover TL // Document: TL_documentEmpty | TL_document
}

// Constructs StickerSetCovered
type TL_stickerSetMultiCovered struct {
	Set    TL   // StickerSet: TL_stickerSet
	Covers []TL // Document: TL_documentEmpty | TL_document
}

// Constructs StickerSetCovered
type TL_stickerSetFullCovered struct {
	Set       TL   // StickerSet: TL_stickerSet
	Packs     []TL // StickerPack: TL_stickerPack
	Keywords  []TL // StickerKeyword: TL_stickerKeyword
	Documents []TL // Document: TL_documentEmpty | TL_document
}

// Constructs StickerSetCovered
type TL_stickerSetNoCovered struct {
	Set TL // StickerSet: TL_stickerSet
}

// Constructs MaskCoords
type TL_maskCoords struct {
	N    int32
	X    float64
	Y    float64
	Zoom float64
}

// Constructs InputStickeredMedia
type TL_inputStickeredMediaPhoto struct {
	ID TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
}

// Constructs InputStickeredMedia
type TL_inputStickeredMediaDocument struct {
	ID TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
}

// Constructs Game
type TL_game struct {
	ID          int64
	AccessHash  int64
	ShortName   string
	Title       string
	Description string
	Photo       TL // Photo: TL_photoEmpty | TL_photo
	Document    TL // (optional) Document: TL_documentEmpty | TL_document
}

// Constructs InputGame
type TL_inputGameID struct {
	ID         int64
	AccessHash int64
}

// Constructs InputGame
type TL_inputGameShortName struct {
	BotID     TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	ShortName string
}

// Constructs HighScore
type TL_highScore struct {
	Pos    int32
	UserID int64
	Score  int32
}

// Constructs messages.HighScores
type TL_messages_highScores struct {
	Scores []TL // HighScore: TL_highScore
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs RichText
type TL_textEmpty struct {
}

// Constructs RichText
type TL_textPlain struct {
	Text string
}

// Constructs RichText
type TL_textBold struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textItalic struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textUnderline struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textStrike struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textFixed struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textUrl struct {
	Text      TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Url       string
	WebpageID int64
}

// Constructs RichText
type TL_textEmail struct {
	Text  TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Email string
}

// Constructs RichText
type TL_textConcat struct {
	Texts []TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textSubscript struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textSuperscript struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textMarked struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textPhone struct {
	Text  TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Phone string
}

// Constructs RichText
type TL_textImage struct {
	DocumentID int64
	W          int32
	H          int32
}

// Constructs RichText
type TL_textAnchor struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Name string
}

// Constructs PageBlock
type TL_pageBlockUnsupported struct {
}

// Constructs PageBlock
type TL_pageBlockTitle struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockSubtitle struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockAuthorDate struct {
	Author        TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	PublishedDate int32
}

// Constructs PageBlock
type TL_pageBlockHeader struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockSubheader struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockParagraph struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockPreformatted struct {
	Text     TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Language string
}

// Constructs PageBlock
type TL_pageBlockFooter struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockDivider struct {
}

// Constructs PageBlock
type TL_pageBlockAnchor struct {
	Name string
}

// Constructs PageBlock
type TL_pageBlockList struct {
	Items []TL // PageListItem: TL_pageListItemText | TL_pageListItemBlocks
}

// Constructs PageBlock
type TL_pageBlockBlockquote struct {
	Text    TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Caption TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockPullquote struct {
	Text    TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Caption TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockPhoto struct {
	PhotoID   int64
	Caption   TL             // PageCaption: TL_pageCaption
	Url       Option[string] // (optional)
	WebpageID Option[int64]  // (optional)
}

// Constructs PageBlock
type TL_pageBlockVideo struct {
	Autoplay bool
	Loop     bool
	VideoID  int64
	Caption  TL // PageCaption: TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockCover struct {
	Cover TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
}

// Constructs PageBlock
type TL_pageBlockEmbed struct {
	FullWidth      bool
	AllowScrolling bool
	Url            Option[string] // (optional)
	Html           Option[string] // (optional)
	PosterPhotoID  Option[int64]  // (optional)
	W              Option[int32]  // (optional)
	H              Option[int32]  // (optional)
	Caption        TL             // PageCaption: TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockEmbedPost struct {
	Url           string
	WebpageID     int64
	AuthorPhotoID int64
	Author        string
	Date          int32
	Blocks        []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Caption       TL   // PageCaption: TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockCollage struct {
	Items   []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Caption TL   // PageCaption: TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockSlideshow struct {
	Items   []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Caption TL   // PageCaption: TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockChannel struct {
	Channel TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
}

// Constructs PageBlock
type TL_pageBlockAudio struct {
	AudioID int64
	Caption TL // PageCaption: TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockKicker struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockTable struct {
	Bordered bool
	Striped  bool
	Title    TL   // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Rows     []TL // PageTableRow: TL_pageTableRow
}

// Constructs PageBlock
type TL_pageBlockOrderedList struct {
	Items []TL // PageListOrderedItem: TL_pageListOrderedItemText | TL_pageListOrderedItemBlocks
}

// Constructs PageBlock
type TL_pageBlockDetails struct {
	Open   bool
	Blocks []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Title  TL   // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockRelatedArticles struct {
	Title    TL   // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Articles []TL // PageRelatedArticle: TL_pageRelatedArticle
}

// Constructs PageBlock
type TL_pageBlockMap struct {
	Geo     TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Zoom    int32
	W       int32
	H       int32
	Caption TL // PageCaption: TL_pageCaption
}

// Constructs PhoneCallDiscardReason
type TL_phoneCallDiscardReasonMissed struct {
}

// Constructs PhoneCallDiscardReason
type TL_phoneCallDiscardReasonDisconnect struct {
}

// Constructs PhoneCallDiscardReason
type TL_phoneCallDiscardReasonHangup struct {
}

// Constructs PhoneCallDiscardReason
type TL_phoneCallDiscardReasonBusy struct {
}

// Constructs DataJSON
type TL_dataJSON struct {
	Data string
}

// Constructs LabeledPrice
type TL_labeledPrice struct {
	Label  string
	Amount int64
}

// Constructs Invoice
type TL_invoice struct {
	Test                     bool
	NameRequested            bool
	PhoneRequested           bool
	EmailRequested           bool
	ShippingAddressRequested bool
	Flexible                 bool
	PhoneToProvider          bool
	EmailToProvider          bool
	Recurring                bool
	Currency                 string
	Prices                   []TL           // LabeledPrice: TL_labeledPrice
	MaxTipAmount             Option[int64]  // (optional)
	SuggestedTipAmounts      []int64        // (optional)
	TermsUrl                 Option[string] // (optional)
}

// Constructs PaymentCharge
type TL_paymentCharge struct {
	ID               string
	ProviderChargeID string
}

// Constructs PostAddress
type TL_postAddress struct {
	StreetLine1 string
	StreetLine2 string
	City        string
	State       string
	CountryIso2 string
	PostCode    string
}

// Constructs PaymentRequestedInfo
type TL_paymentRequestedInfo struct {
	Name            Option[string] // (optional)
	Phone           Option[string] // (optional)
	Email           Option[string] // (optional)
	ShippingAddress TL             // (optional) PostAddress: TL_postAddress
}

// Constructs PaymentSavedCredentials
type TL_paymentSavedCredentialsCard struct {
	ID    string
	Title string
}

// Constructs WebDocument
type TL_webDocument struct {
	Url        string
	AccessHash int64
	Size       int32
	MimeType   string
	Attributes []TL // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
}

// Constructs WebDocument
type TL_webDocumentNoProxy struct {
	Url        string
	Size       int32
	MimeType   string
	Attributes []TL // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
}

// Constructs InputWebDocument
type TL_inputWebDocument struct {
	Url        string
	Size       int32
	MimeType   string
	Attributes []TL // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
}

// Constructs InputWebFileLocation
type TL_inputWebFileLocation struct {
	Url        string
	AccessHash int64
}

// Constructs InputWebFileLocation
type TL_inputWebFileGeoPointLocation struct {
	GeoPoint   TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	AccessHash int64
	W          int32
	H          int32
	Zoom       int32
	Scale      int32
}

// Constructs InputWebFileLocation
type TL_inputWebFileAudioAlbumThumbLocation struct {
	Small     bool
	Document  TL             // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Title     Option[string] // (optional)
	Performer Option[string] // (optional)
}

// Constructs upload.WebFile
type TL_upload_webFile struct {
	Size     int32
	MimeType string
	FileType TL // storage.FileType: TL_storage_fileUnknown | TL_storage_filePartial | TL_storage_fileJpeg | TL_storage_fileGif | TL_storage_filePng | TL_storage_filePdf | TL_storage_fileMp3 | TL_storage_fileMov | TL_storage_fileMp4 | TL_storage_fileWebp
	Mtime    int32
	Bytes    []byte
}

// Constructs payments.PaymentForm
type TL_payments_paymentForm struct {
	CanSaveCredentials bool
	PasswordMissing    bool
	FormID             int64
	BotID              int64
	Title              string
	Description        string
	Photo              TL // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Invoice            TL // Invoice: TL_invoice
	ProviderID         int64
	Url                string
	NativeProvider     Option[string] // (optional)
	NativeParams       TL             // (optional) DataJSON: TL_dataJSON
	AdditionalMethods  []TL           // (optional) PaymentFormMethod: TL_paymentFormMethod
	SavedInfo          TL             // (optional) PaymentRequestedInfo: TL_paymentRequestedInfo
	SavedCredentials   []TL           // (optional) PaymentSavedCredentials: TL_paymentSavedCredentialsCard
	Users              []TL           // User: TL_userEmpty | TL_user
}

// Constructs payments.ValidatedRequestedInfo
type TL_payments_validatedRequestedInfo struct {
	ID              Option[string] // (optional)
	ShippingOptions []TL           // (optional) ShippingOption: TL_shippingOption
}

// Constructs payments.PaymentResult
type TL_payments_paymentResult struct {
	Updates TL // Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
}

// Constructs payments.PaymentResult
type TL_payments_paymentVerificationNeeded struct {
	Url string
}

// Constructs payments.PaymentReceipt
type TL_payments_paymentReceipt struct {
	Date             int32
	BotID            int64
	ProviderID       int64
	Title            string
	Description      string
	Photo            TL            // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Invoice          TL            // Invoice: TL_invoice
	Info             TL            // (optional) PaymentRequestedInfo: TL_paymentRequestedInfo
	Shipping         TL            // (optional) ShippingOption: TL_shippingOption
	TipAmount        Option[int64] // (optional)
	Currency         string
	TotalAmount      int64
	CredentialsTitle string
	Users            []TL // User: TL_userEmpty | TL_user
}

// Constructs payments.SavedInfo
type TL_payments_savedInfo struct {
	HasSavedCredentials bool
	SavedInfo           TL // (optional) PaymentRequestedInfo: TL_paymentRequestedInfo
}

// Constructs InputPaymentCredentials
type TL_inputPaymentCredentialsSaved struct {
	ID          string
	TmpPassword []byte
}

// Constructs InputPaymentCredentials
type TL_inputPaymentCredentials struct {
	Save bool
	Data TL // DataJSON: TL_dataJSON
}

// Constructs InputPaymentCredentials
type TL_inputPaymentCredentialsApplePay struct {
	PaymentData TL // DataJSON: TL_dataJSON
}

// Constructs InputPaymentCredentials
type TL_inputPaymentCredentialsGooglePay struct {
	PaymentToken TL // DataJSON: TL_dataJSON
}

// Constructs account.TmpPassword
type TL_account_tmpPassword struct {
	TmpPassword []byte
	ValidUntil  int32
}

// Constructs ShippingOption
type TL_shippingOption struct {
	ID     string
	Title  string
	Prices []TL // LabeledPrice: TL_labeledPrice
}

// Constructs InputStickerSetItem
type TL_inputStickerSetItem struct {
	Document   TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Emoji      string
	MaskCoords TL             // (optional) MaskCoords: TL_maskCoords
	Keywords   Option[string] // (optional)
}

// Constructs InputPhoneCall
type TL_inputPhoneCall struct {
	ID         int64
	AccessHash int64
}

// Constructs PhoneCall
type TL_phoneCallEmpty struct {
	ID int64
}

// Constructs PhoneCall
type TL_phoneCallWaiting struct {
	Video         bool
	ID            int64
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
	Protocol      TL            // PhoneCallProtocol: TL_phoneCallProtocol
	ReceiveDate   Option[int32] // (optional)
}

// Constructs PhoneCall
type TL_phoneCallRequested struct {
	Video         bool
	ID            int64
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
	GAHash        []byte
	Protocol      TL // PhoneCallProtocol: TL_phoneCallProtocol
}

// Constructs PhoneCall
type TL_phoneCallAccepted struct {
	Video         bool
	ID            int64
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
	GB            []byte
	Protocol      TL // PhoneCallProtocol: TL_phoneCallProtocol
}

// Constructs PhoneCall
type TL_phoneCall struct {
	P2pAllowed     bool
	Video          bool
	ID             int64
	AccessHash     int64
	Date           int32
	AdminID        int64
	ParticipantID  int64
	GAOrB          []byte
	KeyFingerprint int64
	Protocol       TL   // PhoneCallProtocol: TL_phoneCallProtocol
	Connections    []TL // PhoneConnection: TL_phoneConnection | TL_phoneConnectionWebrtc
	StartDate      int32
}

// Constructs PhoneCall
type TL_phoneCallDiscarded struct {
	NeedRating bool
	NeedDebug  bool
	Video      bool
	ID         int64
	Reason     TL            // (optional) PhoneCallDiscardReason: TL_phoneCallDiscardReasonMissed | TL_phoneCallDiscardReasonDisconnect | TL_phoneCallDiscardReasonHangup | TL_phoneCallDiscardReasonBusy
	Duration   Option[int32] // (optional)
}

// Constructs PhoneConnection
type TL_phoneConnection struct {
	Tcp     bool
	ID      int64
	Ip      string
	Ipv6    string
	Port    int32
	PeerTag []byte
}

// Constructs PhoneConnection
type TL_phoneConnectionWebrtc struct {
	Turn     bool
	Stun     bool
	ID       int64
	Ip       string
	Ipv6     string
	Port     int32
	Username string
	Password string
}

// Constructs PhoneCallProtocol
type TL_phoneCallProtocol struct {
	UdpP2p          bool
	UdpReflector    bool
	MinLayer        int32
	MaxLayer        int32
	LibraryVersions []string
}

// Constructs phone.PhoneCall
type TL_phone_phoneCall struct {
	PhoneCall TL   // PhoneCall: TL_phoneCallEmpty | TL_phoneCallWaiting | TL_phoneCallRequested | TL_phoneCallAccepted | TL_phoneCall | TL_phoneCallDiscarded
	Users     []TL // User: TL_userEmpty | TL_user
}

// Constructs upload.CdnFile
type TL_upload_cdnFileReuploadNeeded struct {
	RequestToken []byte
}

// Constructs upload.CdnFile
type TL_upload_cdnFile struct {
	Bytes []byte
}

// Constructs CdnPublicKey
type TL_cdnPublicKey struct {
	DcID      int32
	PublicKey string
}

// Constructs CdnConfig
type TL_cdnConfig struct {
	PublicKeys []TL // CdnPublicKey: TL_cdnPublicKey
}

// Constructs LangPackString
type TL_langPackString struct {
	Key   string
	Value string
}

// Constructs LangPackString
type TL_langPackStringPluralized struct {
	Key        string
	ZeroValue  Option[string] // (optional)
	OneValue   Option[string] // (optional)
	TwoValue   Option[string] // (optional)
	FewValue   Option[string] // (optional)
	ManyValue  Option[string] // (optional)
	OtherValue string
}

// Constructs LangPackString
type TL_langPackStringDeleted struct {
	Key string
}

// Constructs LangPackDifference
type TL_langPackDifference struct {
	LangCode    string
	FromVersion int32
	Version     int32
	Strings     []TL // LangPackString: TL_langPackString | TL_langPackStringPluralized | TL_langPackStringDeleted
}

// Constructs LangPackLanguage
type TL_langPackLanguage struct {
	Official        bool
	Rtl             bool
	Beta            bool
	Name            string
	NativeName      string
	LangCode        string
	BaseLangCode    Option[string] // (optional)
	PluralCode      string
	StringsCount    int32
	TranslatedCount int32
	TranslationsUrl string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeTitle struct {
	PrevValue string
	NewValue  string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeAbout struct {
	PrevValue string
	NewValue  string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeUsername struct {
	PrevValue string
	NewValue  string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangePhoto struct {
	PrevPhoto TL // Photo: TL_photoEmpty | TL_photo
	NewPhoto  TL // Photo: TL_photoEmpty | TL_photo
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleInvites struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleSignatures struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionUpdatePinned struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionEditMessage struct {
	PrevMessage TL // Message: TL_messageEmpty | TL_message | TL_messageService
	NewMessage  TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionDeleteMessage struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantJoin struct {
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantLeave struct {
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantInvite struct {
	Participant TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantToggleBan struct {
	PrevParticipant TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	NewParticipant  TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantToggleAdmin struct {
	PrevParticipant TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	NewParticipant  TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeStickerSet struct {
	PrevStickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
	NewStickerset  TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionTogglePreHistoryHidden struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionDefaultBannedRights struct {
	PrevBannedRights TL // ChatBannedRights: TL_chatBannedRights
	NewBannedRights  TL // ChatBannedRights: TL_chatBannedRights
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionStopPoll struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeLinkedChat struct {
	PrevValue int64
	NewValue  int64
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeLocation struct {
	PrevValue TL // ChannelLocation: TL_channelLocationEmpty | TL_channelLocation
	NewValue  TL // ChannelLocation: TL_channelLocationEmpty | TL_channelLocation
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleSlowMode struct {
	PrevValue int32
	NewValue  int32
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionStartGroupCall struct {
	Call TL // InputGroupCall: TL_inputGroupCall
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionDiscardGroupCall struct {
	Call TL // InputGroupCall: TL_inputGroupCall
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantMute struct {
	Participant TL // GroupCallParticipant: TL_groupCallParticipant
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantUnmute struct {
	Participant TL // GroupCallParticipant: TL_groupCallParticipant
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleGroupCallSetting struct {
	JoinMuted bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantJoinByInvite struct {
	ViaChatlist bool
	Invite      TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionExportedInviteDelete struct {
	Invite TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionExportedInviteRevoke struct {
	Invite TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionExportedInviteEdit struct {
	PrevInvite TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	NewInvite  TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantVolume struct {
	Participant TL // GroupCallParticipant: TL_groupCallParticipant
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeHistoryTTL struct {
	PrevValue int32
	NewValue  int32
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantJoinByRequest struct {
	Invite     TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	ApprovedBy int64
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleNoForwards struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionSendMessage struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeAvailableReactions struct {
	PrevValue TL // ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
	NewValue  TL // ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeUsernames struct {
	PrevValue []string
	NewValue  []string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleForum struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionCreateTopic struct {
	Topic TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionEditTopic struct {
	PrevTopic TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
	NewTopic  TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionDeleteTopic struct {
	Topic TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionPinTopic struct {
	PrevTopic TL // (optional) ForumTopic: TL_forumTopicDeleted | TL_forumTopic
	NewTopic  TL // (optional) ForumTopic: TL_forumTopicDeleted | TL_forumTopic
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleAntiSpam struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeColor struct {
	PrevValue int32
	NewValue  int32
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeBackgroundEmoji struct {
	PrevValue int64
	NewValue  int64
}

// Constructs ChannelAdminLogEvent
type TL_channelAdminLogEvent struct {
	ID     int64
	Date   int32
	UserID int64
	Action TL // ChannelAdminLogEventAction: TL_channelAdminLogEventActionChangeTitle | TL_channelAdminLogEventActionChangeAbout | TL_channelAdminLogEventActionChangeUsername | TL_channelAdminLogEventActionChangePhoto | TL_channelAdminLogEventActionToggleInvites | TL_channelAdminLogEventActionToggleSignatures | TL_channelAdminLogEventActionUpdatePinned | TL_channelAdminLogEventActionEditMessage | TL_channelAdminLogEventActionDeleteMessage | TL_channelAdminLogEventActionParticipantJoin | TL_channelAdminLogEventActionParticipantLeave | TL_channelAdminLogEventActionParticipantInvite | TL_channelAdminLogEventActionParticipantToggleBan | TL_channelAdminLogEventActionParticipantToggleAdmin | TL_channelAdminLogEventActionChangeStickerSet | TL_channelAdminLogEventActionTogglePreHistoryHidden | TL_channelAdminLogEventActionDefaultBannedRights | TL_channelAdminLogEventActionStopPoll | TL_channelAdminLogEventActionChangeLinkedChat | TL_channelAdminLogEventActionChangeLocation | TL_channelAdminLogEventActionToggleSlowMode | TL_channelAdminLogEventActionStartGroupCall | TL_channelAdminLogEventActionDiscardGroupCall | TL_channelAdminLogEventActionParticipantMute | TL_channelAdminLogEventActionParticipantUnmute | TL_channelAdminLogEventActionToggleGroupCallSetting | TL_channelAdminLogEventActionParticipantJoinByInvite | TL_channelAdminLogEventActionExportedInviteDelete | TL_channelAdminLogEventActionExportedInviteRevoke | TL_channelAdminLogEventActionExportedInviteEdit | TL_channelAdminLogEventActionParticipantVolume | TL_channelAdminLogEventActionChangeHistoryTTL | TL_channelAdminLogEventActionParticipantJoinByRequest | TL_channelAdminLogEventActionToggleNoForwards | TL_channelAdminLogEventActionSendMessage | TL_channelAdminLogEventActionChangeAvailableReactions | TL_channelAdminLogEventActionChangeUsernames | TL_channelAdminLogEventActionToggleForum | TL_channelAdminLogEventActionCreateTopic | TL_channelAdminLogEventActionEditTopic | TL_channelAdminLogEventActionDeleteTopic | TL_channelAdminLogEventActionPinTopic | TL_channelAdminLogEventActionToggleAntiSpam | TL_channelAdminLogEventActionChangeColor | TL_channelAdminLogEventActionChangeBackgroundEmoji
}

// Constructs channels.AdminLogResults
type TL_channels_adminLogResults struct {
	Events []TL // ChannelAdminLogEvent: TL_channelAdminLogEvent
	Chats  []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs ChannelAdminLogEventsFilter
type TL_channelAdminLogEventsFilter struct {
	Join      bool
	Leave     bool
	Invite    bool
	Ban       bool
	Unban     bool
	Kick      bool
	Unkick    bool
	Promote   bool
	Demote    bool
	Info      bool
	Settings  bool
	Pinned    bool
	Edit      bool
	Delete    bool
	GroupCall bool
	Invites   bool
	Send      bool
	Forums    bool
}

// Constructs PopularContact
type TL_popularContact struct {
	ClientID  int64
	Importers int32
}

// Constructs messages.FavedStickers
type TL_messages_favedStickersNotModified struct {
}

// Constructs messages.FavedStickers
type TL_messages_favedStickers struct {
	Hash     int64
	Packs    []TL // StickerPack: TL_stickerPack
	Stickers []TL // Document: TL_documentEmpty | TL_document
}

// Constructs RecentMeUrl
type TL_recentMeUrlUnknown struct {
	Url string
}

// Constructs RecentMeUrl
type TL_recentMeUrlUser struct {
	Url    string
	UserID int64
}

// Constructs RecentMeUrl
type TL_recentMeUrlChat struct {
	Url    string
	ChatID int64
}

// Constructs RecentMeUrl
type TL_recentMeUrlChatInvite struct {
	Url        string
	ChatInvite TL // ChatInvite: TL_chatInviteAlready | TL_chatInvite | TL_chatInvitePeek
}

// Constructs RecentMeUrl
type TL_recentMeUrlStickerSet struct {
	Url string
	Set TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
}

// Constructs help.RecentMeUrls
type TL_help_recentMeUrls struct {
	Urls  []TL // RecentMeUrl: TL_recentMeUrlUnknown | TL_recentMeUrlUser | TL_recentMeUrlChat | TL_recentMeUrlChatInvite | TL_recentMeUrlStickerSet
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs InputSingleMedia
type TL_inputSingleMedia struct {
	Media    TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
	RandomID int64
	Message  string
	Entities []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs WebAuthorization
type TL_webAuthorization struct {
	Hash        int64
	BotID       int64
	Domain      string
	Browser     string
	Platform    string
	DateCreated int32
	DateActive  int32
	Ip          string
	Region      string
}

// Constructs account.WebAuthorizations
type TL_account_webAuthorizations struct {
	Authorizations []TL // WebAuthorization: TL_webAuthorization
	Users          []TL // User: TL_userEmpty | TL_user
}

// Constructs InputMessage
type TL_inputMessageID struct {
	ID int32
}

// Constructs InputMessage
type TL_inputMessageReplyTo struct {
	ID int32
}

// Constructs InputMessage
type TL_inputMessagePinned struct {
}

// Constructs InputMessage
type TL_inputMessageCallbackQuery struct {
	ID      int32
	QueryID int64
}

// Constructs InputDialogPeer
type TL_inputDialogPeer struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs InputDialogPeer
type TL_inputDialogPeerFolder struct {
	FolderID int32
}

// Constructs DialogPeer
type TL_dialogPeer struct {
	Peer TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs DialogPeer
type TL_dialogPeerFolder struct {
	FolderID int32
}

// Constructs messages.FoundStickerSets
type TL_messages_foundStickerSetsNotModified struct {
}

// Constructs messages.FoundStickerSets
type TL_messages_foundStickerSets struct {
	Hash int64
	Sets []TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
}

// Constructs FileHash
type TL_fileHash struct {
	Offset int64
	Limit  int32
	Hash   []byte
}

// Constructs InputClientProxy
type TL_inputClientProxy struct {
	Address string
	Port    int32
}

// Constructs help.TermsOfServiceUpdate
type TL_help_termsOfServiceUpdateEmpty struct {
	Expires int32
}

// Constructs help.TermsOfServiceUpdate
type TL_help_termsOfServiceUpdate struct {
	Expires        int32
	TermsOfService TL // help.TermsOfService: TL_help_termsOfService
}

// Constructs InputSecureFile
type TL_inputSecureFileUploaded struct {
	ID          int64
	Parts       int32
	Md5Checksum string
	FileHash    []byte
	Secret      []byte
}

// Constructs InputSecureFile
type TL_inputSecureFile struct {
	ID         int64
	AccessHash int64
}

// Constructs SecureFile
type TL_secureFileEmpty struct {
}

// Constructs SecureFile
type TL_secureFile struct {
	ID         int64
	AccessHash int64
	Size       int64
	DcID       int32
	Date       int32
	FileHash   []byte
	Secret     []byte
}

// Constructs SecureData
type TL_secureData struct {
	Data     []byte
	DataHash []byte
	Secret   []byte
}

// Constructs SecurePlainData
type TL_securePlainPhone struct {
	Phone string
}

// Constructs SecurePlainData
type TL_securePlainEmail struct {
	Email string
}

// Constructs SecureValueType
type TL_secureValueTypePersonalDetails struct {
}

// Constructs SecureValueType
type TL_secureValueTypePassport struct {
}

// Constructs SecureValueType
type TL_secureValueTypeDriverLicense struct {
}

// Constructs SecureValueType
type TL_secureValueTypeIdentityCard struct {
}

// Constructs SecureValueType
type TL_secureValueTypeInternalPassport struct {
}

// Constructs SecureValueType
type TL_secureValueTypeAddress struct {
}

// Constructs SecureValueType
type TL_secureValueTypeUtilityBill struct {
}

// Constructs SecureValueType
type TL_secureValueTypeBankStatement struct {
}

// Constructs SecureValueType
type TL_secureValueTypeRentalAgreement struct {
}

// Constructs SecureValueType
type TL_secureValueTypePassportRegistration struct {
}

// Constructs SecureValueType
type TL_secureValueTypeTemporaryRegistration struct {
}

// Constructs SecureValueType
type TL_secureValueTypePhone struct {
}

// Constructs SecureValueType
type TL_secureValueTypeEmail struct {
}

// Constructs SecureValue
type TL_secureValue struct {
	Type        TL   // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	Data        TL   // (optional) SecureData: TL_secureData
	FrontSide   TL   // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	ReverseSide TL   // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	Selfie      TL   // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	Translation []TL // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	Files       []TL // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	PlainData   TL   // (optional) SecurePlainData: TL_securePlainPhone | TL_securePlainEmail
	Hash        []byte
}

// Constructs InputSecureValue
type TL_inputSecureValue struct {
	Type        TL   // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	Data        TL   // (optional) SecureData: TL_secureData
	FrontSide   TL   // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	ReverseSide TL   // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	Selfie      TL   // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	Translation []TL // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	Files       []TL // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	PlainData   TL   // (optional) SecurePlainData: TL_securePlainPhone | TL_securePlainEmail
}

// Constructs SecureValueHash
type TL_secureValueHash struct {
	Type TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	Hash []byte
}

// Constructs SecureValueError
type TL_secureValueErrorData struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	DataHash []byte
	Field    string
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorFrontSide struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorReverseSide struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorSelfie struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorFile struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorFiles struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash [][]byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueError struct {
	Type TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	Hash []byte
	Text string
}

// Constructs SecureValueError
type TL_secureValueErrorTranslationFile struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorTranslationFiles struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash [][]byte
	Text     string
}

// Constructs SecureCredentialsEncrypted
type TL_secureCredentialsEncrypted struct {
	Data   []byte
	Hash   []byte
	Secret []byte
}

// Constructs account.AuthorizationForm
type TL_account_authorizationForm struct {
	RequiredTypes    []TL           // SecureRequiredType: TL_secureRequiredType | TL_secureRequiredTypeOneOf
	Values           []TL           // SecureValue: TL_secureValue
	Errors           []TL           // SecureValueError: TL_secureValueErrorData | TL_secureValueErrorFrontSide | TL_secureValueErrorReverseSide | TL_secureValueErrorSelfie | TL_secureValueErrorFile | TL_secureValueErrorFiles | TL_secureValueError | TL_secureValueErrorTranslationFile | TL_secureValueErrorTranslationFiles
	Users            []TL           // User: TL_userEmpty | TL_user
	PrivacyPolicyUrl Option[string] // (optional)
}

// Constructs account.SentEmailCode
type TL_account_sentEmailCode struct {
	EmailPattern string
	Length       int32
}

// Constructs help.DeepLinkInfo
type TL_help_deepLinkInfoEmpty struct {
}

// Constructs help.DeepLinkInfo
type TL_help_deepLinkInfo struct {
	UpdateApp bool
	Message   string
	Entities  []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs SavedContact
type TL_savedPhoneContact struct {
	Phone     string
	FirstName string
	LastName  string
	Date      int32
}

// Constructs account.Takeout
type TL_account_takeout struct {
	ID int64
}

// Constructs PasswordKdfAlgo
type TL_passwordKdfAlgoUnknown struct {
}

// Constructs PasswordKdfAlgo
type TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow struct {
	Salt1 []byte
	Salt2 []byte
	G     int32
	P     []byte
}

// Constructs SecurePasswordKdfAlgo
type TL_securePasswordKdfAlgoUnknown struct {
}

// Constructs SecurePasswordKdfAlgo
type TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 struct {
	Salt []byte
}

// Constructs SecurePasswordKdfAlgo
type TL_securePasswordKdfAlgoSHA512 struct {
	Salt []byte
}

// Constructs SecureSecretSettings
type TL_secureSecretSettings struct {
	SecureAlgo     TL // SecurePasswordKdfAlgo: TL_securePasswordKdfAlgoUnknown | TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 | TL_securePasswordKdfAlgoSHA512
	SecureSecret   []byte
	SecureSecretID int64
}

// Constructs InputCheckPasswordSRP
type TL_inputCheckPasswordEmpty struct {
}

// Constructs InputCheckPasswordSRP
type TL_inputCheckPasswordSRP struct {
	SrpID int64
	A     []byte
	M1    []byte
}

// Constructs SecureRequiredType
type TL_secureRequiredType struct {
	NativeNames         bool
	SelfieRequired      bool
	TranslationRequired bool
	Type                TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
}

// Constructs SecureRequiredType
type TL_secureRequiredTypeOneOf struct {
	Types []TL // SecureRequiredType: TL_secureRequiredType | TL_secureRequiredTypeOneOf
}

// Constructs help.PassportConfig
type TL_help_passportConfigNotModified struct {
}

// Constructs help.PassportConfig
type TL_help_passportConfig struct {
	Hash           int32
	CountriesLangs TL // DataJSON: TL_dataJSON
}

// Constructs InputAppEvent
type TL_inputAppEvent struct {
	Time float64
	Type string
	Peer int64
	Data TL // JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
}

// Constructs JSONObjectValue
type TL_jsonObjectValue struct {
	Key   string
	Value TL // JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
}

// Constructs JSONValue
type TL_jsonNull struct {
}

// Constructs JSONValue
type TL_jsonBool struct {
	Value bool
}

// Constructs JSONValue
type TL_jsonNumber struct {
	Value float64
}

// Constructs JSONValue
type TL_jsonString struct {
	Value string
}

// Constructs JSONValue
type TL_jsonArray struct {
	Value []TL // JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
}

// Constructs JSONValue
type TL_jsonObject struct {
	Value []TL // JSONObjectValue: TL_jsonObjectValue
}

// Constructs PageTableCell
type TL_pageTableCell struct {
	Header       bool
	AlignCenter  bool
	AlignRight   bool
	ValignMiddle bool
	ValignBottom bool
	Text         TL            // (optional) RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Colspan      Option[int32] // (optional)
	Rowspan      Option[int32] // (optional)
}

// Constructs PageTableRow
type TL_pageTableRow struct {
	Cells []TL // PageTableCell: TL_pageTableCell
}

// Constructs PageCaption
type TL_pageCaption struct {
	Text   TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Credit TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageListItem
type TL_pageListItemText struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageListItem
type TL_pageListItemBlocks struct {
	Blocks []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
}

// Constructs PageListOrderedItem
type TL_pageListOrderedItemText struct {
	Num  string
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textUrl | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageListOrderedItem
type TL_pageListOrderedItemBlocks struct {
	Num    string
	Blocks []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
}

// Constructs PageRelatedArticle
type TL_pageRelatedArticle struct {
	Url           string
	WebpageID     int64
	Title         Option[string] // (optional)
	Description   Option[string] // (optional)
	PhotoID       Option[int64]  // (optional)
	Author        Option[string] // (optional)
	PublishedDate Option[int32]  // (optional)
}

// Constructs Page
type TL_page struct {
	Part      bool
	Rtl       bool
	V2        bool
	Url       string
	Blocks    []TL          // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Photos    []TL          // Photo: TL_photoEmpty | TL_photo
	Documents []TL          // Document: TL_documentEmpty | TL_document
	Views     Option[int32] // (optional)
}

// Constructs help.SupportName
type TL_help_supportName struct {
	Name string
}

// Constructs help.UserInfo
type TL_help_userInfoEmpty struct {
}

// Constructs help.UserInfo
type TL_help_userInfo struct {
	Message  string
	Entities []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Author   string
	Date     int32
}

// Constructs PollAnswer
type TL_pollAnswer struct {
	Text   string
	Option []byte
}

// Constructs Poll
type TL_poll struct {
	ID             int64
	Closed         bool
	PublicVoters   bool
	MultipleChoice bool
	Quiz           bool
	Question       string
	Answers        []TL          // PollAnswer: TL_pollAnswer
	ClosePeriod    Option[int32] // (optional)
	CloseDate      Option[int32] // (optional)
}

// Constructs PollAnswerVoters
type TL_pollAnswerVoters struct {
	Chosen  bool
	Correct bool
	Option  []byte
	Voters  int32
}

// Constructs PollResults
type TL_pollResults struct {
	Min              bool
	Results          []TL           // (optional) PollAnswerVoters: TL_pollAnswerVoters
	TotalVoters      Option[int32]  // (optional)
	RecentVoters     []TL           // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Solution         Option[string] // (optional)
	SolutionEntities []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs ChatOnlines
type TL_chatOnlines struct {
	Onlines int32
}

// Constructs StatsURL
type TL_statsURL struct {
	Url string
}

// Constructs ChatAdminRights
type TL_chatAdminRights struct {
	ChangeInfo     bool
	PostMessages   bool
	EditMessages   bool
	DeleteMessages bool
	BanUsers       bool
	InviteUsers    bool
	PinMessages    bool
	AddAdmins      bool
	Anonymous      bool
	ManageCall     bool
	Other          bool
	ManageTopics   bool
	PostStories    bool
	EditStories    bool
	DeleteStories  bool
}

// Constructs ChatBannedRights
type TL_chatBannedRights struct {
	ViewMessages    bool
	SendMessages    bool
	SendMedia       bool
	SendStickers    bool
	SendGifs        bool
	SendGames       bool
	SendInline      bool
	EmbedLinks      bool
	SendPolls       bool
	ChangeInfo      bool
	InviteUsers     bool
	PinMessages     bool
	ManageTopics    bool
	SendPhotos      bool
	SendVideos      bool
	SendRoundvideos bool
	SendAudios      bool
	SendVoices      bool
	SendDocs        bool
	SendPlain       bool
	UntilDate       int32
}

// Constructs InputWallPaper
type TL_inputWallPaper struct {
	ID         int64
	AccessHash int64
}

// Constructs InputWallPaper
type TL_inputWallPaperSlug struct {
	Slug string
}

// Constructs InputWallPaper
type TL_inputWallPaperNoFile struct {
	ID int64
}

// Constructs account.WallPapers
type TL_account_wallPapersNotModified struct {
}

// Constructs account.WallPapers
type TL_account_wallPapers struct {
	Hash       int64
	Wallpapers []TL // WallPaper: TL_wallPaper | TL_wallPaperNoFile
}

// Constructs CodeSettings
type TL_codeSettings struct {
	AllowFlashcall  bool
	CurrentNumber   bool
	AllowAppHash    bool
	AllowMissedCall bool
	AllowFirebase   bool
	LogoutTokens    [][]byte       // (optional)
	Token           Option[string] // (optional)
	AppSandbox      Option[bool]   // (optional)
}

// Constructs WallPaperSettings
type TL_wallPaperSettings struct {
	Blur                  bool
	Motion                bool
	BackgroundColor       Option[int32] // (optional)
	SecondBackgroundColor Option[int32] // (optional)
	ThirdBackgroundColor  Option[int32] // (optional)
	FourthBackgroundColor Option[int32] // (optional)
	Intensity             Option[int32] // (optional)
	Rotation              Option[int32] // (optional)
}

// Constructs AutoDownloadSettings
type TL_autoDownloadSettings struct {
	Disabled                      bool
	VideoPreloadLarge             bool
	AudioPreloadNext              bool
	PhonecallsLessData            bool
	StoriesPreload                bool
	PhotoSizeMax                  int32
	VideoSizeMax                  int64
	FileSizeMax                   int64
	VideoUploadMaxbitrate         int32
	SmallQueueActiveOperationsMax int32
	LargeQueueActiveOperationsMax int32
}

// Constructs account.AutoDownloadSettings
type TL_account_autoDownloadSettings struct {
	Low    TL // AutoDownloadSettings: TL_autoDownloadSettings
	Medium TL // AutoDownloadSettings: TL_autoDownloadSettings
	High   TL // AutoDownloadSettings: TL_autoDownloadSettings
}

// Constructs EmojiKeyword
type TL_emojiKeyword struct {
	Keyword   string
	Emoticons []string
}

// Constructs EmojiKeyword
type TL_emojiKeywordDeleted struct {
	Keyword   string
	Emoticons []string
}

// Constructs EmojiKeywordsDifference
type TL_emojiKeywordsDifference struct {
	LangCode    string
	FromVersion int32
	Version     int32
	Keywords    []TL // EmojiKeyword: TL_emojiKeyword | TL_emojiKeywordDeleted
}

// Constructs EmojiURL
type TL_emojiURL struct {
	Url string
}

// Constructs EmojiLanguage
type TL_emojiLanguage struct {
	LangCode string
}

// Constructs Folder
type TL_folder struct {
	AutofillNewBroadcasts     bool
	AutofillPublicGroups      bool
	AutofillNewCorrespondents bool
	ID                        int32
	Title                     string
	Photo                     TL // (optional) ChatPhoto: TL_chatPhotoEmpty | TL_chatPhoto
}

// Constructs InputFolderPeer
type TL_inputFolderPeer struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	FolderID int32
}

// Constructs FolderPeer
type TL_folderPeer struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	FolderID int32
}

// Constructs messages.SearchCounter
type TL_messages_searchCounter struct {
	Inexact bool
	Filter  TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterUrl | TL_inputMessagesFilterGif | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	Count   int32
}

// Constructs UrlAuthResult
type TL_urlAuthResultRequest struct {
	RequestWriteAccess bool
	Bot                TL // User: TL_userEmpty | TL_user
	Domain             string
}

// Constructs UrlAuthResult
type TL_urlAuthResultAccepted struct {
	Url string
}

// Constructs UrlAuthResult
type TL_urlAuthResultDefault struct {
}

// Constructs ChannelLocation
type TL_channelLocationEmpty struct {
}

// Constructs ChannelLocation
type TL_channelLocation struct {
	GeoPoint TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Address  string
}

// Constructs PeerLocated
type TL_peerLocated struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Expires  int32
	Distance int32
}

// Constructs PeerLocated
type TL_peerSelfLocated struct {
	Expires int32
}

// Constructs RestrictionReason
type TL_restrictionReason struct {
	Platform string
	Reason   string
	Text     string
}

// Constructs InputTheme
type TL_inputTheme struct {
	ID         int64
	AccessHash int64
}

// Constructs InputTheme
type TL_inputThemeSlug struct {
	Slug string
}

// Constructs Theme
type TL_theme struct {
	Creator       bool
	Default       bool
	ForChat       bool
	ID            int64
	AccessHash    int64
	Slug          string
	Title         string
	Document      TL             // (optional) Document: TL_documentEmpty | TL_document
	Settings      []TL           // (optional) ThemeSettings: TL_themeSettings
	Emoticon      Option[string] // (optional)
	InstallsCount Option[int32]  // (optional)
}

// Constructs account.Themes
type TL_account_themesNotModified struct {
}

// Constructs account.Themes
type TL_account_themes struct {
	Hash   int64
	Themes []TL // Theme: TL_theme
}

// Constructs auth.LoginToken
type TL_auth_loginToken struct {
	Expires int32
	Token   []byte
}

// Constructs auth.LoginToken
type TL_auth_loginTokenMigrateTo struct {
	DcID  int32
	Token []byte
}

// Constructs auth.LoginToken
type TL_auth_loginTokenSuccess struct {
	Authorization TL // auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
}

// Constructs account.ContentSettings
type TL_account_contentSettings struct {
	SensitiveEnabled   bool
	SensitiveCanChange bool
}

// Constructs messages.InactiveChats
type TL_messages_inactiveChats struct {
	Dates []int32
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs BaseTheme
type TL_baseThemeClassic struct {
}

// Constructs BaseTheme
type TL_baseThemeDay struct {
}

// Constructs BaseTheme
type TL_baseThemeNight struct {
}

// Constructs BaseTheme
type TL_baseThemeTinted struct {
}

// Constructs BaseTheme
type TL_baseThemeArctic struct {
}

// Constructs InputThemeSettings
type TL_inputThemeSettings struct {
	MessageColorsAnimated bool
	BaseTheme             TL // BaseTheme: TL_baseThemeClassic | TL_baseThemeDay | TL_baseThemeNight | TL_baseThemeTinted | TL_baseThemeArctic
	AccentColor           int32
	OutboxAccentColor     Option[int32] // (optional)
	MessageColors         []int32       // (optional)
	Wallpaper             TL            // (optional) InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
	WallpaperSettings     TL            // (optional) WallPaperSettings: TL_wallPaperSettings
}

// Constructs ThemeSettings
type TL_themeSettings struct {
	MessageColorsAnimated bool
	BaseTheme             TL // BaseTheme: TL_baseThemeClassic | TL_baseThemeDay | TL_baseThemeNight | TL_baseThemeTinted | TL_baseThemeArctic
	AccentColor           int32
	OutboxAccentColor     Option[int32] // (optional)
	MessageColors         []int32       // (optional)
	Wallpaper             TL            // (optional) WallPaper: TL_wallPaper | TL_wallPaperNoFile
}

// Constructs WebPageAttribute
type TL_webPageAttributeTheme struct {
	Documents []TL // (optional) Document: TL_documentEmpty | TL_document
	Settings  TL   // (optional) ThemeSettings: TL_themeSettings
}

// Constructs WebPageAttribute
type TL_webPageAttributeStory struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ID    int32
	Story TL // (optional) StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs messages.VotesList
type TL_messages_votesList struct {
	Count      int32
	Votes      []TL           // MessagePeerVote: TL_messagePeerVote | TL_messagePeerVoteInputOption | TL_messagePeerVoteMultiple
	Chats      []TL           // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL           // User: TL_userEmpty | TL_user
	NextOffset Option[string] // (optional)
}

// Constructs BankCardOpenUrl
type TL_bankCardOpenUrl struct {
	Url  string
	Name string
}

// Constructs payments.BankCardData
type TL_payments_bankCardData struct {
	Title    string
	OpenUrls []TL // BankCardOpenUrl: TL_bankCardOpenUrl
}

// Constructs DialogFilter
type TL_dialogFilter struct {
	Contacts        bool
	NonContacts     bool
	Groups          bool
	Broadcasts      bool
	Bots            bool
	ExcludeMuted    bool
	ExcludeRead     bool
	ExcludeArchived bool
	ID              int32
	Title           string
	Emoticon        Option[string] // (optional)
	PinnedPeers     []TL           // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	IncludePeers    []TL           // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ExcludePeers    []TL           // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs DialogFilter
type TL_dialogFilterDefault struct {
}

// Constructs DialogFilter
type TL_dialogFilterChatlist struct {
	HasMyInvites bool
	ID           int32
	Title        string
	Emoticon     Option[string] // (optional)
	PinnedPeers  []TL           // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	IncludePeers []TL           // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs DialogFilterSuggested
type TL_dialogFilterSuggested struct {
	Filter      TL // DialogFilter: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
	Description string
}

// Constructs StatsDateRangeDays
type TL_statsDateRangeDays struct {
	MinDate int32
	MaxDate int32
}

// Constructs StatsAbsValueAndPrev
type TL_statsAbsValueAndPrev struct {
	Current  float64
	Previous float64
}

// Constructs StatsPercentValue
type TL_statsPercentValue struct {
	Part  float64
	Total float64
}

// Constructs StatsGraph
type TL_statsGraphAsync struct {
	Token string
}

// Constructs StatsGraph
type TL_statsGraphError struct {
	Error string
}

// Constructs StatsGraph
type TL_statsGraph struct {
	Json      TL             // DataJSON: TL_dataJSON
	ZoomToken Option[string] // (optional)
}

// Constructs MessageInteractionCounters
type TL_messageInteractionCounters struct {
	MsgID    int32
	Views    int32
	Forwards int32
}

// Constructs stats.BroadcastStats
type TL_stats_broadcastStats struct {
	Period                    TL   // StatsDateRangeDays: TL_statsDateRangeDays
	Followers                 TL   // StatsAbsValueAndPrev: TL_statsAbsValueAndPrev
	ViewsPerPost              TL   // StatsAbsValueAndPrev: TL_statsAbsValueAndPrev
	SharesPerPost             TL   // StatsAbsValueAndPrev: TL_statsAbsValueAndPrev
	EnabledNotifications      TL   // StatsPercentValue: TL_statsPercentValue
	GrowthGraph               TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	FollowersGraph            TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	MuteGraph                 TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	TopHoursGraph             TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	InteractionsGraph         TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	IvInteractionsGraph       TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	ViewsBySourceGraph        TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	NewFollowersBySourceGraph TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	LanguagesGraph            TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	RecentMessageInteractions []TL // MessageInteractionCounters: TL_messageInteractionCounters
}

// Constructs help.PromoData
type TL_help_promoDataEmpty struct {
	Expires int32
}

// Constructs help.PromoData
type TL_help_promoData struct {
	Proxy      bool
	Expires    int32
	Peer       TL             // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats      []TL           // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL           // User: TL_userEmpty | TL_user
	PsaType    Option[string] // (optional)
	PsaMessage Option[string] // (optional)
}

// Constructs VideoSize
type TL_videoSize struct {
	Type         string
	W            int32
	H            int32
	Size         int32
	VideoStartTs Option[float64] // (optional)
}

// Constructs VideoSize
type TL_videoSizeEmojiMarkup struct {
	EmojiID          int64
	BackgroundColors []int32
}

// Constructs VideoSize
type TL_videoSizeStickerMarkup struct {
	Stickerset       TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
	StickerID        int64
	BackgroundColors []int32
}

// Constructs StatsGroupTopPoster
type TL_statsGroupTopPoster struct {
	UserID   int64
	Messages int32
	AvgChars int32
}

// Constructs StatsGroupTopAdmin
type TL_statsGroupTopAdmin struct {
	UserID  int64
	Deleted int32
	Kicked  int32
	Banned  int32
}

// Constructs StatsGroupTopInviter
type TL_statsGroupTopInviter struct {
	UserID      int64
	Invitations int32
}

// Constructs stats.MegagroupStats
type TL_stats_megagroupStats struct {
	Period                  TL   // StatsDateRangeDays: TL_statsDateRangeDays
	Members                 TL   // StatsAbsValueAndPrev: TL_statsAbsValueAndPrev
	Messages                TL   // StatsAbsValueAndPrev: TL_statsAbsValueAndPrev
	Viewers                 TL   // StatsAbsValueAndPrev: TL_statsAbsValueAndPrev
	Posters                 TL   // StatsAbsValueAndPrev: TL_statsAbsValueAndPrev
	GrowthGraph             TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	MembersGraph            TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	NewMembersBySourceGraph TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	LanguagesGraph          TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	MessagesGraph           TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	ActionsGraph            TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	TopHoursGraph           TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	WeekdaysGraph           TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	TopPosters              []TL // StatsGroupTopPoster: TL_statsGroupTopPoster
	TopAdmins               []TL // StatsGroupTopAdmin: TL_statsGroupTopAdmin
	TopInviters             []TL // StatsGroupTopInviter: TL_statsGroupTopInviter
	Users                   []TL // User: TL_userEmpty | TL_user
}

// Constructs GlobalPrivacySettings
type TL_globalPrivacySettings struct {
	ArchiveAndMuteNewNoncontactPeers bool
	KeepArchivedUnmuted              bool
	KeepArchivedFolders              bool
}

// Constructs help.CountryCode
type TL_help_countryCode struct {
	CountryCode string
	Prefixes    []string // (optional)
	Patterns    []string // (optional)
}

// Constructs help.Country
type TL_help_country struct {
	Hidden       bool
	Iso2         string
	DefaultName  string
	Name         Option[string] // (optional)
	CountryCodes []TL           // help.CountryCode: TL_help_countryCode
}

// Constructs help.CountriesList
type TL_help_countriesListNotModified struct {
}

// Constructs help.CountriesList
type TL_help_countriesList struct {
	Countries []TL // help.Country: TL_help_country
	Hash      int32
}

// Constructs MessageViews
type TL_messageViews struct {
	Views    Option[int32] // (optional)
	Forwards Option[int32] // (optional)
	Replies  TL            // (optional) MessageReplies: TL_messageReplies
}

// Constructs messages.MessageViews
type TL_messages_messageViews struct {
	Views []TL // MessageViews: TL_messageViews
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.DiscussionMessage
type TL_messages_discussionMessage struct {
	Messages        []TL          // Message: TL_messageEmpty | TL_message | TL_messageService
	MaxID           Option[int32] // (optional)
	ReadInboxMaxID  Option[int32] // (optional)
	ReadOutboxMaxID Option[int32] // (optional)
	UnreadCount     int32
	Chats           []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users           []TL // User: TL_userEmpty | TL_user
}

// Constructs MessageReplyHeader
type TL_messageReplyHeader struct {
	ReplyToScheduled bool
	ForumTopic       bool
	Quote            bool
	ReplyToMsgID     Option[int32]  // (optional)
	ReplyToPeerID    TL             // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ReplyFrom        TL             // (optional) MessageFwdHeader: TL_messageFwdHeader
	ReplyMedia       TL             // (optional) MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway
	ReplyToTopID     Option[int32]  // (optional)
	QuoteText        Option[string] // (optional)
	QuoteEntities    []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs MessageReplyHeader
type TL_messageReplyStoryHeader struct {
	UserID  int64
	StoryID int32
}

// Constructs MessageReplies
type TL_messageReplies struct {
	Comments       bool
	Replies        int32
	RepliesPts     int32
	RecentRepliers []TL          // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ChannelID      Option[int64] // (optional)
	MaxID          Option[int32] // (optional)
	ReadMaxID      Option[int32] // (optional)
}

// Constructs PeerBlocked
type TL_peerBlocked struct {
	PeerID TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date   int32
}

// Constructs stats.MessageStats
type TL_stats_messageStats struct {
	ViewsGraph TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
}

// Constructs GroupCall
type TL_groupCallDiscarded struct {
	ID         int64
	AccessHash int64
	Duration   int32
}

// Constructs GroupCall
type TL_groupCall struct {
	JoinMuted               bool
	CanChangeJoinMuted      bool
	JoinDateAsc             bool
	ScheduleStartSubscribed bool
	CanStartVideo           bool
	RecordVideoActive       bool
	RtmpStream              bool
	ListenersHidden         bool
	ID                      int64
	AccessHash              int64
	ParticipantsCount       int32
	Title                   Option[string] // (optional)
	StreamDcID              Option[int32]  // (optional)
	RecordStartDate         Option[int32]  // (optional)
	ScheduleDate            Option[int32]  // (optional)
	UnmutedVideoCount       Option[int32]  // (optional)
	UnmutedVideoLimit       int32
	Version                 int32
}

// Constructs InputGroupCall
type TL_inputGroupCall struct {
	ID         int64
	AccessHash int64
}

// Constructs GroupCallParticipant
type TL_groupCallParticipant struct {
	Muted           bool
	Left            bool
	CanSelfUnmute   bool
	JustJoined      bool
	Versioned       bool
	Min             bool
	MutedByYou      bool
	VolumeByAdmin   bool
	Self            bool
	VideoJoined     bool
	Peer            TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date            int32
	ActiveDate      Option[int32] // (optional)
	Source          int32
	Volume          Option[int32]  // (optional)
	About           Option[string] // (optional)
	RaiseHandRating Option[int64]  // (optional)
	Video           TL             // (optional) GroupCallParticipantVideo: TL_groupCallParticipantVideo
	Presentation    TL             // (optional) GroupCallParticipantVideo: TL_groupCallParticipantVideo
}

// Constructs phone.GroupCall
type TL_phone_groupCall struct {
	Call                   TL   // GroupCall: TL_groupCallDiscarded | TL_groupCall
	Participants           []TL // GroupCallParticipant: TL_groupCallParticipant
	ParticipantsNextOffset string
	Chats                  []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users                  []TL // User: TL_userEmpty | TL_user
}

// Constructs phone.GroupParticipants
type TL_phone_groupParticipants struct {
	Count        int32
	Participants []TL // GroupCallParticipant: TL_groupCallParticipant
	NextOffset   string
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
	Version      int32
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeSameBotPM struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypePM struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeChat struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeMegagroup struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeBroadcast struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeBotPM struct {
}

// Constructs messages.HistoryImport
type TL_messages_historyImport struct {
	ID int64
}

// Constructs messages.HistoryImportParsed
type TL_messages_historyImportParsed struct {
	Pm    bool
	Group bool
	Title Option[string] // (optional)
}

// Constructs messages.AffectedFoundMessages
type TL_messages_affectedFoundMessages struct {
	Pts      int32
	PtsCount int32
	Offset   int32
	Messages []int32
}

// Constructs ChatInviteImporter
type TL_chatInviteImporter struct {
	Requested   bool
	ViaChatlist bool
	UserID      int64
	Date        int32
	About       Option[string] // (optional)
	ApprovedBy  Option[int64]  // (optional)
}

// Constructs messages.ExportedChatInvites
type TL_messages_exportedChatInvites struct {
	Count   int32
	Invites []TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.ExportedChatInvite
type TL_messages_exportedChatInvite struct {
	Invite TL   // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.ExportedChatInvite
type TL_messages_exportedChatInviteReplaced struct {
	Invite    TL   // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	NewInvite TL   // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	Users     []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.ChatInviteImporters
type TL_messages_chatInviteImporters struct {
	Count     int32
	Importers []TL // ChatInviteImporter: TL_chatInviteImporter
	Users     []TL // User: TL_userEmpty | TL_user
}

// Constructs ChatAdminWithInvites
type TL_chatAdminWithInvites struct {
	AdminID             int64
	InvitesCount        int32
	RevokedInvitesCount int32
}

// Constructs messages.ChatAdminsWithInvites
type TL_messages_chatAdminsWithInvites struct {
	Admins []TL // ChatAdminWithInvites: TL_chatAdminWithInvites
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.CheckedHistoryImportPeer
type TL_messages_checkedHistoryImportPeer struct {
	ConfirmText string
}

// Constructs phone.JoinAsPeers
type TL_phone_joinAsPeers struct {
	Peers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs phone.ExportedGroupCallInvite
type TL_phone_exportedGroupCallInvite struct {
	Link string
}

// Constructs GroupCallParticipantVideoSourceGroup
type TL_groupCallParticipantVideoSourceGroup struct {
	Semantics string
	Sources   []int32
}

// Constructs GroupCallParticipantVideo
type TL_groupCallParticipantVideo struct {
	Paused       bool
	Endpoint     string
	SourceGroups []TL          // GroupCallParticipantVideoSourceGroup: TL_groupCallParticipantVideoSourceGroup
	AudioSource  Option[int32] // (optional)
}

// Constructs stickers.SuggestedShortName
type TL_stickers_suggestedShortName struct {
	ShortName string
}

// Constructs BotCommandScope
type TL_botCommandScopeDefault struct {
}

// Constructs BotCommandScope
type TL_botCommandScopeUsers struct {
}

// Constructs BotCommandScope
type TL_botCommandScopeChats struct {
}

// Constructs BotCommandScope
type TL_botCommandScopeChatAdmins struct {
}

// Constructs BotCommandScope
type TL_botCommandScopePeer struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs BotCommandScope
type TL_botCommandScopePeerAdmins struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs BotCommandScope
type TL_botCommandScopePeerUser struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs account.ResetPasswordResult
type TL_account_resetPasswordFailedWait struct {
	RetryDate int32
}

// Constructs account.ResetPasswordResult
type TL_account_resetPasswordRequestedWait struct {
	UntilDate int32
}

// Constructs account.ResetPasswordResult
type TL_account_resetPasswordOk struct {
}

// Constructs SponsoredMessage
type TL_sponsoredMessage struct {
	Recommended    bool
	ShowPeerPhoto  bool
	RandomID       []byte
	FromID         TL             // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ChatInvite     TL             // (optional) ChatInvite: TL_chatInviteAlready | TL_chatInvite | TL_chatInvitePeek
	ChatInviteHash Option[string] // (optional)
	ChannelPost    Option[int32]  // (optional)
	StartParam     Option[string] // (optional)
	Webpage        TL             // (optional) SponsoredWebPage: TL_sponsoredWebPage
	Message        string
	Entities       []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	SponsorInfo    Option[string] // (optional)
	AdditionalInfo Option[string] // (optional)
}

// Constructs messages.SponsoredMessages
type TL_messages_sponsoredMessages struct {
	PostsBetween Option[int32] // (optional)
	Messages     []TL          // SponsoredMessage: TL_sponsoredMessage
	Chats        []TL          // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL          // User: TL_userEmpty | TL_user
}

// Constructs messages.SponsoredMessages
type TL_messages_sponsoredMessagesEmpty struct {
}

// Constructs SearchResultsCalendarPeriod
type TL_searchResultsCalendarPeriod struct {
	Date     int32
	MinMsgID int32
	MaxMsgID int32
	Count    int32
}

// Constructs messages.SearchResultsCalendar
type TL_messages_searchResultsCalendar struct {
	Inexact        bool
	Count          int32
	MinDate        int32
	MinMsgID       int32
	OffsetIdOffset Option[int32] // (optional)
	Periods        []TL          // SearchResultsCalendarPeriod: TL_searchResultsCalendarPeriod
	Messages       []TL          // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats          []TL          // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users          []TL          // User: TL_userEmpty | TL_user
}

// Constructs SearchResultsPosition
type TL_searchResultPosition struct {
	MsgID  int32
	Date   int32
	Offset int32
}

// Constructs messages.SearchResultsPositions
type TL_messages_searchResultsPositions struct {
	Count     int32
	Positions []TL // SearchResultsPosition: TL_searchResultPosition
}

// Constructs channels.SendAsPeers
type TL_channels_sendAsPeers struct {
	Peers []TL // SendAsPeer: TL_sendAsPeer
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs users.UserFull
type TL_users_userFull struct {
	FullUser TL   // UserFull: TL_userFull
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.PeerSettings
type TL_messages_peerSettings struct {
	Settings TL   // PeerSettings: TL_peerSettings
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs auth.LoggedOut
type TL_auth_loggedOut struct {
	FutureAuthToken []byte // (optional)
}

// Constructs ReactionCount
type TL_reactionCount struct {
	ChosenOrder Option[int32] // (optional)
	Reaction    TL            // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
	Count       int32
}

// Constructs MessageReactions
type TL_messageReactions struct {
	Min             bool
	CanSeeList      bool
	Results         []TL // ReactionCount: TL_reactionCount
	RecentReactions []TL // (optional) MessagePeerReaction: TL_messagePeerReaction
}

// Constructs messages.MessageReactionsList
type TL_messages_messageReactionsList struct {
	Count      int32
	Reactions  []TL           // MessagePeerReaction: TL_messagePeerReaction
	Chats      []TL           // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL           // User: TL_userEmpty | TL_user
	NextOffset Option[string] // (optional)
}

// Constructs AvailableReaction
type TL_availableReaction struct {
	Inactive          bool
	Premium           bool
	Reaction          string
	Title             string
	StaticIcon        TL // Document: TL_documentEmpty | TL_document
	AppearAnimation   TL // Document: TL_documentEmpty | TL_document
	SelectAnimation   TL // Document: TL_documentEmpty | TL_document
	ActivateAnimation TL // Document: TL_documentEmpty | TL_document
	EffectAnimation   TL // Document: TL_documentEmpty | TL_document
	AroundAnimation   TL // (optional) Document: TL_documentEmpty | TL_document
	CenterIcon        TL // (optional) Document: TL_documentEmpty | TL_document
}

// Constructs messages.AvailableReactions
type TL_messages_availableReactionsNotModified struct {
}

// Constructs messages.AvailableReactions
type TL_messages_availableReactions struct {
	Hash      int32
	Reactions []TL // AvailableReaction: TL_availableReaction
}

// Constructs MessagePeerReaction
type TL_messagePeerReaction struct {
	Big      bool
	Unread   bool
	My       bool
	PeerID   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date     int32
	Reaction TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Constructs GroupCallStreamChannel
type TL_groupCallStreamChannel struct {
	Channel         int32
	Scale           int32
	LastTimestampMs int64
}

// Constructs phone.GroupCallStreamChannels
type TL_phone_groupCallStreamChannels struct {
	Channels []TL // GroupCallStreamChannel: TL_groupCallStreamChannel
}

// Constructs phone.GroupCallStreamRtmpUrl
type TL_phone_groupCallStreamRtmpUrl struct {
	Url string
	Key string
}

// Constructs AttachMenuBotIconColor
type TL_attachMenuBotIconColor struct {
	Name  string
	Color int32
}

// Constructs AttachMenuBotIcon
type TL_attachMenuBotIcon struct {
	Name   string
	Icon   TL   // Document: TL_documentEmpty | TL_document
	Colors []TL // (optional) AttachMenuBotIconColor: TL_attachMenuBotIconColor
}

// Constructs AttachMenuBot
type TL_attachMenuBot struct {
	Inactive                 bool
	HasSettings              bool
	RequestWriteAccess       bool
	ShowInAttachMenu         bool
	ShowInSideMenu           bool
	SideMenuDisclaimerNeeded bool
	BotID                    int64
	ShortName                string
	PeerTypes                []TL // (optional) AttachMenuPeerType: TL_attachMenuPeerTypeSameBotPM | TL_attachMenuPeerTypeBotPM | TL_attachMenuPeerTypePM | TL_attachMenuPeerTypeChat | TL_attachMenuPeerTypeBroadcast
	Icons                    []TL // AttachMenuBotIcon: TL_attachMenuBotIcon
}

// Constructs AttachMenuBots
type TL_attachMenuBotsNotModified struct {
}

// Constructs AttachMenuBots
type TL_attachMenuBots struct {
	Hash  int64
	Bots  []TL // AttachMenuBot: TL_attachMenuBot
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs AttachMenuBotsBot
type TL_attachMenuBotsBot struct {
	Bot   TL   // AttachMenuBot: TL_attachMenuBot
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs WebViewResult
type TL_webViewResultUrl struct {
	QueryID int64
	Url     string
}

// Constructs SimpleWebViewResult
type TL_simpleWebViewResultUrl struct {
	Url string
}

// Constructs WebViewMessageSent
type TL_webViewMessageSent struct {
	MsgID TL // (optional) InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
}

// Constructs BotMenuButton
type TL_botMenuButtonDefault struct {
}

// Constructs BotMenuButton
type TL_botMenuButtonCommands struct {
}

// Constructs BotMenuButton
type TL_botMenuButton struct {
	Text string
	Url  string
}

// Constructs account.SavedRingtones
type TL_account_savedRingtonesNotModified struct {
}

// Constructs account.SavedRingtones
type TL_account_savedRingtones struct {
	Hash      int64
	Ringtones []TL // Document: TL_documentEmpty | TL_document
}

// Constructs NotificationSound
type TL_notificationSoundDefault struct {
}

// Constructs NotificationSound
type TL_notificationSoundNone struct {
}

// Constructs NotificationSound
type TL_notificationSoundLocal struct {
	Title string
	Data  string
}

// Constructs NotificationSound
type TL_notificationSoundRingtone struct {
	ID int64
}

// Constructs account.SavedRingtone
type TL_account_savedRingtone struct {
}

// Constructs account.SavedRingtone
type TL_account_savedRingtoneConverted struct {
	Document TL // Document: TL_documentEmpty | TL_document
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypeSameBotPM struct {
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypeBotPM struct {
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypePM struct {
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypeChat struct {
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypeBroadcast struct {
}

// Constructs InputInvoice
type TL_inputInvoiceMessage struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Constructs InputInvoice
type TL_inputInvoiceSlug struct {
	Slug string
}

// Constructs InputInvoice
type TL_inputInvoicePremiumGiftCode struct {
	Purpose TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway
	Option  TL // PremiumGiftCodeOption: TL_premiumGiftCodeOption
}

// Constructs payments.ExportedInvoice
type TL_payments_exportedInvoice struct {
	Url string
}

// Constructs messages.TranscribedAudio
type TL_messages_transcribedAudio struct {
	Pending         bool
	TranscriptionID int64
	Text            string
}

// Constructs help.PremiumPromo
type TL_help_premiumPromo struct {
	StatusText     string
	StatusEntities []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	VideoSections  []string
	Videos         []TL // Document: TL_documentEmpty | TL_document
	PeriodOptions  []TL // PremiumSubscriptionOption: TL_premiumSubscriptionOption
	Users          []TL // User: TL_userEmpty | TL_user
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentPremiumSubscription struct {
	Restore bool
	Upgrade bool
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentGiftPremium struct {
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Currency string
	Amount   int64
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentPremiumGiftCode struct {
	Users     []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	BoostPeer TL   // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Currency  string
	Amount    int64
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentPremiumGiveaway struct {
	OnlyNewSubscribers bool
	BoostPeer          TL       // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	AdditionalPeers    []TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	CountriesIso2      []string // (optional)
	RandomID           int64
	UntilDate          int32
	Currency           string
	Amount             int64
}

// Constructs PremiumGiftOption
type TL_premiumGiftOption struct {
	Months       int32
	Currency     string
	Amount       int64
	BotUrl       string
	StoreProduct Option[string] // (optional)
}

// Constructs PaymentFormMethod
type TL_paymentFormMethod struct {
	Url   string
	Title string
}

// Constructs EmojiStatus
type TL_emojiStatusEmpty struct {
}

// Constructs EmojiStatus
type TL_emojiStatus struct {
	DocumentID int64
}

// Constructs EmojiStatus
type TL_emojiStatusUntil struct {
	DocumentID int64
	Until      int32
}

// Constructs account.EmojiStatuses
type TL_account_emojiStatusesNotModified struct {
}

// Constructs account.EmojiStatuses
type TL_account_emojiStatuses struct {
	Hash     int64
	Statuses []TL // EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
}

// Constructs Reaction
type TL_reactionEmpty struct {
}

// Constructs Reaction
type TL_reactionEmoji struct {
	Emoticon string
}

// Constructs Reaction
type TL_reactionCustomEmoji struct {
	DocumentID int64
}

// Constructs ChatReactions
type TL_chatReactionsNone struct {
}

// Constructs ChatReactions
type TL_chatReactionsAll struct {
	AllowCustom bool
}

// Constructs ChatReactions
type TL_chatReactionsSome struct {
	Reactions []TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Constructs messages.Reactions
type TL_messages_reactionsNotModified struct {
}

// Constructs messages.Reactions
type TL_messages_reactions struct {
	Hash      int64
	Reactions []TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Constructs EmailVerifyPurpose
type TL_emailVerifyPurposeLoginSetup struct {
	PhoneNumber   string
	PhoneCodeHash string
}

// Constructs EmailVerifyPurpose
type TL_emailVerifyPurposeLoginChange struct {
}

// Constructs EmailVerifyPurpose
type TL_emailVerifyPurposePassport struct {
}

// Constructs EmailVerification
type TL_emailVerificationCode struct {
	Code string
}

// Constructs EmailVerification
type TL_emailVerificationGoogle struct {
	Token string
}

// Constructs EmailVerification
type TL_emailVerificationApple struct {
	Token string
}

// Constructs account.EmailVerified
type TL_account_emailVerified struct {
	Email string
}

// Constructs account.EmailVerified
type TL_account_emailVerifiedLogin struct {
	Email    string
	SentCode TL // auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
}

// Constructs PremiumSubscriptionOption
type TL_premiumSubscriptionOption struct {
	Current            bool
	CanPurchaseUpgrade bool
	Transaction        Option[string] // (optional)
	Months             int32
	Currency           string
	Amount             int64
	BotUrl             string
	StoreProduct       Option[string] // (optional)
}

// Constructs SendAsPeer
type TL_sendAsPeer struct {
	PremiumRequired bool
	Peer            TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs MessageExtendedMedia
type TL_messageExtendedMediaPreview struct {
	W             Option[int32] // (optional)
	H             Option[int32] // (optional)
	Thumb         TL            // (optional) PhotoSize: TL_photoSizeEmpty | TL_photoSize | TL_photoCachedSize | TL_photoStrippedSize | TL_photoSizeProgressive | TL_photoPathSize
	VideoDuration Option[int32] // (optional)
}

// Constructs MessageExtendedMedia
type TL_messageExtendedMedia struct {
	Media TL // MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway
}

// Constructs StickerKeyword
type TL_stickerKeyword struct {
	DocumentID int64
	Keyword    []string
}

// Constructs Username
type TL_username struct {
	Editable bool
	Active   bool
	Username string
}

// Constructs ForumTopic
type TL_forumTopicDeleted struct {
	ID int32
}

// Constructs ForumTopic
type TL_forumTopic struct {
	My                   bool
	Closed               bool
	Pinned               bool
	Short                bool
	Hidden               bool
	ID                   int32
	Date                 int32
	Title                string
	IconColor            int32
	IconEmojiID          Option[int64] // (optional)
	TopMessage           int32
	ReadInboxMaxID       int32
	ReadOutboxMaxID      int32
	UnreadCount          int32
	UnreadMentionsCount  int32
	UnreadReactionsCount int32
	FromID               TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	NotifySettings       TL // PeerNotifySettings: TL_peerNotifySettings
	Draft                TL // (optional) DraftMessage: TL_draftMessageEmpty | TL_draftMessage
}

// Constructs messages.ForumTopics
type TL_messages_forumTopics struct {
	OrderByCreateDate bool
	Count             int32
	Topics            []TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
	Messages          []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats             []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users             []TL // User: TL_userEmpty | TL_user
	Pts               int32
}

// Constructs DefaultHistoryTTL
type TL_defaultHistoryTTL struct {
	Period int32
}

// Constructs ExportedContactToken
type TL_exportedContactToken struct {
	Url     string
	Expires int32
}

// Constructs RequestPeerType
type TL_requestPeerTypeUser struct {
	Bot     Option[bool] // (optional)
	Premium Option[bool] // (optional)
}

// Constructs RequestPeerType
type TL_requestPeerTypeChat struct {
	Creator         bool
	BotParticipant  bool
	HasUsername     Option[bool] // (optional)
	Forum           Option[bool] // (optional)
	UserAdminRights TL           // (optional) ChatAdminRights: TL_chatAdminRights
	BotAdminRights  TL           // (optional) ChatAdminRights: TL_chatAdminRights
}

// Constructs RequestPeerType
type TL_requestPeerTypeBroadcast struct {
	Creator         bool
	HasUsername     Option[bool] // (optional)
	UserAdminRights TL           // (optional) ChatAdminRights: TL_chatAdminRights
	BotAdminRights  TL           // (optional) ChatAdminRights: TL_chatAdminRights
}

// Constructs EmojiList
type TL_emojiListNotModified struct {
}

// Constructs EmojiList
type TL_emojiList struct {
	Hash       int64
	DocumentID []int64
}

// Constructs EmojiGroup
type TL_emojiGroup struct {
	Title       string
	IconEmojiID int64
	Emoticons   []string
}

// Constructs messages.EmojiGroups
type TL_messages_emojiGroupsNotModified struct {
}

// Constructs messages.EmojiGroups
type TL_messages_emojiGroups struct {
	Hash   int32
	Groups []TL // EmojiGroup: TL_emojiGroup
}

// Constructs TextWithEntities
type TL_textWithEntities struct {
	Text     string
	Entities []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs messages.TranslatedText
type TL_messages_translateResult struct {
	Result []TL // TextWithEntities: TL_textWithEntities
}

// Constructs AutoSaveSettings
type TL_autoSaveSettings struct {
	Photos       bool
	Videos       bool
	VideoMaxSize Option[int64] // (optional)
}

// Constructs AutoSaveException
type TL_autoSaveException struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Settings TL // AutoSaveSettings: TL_autoSaveSettings
}

// Constructs account.AutoSaveSettings
type TL_account_autoSaveSettings struct {
	UsersSettings      TL   // AutoSaveSettings: TL_autoSaveSettings
	ChatsSettings      TL   // AutoSaveSettings: TL_autoSaveSettings
	BroadcastsSettings TL   // AutoSaveSettings: TL_autoSaveSettings
	Exceptions         []TL // AutoSaveException: TL_autoSaveException
	Chats              []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users              []TL // User: TL_userEmpty | TL_user
}

// Constructs help.AppConfig
type TL_help_appConfigNotModified struct {
}

// Constructs help.AppConfig
type TL_help_appConfig struct {
	Hash   int32
	Config TL // JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
}

// Constructs InputBotApp
type TL_inputBotAppID struct {
	ID         int64
	AccessHash int64
}

// Constructs InputBotApp
type TL_inputBotAppShortName struct {
	BotID     TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	ShortName string
}

// Constructs BotApp
type TL_botAppNotModified struct {
}

// Constructs BotApp
type TL_botApp struct {
	ID          int64
	AccessHash  int64
	ShortName   string
	Title       string
	Description string
	Photo       TL // Photo: TL_photoEmpty | TL_photo
	Document    TL // (optional) Document: TL_documentEmpty | TL_document
	Hash        int64
}

// Constructs messages.BotApp
type TL_messages_botApp struct {
	Inactive           bool
	RequestWriteAccess bool
	HasSettings        bool
	App                TL // BotApp: TL_botAppNotModified | TL_botApp
}

// Constructs AppWebViewResult
type TL_appWebViewResultUrl struct {
	Url string
}

// Constructs InlineBotWebView
type TL_inlineBotWebView struct {
	Text string
	Url  string
}

// Constructs ReadParticipantDate
type TL_readParticipantDate struct {
	UserID int64
	Date   int32
}

// Constructs InputChatlist
type TL_inputChatlistDialogFilter struct {
	FilterID int32
}

// Constructs ExportedChatlistInvite
type TL_exportedChatlistInvite struct {
	Title string
	Url   string
	Peers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs chatlists.ExportedChatlistInvite
type TL_chatlists_exportedChatlistInvite struct {
	Filter TL // DialogFilter: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
	Invite TL // ExportedChatlistInvite: TL_exportedChatlistInvite
}

// Constructs chatlists.ExportedInvites
type TL_chatlists_exportedInvites struct {
	Invites []TL // ExportedChatlistInvite: TL_exportedChatlistInvite
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs chatlists.ChatlistInvite
type TL_chatlists_chatlistInviteAlready struct {
	FilterID     int32
	MissingPeers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	AlreadyPeers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
}

// Constructs chatlists.ChatlistInvite
type TL_chatlists_chatlistInvite struct {
	Title    string
	Emoticon Option[string] // (optional)
	Peers    []TL           // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats    []TL           // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL           // User: TL_userEmpty | TL_user
}

// Constructs chatlists.ChatlistUpdates
type TL_chatlists_chatlistUpdates struct {
	MissingPeers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
}

// Constructs bots.BotInfo
type TL_bots_botInfo struct {
	Name        string
	About       string
	Description string
}

// Constructs MessagePeerVote
type TL_messagePeerVote struct {
	Peer   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Option []byte
	Date   int32
}

// Constructs MessagePeerVote
type TL_messagePeerVoteInputOption struct {
	Peer TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date int32
}

// Constructs MessagePeerVote
type TL_messagePeerVoteMultiple struct {
	Peer    TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Options [][]byte
	Date    int32
}

// Constructs SponsoredWebPage
type TL_sponsoredWebPage struct {
	Url      string
	SiteName string
	Photo    TL // (optional) Photo: TL_photoEmpty | TL_photo
}

// Constructs StoryViews
type TL_storyViews struct {
	HasViewers     bool
	ViewsCount     int32
	ForwardsCount  Option[int32] // (optional)
	Reactions      []TL          // (optional) ReactionCount: TL_reactionCount
	ReactionsCount Option[int32] // (optional)
	RecentViewers  []int64       // (optional)
}

// Constructs StoryItem
type TL_storyItemDeleted struct {
	ID int32
}

// Constructs StoryItem
type TL_storyItemSkipped struct {
	CloseFriends bool
	ID           int32
	Date         int32
	ExpireDate   int32
}

// Constructs StoryItem
type TL_storyItem struct {
	Pinned           bool
	Public           bool
	CloseFriends     bool
	Min              bool
	Noforwards       bool
	Edited           bool
	Contacts         bool
	SelectedContacts bool
	Out              bool
	ID               int32
	Date             int32
	ExpireDate       int32
	Caption          Option[string] // (optional)
	Entities         []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Media            TL             // MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway
	MediaAreas       []TL           // (optional) MediaArea: TL_mediaAreaVenue | TL_inputMediaAreaVenue | TL_mediaAreaGeoPoint | TL_mediaAreaSuggestedReaction
	Privacy          []TL           // (optional) PrivacyRule: TL_privacyValueAllowContacts | TL_privacyValueAllowAll | TL_privacyValueAllowUsers | TL_privacyValueDisallowContacts | TL_privacyValueDisallowAll | TL_privacyValueDisallowUsers | TL_privacyValueAllowChatParticipants | TL_privacyValueDisallowChatParticipants | TL_privacyValueAllowCloseFriends
	Views            TL             // (optional) StoryViews: TL_storyViews
	SentReaction     TL             // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Constructs stories.AllStories
type TL_stories_allStoriesNotModified struct {
	State       string
	StealthMode TL // StoriesStealthMode: TL_storiesStealthMode
}

// Constructs stories.AllStories
type TL_stories_allStories struct {
	HasMore     bool
	Count       int32
	State       string
	PeerStories []TL // PeerStories: TL_peerStories
	Chats       []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users       []TL // User: TL_userEmpty | TL_user
	StealthMode TL   // StoriesStealthMode: TL_storiesStealthMode
}

// Constructs stories.Stories
type TL_stories_stories struct {
	Count   int32
	Stories []TL // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs StoryView
type TL_storyView struct {
	Blocked              bool
	BlockedMyStoriesFrom bool
	UserID               int64
	Date                 int32
	Reaction             TL // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Constructs stories.StoryViewsList
type TL_stories_storyViewsList struct {
	Count          int32
	ReactionsCount int32
	Views          []TL           // StoryView: TL_storyView
	Users          []TL           // User: TL_userEmpty | TL_user
	NextOffset     Option[string] // (optional)
}

// Constructs stories.StoryViews
type TL_stories_storyViews struct {
	Views []TL // StoryViews: TL_storyViews
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs InputReplyTo
type TL_inputReplyToMessage struct {
	ReplyToMsgID  int32
	TopMsgID      Option[int32]  // (optional)
	ReplyToPeerID TL             // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	QuoteText     Option[string] // (optional)
	QuoteEntities []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs InputReplyTo
type TL_inputReplyToStory struct {
	UserID  TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	StoryID int32
}

// Constructs ExportedStoryLink
type TL_exportedStoryLink struct {
	Link string
}

// Constructs StoriesStealthMode
type TL_storiesStealthMode struct {
	ActiveUntilDate   Option[int32] // (optional)
	CooldownUntilDate Option[int32] // (optional)
}

// Constructs MediaAreaCoordinates
type TL_mediaAreaCoordinates struct {
	X        float64
	Y        float64
	W        float64
	H        float64
	Rotation float64
}

// Constructs MediaArea
type TL_mediaAreaVenue struct {
	Coordinates TL // MediaAreaCoordinates: TL_mediaAreaCoordinates
	Geo         TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Title       string
	Address     string
	Provider    string
	VenueID     string
	VenueType   string
}

// Constructs MediaArea
type TL_inputMediaAreaVenue struct {
	Coordinates TL // MediaAreaCoordinates: TL_mediaAreaCoordinates
	QueryID     int64
	ResultID    string
}

// Constructs MediaArea
type TL_mediaAreaGeoPoint struct {
	Coordinates TL // MediaAreaCoordinates: TL_mediaAreaCoordinates
	Geo         TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
}

// Constructs MediaArea
type TL_mediaAreaSuggestedReaction struct {
	Dark        bool
	Flipped     bool
	Coordinates TL // MediaAreaCoordinates: TL_mediaAreaCoordinates
	Reaction    TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Constructs PeerStories
type TL_peerStories struct {
	Peer      TL            // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MaxReadID Option[int32] // (optional)
	Stories   []TL          // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs stories.PeerStories
type TL_stories_peerStories struct {
	Stories TL   // PeerStories: TL_peerStories
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.WebPage
type TL_messages_webPage struct {
	Webpage TL   // WebPage: TL_webPageEmpty | TL_webPagePending | TL_webPage | TL_webPageNotModified
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs PremiumGiftCodeOption
type TL_premiumGiftCodeOption struct {
	Users         int32
	Months        int32
	StoreProduct  Option[string] // (optional)
	StoreQuantity Option[int32]  // (optional)
	Currency      string
	Amount        int64
}

// Constructs payments.CheckedGiftCode
type TL_payments_checkedGiftCode struct {
	ViaGiveaway   bool
	FromID        TL            // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	GiveawayMsgID Option[int32] // (optional)
	ToID          Option[int64] // (optional)
	Date          int32
	Months        int32
	UsedDate      Option[int32] // (optional)
	Chats         []TL          // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users         []TL          // User: TL_userEmpty | TL_user
}

// Constructs payments.GiveawayInfo
type TL_payments_giveawayInfo struct {
	Participating         bool
	PreparingResults      bool
	StartDate             int32
	JoinedTooEarlyDate    Option[int32]  // (optional)
	AdminDisallowedChatID Option[int64]  // (optional)
	DisallowedCountry     Option[string] // (optional)
}

// Constructs payments.GiveawayInfo
type TL_payments_giveawayInfoResults struct {
	Winner         bool
	Refunded       bool
	StartDate      int32
	GiftCodeSlug   Option[string] // (optional)
	FinishDate     int32
	WinnersCount   int32
	ActivatedCount int32
}

// Constructs PrepaidGiveaway
type TL_prepaidGiveaway struct {
	ID       int64
	Months   int32
	Quantity int32
	Date     int32
}

// Constructs Boost
type TL_boost struct {
	Gift          bool
	Giveaway      bool
	Unclaimed     bool
	ID            string
	UserID        Option[int64] // (optional)
	GiveawayMsgID Option[int32] // (optional)
	Date          int32
	Expires       int32
	UsedGiftSlug  Option[string] // (optional)
	Multiplier    Option[int32]  // (optional)
}

// Constructs premium.BoostsList
type TL_premium_boostsList struct {
	Count      int32
	Boosts     []TL           // Boost: TL_boost
	NextOffset Option[string] // (optional)
	Users      []TL           // User: TL_userEmpty | TL_user
}

// Constructs MyBoost
type TL_myBoost struct {
	Slot              int32
	Peer              TL // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date              int32
	Expires           int32
	CooldownUntilDate Option[int32] // (optional)
}

// Constructs premium.MyBoosts
type TL_premium_myBoosts struct {
	MyBoosts []TL // MyBoost: TL_myBoost
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs premium.BoostsStatus
type TL_premium_boostsStatus struct {
	MyBoost            bool
	Level              int32
	CurrentLevelBoosts int32
	Boosts             int32
	GiftBoosts         Option[int32] // (optional)
	NextLevelBoosts    Option[int32] // (optional)
	PremiumAudience    TL            // (optional) StatsPercentValue: TL_statsPercentValue
	BoostUrl           string
	PrepaidGiveaways   []TL    // (optional) PrepaidGiveaway: TL_prepaidGiveaway
	MyBoostSlots       []int32 // (optional)
}

// Returns X:
type TL_invokeAfterMsg struct {
	MsgID int64
	Query TL
}

// Returns X:
type TL_invokeAfterMsgs struct {
	MsgIds []int64
	Query  TL
}

// Returns X:
type TL_initConnection struct {
	ApiID          int32
	DeviceModel    string
	SystemVersion  string
	AppVersion     string
	SystemLangCode string
	LangPack       string
	LangCode       string
	Proxy          TL // (optional) InputClientProxy: TL_inputClientProxy
	Params         TL // (optional) JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
	Query          TL
}

// Returns X:
type TL_invokeWithLayer struct {
	Layer int32
	Query TL
}

// Returns X:
type TL_invokeWithoutUpdates struct {
	Query TL
}

// Returns X:
type TL_invokeWithMessagesRange struct {
	Range TL // MessageRange: TL_messageRange
	Query TL
}

// Returns X:
type TL_invokeWithTakeout struct {
	TakeoutID int64
	Query     TL
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_auth_sendCode struct {
	PhoneNumber string
	ApiID       int32
	ApiHash     string
	Settings    TL // CodeSettings: TL_codeSettings
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_signUp struct {
	PhoneNumber   string
	PhoneCodeHash string
	FirstName     string
	LastName      string
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_signIn struct {
	PhoneNumber       string
	PhoneCodeHash     string
	PhoneCode         Option[string] // (optional)
	EmailVerification TL             // (optional) EmailVerification: TL_emailVerificationCode | TL_emailVerificationGoogle | TL_emailVerificationApple
}

// Returns auth.LoggedOut: TL_auth_loggedOut
type TL_auth_logOut struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_resetAuthorizations struct {
}

// Returns auth.ExportedAuthorization: TL_auth_exportedAuthorization
type TL_auth_exportAuthorization struct {
	DcID int32
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_importAuthorization struct {
	ID    int64
	Bytes []byte
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_bindTempAuthKey struct {
	PermAuthKeyID    int64
	Nonce            int64
	ExpiresAt        int32
	EncryptedMessage []byte
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_importBotAuthorization struct {
	Flags        int32
	ApiID        int32
	ApiHash      string
	BotAuthToken string
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_checkPassword struct {
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns auth.PasswordRecovery: TL_auth_passwordRecovery
type TL_auth_requestPasswordRecovery struct {
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_recoverPassword struct {
	Code        string
	NewSettings TL // (optional) account.PasswordInputSettings: TL_account_passwordInputSettings
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_auth_resendCode struct {
	PhoneNumber   string
	PhoneCodeHash string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_cancelCode struct {
	PhoneNumber   string
	PhoneCodeHash string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_dropTempAuthKeys struct {
	ExceptAuthKeys []int64
}

// Returns auth.LoginToken: TL_auth_loginToken | TL_auth_loginTokenMigrateTo | TL_auth_loginTokenSuccess
type TL_auth_exportLoginToken struct {
	ApiID     int32
	ApiHash   string
	ExceptIds []int64
}

// Returns auth.LoginToken: TL_auth_loginToken | TL_auth_loginTokenMigrateTo | TL_auth_loginTokenSuccess
type TL_auth_importLoginToken struct {
	Token []byte
}

// Returns Authorization: TL_authorization
type TL_auth_acceptLoginToken struct {
	Token []byte
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_checkRecoveryPassword struct {
	Code string
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_importWebTokenAuthorization struct {
	ApiID        int32
	ApiHash      string
	WebAuthToken string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_requestFirebaseSms struct {
	PhoneNumber    string
	PhoneCodeHash  string
	SafetyNetToken Option[string] // (optional)
	IosPushSecret  Option[string] // (optional)
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_auth_resetLoginEmail struct {
	PhoneNumber   string
	PhoneCodeHash string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_registerDevice struct {
	NoMuted    bool
	TokenType  int32
	Token      string
	AppSandbox bool
	Secret     []byte
	OtherUids  []int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_unregisterDevice struct {
	TokenType int32
	Token     string
	OtherUids []int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateNotifySettings struct {
	Peer     TL // InputNotifyPeer: TL_inputNotifyPeer | TL_inputNotifyUsers | TL_inputNotifyChats | TL_inputNotifyBroadcasts | TL_inputNotifyForumTopic
	Settings TL // InputPeerNotifySettings: TL_inputPeerNotifySettings
}

// Returns PeerNotifySettings: TL_peerNotifySettings
type TL_account_getNotifySettings struct {
	Peer TL // InputNotifyPeer: TL_inputNotifyPeer | TL_inputNotifyUsers | TL_inputNotifyChats | TL_inputNotifyBroadcasts | TL_inputNotifyForumTopic
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetNotifySettings struct {
}

// Returns User: TL_userEmpty | TL_user
type TL_account_updateProfile struct {
	FirstName Option[string] // (optional)
	LastName  Option[string] // (optional)
	About     Option[string] // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateStatus struct {
	Offline bool
}

// Returns account.WallPapers: TL_account_wallPapersNotModified | TL_account_wallPapers
type TL_account_getWallPapers struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_reportPeer struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Reason  TL // ReportReason: TL_inputReportReasonSpam | TL_inputReportReasonViolence | TL_inputReportReasonPornography | TL_inputReportReasonChildAbuse | TL_inputReportReasonOther | TL_inputReportReasonCopyright | TL_inputReportReasonGeoIrrelevant | TL_inputReportReasonFake | TL_inputReportReasonIllegalDrugs | TL_inputReportReasonPersonalDetails
	Message string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_checkUsername struct {
	Username string
}

// Returns User: TL_userEmpty | TL_user
type TL_account_updateUsername struct {
	Username string
}

// Returns account.PrivacyRules: TL_account_privacyRules
type TL_account_getPrivacy struct {
	Key TL // InputPrivacyKey: TL_inputPrivacyKeyStatusTimestamp | TL_inputPrivacyKeyChatInvite | TL_inputPrivacyKeyPhoneCall | TL_inputPrivacyKeyPhoneP2P | TL_inputPrivacyKeyForwards | TL_inputPrivacyKeyProfilePhoto | TL_inputPrivacyKeyPhoneNumber | TL_inputPrivacyKeyAddedByPhone | TL_inputPrivacyKeyVoiceMessages | TL_inputPrivacyKeyAbout
}

// Returns account.PrivacyRules: TL_account_privacyRules
type TL_account_setPrivacy struct {
	Key   TL   // InputPrivacyKey: TL_inputPrivacyKeyStatusTimestamp | TL_inputPrivacyKeyChatInvite | TL_inputPrivacyKeyPhoneCall | TL_inputPrivacyKeyPhoneP2P | TL_inputPrivacyKeyForwards | TL_inputPrivacyKeyProfilePhoto | TL_inputPrivacyKeyPhoneNumber | TL_inputPrivacyKeyAddedByPhone | TL_inputPrivacyKeyVoiceMessages | TL_inputPrivacyKeyAbout
	Rules []TL // InputPrivacyRule: TL_inputPrivacyValueAllowContacts | TL_inputPrivacyValueAllowAll | TL_inputPrivacyValueAllowUsers | TL_inputPrivacyValueDisallowContacts | TL_inputPrivacyValueDisallowAll | TL_inputPrivacyValueDisallowUsers | TL_inputPrivacyValueAllowChatParticipants | TL_inputPrivacyValueDisallowChatParticipants | TL_inputPrivacyValueAllowCloseFriends
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_deleteAccount struct {
	Reason   string
	Password TL // (optional) InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns AccountDaysTTL: TL_accountDaysTTL
type TL_account_getAccountTTL struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_setAccountTTL struct {
	Ttl TL // AccountDaysTTL: TL_accountDaysTTL
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_account_sendChangePhoneCode struct {
	PhoneNumber string
	Settings    TL // CodeSettings: TL_codeSettings
}

// Returns User: TL_userEmpty | TL_user
type TL_account_changePhone struct {
	PhoneNumber   string
	PhoneCodeHash string
	PhoneCode     string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateDeviceLocked struct {
	Period int32
}

// Returns account.Authorizations: TL_account_authorizations
type TL_account_getAuthorizations struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetAuthorization struct {
	Hash int64
}

// Returns account.Password: TL_account_password
type TL_account_getPassword struct {
}

// Returns account.PasswordSettings: TL_account_passwordSettings
type TL_account_getPasswordSettings struct {
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updatePasswordSettings struct {
	Password    TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
	NewSettings TL // account.PasswordInputSettings: TL_account_passwordInputSettings
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_account_sendConfirmPhoneCode struct {
	Hash     string
	Settings TL // CodeSettings: TL_codeSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_confirmPhone struct {
	PhoneCodeHash string
	PhoneCode     string
}

// Returns account.TmpPassword: TL_account_tmpPassword
type TL_account_getTmpPassword struct {
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
	Period   int32
}

// Returns account.WebAuthorizations: TL_account_webAuthorizations
type TL_account_getWebAuthorizations struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetWebAuthorization struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetWebAuthorizations struct {
}

// Returns Vector<SecureValue>: TL_secureValue
type TL_account_getAllSecureValues struct {
}

// Returns Vector<SecureValue>: TL_secureValue
type TL_account_getSecureValue struct {
	Types []TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
}

// Returns SecureValue: TL_secureValue
type TL_account_saveSecureValue struct {
	Value          TL // InputSecureValue: TL_inputSecureValue
	SecureSecretID int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_deleteSecureValue struct {
	Types []TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
}

// Returns account.AuthorizationForm: TL_account_authorizationForm
type TL_account_getAuthorizationForm struct {
	BotID     int64
	Scope     string
	PublicKey string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_acceptAuthorization struct {
	BotID       int64
	Scope       string
	PublicKey   string
	ValueHashes []TL // SecureValueHash: TL_secureValueHash
	Credentials TL   // SecureCredentialsEncrypted: TL_secureCredentialsEncrypted
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_account_sendVerifyPhoneCode struct {
	PhoneNumber string
	Settings    TL // CodeSettings: TL_codeSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_verifyPhone struct {
	PhoneNumber   string
	PhoneCodeHash string
	PhoneCode     string
}

// Returns account.SentEmailCode: TL_account_sentEmailCode
type TL_account_sendVerifyEmailCode struct {
	Purpose TL // EmailVerifyPurpose: TL_emailVerifyPurposeLoginSetup | TL_emailVerifyPurposeLoginChange | TL_emailVerifyPurposePassport
	Email   string
}

// Returns account.EmailVerified: TL_account_emailVerified | TL_account_emailVerifiedLogin
type TL_account_verifyEmail struct {
	Purpose      TL // EmailVerifyPurpose: TL_emailVerifyPurposeLoginSetup | TL_emailVerifyPurposeLoginChange | TL_emailVerifyPurposePassport
	Verification TL // EmailVerification: TL_emailVerificationCode | TL_emailVerificationGoogle | TL_emailVerificationApple
}

// Returns account.Takeout: TL_account_takeout
type TL_account_initTakeoutSession struct {
	Contacts          bool
	MessageUsers      bool
	MessageChats      bool
	MessageMegagroups bool
	MessageChannels   bool
	Files             bool
	FileMaxSize       Option[int64] // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_finishTakeoutSession struct {
	Success bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_confirmPasswordEmail struct {
	Code string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resendPasswordEmail struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_cancelPasswordEmail struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_getContactSignUpNotification struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_setContactSignUpNotification struct {
	Silent bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_account_getNotifyExceptions struct {
	CompareSound   bool
	CompareStories bool
	Peer           TL // (optional) InputNotifyPeer: TL_inputNotifyPeer | TL_inputNotifyUsers | TL_inputNotifyChats | TL_inputNotifyBroadcasts | TL_inputNotifyForumTopic
}

// Returns WallPaper: TL_wallPaper | TL_wallPaperNoFile
type TL_account_getWallPaper struct {
	Wallpaper TL // InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
}

// Returns WallPaper: TL_wallPaper | TL_wallPaperNoFile
type TL_account_uploadWallPaper struct {
	ForChat  bool
	File     TL // InputFile: TL_inputFile | TL_inputFileBig
	MimeType string
	Settings TL // WallPaperSettings: TL_wallPaperSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_saveWallPaper struct {
	Wallpaper TL // InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
	Unsave    bool
	Settings  TL // WallPaperSettings: TL_wallPaperSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_installWallPaper struct {
	Wallpaper TL // InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
	Settings  TL // WallPaperSettings: TL_wallPaperSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetWallPapers struct {
}

// Returns account.AutoDownloadSettings: TL_account_autoDownloadSettings
type TL_account_getAutoDownloadSettings struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_saveAutoDownloadSettings struct {
	Low      bool
	High     bool
	Settings TL // AutoDownloadSettings: TL_autoDownloadSettings
}

// Returns Document: TL_documentEmpty | TL_document
type TL_account_uploadTheme struct {
	File     TL // InputFile: TL_inputFile | TL_inputFileBig
	Thumb    TL // (optional) InputFile: TL_inputFile | TL_inputFileBig
	FileName string
	MimeType string
}

// Returns Theme: TL_theme
type TL_account_createTheme struct {
	Slug     string
	Title    string
	Document TL   // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Settings []TL // (optional) InputThemeSettings: TL_inputThemeSettings
}

// Returns Theme: TL_theme
type TL_account_updateTheme struct {
	Format   string
	Theme    TL             // InputTheme: TL_inputTheme | TL_inputThemeSlug
	Slug     Option[string] // (optional)
	Title    Option[string] // (optional)
	Document TL             // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Settings []TL           // (optional) InputThemeSettings: TL_inputThemeSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_saveTheme struct {
	Theme  TL // InputTheme: TL_inputTheme | TL_inputThemeSlug
	Unsave bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_installTheme struct {
	Dark      bool
	Theme     TL             // (optional) InputTheme: TL_inputTheme | TL_inputThemeSlug
	Format    Option[string] // (optional)
	BaseTheme TL             // (optional) BaseTheme: TL_baseThemeClassic | TL_baseThemeDay | TL_baseThemeNight | TL_baseThemeTinted | TL_baseThemeArctic
}

// Returns Theme: TL_theme
type TL_account_getTheme struct {
	Format string
	Theme  TL // InputTheme: TL_inputTheme | TL_inputThemeSlug
}

// Returns account.Themes: TL_account_themesNotModified | TL_account_themes
type TL_account_getThemes struct {
	Format string
	Hash   int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_setContentSettings struct {
	SensitiveEnabled bool
}

// Returns account.ContentSettings: TL_account_contentSettings
type TL_account_getContentSettings struct {
}

// Returns Vector<WallPaper>: TL_wallPaper | TL_wallPaperNoFile
type TL_account_getMultiWallPapers struct {
	Wallpapers []TL // InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
}

// Returns GlobalPrivacySettings: TL_globalPrivacySettings
type TL_account_getGlobalPrivacySettings struct {
}

// Returns GlobalPrivacySettings: TL_globalPrivacySettings
type TL_account_setGlobalPrivacySettings struct {
	Settings TL // GlobalPrivacySettings: TL_globalPrivacySettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_reportProfilePhoto struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	PhotoID TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
	Reason  TL // ReportReason: TL_inputReportReasonSpam | TL_inputReportReasonViolence | TL_inputReportReasonPornography | TL_inputReportReasonChildAbuse | TL_inputReportReasonOther | TL_inputReportReasonCopyright | TL_inputReportReasonGeoIrrelevant | TL_inputReportReasonFake | TL_inputReportReasonIllegalDrugs | TL_inputReportReasonPersonalDetails
	Message string
}

// Returns account.ResetPasswordResult: TL_account_resetPasswordFailedWait | TL_account_resetPasswordRequestedWait | TL_account_resetPasswordOk
type TL_account_resetPassword struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_declinePasswordReset struct {
}

// Returns account.Themes: TL_account_themesNotModified | TL_account_themes
type TL_account_getChatThemes struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_setAuthorizationTTL struct {
	AuthorizationTtlDays int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_changeAuthorizationSettings struct {
	Confirmed                 bool
	Hash                      int64
	EncryptedRequestsDisabled Option[bool] // (optional)
	CallRequestsDisabled      Option[bool] // (optional)
}

// Returns account.SavedRingtones: TL_account_savedRingtonesNotModified | TL_account_savedRingtones
type TL_account_getSavedRingtones struct {
	Hash int64
}

// Returns account.SavedRingtone: TL_account_savedRingtone | TL_account_savedRingtoneConverted
type TL_account_saveRingtone struct {
	ID     TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Unsave bool
}

// Returns Document: TL_documentEmpty | TL_document
type TL_account_uploadRingtone struct {
	File     TL // InputFile: TL_inputFile | TL_inputFileBig
	FileName string
	MimeType string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateEmojiStatus struct {
	EmojiStatus TL // EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
}

// Returns account.EmojiStatuses: TL_account_emojiStatusesNotModified | TL_account_emojiStatuses
type TL_account_getDefaultEmojiStatuses struct {
	Hash int64
}

// Returns account.EmojiStatuses: TL_account_emojiStatusesNotModified | TL_account_emojiStatuses
type TL_account_getRecentEmojiStatuses struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_clearRecentEmojiStatuses struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_reorderUsernames struct {
	Order []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_toggleUsername struct {
	Username string
	Active   bool
}

// Returns EmojiList: TL_emojiListNotModified | TL_emojiList
type TL_account_getDefaultProfilePhotoEmojis struct {
	Hash int64
}

// Returns EmojiList: TL_emojiListNotModified | TL_emojiList
type TL_account_getDefaultGroupPhotoEmojis struct {
	Hash int64
}

// Returns account.AutoSaveSettings: TL_account_autoSaveSettings
type TL_account_getAutoSaveSettings struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_saveAutoSaveSettings struct {
	Users      bool
	Chats      bool
	Broadcasts bool
	Peer       TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Settings   TL // AutoSaveSettings: TL_autoSaveSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_deleteAutoSaveExceptions struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_invalidateSignInCodes struct {
	Codes []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateColor struct {
	Color             int32
	BackgroundEmojiID Option[int64] // (optional)
}

// Returns EmojiList: TL_emojiListNotModified | TL_emojiList
type TL_account_getDefaultBackgroundEmojis struct {
	Hash int64
}

// Returns Vector<User>: TL_userEmpty | TL_user
type TL_users_getUsers struct {
	ID []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns users.UserFull: TL_users_userFull
type TL_users_getFullUser struct {
	ID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_users_setSecureValueErrors struct {
	ID     TL   // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Errors []TL // SecureValueError: TL_secureValueErrorData | TL_secureValueErrorFrontSide | TL_secureValueErrorReverseSide | TL_secureValueErrorSelfie | TL_secureValueErrorFile | TL_secureValueErrorFiles | TL_secureValueError | TL_secureValueErrorTranslationFile | TL_secureValueErrorTranslationFiles
}

// Returns Vector<int>:
type TL_contacts_getContactIDs struct {
	Hash int64
}

// Returns Vector<ContactStatus>: TL_contactStatus
type TL_contacts_getStatuses struct {
}

// Returns contacts.Contacts: TL_contacts_contactsNotModified | TL_contacts_contacts
type TL_contacts_getContacts struct {
	Hash int64
}

// Returns contacts.ImportedContacts: TL_contacts_importedContacts
type TL_contacts_importContacts struct {
	Contacts []TL // InputContact: TL_inputPhoneContact
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_deleteContacts struct {
	ID []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_deleteByPhones struct {
	Phones []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_block struct {
	MyStoriesFrom bool
	ID            TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_unblock struct {
	MyStoriesFrom bool
	ID            TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns contacts.Blocked: TL_contacts_blocked | TL_contacts_blockedSlice
type TL_contacts_getBlocked struct {
	MyStoriesFrom bool
	Offset        int32
	Limit         int32
}

// Returns contacts.Found: TL_contacts_found
type TL_contacts_search struct {
	Q     string
	Limit int32
}

// Returns contacts.ResolvedPeer: TL_contacts_resolvedPeer
type TL_contacts_resolveUsername struct {
	Username string
}

// Returns contacts.TopPeers: TL_contacts_topPeersNotModified | TL_contacts_topPeers | TL_contacts_topPeersDisabled
type TL_contacts_getTopPeers struct {
	Correspondents bool
	BotsPm         bool
	BotsInline     bool
	PhoneCalls     bool
	ForwardUsers   bool
	ForwardChats   bool
	Groups         bool
	Channels       bool
	Offset         int32
	Limit          int32
	Hash           int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_resetTopPeerRating struct {
	Category TL // TopPeerCategory: TL_topPeerCategoryBotsPM | TL_topPeerCategoryBotsInline | TL_topPeerCategoryCorrespondents | TL_topPeerCategoryGroups | TL_topPeerCategoryChannels | TL_topPeerCategoryPhoneCalls | TL_topPeerCategoryForwardUsers | TL_topPeerCategoryForwardChats
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_resetSaved struct {
}

// Returns Vector<SavedContact>: TL_savedPhoneContact
type TL_contacts_getSaved struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_toggleTopPeers struct {
	Enabled bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_addContact struct {
	AddPhonePrivacyException bool
	ID                       TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	FirstName                string
	LastName                 string
	Phone                    string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_acceptContact struct {
	ID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_getLocated struct {
	Background  bool
	GeoPoint    TL            // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	SelfExpires Option[int32] // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_blockFromReplies struct {
	DeleteMessage bool
	DeleteHistory bool
	ReportSpam    bool
	MsgID         int32
}

// Returns contacts.ResolvedPeer: TL_contacts_resolvedPeer
type TL_contacts_resolvePhone struct {
	Phone string
}

// Returns ExportedContactToken: TL_exportedContactToken
type TL_contacts_exportContactToken struct {
}

// Returns User: TL_userEmpty | TL_user
type TL_contacts_importContactToken struct {
	Token string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_editCloseFriends struct {
	ID []int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_setBlocked struct {
	MyStoriesFrom bool
	ID            []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Limit         int32
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getMessages struct {
	ID []TL // InputMessage: TL_inputMessageID | TL_inputMessageReplyTo | TL_inputMessagePinned | TL_inputMessageCallbackQuery
}

// Returns messages.Dialogs: TL_messages_dialogs | TL_messages_dialogsSlice | TL_messages_dialogsNotModified
type TL_messages_getDialogs struct {
	ExcludePinned bool
	FolderID      Option[int32] // (optional)
	OffsetDate    int32
	OffsetID      int32
	OffsetPeer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Limit         int32
	Hash          int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getHistory struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID   int32
	OffsetDate int32
	AddOffset  int32
	Limit      int32
	MaxID      int32
	MinID      int32
	Hash       int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_search struct {
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Q         string
	FromID    TL            // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID  Option[int32] // (optional)
	Filter    TL            // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterUrl | TL_inputMessagesFilterGif | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	MinDate   int32
	MaxDate   int32
	OffsetID  int32
	AddOffset int32
	Limit     int32
	MaxID     int32
	MinID     int32
	Hash      int64
}

// Returns messages.AffectedMessages: TL_messages_affectedMessages
type TL_messages_readHistory struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MaxID int32
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_messages_deleteHistory struct {
	JustClear bool
	Revoke    bool
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MaxID     int32
	MinDate   Option[int32] // (optional)
	MaxDate   Option[int32] // (optional)
}

// Returns messages.AffectedMessages: TL_messages_affectedMessages
type TL_messages_deleteMessages struct {
	Revoke bool
	ID     []int32
}

// Returns Vector<ReceivedNotifyMessage>: TL_receivedNotifyMessage
type TL_messages_receivedMessages struct {
	MaxID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setTyping struct {
	Peer     TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID Option[int32] // (optional)
	Action   TL            // SendMessageAction: TL_sendMessageTypingAction | TL_sendMessageCancelAction | TL_sendMessageRecordVideoAction | TL_sendMessageUploadVideoAction | TL_sendMessageRecordAudioAction | TL_sendMessageUploadAudioAction | TL_sendMessageUploadPhotoAction | TL_sendMessageUploadDocumentAction | TL_sendMessageGeoLocationAction | TL_sendMessageChooseContactAction | TL_sendMessageGamePlayAction | TL_sendMessageRecordRoundAction | TL_sendMessageUploadRoundAction | TL_speakingInGroupCallAction | TL_sendMessageHistoryImportAction | TL_sendMessageChooseStickerAction | TL_sendMessageEmojiInteraction | TL_sendMessageEmojiInteractionSeen
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendMessage struct {
	NoWebpage              bool
	Silent                 bool
	Background             bool
	ClearDraft             bool
	Noforwards             bool
	UpdateStickersetsOrder bool
	InvertMedia            bool
	Peer                   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo                TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	Message                string
	RandomID               int64
	ReplyMarkup            TL            // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities               []TL          // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ScheduleDate           Option[int32] // (optional)
	SendAs                 TL            // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendMedia struct {
	Silent                 bool
	Background             bool
	ClearDraft             bool
	Noforwards             bool
	UpdateStickersetsOrder bool
	InvertMedia            bool
	Peer                   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo                TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	Media                  TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
	Message                string
	RandomID               int64
	ReplyMarkup            TL            // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities               []TL          // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ScheduleDate           Option[int32] // (optional)
	SendAs                 TL            // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_forwardMessages struct {
	Silent            bool
	Background        bool
	WithMyScore       bool
	DropAuthor        bool
	DropMediaCaptions bool
	Noforwards        bool
	FromPeer          TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID                []int32
	RandomID          []int64
	ToPeer            TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID          Option[int32] // (optional)
	ScheduleDate      Option[int32] // (optional)
	SendAs            TL            // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reportSpam struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.PeerSettings: TL_messages_peerSettings
type TL_messages_getPeerSettings struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_report struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID      []int32
	Reason  TL // ReportReason: TL_inputReportReasonSpam | TL_inputReportReasonViolence | TL_inputReportReasonPornography | TL_inputReportReasonChildAbuse | TL_inputReportReasonOther | TL_inputReportReasonCopyright | TL_inputReportReasonGeoIrrelevant | TL_inputReportReasonFake | TL_inputReportReasonIllegalDrugs | TL_inputReportReasonPersonalDetails
	Message string
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_messages_getChats struct {
	ID []int64
}

// Returns messages.ChatFull: TL_messages_chatFull
type TL_messages_getFullChat struct {
	ChatID int64
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_editChatTitle struct {
	ChatID int64
	Title  string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_editChatPhoto struct {
	ChatID int64
	Photo  TL // InputChatPhoto: TL_inputChatPhotoEmpty | TL_inputChatUploadedPhoto | TL_inputChatPhoto
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_addChatUser struct {
	ChatID   int64
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	FwdLimit int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_deleteChatUser struct {
	RevokeHistory bool
	ChatID        int64
	UserID        TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_createChat struct {
	Users     []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Title     string
	TtlPeriod Option[int32] // (optional)
}

// Returns messages.DhConfig: TL_messages_dhConfigNotModified | TL_messages_dhConfig
type TL_messages_getDhConfig struct {
	Version      int32
	RandomLength int32
}

// Returns EncryptedChat: TL_encryptedChatEmpty | TL_encryptedChatWaiting | TL_encryptedChatRequested | TL_encryptedChat | TL_encryptedChatDiscarded
type TL_messages_requestEncryption struct {
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	RandomID int32
	GA       []byte
}

// Returns EncryptedChat: TL_encryptedChatEmpty | TL_encryptedChatWaiting | TL_encryptedChatRequested | TL_encryptedChat | TL_encryptedChatDiscarded
type TL_messages_acceptEncryption struct {
	Peer           TL // InputEncryptedChat: TL_inputEncryptedChat
	GB             []byte
	KeyFingerprint int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_discardEncryption struct {
	DeleteHistory bool
	ChatID        int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setEncryptedTyping struct {
	Peer   TL // InputEncryptedChat: TL_inputEncryptedChat
	Typing bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_readEncryptedHistory struct {
	Peer    TL // InputEncryptedChat: TL_inputEncryptedChat
	MaxDate int32
}

// Returns messages.SentEncryptedMessage: TL_messages_sentEncryptedMessage | TL_messages_sentEncryptedFile
type TL_messages_sendEncrypted struct {
	Silent   bool
	Peer     TL // InputEncryptedChat: TL_inputEncryptedChat
	RandomID int64
	Data     []byte
}

// Returns messages.SentEncryptedMessage: TL_messages_sentEncryptedMessage | TL_messages_sentEncryptedFile
type TL_messages_sendEncryptedFile struct {
	Silent   bool
	Peer     TL // InputEncryptedChat: TL_inputEncryptedChat
	RandomID int64
	Data     []byte
	File     TL // InputEncryptedFile: TL_inputEncryptedFileEmpty | TL_inputEncryptedFileUploaded | TL_inputEncryptedFile | TL_inputEncryptedFileBigUploaded
}

// Returns messages.SentEncryptedMessage: TL_messages_sentEncryptedMessage | TL_messages_sentEncryptedFile
type TL_messages_sendEncryptedService struct {
	Peer     TL // InputEncryptedChat: TL_inputEncryptedChat
	RandomID int64
	Data     []byte
}

// Returns Vector<long>:
type TL_messages_receivedQueue struct {
	MaxQts int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reportEncryptedSpam struct {
	Peer TL // InputEncryptedChat: TL_inputEncryptedChat
}

// Returns messages.AffectedMessages: TL_messages_affectedMessages
type TL_messages_readMessageContents struct {
	ID []int32
}

// Returns messages.Stickers: TL_messages_stickersNotModified | TL_messages_stickers
type TL_messages_getStickers struct {
	Emoticon string
	Hash     int64
}

// Returns messages.AllStickers: TL_messages_allStickersNotModified | TL_messages_allStickers
type TL_messages_getAllStickers struct {
	Hash int64
}

// Returns MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway
type TL_messages_getWebPagePreview struct {
	Message  string
	Entities []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Returns ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
type TL_messages_exportChatInvite struct {
	LegacyRevokePermanent bool
	RequestNeeded         bool
	Peer                  TL             // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ExpireDate            Option[int32]  // (optional)
	UsageLimit            Option[int32]  // (optional)
	Title                 Option[string] // (optional)
}

// Returns ChatInvite: TL_chatInviteAlready | TL_chatInvite | TL_chatInvitePeek
type TL_messages_checkChatInvite struct {
	Hash string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_importChatInvite struct {
	Hash string
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_messages_getStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
	Hash       int32
}

// Returns messages.StickerSetInstallResult: TL_messages_stickerSetInstallResultSuccess | TL_messages_stickerSetInstallResultArchive
type TL_messages_installStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
	Archived   bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_uninstallStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_startBot struct {
	Bot        TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	RandomID   int64
	StartParam string
}

// Returns messages.MessageViews: TL_messages_messageViews
type TL_messages_getMessagesViews struct {
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID        []int32
	Increment bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_editChatAdmin struct {
	ChatID  int64
	UserID  TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	IsAdmin bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_migrateChat struct {
	ChatID int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_searchGlobal struct {
	FolderID   Option[int32] // (optional)
	Q          string
	Filter     TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterUrl | TL_inputMessagesFilterGif | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	MinDate    int32
	MaxDate    int32
	OffsetRate int32
	OffsetPeer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID   int32
	Limit      int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reorderStickerSets struct {
	Masks  bool
	Emojis bool
	Order  []int64
}

// Returns Document: TL_documentEmpty | TL_document
type TL_messages_getDocumentByHash struct {
	Sha256   []byte
	Size     int64
	MimeType string
}

// Returns messages.SavedGifs: TL_messages_savedGifsNotModified | TL_messages_savedGifs
type TL_messages_getSavedGifs struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_saveGif struct {
	ID     TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Unsave bool
}

// Returns messages.BotResults: TL_messages_botResults
type TL_messages_getInlineBotResults struct {
	Bot      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	GeoPoint TL // (optional) InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Query    string
	Offset   string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setInlineBotResults struct {
	Gallery       bool
	Private       bool
	QueryID       int64
	Results       []TL // InputBotInlineResult: TL_inputBotInlineResult | TL_inputBotInlineResultPhoto | TL_inputBotInlineResultDocument | TL_inputBotInlineResultGame
	CacheTime     int32
	NextOffset    Option[string] // (optional)
	SwitchPm      TL             // (optional) InlineBotSwitchPM: TL_inlineBotSwitchPM
	SwitchWebview TL             // (optional) InlineBotWebView: TL_inlineBotWebView
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendInlineBotResult struct {
	Silent       bool
	Background   bool
	ClearDraft   bool
	HideVia      bool
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo      TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	RandomID     int64
	QueryID      int64
	ID           string
	ScheduleDate Option[int32] // (optional)
	SendAs       TL            // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.MessageEditData: TL_messages_messageEditData
type TL_messages_getMessageEditData struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_editMessage struct {
	NoWebpage    bool
	InvertMedia  bool
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID           int32
	Message      Option[string] // (optional)
	Media        TL             // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
	ReplyMarkup  TL             // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities     []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ScheduleDate Option[int32]  // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_editInlineBotMessage struct {
	NoWebpage   bool
	InvertMedia bool
	ID          TL             // InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
	Message     Option[string] // (optional)
	Media       TL             // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
	ReplyMarkup TL             // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities    []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Returns messages.BotCallbackAnswer: TL_messages_botCallbackAnswer
type TL_messages_getBotCallbackAnswer struct {
	Game     bool
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID    int32
	Data     []byte // (optional)
	Password TL     // (optional) InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setBotCallbackAnswer struct {
	Alert     bool
	QueryID   int64
	Message   Option[string] // (optional)
	Url       Option[string] // (optional)
	CacheTime int32
}

// Returns messages.PeerDialogs: TL_messages_peerDialogs
type TL_messages_getPeerDialogs struct {
	Peers []TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_saveDraft struct {
	NoWebpage   bool
	InvertMedia bool
	ReplyTo     TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Media       TL   // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_getAllDrafts struct {
}

// Returns messages.FeaturedStickers: TL_messages_featuredStickersNotModified | TL_messages_featuredStickers
type TL_messages_getFeaturedStickers struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_readFeaturedStickers struct {
	ID []int64
}

// Returns messages.RecentStickers: TL_messages_recentStickersNotModified | TL_messages_recentStickers
type TL_messages_getRecentStickers struct {
	Attached bool
	Hash     int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_saveRecentSticker struct {
	Attached bool
	ID       TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Unsave   bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_clearRecentStickers struct {
	Attached bool
}

// Returns messages.ArchivedStickers: TL_messages_archivedStickers
type TL_messages_getArchivedStickers struct {
	Masks    bool
	Emojis   bool
	OffsetID int64
	Limit    int32
}

// Returns messages.AllStickers: TL_messages_allStickersNotModified | TL_messages_allStickers
type TL_messages_getMaskStickers struct {
	Hash int64
}

// Returns Vector<StickerSetCovered>: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
type TL_messages_getAttachedStickers struct {
	Media TL // InputStickeredMedia: TL_inputStickeredMediaPhoto | TL_inputStickeredMediaDocument
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setGameScore struct {
	EditMessage bool
	Force       bool
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID          int32
	UserID      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Score       int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setInlineGameScore struct {
	EditMessage bool
	Force       bool
	ID          TL // InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
	UserID      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Score       int32
}

// Returns messages.HighScores: TL_messages_highScores
type TL_messages_getGameHighScores struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID     int32
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns messages.HighScores: TL_messages_highScores
type TL_messages_getInlineGameHighScores struct {
	ID     TL // InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_messages_getCommonChats struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	MaxID  int64
	Limit  int32
}

// Returns messages.WebPage: TL_messages_webPage
type TL_messages_getWebPage struct {
	Url  string
	Hash int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_toggleDialogPin struct {
	Pinned bool
	Peer   TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reorderPinnedDialogs struct {
	Force    bool
	FolderID int32
	Order    []TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns messages.PeerDialogs: TL_messages_peerDialogs
type TL_messages_getPinnedDialogs struct {
	FolderID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setBotShippingResults struct {
	QueryID         int64
	Error           Option[string] // (optional)
	ShippingOptions []TL           // (optional) ShippingOption: TL_shippingOption
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setBotPrecheckoutResults struct {
	Success bool
	QueryID int64
	Error   Option[string] // (optional)
}

// Returns MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway
type TL_messages_uploadMedia struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Media TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendScreenshotNotification struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo  TL // InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	RandomID int64
}

// Returns messages.FavedStickers: TL_messages_favedStickersNotModified | TL_messages_favedStickers
type TL_messages_getFavedStickers struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_faveSticker struct {
	ID     TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Unfave bool
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getUnreadMentions struct {
	Peer      TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID  Option[int32] // (optional)
	OffsetID  int32
	AddOffset int32
	Limit     int32
	MaxID     int32
	MinID     int32
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_messages_readMentions struct {
	Peer     TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID Option[int32] // (optional)
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getRecentLocations struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Limit int32
	Hash  int64
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendMultiMedia struct {
	Silent                 bool
	Background             bool
	ClearDraft             bool
	Noforwards             bool
	UpdateStickersetsOrder bool
	InvertMedia            bool
	Peer                   TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo                TL            // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	MultiMedia             []TL          // InputSingleMedia: TL_inputSingleMedia
	ScheduleDate           Option[int32] // (optional)
	SendAs                 TL            // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns EncryptedFile: TL_encryptedFileEmpty | TL_encryptedFile
type TL_messages_uploadEncryptedFile struct {
	Peer TL // InputEncryptedChat: TL_inputEncryptedChat
	File TL // InputEncryptedFile: TL_inputEncryptedFileEmpty | TL_inputEncryptedFileUploaded | TL_inputEncryptedFile | TL_inputEncryptedFileBigUploaded
}

// Returns messages.FoundStickerSets: TL_messages_foundStickerSetsNotModified | TL_messages_foundStickerSets
type TL_messages_searchStickerSets struct {
	ExcludeFeatured bool
	Q               string
	Hash            int64
}

// Returns Vector<MessageRange>: TL_messageRange
type TL_messages_getSplitRanges struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_markDialogUnread struct {
	Unread bool
	Peer   TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns Vector<DialogPeer>: TL_dialogPeer | TL_dialogPeerFolder
type TL_messages_getDialogUnreadMarks struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_clearAllDrafts struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_updatePinnedMessage struct {
	Silent    bool
	Unpin     bool
	PmOneside bool
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID        int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendVote struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID   int32
	Options [][]byte
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_getPollResults struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns ChatOnlines: TL_chatOnlines
type TL_messages_getOnlines struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_editChatAbout struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	About string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_editChatDefaultBannedRights struct {
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	BannedRights TL // ChatBannedRights: TL_chatBannedRights
}

// Returns EmojiKeywordsDifference: TL_emojiKeywordsDifference
type TL_messages_getEmojiKeywords struct {
	LangCode string
}

// Returns EmojiKeywordsDifference: TL_emojiKeywordsDifference
type TL_messages_getEmojiKeywordsDifference struct {
	LangCode    string
	FromVersion int32
}

// Returns Vector<EmojiLanguage>: TL_emojiLanguage
type TL_messages_getEmojiKeywordsLanguages struct {
	LangCodes []string
}

// Returns EmojiURL: TL_emojiURL
type TL_messages_getEmojiURL struct {
	LangCode string
}

// Returns Vector<messages.SearchCounter>: TL_messages_searchCounter
type TL_messages_getSearchCounters struct {
	Peer     TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID Option[int32] // (optional)
	Filters  []TL          // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterUrl | TL_inputMessagesFilterGif | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
}

// Returns UrlAuthResult: TL_urlAuthResultRequest | TL_urlAuthResultAccepted | TL_urlAuthResultDefault
type TL_messages_requestUrlAuth struct {
	Peer     TL             // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID    Option[int32]  // (optional)
	ButtonID Option[int32]  // (optional)
	Url      Option[string] // (optional)
}

// Returns UrlAuthResult: TL_urlAuthResultRequest | TL_urlAuthResultAccepted | TL_urlAuthResultDefault
type TL_messages_acceptUrlAuth struct {
	WriteAllowed bool
	Peer         TL             // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID        Option[int32]  // (optional)
	ButtonID     Option[int32]  // (optional)
	Url          Option[string] // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_hidePeerSettingsBar struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getScheduledHistory struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Hash int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getScheduledMessages struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendScheduledMessages struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_deleteScheduledMessages struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns messages.VotesList: TL_messages_votesList
type TL_messages_getPollVotes struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID     int32
	Option []byte         // (optional)
	Offset Option[string] // (optional)
	Limit  int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_toggleStickerSets struct {
	Uninstall   bool
	Archive     bool
	Unarchive   bool
	Stickersets []TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
}

// Returns Vector<DialogFilter>: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
type TL_messages_getDialogFilters struct {
}

// Returns Vector<DialogFilterSuggested>: TL_dialogFilterSuggested
type TL_messages_getSuggestedDialogFilters struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_updateDialogFilter struct {
	ID     int32
	Filter TL // (optional) DialogFilter: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_updateDialogFiltersOrder struct {
	Order []int32
}

// Returns messages.FeaturedStickers: TL_messages_featuredStickersNotModified | TL_messages_featuredStickers
type TL_messages_getOldFeaturedStickers struct {
	Offset int32
	Limit  int32
	Hash   int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getReplies struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID      int32
	OffsetID   int32
	OffsetDate int32
	AddOffset  int32
	Limit      int32
	MaxID      int32
	MinID      int32
	Hash       int64
}

// Returns messages.DiscussionMessage: TL_messages_discussionMessage
type TL_messages_getDiscussionMessage struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_readDiscussion struct {
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID     int32
	ReadMaxID int32
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_messages_unpinAllMessages struct {
	Peer     TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID Option[int32] // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_deleteChat struct {
	ChatID int64
}

// Returns messages.AffectedFoundMessages: TL_messages_affectedFoundMessages
type TL_messages_deletePhoneCallHistory struct {
	Revoke bool
}

// Returns messages.HistoryImportParsed: TL_messages_historyImportParsed
type TL_messages_checkHistoryImport struct {
	ImportHead string
}

// Returns messages.HistoryImport: TL_messages_historyImport
type TL_messages_initHistoryImport struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	File       TL // InputFile: TL_inputFile | TL_inputFileBig
	MediaCount int32
}

// Returns MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway
type TL_messages_uploadImportedMedia struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ImportID int64
	FileName string
	Media    TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_startHistoryImport struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ImportID int64
}

// Returns messages.ExportedChatInvites: TL_messages_exportedChatInvites
type TL_messages_getExportedChatInvites struct {
	Revoked    bool
	Peer       TL             // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	AdminID    TL             // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	OffsetDate Option[int32]  // (optional)
	OffsetLink Option[string] // (optional)
	Limit      int32
}

// Returns messages.ExportedChatInvite: TL_messages_exportedChatInvite | TL_messages_exportedChatInviteReplaced
type TL_messages_getExportedChatInvite struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link string
}

// Returns messages.ExportedChatInvite: TL_messages_exportedChatInvite | TL_messages_exportedChatInviteReplaced
type TL_messages_editExportedChatInvite struct {
	Revoked       bool
	Peer          TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link          string
	ExpireDate    Option[int32]  // (optional)
	UsageLimit    Option[int32]  // (optional)
	RequestNeeded Option[bool]   // (optional)
	Title         Option[string] // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_deleteRevokedExportedChatInvites struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	AdminID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_deleteExportedChatInvite struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link string
}

// Returns messages.ChatAdminsWithInvites: TL_messages_chatAdminsWithInvites
type TL_messages_getAdminsWithInvites struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.ChatInviteImporters: TL_messages_chatInviteImporters
type TL_messages_getChatInviteImporters struct {
	Requested  bool
	Peer       TL             // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link       Option[string] // (optional)
	Q          Option[string] // (optional)
	OffsetDate int32
	OffsetUser TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Limit      int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setHistoryTTL struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Period int32
}

// Returns messages.CheckedHistoryImportPeer: TL_messages_checkedHistoryImportPeer
type TL_messages_checkHistoryImportPeer struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setChatTheme struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Emoticon string
}

// Returns Vector<ReadParticipantDate>: TL_readParticipantDate
type TL_messages_getMessageReadParticipants struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns messages.SearchResultsCalendar: TL_messages_searchResultsCalendar
type TL_messages_getSearchResultsCalendar struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Filter     TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterUrl | TL_inputMessagesFilterGif | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	OffsetID   int32
	OffsetDate int32
}

// Returns messages.SearchResultsPositions: TL_messages_searchResultsPositions
type TL_messages_getSearchResultsPositions struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Filter   TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterUrl | TL_inputMessagesFilterGif | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	OffsetID int32
	Limit    int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_hideChatJoinRequest struct {
	Approved bool
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_hideAllChatJoinRequests struct {
	Approved bool
	Peer     TL             // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link     Option[string] // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_toggleNoForwards struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Enabled bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_saveDefaultSendAs struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	SendAs TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendReaction struct {
	Big         bool
	AddToRecent bool
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID       int32
	Reaction    []TL // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_getMessagesReactions struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns messages.MessageReactionsList: TL_messages_messageReactionsList
type TL_messages_getMessageReactionsList struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID       int32
	Reaction TL             // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
	Offset   Option[string] // (optional)
	Limit    int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setChatAvailableReactions struct {
	Peer               TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	AvailableReactions TL // ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
}

// Returns messages.AvailableReactions: TL_messages_availableReactionsNotModified | TL_messages_availableReactions
type TL_messages_getAvailableReactions struct {
	Hash int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setDefaultReaction struct {
	Reaction TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Returns messages.TranslatedText: TL_messages_translateResult
type TL_messages_translateText struct {
	Peer   TL      // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID     []int32 // (optional)
	Text   []TL    // (optional) TextWithEntities: TL_textWithEntities
	ToLang string
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getUnreadReactions struct {
	Peer      TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID  Option[int32] // (optional)
	OffsetID  int32
	AddOffset int32
	Limit     int32
	MaxID     int32
	MinID     int32
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_messages_readReactions struct {
	Peer     TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID Option[int32] // (optional)
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_searchSentMedia struct {
	Q      string
	Filter TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterUrl | TL_inputMessagesFilterGif | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	Limit  int32
}

// Returns AttachMenuBots: TL_attachMenuBotsNotModified | TL_attachMenuBots
type TL_messages_getAttachMenuBots struct {
	Hash int64
}

// Returns AttachMenuBotsBot: TL_attachMenuBotsBot
type TL_messages_getAttachMenuBot struct {
	Bot TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_toggleBotInAttachMenu struct {
	WriteAllowed bool
	Bot          TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Enabled      bool
}

// Returns WebViewResult: TL_webViewResultUrl
type TL_messages_requestWebView struct {
	FromBotMenu bool
	Silent      bool
	Peer        TL             // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Bot         TL             // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Url         Option[string] // (optional)
	StartParam  Option[string] // (optional)
	ThemeParams TL             // (optional) DataJSON: TL_dataJSON
	Platform    string
	ReplyTo     TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	SendAs      TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_prolongWebView struct {
	Silent  bool
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Bot     TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	QueryID int64
	ReplyTo TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	SendAs  TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns SimpleWebViewResult: TL_simpleWebViewResultUrl
type TL_messages_requestSimpleWebView struct {
	FromSwitchWebview bool
	FromSideMenu      bool
	Bot               TL             // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Url               Option[string] // (optional)
	StartParam        Option[string] // (optional)
	ThemeParams       TL             // (optional) DataJSON: TL_dataJSON
	Platform          string
}

// Returns WebViewMessageSent: TL_webViewMessageSent
type TL_messages_sendWebViewResultMessage struct {
	BotQueryID string
	Result     TL // InputBotInlineResult: TL_inputBotInlineResult | TL_inputBotInlineResultPhoto | TL_inputBotInlineResultDocument | TL_inputBotInlineResultGame
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendWebViewData struct {
	Bot        TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	RandomID   int64
	ButtonText string
	Data       string
}

// Returns messages.TranscribedAudio: TL_messages_transcribedAudio
type TL_messages_transcribeAudio struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_rateTranscribedAudio struct {
	Peer            TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID           int32
	TranscriptionID int64
	Good            bool
}

// Returns Vector<Document>: TL_documentEmpty | TL_document
type TL_messages_getCustomEmojiDocuments struct {
	DocumentID []int64
}

// Returns messages.AllStickers: TL_messages_allStickersNotModified | TL_messages_allStickers
type TL_messages_getEmojiStickers struct {
	Hash int64
}

// Returns messages.FeaturedStickers: TL_messages_featuredStickersNotModified | TL_messages_featuredStickers
type TL_messages_getFeaturedEmojiStickers struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reportReaction struct {
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID           int32
	ReactionPeer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.Reactions: TL_messages_reactionsNotModified | TL_messages_reactions
type TL_messages_getTopReactions struct {
	Limit int32
	Hash  int64
}

// Returns messages.Reactions: TL_messages_reactionsNotModified | TL_messages_reactions
type TL_messages_getRecentReactions struct {
	Limit int32
	Hash  int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_clearRecentReactions struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_getExtendedMedia struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setDefaultHistoryTTL struct {
	Period int32
}

// Returns DefaultHistoryTTL: TL_defaultHistoryTTL
type TL_messages_getDefaultHistoryTTL struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendBotRequestedPeer struct {
	Peer          TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID         int32
	ButtonID      int32
	RequestedPeer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.EmojiGroups: TL_messages_emojiGroupsNotModified | TL_messages_emojiGroups
type TL_messages_getEmojiGroups struct {
	Hash int32
}

// Returns messages.EmojiGroups: TL_messages_emojiGroupsNotModified | TL_messages_emojiGroups
type TL_messages_getEmojiStatusGroups struct {
	Hash int32
}

// Returns messages.EmojiGroups: TL_messages_emojiGroupsNotModified | TL_messages_emojiGroups
type TL_messages_getEmojiProfilePhotoGroups struct {
	Hash int32
}

// Returns EmojiList: TL_emojiListNotModified | TL_emojiList
type TL_messages_searchCustomEmoji struct {
	Emoticon string
	Hash     int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_togglePeerTranslations struct {
	Disabled bool
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.BotApp: TL_messages_botApp
type TL_messages_getBotApp struct {
	App  TL // InputBotApp: TL_inputBotAppID | TL_inputBotAppShortName
	Hash int64
}

// Returns AppWebViewResult: TL_appWebViewResultUrl
type TL_messages_requestAppWebView struct {
	WriteAllowed bool
	Peer         TL             // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	App          TL             // InputBotApp: TL_inputBotAppID | TL_inputBotAppShortName
	StartParam   Option[string] // (optional)
	ThemeParams  TL             // (optional) DataJSON: TL_dataJSON
	Platform     string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setChatWallPaper struct {
	Peer      TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Wallpaper TL            // (optional) InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
	Settings  TL            // (optional) WallPaperSettings: TL_wallPaperSettings
	ID        Option[int32] // (optional)
}

// Returns updates.State: TL_updates_state
type TL_updates_getState struct {
}

// Returns updates.Difference: TL_updates_differenceEmpty | TL_updates_difference | TL_updates_differenceSlice | TL_updates_differenceTooLong
type TL_updates_getDifference struct {
	Pts           int32
	PtsLimit      Option[int32] // (optional)
	PtsTotalLimit Option[int32] // (optional)
	Date          int32
	Qts           int32
	QtsLimit      Option[int32] // (optional)
}

// Returns updates.ChannelDifference: TL_updates_channelDifferenceEmpty | TL_updates_channelDifferenceTooLong | TL_updates_channelDifference
type TL_updates_getChannelDifference struct {
	Force   bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Filter  TL // ChannelMessagesFilter: TL_channelMessagesFilterEmpty | TL_channelMessagesFilter
	Pts     int32
	Limit   int32
}

// Returns photos.Photo: TL_photos_photo
type TL_photos_updateProfilePhoto struct {
	Fallback bool
	Bot      TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	ID       TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
}

// Returns photos.Photo: TL_photos_photo
type TL_photos_uploadProfilePhoto struct {
	Fallback         bool
	Bot              TL              // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	File             TL              // (optional) InputFile: TL_inputFile | TL_inputFileBig
	Video            TL              // (optional) InputFile: TL_inputFile | TL_inputFileBig
	VideoStartTs     Option[float64] // (optional)
	VideoEmojiMarkup TL              // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
}

// Returns Vector<long>:
type TL_photos_deletePhotos struct {
	ID []TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
}

// Returns photos.Photos: TL_photos_photos | TL_photos_photosSlice
type TL_photos_getUserPhotos struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Offset int32
	MaxID  int64
	Limit  int32
}

// Returns photos.Photo: TL_photos_photo
type TL_photos_uploadContactProfilePhoto struct {
	Suggest          bool
	Save             bool
	UserID           TL              // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	File             TL              // (optional) InputFile: TL_inputFile | TL_inputFileBig
	Video            TL              // (optional) InputFile: TL_inputFile | TL_inputFileBig
	VideoStartTs     Option[float64] // (optional)
	VideoEmojiMarkup TL              // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_upload_saveFilePart struct {
	FileID   int64
	FilePart int32
	Bytes    []byte
}

// Returns upload.File: TL_upload_file | TL_upload_fileCdnRedirect
type TL_upload_getFile struct {
	Precise      bool
	CdnSupported bool
	Location     TL // InputFileLocation: TL_inputFileLocation | TL_inputEncryptedFileLocation | TL_inputDocumentFileLocation | TL_inputSecureFileLocation | TL_inputTakeoutFileLocation | TL_inputPhotoFileLocation | TL_inputPhotoLegacyFileLocation | TL_inputPeerPhotoFileLocation | TL_inputStickerSetThumb | TL_inputGroupCallStream
	Offset       int64
	Limit        int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_upload_saveBigFilePart struct {
	FileID         int64
	FilePart       int32
	FileTotalParts int32
	Bytes          []byte
}

// Returns upload.WebFile: TL_upload_webFile
type TL_upload_getWebFile struct {
	Location TL // InputWebFileLocation: TL_inputWebFileLocation | TL_inputWebFileGeoPointLocation | TL_inputWebFileAudioAlbumThumbLocation
	Offset   int32
	Limit    int32
}

// Returns upload.CdnFile: TL_upload_cdnFileReuploadNeeded | TL_upload_cdnFile
type TL_upload_getCdnFile struct {
	FileToken []byte
	Offset    int64
	Limit     int32
}

// Returns Vector<FileHash>: TL_fileHash
type TL_upload_reuploadCdnFile struct {
	FileToken    []byte
	RequestToken []byte
}

// Returns Vector<FileHash>: TL_fileHash
type TL_upload_getCdnFileHashes struct {
	FileToken []byte
	Offset    int64
}

// Returns Vector<FileHash>: TL_fileHash
type TL_upload_getFileHashes struct {
	Location TL // InputFileLocation: TL_inputFileLocation | TL_inputEncryptedFileLocation | TL_inputDocumentFileLocation | TL_inputSecureFileLocation | TL_inputTakeoutFileLocation | TL_inputPhotoFileLocation | TL_inputPhotoLegacyFileLocation | TL_inputPeerPhotoFileLocation | TL_inputStickerSetThumb | TL_inputGroupCallStream
	Offset   int64
}

// Returns Config: TL_config
type TL_help_getConfig struct {
}

// Returns NearestDc: TL_nearestDc
type TL_help_getNearestDc struct {
}

// Returns help.AppUpdate: TL_help_appUpdate | TL_help_noAppUpdate
type TL_help_getAppUpdate struct {
	Source string
}

// Returns help.InviteText: TL_help_inviteText
type TL_help_getInviteText struct {
}

// Returns help.Support: TL_help_support
type TL_help_getSupport struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_help_getAppChangelog struct {
	PrevAppVersion string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_setBotUpdatesStatus struct {
	PendingUpdatesCount int32
	Message             string
}

// Returns CdnConfig: TL_cdnConfig
type TL_help_getCdnConfig struct {
}

// Returns help.RecentMeUrls: TL_help_recentMeUrls
type TL_help_getRecentMeUrls struct {
	Referer string
}

// Returns help.TermsOfServiceUpdate: TL_help_termsOfServiceUpdateEmpty | TL_help_termsOfServiceUpdate
type TL_help_getTermsOfServiceUpdate struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_acceptTermsOfService struct {
	ID TL // DataJSON: TL_dataJSON
}

// Returns help.DeepLinkInfo: TL_help_deepLinkInfoEmpty | TL_help_deepLinkInfo
type TL_help_getDeepLinkInfo struct {
	Path string
}

// Returns help.AppConfig: TL_help_appConfigNotModified | TL_help_appConfig
type TL_help_getAppConfig struct {
	Hash int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_saveAppLog struct {
	Events []TL // InputAppEvent: TL_inputAppEvent
}

// Returns help.PassportConfig: TL_help_passportConfigNotModified | TL_help_passportConfig
type TL_help_getPassportConfig struct {
	Hash int32
}

// Returns help.SupportName: TL_help_supportName
type TL_help_getSupportName struct {
}

// Returns help.UserInfo: TL_help_userInfoEmpty | TL_help_userInfo
type TL_help_getUserInfo struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns help.UserInfo: TL_help_userInfoEmpty | TL_help_userInfo
type TL_help_editUserInfo struct {
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Message  string
	Entities []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Returns help.PromoData: TL_help_promoDataEmpty | TL_help_promoData
type TL_help_getPromoData struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_hidePromoData struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_dismissSuggestion struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Suggestion string
}

// Returns help.CountriesList: TL_help_countriesListNotModified | TL_help_countriesList
type TL_help_getCountriesList struct {
	LangCode string
	Hash     int32
}

// Returns help.PremiumPromo: TL_help_premiumPromo
type TL_help_getPremiumPromo struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_readHistory struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MaxID   int32
}

// Returns messages.AffectedMessages: TL_messages_affectedMessages
type TL_channels_deleteMessages struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	ID      []int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_reportSpam struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Participant TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID          []int32
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_channels_getMessages struct {
	Channel TL   // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	ID      []TL // InputMessage: TL_inputMessageID | TL_inputMessageReplyTo | TL_inputMessagePinned | TL_inputMessageCallbackQuery
}

// Returns channels.ChannelParticipants: TL_channels_channelParticipants | TL_channels_channelParticipantsNotModified
type TL_channels_getParticipants struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Filter  TL // ChannelParticipantsFilter: TL_channelParticipantsRecent | TL_channelParticipantsAdmins | TL_channelParticipantsKicked | TL_channelParticipantsBots | TL_channelParticipantsBanned | TL_channelParticipantsSearch | TL_channelParticipantsContacts | TL_channelParticipantsMentions
	Offset  int32
	Limit   int32
	Hash    int64
}

// Returns channels.ChannelParticipant: TL_channels_channelParticipant
type TL_channels_getParticipant struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Participant TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_channels_getChannels struct {
	ID []TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns messages.ChatFull: TL_messages_chatFull
type TL_channels_getFullChannel struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_createChannel struct {
	Broadcast bool
	Megagroup bool
	ForImport bool
	Forum     bool
	Title     string
	About     string
	GeoPoint  TL             // (optional) InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Address   Option[string] // (optional)
	TtlPeriod Option[int32]  // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editAdmin struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	UserID      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	AdminRights TL // ChatAdminRights: TL_chatAdminRights
	Rank        string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editTitle struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Title   string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editPhoto struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Photo   TL // InputChatPhoto: TL_inputChatPhotoEmpty | TL_inputChatUploadedPhoto | TL_inputChatPhoto
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_checkUsername struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Username string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_updateUsername struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Username string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_joinChannel struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_leaveChannel struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_inviteToChannel struct {
	Channel TL   // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Users   []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_deleteChannel struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns ExportedMessageLink: TL_exportedMessageLink
type TL_channels_exportMessageLink struct {
	Grouped bool
	Thread  bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	ID      int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleSignatures struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_channels_getAdminedPublicChannels struct {
	ByLocation bool
	CheckLimit bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editBanned struct {
	Channel      TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Participant  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	BannedRights TL // ChatBannedRights: TL_chatBannedRights
}

// Returns channels.AdminLogResults: TL_channels_adminLogResults
type TL_channels_getAdminLog struct {
	Channel      TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Q            string
	EventsFilter TL   // (optional) ChannelAdminLogEventsFilter: TL_channelAdminLogEventsFilter
	Admins       []TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	MaxID        int64
	MinID        int64
	Limit        int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_setStickers struct {
	Channel    TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_readMessageContents struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	ID      []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_deleteHistory struct {
	ForEveryone bool
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MaxID       int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_togglePreHistoryHidden struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_channels_getLeftChannels struct {
	Offset int32
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_channels_getGroupsForDiscussion struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_setDiscussionGroup struct {
	Broadcast TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Group     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editCreator struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_editLocation struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	GeoPoint TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Address  string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleSlowMode struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Seconds int32
}

// Returns messages.InactiveChats: TL_messages_inactiveChats
type TL_channels_getInactiveChannels struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_convertToGigagroup struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_viewSponsoredMessage struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	RandomID []byte
}

// Returns messages.SponsoredMessages: TL_messages_sponsoredMessages | TL_messages_sponsoredMessagesEmpty
type TL_channels_getSponsoredMessages struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns channels.SendAsPeers: TL_channels_sendAsPeers
type TL_channels_getSendAs struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_channels_deleteParticipantHistory struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Participant TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleJoinToSend struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleJoinRequest struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_reorderUsernames struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Order   []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_toggleUsername struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Username string
	Active   bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_deactivateAllUsernames struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleForum struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_createForumTopic struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Title       string
	IconColor   Option[int32] // (optional)
	IconEmojiID Option[int64] // (optional)
	RandomID    int64
	SendAs      TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.ForumTopics: TL_messages_forumTopics
type TL_channels_getForumTopics struct {
	Channel     TL             // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Q           Option[string] // (optional)
	OffsetDate  int32
	OffsetID    int32
	OffsetTopic int32
	Limit       int32
}

// Returns messages.ForumTopics: TL_messages_forumTopics
type TL_channels_getForumTopicsByID struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Topics  []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editForumTopic struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	TopicID     int32
	Title       Option[string] // (optional)
	IconEmojiID Option[int64]  // (optional)
	Closed      Option[bool]   // (optional)
	Hidden      Option[bool]   // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_updatePinnedForumTopic struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	TopicID int32
	Pinned  bool
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_channels_deleteTopicHistory struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	TopMsgID int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_reorderPinnedForumTopics struct {
	Force   bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Order   []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleAntiSpam struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_reportAntiSpamFalsePositive struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MsgID   int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleParticipantsHidden struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_clickSponsoredMessage struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	RandomID []byte
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_updateColor struct {
	Channel           TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Color             int32
	BackgroundEmojiID Option[int64] // (optional)
}

// Returns DataJSON: TL_dataJSON
type TL_bots_sendCustomRequest struct {
	CustomMethod string
	Params       TL // DataJSON: TL_dataJSON
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_answerWebhookJSONQuery struct {
	QueryID int64
	Data    TL // DataJSON: TL_dataJSON
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotCommands struct {
	Scope    TL // BotCommandScope: TL_botCommandScopeDefault | TL_botCommandScopeUsers | TL_botCommandScopeChats | TL_botCommandScopeChatAdmins | TL_botCommandScopePeer | TL_botCommandScopePeerAdmins | TL_botCommandScopePeerUser
	LangCode string
	Commands []TL // BotCommand: TL_botCommand
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_resetBotCommands struct {
	Scope    TL // BotCommandScope: TL_botCommandScopeDefault | TL_botCommandScopeUsers | TL_botCommandScopeChats | TL_botCommandScopeChatAdmins | TL_botCommandScopePeer | TL_botCommandScopePeerAdmins | TL_botCommandScopePeerUser
	LangCode string
}

// Returns Vector<BotCommand>: TL_botCommand
type TL_bots_getBotCommands struct {
	Scope    TL // BotCommandScope: TL_botCommandScopeDefault | TL_botCommandScopeUsers | TL_botCommandScopeChats | TL_botCommandScopeChatAdmins | TL_botCommandScopePeer | TL_botCommandScopePeerAdmins | TL_botCommandScopePeerUser
	LangCode string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotMenuButton struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Button TL // BotMenuButton: TL_botMenuButtonDefault | TL_botMenuButtonCommands | TL_botMenuButton
}

// Returns BotMenuButton: TL_botMenuButtonDefault | TL_botMenuButtonCommands | TL_botMenuButton
type TL_bots_getBotMenuButton struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotBroadcastDefaultAdminRights struct {
	AdminRights TL // ChatAdminRights: TL_chatAdminRights
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotGroupDefaultAdminRights struct {
	AdminRights TL // ChatAdminRights: TL_chatAdminRights
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotInfo struct {
	Bot         TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	LangCode    string
	Name        Option[string] // (optional)
	About       Option[string] // (optional)
	Description Option[string] // (optional)
}

// Returns bots.BotInfo: TL_bots_botInfo
type TL_bots_getBotInfo struct {
	Bot      TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	LangCode string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_reorderUsernames struct {
	Bot   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Order []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_toggleUsername struct {
	Bot      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Username string
	Active   bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_canSendMessage struct {
	Bot TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_bots_allowSendMessage struct {
	Bot TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns DataJSON: TL_dataJSON
type TL_bots_invokeWebViewCustomMethod struct {
	Bot          TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	CustomMethod string
	Params       TL // DataJSON: TL_dataJSON
}

// Returns payments.PaymentForm: TL_payments_paymentForm
type TL_payments_getPaymentForm struct {
	Invoice     TL // InputInvoice: TL_inputInvoiceMessage | TL_inputInvoiceSlug | TL_inputInvoicePremiumGiftCode
	ThemeParams TL // (optional) DataJSON: TL_dataJSON
}

// Returns payments.PaymentReceipt: TL_payments_paymentReceipt
type TL_payments_getPaymentReceipt struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns payments.ValidatedRequestedInfo: TL_payments_validatedRequestedInfo
type TL_payments_validateRequestedInfo struct {
	Save    bool
	Invoice TL // InputInvoice: TL_inputInvoiceMessage | TL_inputInvoiceSlug | TL_inputInvoicePremiumGiftCode
	Info    TL // PaymentRequestedInfo: TL_paymentRequestedInfo
}

// Returns payments.PaymentResult: TL_payments_paymentResult | TL_payments_paymentVerificationNeeded
type TL_payments_sendPaymentForm struct {
	FormID           int64
	Invoice          TL             // InputInvoice: TL_inputInvoiceMessage | TL_inputInvoiceSlug | TL_inputInvoicePremiumGiftCode
	RequestedInfoID  Option[string] // (optional)
	ShippingOptionID Option[string] // (optional)
	Credentials      TL             // InputPaymentCredentials: TL_inputPaymentCredentialsSaved | TL_inputPaymentCredentials | TL_inputPaymentCredentialsApplePay | TL_inputPaymentCredentialsGooglePay
	TipAmount        Option[int64]  // (optional)
}

// Returns payments.SavedInfo: TL_payments_savedInfo
type TL_payments_getSavedInfo struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_payments_clearSavedInfo struct {
	Credentials bool
	Info        bool
}

// Returns payments.BankCardData: TL_payments_bankCardData
type TL_payments_getBankCardData struct {
	Number string
}

// Returns payments.ExportedInvoice: TL_payments_exportedInvoice
type TL_payments_exportInvoice struct {
	InvoiceMedia TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_payments_assignAppStoreTransaction struct {
	Receipt []byte
	Purpose TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_payments_assignPlayMarketTransaction struct {
	Receipt TL // DataJSON: TL_dataJSON
	Purpose TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_payments_canPurchasePremium struct {
	Purpose TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway
}

// Returns Vector<PremiumGiftCodeOption>: TL_premiumGiftCodeOption
type TL_payments_getPremiumGiftCodeOptions struct {
	BoostPeer TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns payments.CheckedGiftCode: TL_payments_checkedGiftCode
type TL_payments_checkGiftCode struct {
	Slug string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_payments_applyGiftCode struct {
	Slug string
}

// Returns payments.GiveawayInfo: TL_payments_giveawayInfo | TL_payments_giveawayInfoResults
type TL_payments_getGiveawayInfo struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_payments_launchPrepaidGiveaway struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	GiveawayID int64
	Purpose    TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_createStickerSet struct {
	Masks     bool
	Animated  bool
	Videos    bool
	Emojis    bool
	TextColor bool
	UserID    TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Title     string
	ShortName string
	Thumb     TL             // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Stickers  []TL           // InputStickerSetItem: TL_inputStickerSetItem
	Software  Option[string] // (optional)
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_removeStickerFromSet struct {
	Sticker TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_changeStickerPosition struct {
	Sticker  TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Position int32
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_addStickerToSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
	Sticker    TL // InputStickerSetItem: TL_inputStickerSetItem
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_setStickerSetThumb struct {
	Stickerset      TL            // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
	Thumb           TL            // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	ThumbDocumentID Option[int64] // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stickers_checkShortName struct {
	ShortName string
}

// Returns stickers.SuggestedShortName: TL_stickers_suggestedShortName
type TL_stickers_suggestShortName struct {
	Title string
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_changeSticker struct {
	Sticker    TL             // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Emoji      Option[string] // (optional)
	MaskCoords TL             // (optional) MaskCoords: TL_maskCoords
	Keywords   Option[string] // (optional)
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_renameStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
	Title      string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stickers_deleteStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons
}

// Returns DataJSON: TL_dataJSON
type TL_phone_getCallConfig struct {
}

// Returns phone.PhoneCall: TL_phone_phoneCall
type TL_phone_requestCall struct {
	Video    bool
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	RandomID int32
	GAHash   []byte
	Protocol TL // PhoneCallProtocol: TL_phoneCallProtocol
}

// Returns phone.PhoneCall: TL_phone_phoneCall
type TL_phone_acceptCall struct {
	Peer     TL // InputPhoneCall: TL_inputPhoneCall
	GB       []byte
	Protocol TL // PhoneCallProtocol: TL_phoneCallProtocol
}

// Returns phone.PhoneCall: TL_phone_phoneCall
type TL_phone_confirmCall struct {
	Peer           TL // InputPhoneCall: TL_inputPhoneCall
	GA             []byte
	KeyFingerprint int64
	Protocol       TL // PhoneCallProtocol: TL_phoneCallProtocol
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_receivedCall struct {
	Peer TL // InputPhoneCall: TL_inputPhoneCall
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_discardCall struct {
	Video        bool
	Peer         TL // InputPhoneCall: TL_inputPhoneCall
	Duration     int32
	Reason       TL // PhoneCallDiscardReason: TL_phoneCallDiscardReasonMissed | TL_phoneCallDiscardReasonDisconnect | TL_phoneCallDiscardReasonHangup | TL_phoneCallDiscardReasonBusy
	ConnectionID int64
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_setCallRating struct {
	UserInitiative bool
	Peer           TL // InputPhoneCall: TL_inputPhoneCall
	Rating         int32
	Comment        string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_saveCallDebug struct {
	Peer  TL // InputPhoneCall: TL_inputPhoneCall
	Debug TL // DataJSON: TL_dataJSON
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_sendSignalingData struct {
	Peer TL // InputPhoneCall: TL_inputPhoneCall
	Data []byte
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_createGroupCall struct {
	RtmpStream   bool
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	RandomID     int32
	Title        Option[string] // (optional)
	ScheduleDate Option[int32]  // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_joinGroupCall struct {
	Muted        bool
	VideoStopped bool
	Call         TL             // InputGroupCall: TL_inputGroupCall
	JoinAs       TL             // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	InviteHash   Option[string] // (optional)
	Params       TL             // DataJSON: TL_dataJSON
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_leaveGroupCall struct {
	Call   TL // InputGroupCall: TL_inputGroupCall
	Source int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_inviteToGroupCall struct {
	Call  TL   // InputGroupCall: TL_inputGroupCall
	Users []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_discardGroupCall struct {
	Call TL // InputGroupCall: TL_inputGroupCall
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_toggleGroupCallSettings struct {
	ResetInviteHash bool
	Call            TL           // InputGroupCall: TL_inputGroupCall
	JoinMuted       Option[bool] // (optional)
}

// Returns phone.GroupCall: TL_phone_groupCall
type TL_phone_getGroupCall struct {
	Call  TL // InputGroupCall: TL_inputGroupCall
	Limit int32
}

// Returns phone.GroupParticipants: TL_phone_groupParticipants
type TL_phone_getGroupParticipants struct {
	Call    TL   // InputGroupCall: TL_inputGroupCall
	Ids     []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Sources []int32
	Offset  string
	Limit   int32
}

// Returns Vector<int>:
type TL_phone_checkGroupCall struct {
	Call    TL // InputGroupCall: TL_inputGroupCall
	Sources []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_toggleGroupCallRecord struct {
	Start         bool
	Video         bool
	Call          TL             // InputGroupCall: TL_inputGroupCall
	Title         Option[string] // (optional)
	VideoPortrait Option[bool]   // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_editGroupCallParticipant struct {
	Call               TL            // InputGroupCall: TL_inputGroupCall
	Participant        TL            // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Muted              Option[bool]  // (optional)
	Volume             Option[int32] // (optional)
	RaiseHand          Option[bool]  // (optional)
	VideoStopped       Option[bool]  // (optional)
	VideoPaused        Option[bool]  // (optional)
	PresentationPaused Option[bool]  // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_editGroupCallTitle struct {
	Call  TL // InputGroupCall: TL_inputGroupCall
	Title string
}

// Returns phone.JoinAsPeers: TL_phone_joinAsPeers
type TL_phone_getGroupCallJoinAs struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns phone.ExportedGroupCallInvite: TL_phone_exportedGroupCallInvite
type TL_phone_exportGroupCallInvite struct {
	CanSelfUnmute bool
	Call          TL // InputGroupCall: TL_inputGroupCall
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_toggleGroupCallStartSubscription struct {
	Call       TL // InputGroupCall: TL_inputGroupCall
	Subscribed bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_startScheduledGroupCall struct {
	Call TL // InputGroupCall: TL_inputGroupCall
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_saveDefaultGroupCallJoinAs struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	JoinAs TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_joinGroupCallPresentation struct {
	Call   TL // InputGroupCall: TL_inputGroupCall
	Params TL // DataJSON: TL_dataJSON
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_leaveGroupCallPresentation struct {
	Call TL // InputGroupCall: TL_inputGroupCall
}

// Returns phone.GroupCallStreamChannels: TL_phone_groupCallStreamChannels
type TL_phone_getGroupCallStreamChannels struct {
	Call TL // InputGroupCall: TL_inputGroupCall
}

// Returns phone.GroupCallStreamRtmpUrl: TL_phone_groupCallStreamRtmpUrl
type TL_phone_getGroupCallStreamRtmpUrl struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Revoke bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_saveCallLog struct {
	Peer TL // InputPhoneCall: TL_inputPhoneCall
	File TL // InputFile: TL_inputFile | TL_inputFileBig
}

// Returns LangPackDifference: TL_langPackDifference
type TL_langpack_getLangPack struct {
	LangPack string
	LangCode string
}

// Returns Vector<LangPackString>: TL_langPackString | TL_langPackStringPluralized | TL_langPackStringDeleted
type TL_langpack_getStrings struct {
	LangPack string
	LangCode string
	Keys     []string
}

// Returns LangPackDifference: TL_langPackDifference
type TL_langpack_getDifference struct {
	LangPack    string
	LangCode    string
	FromVersion int32
}

// Returns Vector<LangPackLanguage>: TL_langPackLanguage
type TL_langpack_getLanguages struct {
	LangPack string
}

// Returns LangPackLanguage: TL_langPackLanguage
type TL_langpack_getLanguage struct {
	LangPack string
	LangCode string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_folders_editPeerFolders struct {
	FolderPeers []TL // InputFolderPeer: TL_inputFolderPeer
}

// Returns stats.BroadcastStats: TL_stats_broadcastStats
type TL_stats_getBroadcastStats struct {
	Dark    bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
type TL_stats_loadAsyncGraph struct {
	Token string
	X     Option[int64] // (optional)
}

// Returns stats.MegagroupStats: TL_stats_megagroupStats
type TL_stats_getMegagroupStats struct {
	Dark    bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_stats_getMessagePublicForwards struct {
	Channel    TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MsgID      int32
	OffsetRate int32
	OffsetPeer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID   int32
	Limit      int32
}

// Returns stats.MessageStats: TL_stats_messageStats
type TL_stats_getMessageStats struct {
	Dark    bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MsgID   int32
}

// Returns chatlists.ExportedChatlistInvite: TL_chatlists_exportedChatlistInvite
type TL_chatlists_exportChatlistInvite struct {
	Chatlist TL // InputChatlist: TL_inputChatlistDialogFilter
	Title    string
	Peers    []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_chatlists_deleteExportedInvite struct {
	Chatlist TL // InputChatlist: TL_inputChatlistDialogFilter
	Slug     string
}

// Returns ExportedChatlistInvite: TL_exportedChatlistInvite
type TL_chatlists_editExportedInvite struct {
	Chatlist TL // InputChatlist: TL_inputChatlistDialogFilter
	Slug     string
	Title    Option[string] // (optional)
	Peers    []TL           // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns chatlists.ExportedInvites: TL_chatlists_exportedInvites
type TL_chatlists_getExportedInvites struct {
	Chatlist TL // InputChatlist: TL_inputChatlistDialogFilter
}

// Returns chatlists.ChatlistInvite: TL_chatlists_chatlistInviteAlready | TL_chatlists_chatlistInvite
type TL_chatlists_checkChatlistInvite struct {
	Slug string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_chatlists_joinChatlistInvite struct {
	Slug  string
	Peers []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns chatlists.ChatlistUpdates: TL_chatlists_chatlistUpdates
type TL_chatlists_getChatlistUpdates struct {
	Chatlist TL // InputChatlist: TL_inputChatlistDialogFilter
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_chatlists_joinChatlistUpdates struct {
	Chatlist TL   // InputChatlist: TL_inputChatlistDialogFilter
	Peers    []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_chatlists_hideChatlistUpdates struct {
	Chatlist TL // InputChatlist: TL_inputChatlistDialogFilter
}

// Returns Vector<Peer>: TL_peerUser | TL_peerChat | TL_peerChannel
type TL_chatlists_getLeaveChatlistSuggestions struct {
	Chatlist TL // InputChatlist: TL_inputChatlistDialogFilter
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_chatlists_leaveChatlist struct {
	Chatlist TL   // InputChatlist: TL_inputChatlistDialogFilter
	Peers    []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_canSendStory struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_sendStory struct {
	Pinned       bool
	Noforwards   bool
	Peer         TL             // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Media        TL             // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
	MediaAreas   []TL           // (optional) MediaArea: TL_mediaAreaVenue | TL_inputMediaAreaVenue | TL_mediaAreaGeoPoint | TL_mediaAreaSuggestedReaction
	Caption      Option[string] // (optional)
	Entities     []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	PrivacyRules []TL           // InputPrivacyRule: TL_inputPrivacyValueAllowContacts | TL_inputPrivacyValueAllowAll | TL_inputPrivacyValueAllowUsers | TL_inputPrivacyValueDisallowContacts | TL_inputPrivacyValueDisallowAll | TL_inputPrivacyValueDisallowUsers | TL_inputPrivacyValueAllowChatParticipants | TL_inputPrivacyValueDisallowChatParticipants | TL_inputPrivacyValueAllowCloseFriends
	RandomID     int64
	Period       Option[int32] // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_editStory struct {
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID           int32
	Media        TL             // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage
	MediaAreas   []TL           // (optional) MediaArea: TL_mediaAreaVenue | TL_inputMediaAreaVenue | TL_mediaAreaGeoPoint | TL_mediaAreaSuggestedReaction
	Caption      Option[string] // (optional)
	Entities     []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityUrl | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextUrl | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	PrivacyRules []TL           // (optional) InputPrivacyRule: TL_inputPrivacyValueAllowContacts | TL_inputPrivacyValueAllowAll | TL_inputPrivacyValueAllowUsers | TL_inputPrivacyValueDisallowContacts | TL_inputPrivacyValueDisallowAll | TL_inputPrivacyValueDisallowUsers | TL_inputPrivacyValueAllowChatParticipants | TL_inputPrivacyValueDisallowChatParticipants | TL_inputPrivacyValueAllowCloseFriends
}

// Returns Vector<int>:
type TL_stories_deleteStories struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Vector<int>:
type TL_stories_togglePinned struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID     []int32
	Pinned bool
}

// Returns stories.AllStories: TL_stories_allStoriesNotModified | TL_stories_allStories
type TL_stories_getAllStories struct {
	Next   bool
	Hidden bool
	State  Option[string] // (optional)
}

// Returns stories.Stories: TL_stories_stories
type TL_stories_getPinnedStories struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID int32
	Limit    int32
}

// Returns stories.Stories: TL_stories_stories
type TL_stories_getStoriesArchive struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID int32
	Limit    int32
}

// Returns stories.Stories: TL_stories_stories
type TL_stories_getStoriesByID struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_toggleAllStoriesHidden struct {
	Hidden bool
}

// Returns Vector<int>:
type TL_stories_readStories struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MaxID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_incrementStoryViews struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns stories.StoryViewsList: TL_stories_storyViewsList
type TL_stories_getStoryViewsList struct {
	JustContacts   bool
	ReactionsFirst bool
	Peer           TL             // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Q              Option[string] // (optional)
	ID             int32
	Offset         string
	Limit          int32
}

// Returns stories.StoryViews: TL_stories_storyViews
type TL_stories_getStoriesViews struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns ExportedStoryLink: TL_exportedStoryLink
type TL_stories_exportStoryLink struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_report struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID      []int32
	Reason  TL // ReportReason: TL_inputReportReasonSpam | TL_inputReportReasonViolence | TL_inputReportReasonPornography | TL_inputReportReasonChildAbuse | TL_inputReportReasonOther | TL_inputReportReasonCopyright | TL_inputReportReasonGeoIrrelevant | TL_inputReportReasonFake | TL_inputReportReasonIllegalDrugs | TL_inputReportReasonPersonalDetails
	Message string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_activateStealthMode struct {
	Past   bool
	Future bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_sendReaction struct {
	AddToRecent bool
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	StoryID     int32
	Reaction    TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji
}

// Returns stories.PeerStories: TL_stories_peerStories
type TL_stories_getPeerStories struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_getAllReadPeerStories struct {
}

// Returns Vector<int>:
type TL_stories_getPeerMaxIDs struct {
	ID []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_stories_getChatsToSend struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_togglePeerStoriesHidden struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Hidden bool
}

// Returns premium.BoostsList: TL_premium_boostsList
type TL_premium_getBoostsList struct {
	Gifts  bool
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Offset string
	Limit  int32
}

// Returns premium.MyBoosts: TL_premium_myBoosts
type TL_premium_getMyBoosts struct {
}

// Returns premium.MyBoosts: TL_premium_myBoosts
type TL_premium_applyBoost struct {
	Slots []int32 // (optional)
	Peer  TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns premium.BoostsStatus: TL_premium_boostsStatus
type TL_premium_getBoostsStatus struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

func (e TL_resPQ) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_resPQ)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.String(e.Pq)
	x.VectorLong(e.ServerPublicKeyFingerprints)
	return x.buf
}

func (e TL_p_q_inner_data) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_p_q_inner_data)
	x.String(e.Pq)
	x.String(e.P)
	x.String(e.Q)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes32(e.NewNonce)
	return x.buf
}

func (e TL_p_q_inner_data_dc) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_p_q_inner_data_dc)
	x.String(e.Pq)
	x.String(e.P)
	x.String(e.Q)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes32(e.NewNonce)
	x.Int(e.Dc)
	return x.buf
}

func (e TL_p_q_inner_data_temp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_p_q_inner_data_temp)
	x.String(e.Pq)
	x.String(e.P)
	x.String(e.Q)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes32(e.NewNonce)
	x.Int(e.ExpiresIn)
	return x.buf
}

func (e TL_p_q_inner_data_temp_dc) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_p_q_inner_data_temp_dc)
	x.String(e.Pq)
	x.String(e.P)
	x.String(e.Q)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes32(e.NewNonce)
	x.Int(e.Dc)
	x.Int(e.ExpiresIn)
	return x.buf
}

func (e TL_bind_auth_key_inner) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bind_auth_key_inner)
	x.Long(e.Nonce)
	x.Long(e.TempAuthKeyID)
	x.Long(e.PermAuthKeyID)
	x.Long(e.TempSessionID)
	x.Int(e.ExpiresAt)
	return x.buf
}

func (e TL_server_DH_params_fail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_server_DH_params_fail)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes16(e.NewNonceHash)
	return x.buf
}

func (e TL_server_DH_params_ok) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_server_DH_params_ok)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.String(e.EncryptedAnswer)
	return x.buf
}

func (e TL_server_DH_inner_data) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_server_DH_inner_data)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Int(e.G)
	x.String(e.DhPrime)
	x.String(e.GA)
	x.Int(e.ServerTime)
	return x.buf
}

func (e TL_client_DH_inner_data) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_client_DH_inner_data)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Long(e.RetryID)
	x.String(e.GB)
	return x.buf
}

func (e TL_dh_gen_ok) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dh_gen_ok)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes16(e.NewNonceHash1)
	return x.buf
}

func (e TL_dh_gen_retry) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dh_gen_retry)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes16(e.NewNonceHash2)
	return x.buf
}

func (e TL_dh_gen_fail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dh_gen_fail)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes16(e.NewNonceHash3)
	return x.buf
}

func (e TL_destroy_auth_key_ok) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroy_auth_key_ok)
	return x.buf
}

func (e TL_destroy_auth_key_none) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroy_auth_key_none)
	return x.buf
}

func (e TL_destroy_auth_key_fail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroy_auth_key_fail)
	return x.buf
}

func (e TL_req_pq) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_req_pq)
	x.Bytes16(e.Nonce)
	return x.buf
}

func (e TL_req_pq_multi) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_req_pq_multi)
	x.Bytes16(e.Nonce)
	return x.buf
}

func (e TL_req_DH_params) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_req_DH_params)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.String(e.P)
	x.String(e.Q)
	x.Long(e.PublicKeyFingerprint)
	x.String(e.EncryptedData)
	return x.buf
}

func (e TL_set_client_DH_params) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_set_client_DH_params)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.String(e.EncryptedData)
	return x.buf
}

func (e TL_destroy_auth_key) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroy_auth_key)
	return x.buf
}

func (e TL_msgs_ack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgs_ack)
	x.VectorLong(e.MsgIds)
	return x.buf
}

func (e TL_bad_msg_notification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bad_msg_notification)
	x.Long(e.BadMsgID)
	x.Int(e.BadMsgSeqno)
	x.Int(e.ErrorCode)
	return x.buf
}

func (e TL_bad_server_salt) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bad_server_salt)
	x.Long(e.BadMsgID)
	x.Int(e.BadMsgSeqno)
	x.Int(e.ErrorCode)
	x.Long(e.NewServerSalt)
	return x.buf
}

func (e TL_msgs_state_req) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgs_state_req)
	x.VectorLong(e.MsgIds)
	return x.buf
}

func (e TL_msgs_state_info) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgs_state_info)
	x.Long(e.ReqMsgID)
	x.String(e.Info)
	return x.buf
}

func (e TL_msgs_all_info) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgs_all_info)
	x.VectorLong(e.MsgIds)
	x.String(e.Info)
	return x.buf
}

func (e TL_msg_detailed_info) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msg_detailed_info)
	x.Long(e.MsgID)
	x.Long(e.AnswerMsgID)
	x.Int(e.Bytes)
	x.Int(e.Status)
	return x.buf
}

func (e TL_msg_new_detailed_info) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msg_new_detailed_info)
	x.Long(e.AnswerMsgID)
	x.Int(e.Bytes)
	x.Int(e.Status)
	return x.buf
}

func (e TL_msg_resend_req) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msg_resend_req)
	x.VectorLong(e.MsgIds)
	return x.buf
}

func (e TL_rpc_error) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpc_error)
	x.Int(e.ErrorCode)
	x.String(e.ErrorMessage)
	return x.buf
}

func (e TL_rpc_answer_unknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpc_answer_unknown)
	return x.buf
}

func (e TL_rpc_answer_dropped_running) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpc_answer_dropped_running)
	return x.buf
}

func (e TL_rpc_answer_dropped) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpc_answer_dropped)
	x.Long(e.MsgID)
	x.Int(e.SeqNo)
	x.Int(e.Bytes)
	return x.buf
}

func (e TL_future_salt) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_future_salt)
	x.Int(e.ValidSince)
	x.Int(e.ValidUntil)
	x.Long(e.Salt)
	return x.buf
}

func (e TL_future_salts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_future_salts)
	x.Long(e.ReqMsgID)
	x.Int(e.Now)
	x.Vector(e.Salts)
	return x.buf
}

func (e TL_pong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pong)
	x.Long(e.MsgID)
	x.Long(e.PingID)
	return x.buf
}

func (e TL_destroy_session_ok) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroy_session_ok)
	x.Long(e.SessionID)
	return x.buf
}

func (e TL_destroy_session_none) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroy_session_none)
	x.Long(e.SessionID)
	return x.buf
}

func (e TL_new_session_created) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_new_session_created)
	x.Long(e.FirstMsgID)
	x.Long(e.UniqueID)
	x.Long(e.ServerSalt)
	return x.buf
}

func (e TL_http_wait) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_http_wait)
	x.Int(e.MaxDelay)
	x.Int(e.WaitAfter)
	x.Int(e.MaxWait)
	return x.buf
}

func (e TL_ipPort) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_ipPort)
	x.Int(e.Ipv4)
	x.Int(e.Port)
	return x.buf
}

func (e TL_ipPortSecret) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_ipPortSecret)
	x.Int(e.Ipv4)
	x.Int(e.Port)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_accessPointRule) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_accessPointRule)
	x.String(e.PhonePrefixRules)
	x.Int(e.DcID)
	x.Vector(e.Ips)
	return x.buf
}

func (e TL_help_configSimple) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_configSimple)
	x.Int(e.Date)
	x.Int(e.Expires)
	x.Vector(e.Rules)
	return x.buf
}

func (e TL_tlsClientHello) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsClientHello)
	x.Vector(e.Blocks)
	return x.buf
}

func (e TL_tlsBlockString) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockString)
	x.String(e.Data)
	return x.buf
}

func (e TL_tlsBlockRandom) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockRandom)
	x.Int(e.Length)
	return x.buf
}

func (e TL_tlsBlockZero) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockZero)
	x.Int(e.Length)
	return x.buf
}

func (e TL_tlsBlockDomain) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockDomain)
	return x.buf
}

func (e TL_tlsBlockGrease) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockGrease)
	x.Int(e.Seed)
	return x.buf
}

func (e TL_tlsBlockPublicKey) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockPublicKey)
	return x.buf
}

func (e TL_tlsBlockScope) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockScope)
	x.Vector(e.Entries)
	return x.buf
}

func (e TL_tlsBlockPermutation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockPermutation)
	x.Vector2d(e.Entries)
	return x.buf
}

func (e TL_rpc_drop_answer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpc_drop_answer)
	x.Long(e.ReqMsgID)
	return x.buf
}

func (e TL_get_future_salts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_get_future_salts)
	x.Int(e.Num)
	return x.buf
}

func (e TL_ping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_ping)
	x.Long(e.PingID)
	return x.buf
}

func (e TL_ping_delay_disconnect) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_ping_delay_disconnect)
	x.Long(e.PingID)
	x.Int(e.DisconnectDelay)
	return x.buf
}

func (e TL_destroy_session) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroy_session)
	x.Long(e.SessionID)
	return x.buf
}

func (e TL_boolFalse) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_boolFalse)
	return x.buf
}

func (e TL_boolTrue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_boolTrue)
	return x.buf
}

func (e TL_true) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_true)
	return x.buf
}

func (e TL_error) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_error)
	x.Int(e.Code)
	x.String(e.Text)
	return x.buf
}

func (e TL_null) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_null)
	return x.buf
}

func (e TL_inputPeerEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerEmpty)
	return x.buf
}

func (e TL_inputPeerSelf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerSelf)
	return x.buf
}

func (e TL_inputPeerChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_inputPeerUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerUser)
	x.Long(e.UserID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputPeerChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerChannel)
	x.Long(e.ChannelID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputPeerUserFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerUserFromMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_inputPeerChannelFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerChannelFromMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_inputUserEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputUserEmpty)
	return x.buf
}

func (e TL_inputUserSelf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputUserSelf)
	return x.buf
}

func (e TL_inputUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputUser)
	x.Long(e.UserID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputUserFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputUserFromMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_inputPhoneContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhoneContact)
	x.Long(e.ClientID)
	x.String(e.Phone)
	x.String(e.FirstName)
	x.String(e.LastName)
	return x.buf
}

func (e TL_inputFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputFile)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.String(e.Name)
	x.String(e.Md5Checksum)
	return x.buf
}

func (e TL_inputFileBig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputFileBig)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.String(e.Name)
	return x.buf
}

func (e TL_inputMediaEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaEmpty)
	return x.buf
}

func (e TL_inputMediaUploadedPhoto) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 2)
	}
	if e.Stickers != nil {
		flags |= (1 << 0)
	}
	if e.TtlSeconds.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaUploadedPhoto)
	x.Int(flags)
	x.Object(e.File)
	if e.Stickers != nil {
		x.Vector(e.Stickers)
	}
	if e.TtlSeconds.IsSet {
		x.Int(e.TtlSeconds.Value)
	}
	return x.buf
}

func (e TL_inputMediaPhoto) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 1)
	}
	if e.TtlSeconds.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaPhoto)
	x.Int(flags)
	x.Object(e.ID)
	if e.TtlSeconds.IsSet {
		x.Int(e.TtlSeconds.Value)
	}
	return x.buf
}

func (e TL_inputMediaGeoPoint) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaGeoPoint)
	x.Object(e.GeoPoint)
	return x.buf
}

func (e TL_inputMediaContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaContact)
	x.String(e.PhoneNumber)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Vcard)
	return x.buf
}

func (e TL_inputMediaUploadedDocument) encode() []byte {
	var flags int32
	if e.NosoundVideo {
		flags |= (1 << 3)
	}
	if e.ForceFile {
		flags |= (1 << 4)
	}
	if e.Spoiler {
		flags |= (1 << 5)
	}
	if e.Thumb != nil {
		flags |= (1 << 2)
	}
	if e.Stickers != nil {
		flags |= (1 << 0)
	}
	if e.TtlSeconds.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaUploadedDocument)
	x.Int(flags)
	x.Object(e.File)
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	x.String(e.MimeType)
	x.Vector(e.Attributes)
	if e.Stickers != nil {
		x.Vector(e.Stickers)
	}
	if e.TtlSeconds.IsSet {
		x.Int(e.TtlSeconds.Value)
	}
	return x.buf
}

func (e TL_inputMediaDocument) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 2)
	}
	if e.TtlSeconds.IsSet {
		flags |= (1 << 0)
	}
	if e.Query.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaDocument)
	x.Int(flags)
	x.Object(e.ID)
	if e.TtlSeconds.IsSet {
		x.Int(e.TtlSeconds.Value)
	}
	if e.Query.IsSet {
		x.String(e.Query.Value)
	}
	return x.buf
}

func (e TL_inputMediaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaVenue)
	x.Object(e.GeoPoint)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	return x.buf
}

func (e TL_inputMediaPhotoExternal) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 1)
	}
	if e.TtlSeconds.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaPhotoExternal)
	x.Int(flags)
	x.String(e.Url)
	if e.TtlSeconds.IsSet {
		x.Int(e.TtlSeconds.Value)
	}
	return x.buf
}

func (e TL_inputMediaDocumentExternal) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 1)
	}
	if e.TtlSeconds.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaDocumentExternal)
	x.Int(flags)
	x.String(e.Url)
	if e.TtlSeconds.IsSet {
		x.Int(e.TtlSeconds.Value)
	}
	return x.buf
}

func (e TL_inputMediaGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaGame)
	x.Object(e.ID)
	return x.buf
}

func (e TL_inputMediaInvoice) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.StartParam.IsSet {
		flags |= (1 << 1)
	}
	if e.ExtendedMedia != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaInvoice)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	x.StringBytes(e.Payload)
	x.String(e.Provider)
	x.Object(e.ProviderData)
	if e.StartParam.IsSet {
		x.String(e.StartParam.Value)
	}
	if e.ExtendedMedia != nil {
		x.Object(e.ExtendedMedia)
	}
	return x.buf
}

func (e TL_inputMediaGeoLive) encode() []byte {
	var flags int32
	if e.Stopped {
		flags |= (1 << 0)
	}
	if e.Heading.IsSet {
		flags |= (1 << 2)
	}
	if e.Period.IsSet {
		flags |= (1 << 1)
	}
	if e.ProximityNotificationRadius.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaGeoLive)
	x.Int(flags)
	x.Object(e.GeoPoint)
	if e.Heading.IsSet {
		x.Int(e.Heading.Value)
	}
	if e.Period.IsSet {
		x.Int(e.Period.Value)
	}
	if e.ProximityNotificationRadius.IsSet {
		x.Int(e.ProximityNotificationRadius.Value)
	}
	return x.buf
}

func (e TL_inputMediaPoll) encode() []byte {
	var flags int32
	if e.CorrectAnswers != nil {
		flags |= (1 << 0)
	}
	if e.Solution.IsSet {
		flags |= (1 << 1)
	}
	if e.SolutionEntities != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaPoll)
	x.Int(flags)
	x.Object(e.Poll)
	if e.CorrectAnswers != nil {
		x.VectorBytes(e.CorrectAnswers)
	}
	if e.Solution.IsSet {
		x.String(e.Solution.Value)
	}
	if e.SolutionEntities != nil {
		x.Vector(e.SolutionEntities)
	}
	return x.buf
}

func (e TL_inputMediaDice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaDice)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_inputMediaStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaStory)
	x.Object(e.Peer)
	x.Int(e.ID)
	return x.buf
}

func (e TL_inputMediaWebPage) encode() []byte {
	var flags int32
	if e.ForceLargeMedia {
		flags |= (1 << 0)
	}
	if e.ForceSmallMedia {
		flags |= (1 << 1)
	}
	if e.Optional {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaWebPage)
	x.Int(flags)
	x.String(e.Url)
	return x.buf
}

func (e TL_inputChatPhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChatPhotoEmpty)
	return x.buf
}

func (e TL_inputChatUploadedPhoto) encode() []byte {
	var flags int32
	if e.File != nil {
		flags |= (1 << 0)
	}
	if e.Video != nil {
		flags |= (1 << 1)
	}
	if e.VideoStartTs.IsSet {
		flags |= (1 << 2)
	}
	if e.VideoEmojiMarkup != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChatUploadedPhoto)
	x.Int(flags)
	if e.File != nil {
		x.Object(e.File)
	}
	if e.Video != nil {
		x.Object(e.Video)
	}
	if e.VideoStartTs.IsSet {
		x.Double(e.VideoStartTs.Value)
	}
	if e.VideoEmojiMarkup != nil {
		x.Object(e.VideoEmojiMarkup)
	}
	return x.buf
}

func (e TL_inputChatPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChatPhoto)
	x.Object(e.ID)
	return x.buf
}

func (e TL_inputGeoPointEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGeoPointEmpty)
	return x.buf
}

func (e TL_inputGeoPoint) encode() []byte {
	var flags int32
	if e.AccuracyRadius.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGeoPoint)
	x.Int(flags)
	x.Double(e.Lat)
	x.Double(e.Long)
	if e.AccuracyRadius.IsSet {
		x.Int(e.AccuracyRadius.Value)
	}
	return x.buf
}

func (e TL_inputPhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhotoEmpty)
	return x.buf
}

func (e TL_inputPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhoto)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	return x.buf
}

func (e TL_inputFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputFileLocation)
	x.Long(e.VolumeID)
	x.Int(e.LocalID)
	x.Long(e.Secret)
	x.StringBytes(e.FileReference)
	return x.buf
}

func (e TL_inputEncryptedFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputDocumentFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDocumentFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.String(e.ThumbSize)
	return x.buf
}

func (e TL_inputSecureFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSecureFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputTakeoutFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputTakeoutFileLocation)
	return x.buf
}

func (e TL_inputPhotoFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhotoFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.String(e.ThumbSize)
	return x.buf
}

func (e TL_inputPhotoLegacyFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhotoLegacyFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.Long(e.VolumeID)
	x.Int(e.LocalID)
	x.Long(e.Secret)
	return x.buf
}

func (e TL_inputPeerPhotoFileLocation) encode() []byte {
	var flags int32
	if e.Big {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerPhotoFileLocation)
	x.Int(flags)
	x.Object(e.Peer)
	x.Long(e.PhotoID)
	return x.buf
}

func (e TL_inputStickerSetThumb) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetThumb)
	x.Object(e.Stickerset)
	x.Int(e.ThumbVersion)
	return x.buf
}

func (e TL_inputGroupCallStream) encode() []byte {
	var flags int32
	if e.VideoChannel.IsSet {
		flags |= (1 << 0)
	}
	if e.VideoQuality.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGroupCallStream)
	x.Int(flags)
	x.Object(e.Call)
	x.Long(e.TimeMs)
	x.Int(e.Scale)
	if e.VideoChannel.IsSet {
		x.Int(e.VideoChannel.Value)
	}
	if e.VideoQuality.IsSet {
		x.Int(e.VideoQuality.Value)
	}
	return x.buf
}

func (e TL_peerUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerUser)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_peerChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_peerChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerChannel)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_storage_fileUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileUnknown)
	return x.buf
}

func (e TL_storage_filePartial) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_filePartial)
	return x.buf
}

func (e TL_storage_fileJpeg) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileJpeg)
	return x.buf
}

func (e TL_storage_fileGif) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileGif)
	return x.buf
}

func (e TL_storage_filePng) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_filePng)
	return x.buf
}

func (e TL_storage_filePdf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_filePdf)
	return x.buf
}

func (e TL_storage_fileMp3) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileMp3)
	return x.buf
}

func (e TL_storage_fileMov) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileMov)
	return x.buf
}

func (e TL_storage_fileMp4) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileMp4)
	return x.buf
}

func (e TL_storage_fileWebp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileWebp)
	return x.buf
}

func (e TL_userEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_user) encode() []byte {
	var flags, flags2 int32
	if e.Self {
		flags |= (1 << 10)
	}
	if e.Contact {
		flags |= (1 << 11)
	}
	if e.MutualContact {
		flags |= (1 << 12)
	}
	if e.Deleted {
		flags |= (1 << 13)
	}
	if e.Bot {
		flags |= (1 << 14)
	}
	if e.BotChatHistory {
		flags |= (1 << 15)
	}
	if e.BotNochats {
		flags |= (1 << 16)
	}
	if e.Verified {
		flags |= (1 << 17)
	}
	if e.Restricted {
		flags |= (1 << 18)
	}
	if e.Min {
		flags |= (1 << 20)
	}
	if e.BotInlineGeo {
		flags |= (1 << 21)
	}
	if e.Support {
		flags |= (1 << 23)
	}
	if e.Scam {
		flags |= (1 << 24)
	}
	if e.ApplyMinPhoto {
		flags |= (1 << 25)
	}
	if e.Fake {
		flags |= (1 << 26)
	}
	if e.BotAttachMenu {
		flags |= (1 << 27)
	}
	if e.Premium {
		flags |= (1 << 28)
	}
	if e.AttachMenuEnabled {
		flags |= (1 << 29)
	}
	if e.BotCanEdit {
		flags2 |= (1 << 1)
	}
	if e.CloseFriend {
		flags2 |= (1 << 2)
	}
	if e.StoriesHidden {
		flags2 |= (1 << 3)
	}
	if e.StoriesUnavailable {
		flags2 |= (1 << 4)
	}
	if e.AccessHash.IsSet {
		flags |= (1 << 0)
	}
	if e.FirstName.IsSet {
		flags |= (1 << 1)
	}
	if e.LastName.IsSet {
		flags |= (1 << 2)
	}
	if e.Username.IsSet {
		flags |= (1 << 3)
	}
	if e.Phone.IsSet {
		flags |= (1 << 4)
	}
	if e.Photo != nil {
		flags |= (1 << 5)
	}
	if e.Status != nil {
		flags |= (1 << 6)
	}
	if e.BotInfoVersion.IsSet {
		flags |= (1 << 14)
	}
	if e.RestrictionReason != nil {
		flags |= (1 << 18)
	}
	if e.BotInlinePlaceholder.IsSet {
		flags |= (1 << 19)
	}
	if e.LangCode.IsSet {
		flags |= (1 << 22)
	}
	if e.EmojiStatus != nil {
		flags |= (1 << 30)
	}
	if e.Usernames != nil {
		flags2 |= (1 << 0)
	}
	if e.StoriesMaxID.IsSet {
		flags2 |= (1 << 5)
	}
	if e.Color.IsSet {
		flags2 |= (1 << 7)
	}
	if e.BackgroundEmojiID.IsSet {
		flags2 |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_user)
	x.Int(flags)
	x.Int(flags2)
	x.Long(e.ID)
	if e.AccessHash.IsSet {
		x.Long(e.AccessHash.Value)
	}
	if e.FirstName.IsSet {
		x.String(e.FirstName.Value)
	}
	if e.LastName.IsSet {
		x.String(e.LastName.Value)
	}
	if e.Username.IsSet {
		x.String(e.Username.Value)
	}
	if e.Phone.IsSet {
		x.String(e.Phone.Value)
	}
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.Status != nil {
		x.Object(e.Status)
	}
	if e.BotInfoVersion.IsSet {
		x.Int(e.BotInfoVersion.Value)
	}
	if e.RestrictionReason != nil {
		x.Vector(e.RestrictionReason)
	}
	if e.BotInlinePlaceholder.IsSet {
		x.String(e.BotInlinePlaceholder.Value)
	}
	if e.LangCode.IsSet {
		x.String(e.LangCode.Value)
	}
	if e.EmojiStatus != nil {
		x.Object(e.EmojiStatus)
	}
	if e.Usernames != nil {
		x.Vector(e.Usernames)
	}
	if e.StoriesMaxID.IsSet {
		x.Int(e.StoriesMaxID.Value)
	}
	if e.Color.IsSet {
		x.Int(e.Color.Value)
	}
	if e.BackgroundEmojiID.IsSet {
		x.Long(e.BackgroundEmojiID.Value)
	}
	return x.buf
}

func (e TL_userProfilePhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userProfilePhotoEmpty)
	return x.buf
}

func (e TL_userProfilePhoto) encode() []byte {
	var flags int32
	if e.HasVideo {
		flags |= (1 << 0)
	}
	if e.Personal {
		flags |= (1 << 2)
	}
	if e.StrippedThumb != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_userProfilePhoto)
	x.Int(flags)
	x.Long(e.PhotoID)
	if e.StrippedThumb != nil {
		x.StringBytes(e.StrippedThumb)
	}
	x.Int(e.DcID)
	return x.buf
}

func (e TL_userStatusEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusEmpty)
	return x.buf
}

func (e TL_userStatusOnline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusOnline)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_userStatusOffline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusOffline)
	x.Int(e.WasOnline)
	return x.buf
}

func (e TL_userStatusRecently) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusRecently)
	return x.buf
}

func (e TL_userStatusLastWeek) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusLastWeek)
	return x.buf
}

func (e TL_userStatusLastMonth) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusLastMonth)
	return x.buf
}

func (e TL_chatEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_chat) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.Left {
		flags |= (1 << 2)
	}
	if e.Deactivated {
		flags |= (1 << 5)
	}
	if e.CallActive {
		flags |= (1 << 23)
	}
	if e.CallNotEmpty {
		flags |= (1 << 24)
	}
	if e.Noforwards {
		flags |= (1 << 25)
	}
	if e.MigratedTo != nil {
		flags |= (1 << 6)
	}
	if e.AdminRights != nil {
		flags |= (1 << 14)
	}
	if e.DefaultBannedRights != nil {
		flags |= (1 << 18)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chat)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.Title)
	x.Object(e.Photo)
	x.Int(e.ParticipantsCount)
	x.Int(e.Date)
	x.Int(e.Version)
	if e.MigratedTo != nil {
		x.Object(e.MigratedTo)
	}
	if e.AdminRights != nil {
		x.Object(e.AdminRights)
	}
	if e.DefaultBannedRights != nil {
		x.Object(e.DefaultBannedRights)
	}
	return x.buf
}

func (e TL_chatForbidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatForbidden)
	x.Long(e.ID)
	x.String(e.Title)
	return x.buf
}

func (e TL_channel) encode() []byte {
	var flags, flags2 int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.Left {
		flags |= (1 << 2)
	}
	if e.Broadcast {
		flags |= (1 << 5)
	}
	if e.Verified {
		flags |= (1 << 7)
	}
	if e.Megagroup {
		flags |= (1 << 8)
	}
	if e.Restricted {
		flags |= (1 << 9)
	}
	if e.Signatures {
		flags |= (1 << 11)
	}
	if e.Min {
		flags |= (1 << 12)
	}
	if e.Scam {
		flags |= (1 << 19)
	}
	if e.HasLink {
		flags |= (1 << 20)
	}
	if e.HasGeo {
		flags |= (1 << 21)
	}
	if e.SlowmodeEnabled {
		flags |= (1 << 22)
	}
	if e.CallActive {
		flags |= (1 << 23)
	}
	if e.CallNotEmpty {
		flags |= (1 << 24)
	}
	if e.Fake {
		flags |= (1 << 25)
	}
	if e.Gigagroup {
		flags |= (1 << 26)
	}
	if e.Noforwards {
		flags |= (1 << 27)
	}
	if e.JoinToSend {
		flags |= (1 << 28)
	}
	if e.JoinRequest {
		flags |= (1 << 29)
	}
	if e.Forum {
		flags |= (1 << 30)
	}
	if e.StoriesHidden {
		flags2 |= (1 << 1)
	}
	if e.StoriesHiddenMin {
		flags2 |= (1 << 2)
	}
	if e.StoriesUnavailable {
		flags2 |= (1 << 3)
	}
	if e.AccessHash.IsSet {
		flags |= (1 << 13)
	}
	if e.Username.IsSet {
		flags |= (1 << 6)
	}
	if e.RestrictionReason != nil {
		flags |= (1 << 9)
	}
	if e.AdminRights != nil {
		flags |= (1 << 14)
	}
	if e.BannedRights != nil {
		flags |= (1 << 15)
	}
	if e.DefaultBannedRights != nil {
		flags |= (1 << 18)
	}
	if e.ParticipantsCount.IsSet {
		flags |= (1 << 17)
	}
	if e.Usernames != nil {
		flags2 |= (1 << 0)
	}
	if e.StoriesMaxID.IsSet {
		flags2 |= (1 << 4)
	}
	if e.Color.IsSet {
		flags2 |= (1 << 6)
	}
	if e.BackgroundEmojiID.IsSet {
		flags2 |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channel)
	x.Int(flags)
	x.Int(flags2)
	x.Long(e.ID)
	if e.AccessHash.IsSet {
		x.Long(e.AccessHash.Value)
	}
	x.String(e.Title)
	if e.Username.IsSet {
		x.String(e.Username.Value)
	}
	x.Object(e.Photo)
	x.Int(e.Date)
	if e.RestrictionReason != nil {
		x.Vector(e.RestrictionReason)
	}
	if e.AdminRights != nil {
		x.Object(e.AdminRights)
	}
	if e.BannedRights != nil {
		x.Object(e.BannedRights)
	}
	if e.DefaultBannedRights != nil {
		x.Object(e.DefaultBannedRights)
	}
	if e.ParticipantsCount.IsSet {
		x.Int(e.ParticipantsCount.Value)
	}
	if e.Usernames != nil {
		x.Vector(e.Usernames)
	}
	if e.StoriesMaxID.IsSet {
		x.Int(e.StoriesMaxID.Value)
	}
	if e.Color.IsSet {
		x.Int(e.Color.Value)
	}
	if e.BackgroundEmojiID.IsSet {
		x.Long(e.BackgroundEmojiID.Value)
	}
	return x.buf
}

func (e TL_channelForbidden) encode() []byte {
	var flags int32
	if e.Broadcast {
		flags |= (1 << 5)
	}
	if e.Megagroup {
		flags |= (1 << 8)
	}
	if e.UntilDate.IsSet {
		flags |= (1 << 16)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelForbidden)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.Title)
	if e.UntilDate.IsSet {
		x.Int(e.UntilDate.Value)
	}
	return x.buf
}

func (e TL_chatFull) encode() []byte {
	var flags int32
	if e.CanSetUsername {
		flags |= (1 << 7)
	}
	if e.HasScheduled {
		flags |= (1 << 8)
	}
	if e.TranslationsDisabled {
		flags |= (1 << 19)
	}
	if e.ChatPhoto != nil {
		flags |= (1 << 2)
	}
	if e.ExportedInvite != nil {
		flags |= (1 << 13)
	}
	if e.BotInfo != nil {
		flags |= (1 << 3)
	}
	if e.PinnedMsgID.IsSet {
		flags |= (1 << 6)
	}
	if e.FolderID.IsSet {
		flags |= (1 << 11)
	}
	if e.Call != nil {
		flags |= (1 << 12)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 14)
	}
	if e.GroupcallDefaultJoinAs != nil {
		flags |= (1 << 15)
	}
	if e.ThemeEmoticon.IsSet {
		flags |= (1 << 16)
	}
	if e.RequestsPending.IsSet {
		flags |= (1 << 17)
	}
	if e.RecentRequesters != nil {
		flags |= (1 << 17)
	}
	if e.AvailableReactions != nil {
		flags |= (1 << 18)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatFull)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.About)
	x.Object(e.Participants)
	if e.ChatPhoto != nil {
		x.Object(e.ChatPhoto)
	}
	x.Object(e.NotifySettings)
	if e.ExportedInvite != nil {
		x.Object(e.ExportedInvite)
	}
	if e.BotInfo != nil {
		x.Vector(e.BotInfo)
	}
	if e.PinnedMsgID.IsSet {
		x.Int(e.PinnedMsgID.Value)
	}
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	if e.Call != nil {
		x.Object(e.Call)
	}
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	if e.GroupcallDefaultJoinAs != nil {
		x.Object(e.GroupcallDefaultJoinAs)
	}
	if e.ThemeEmoticon.IsSet {
		x.String(e.ThemeEmoticon.Value)
	}
	if e.RequestsPending.IsSet {
		x.Int(e.RequestsPending.Value)
	}
	if e.RecentRequesters != nil {
		x.VectorLong(e.RecentRequesters)
	}
	if e.AvailableReactions != nil {
		x.Object(e.AvailableReactions)
	}
	return x.buf
}

func (e TL_channelFull) encode() []byte {
	var flags, flags2 int32
	if e.CanViewParticipants {
		flags |= (1 << 3)
	}
	if e.CanSetUsername {
		flags |= (1 << 6)
	}
	if e.CanSetStickers {
		flags |= (1 << 7)
	}
	if e.HiddenPrehistory {
		flags |= (1 << 10)
	}
	if e.CanSetLocation {
		flags |= (1 << 16)
	}
	if e.HasScheduled {
		flags |= (1 << 19)
	}
	if e.CanViewStats {
		flags |= (1 << 20)
	}
	if e.Blocked {
		flags |= (1 << 22)
	}
	if e.CanDeleteChannel {
		flags2 |= (1 << 0)
	}
	if e.Antispam {
		flags2 |= (1 << 1)
	}
	if e.ParticipantsHidden {
		flags2 |= (1 << 2)
	}
	if e.TranslationsDisabled {
		flags2 |= (1 << 3)
	}
	if e.StoriesPinnedAvailable {
		flags2 |= (1 << 5)
	}
	if e.ParticipantsCount.IsSet {
		flags |= (1 << 0)
	}
	if e.AdminsCount.IsSet {
		flags |= (1 << 1)
	}
	if e.KickedCount.IsSet {
		flags |= (1 << 2)
	}
	if e.BannedCount.IsSet {
		flags |= (1 << 2)
	}
	if e.OnlineCount.IsSet {
		flags |= (1 << 13)
	}
	if e.ExportedInvite != nil {
		flags |= (1 << 23)
	}
	if e.MigratedFromChatID.IsSet {
		flags |= (1 << 4)
	}
	if e.MigratedFromMaxID.IsSet {
		flags |= (1 << 4)
	}
	if e.PinnedMsgID.IsSet {
		flags |= (1 << 5)
	}
	if e.Stickerset != nil {
		flags |= (1 << 8)
	}
	if e.AvailableMinID.IsSet {
		flags |= (1 << 9)
	}
	if e.FolderID.IsSet {
		flags |= (1 << 11)
	}
	if e.LinkedChatID.IsSet {
		flags |= (1 << 14)
	}
	if e.Location != nil {
		flags |= (1 << 15)
	}
	if e.SlowmodeSeconds.IsSet {
		flags |= (1 << 17)
	}
	if e.SlowmodeNextSendDate.IsSet {
		flags |= (1 << 18)
	}
	if e.StatsDc.IsSet {
		flags |= (1 << 12)
	}
	if e.Call != nil {
		flags |= (1 << 21)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 24)
	}
	if e.PendingSuggestions != nil {
		flags |= (1 << 25)
	}
	if e.GroupcallDefaultJoinAs != nil {
		flags |= (1 << 26)
	}
	if e.ThemeEmoticon.IsSet {
		flags |= (1 << 27)
	}
	if e.RequestsPending.IsSet {
		flags |= (1 << 28)
	}
	if e.RecentRequesters != nil {
		flags |= (1 << 28)
	}
	if e.DefaultSendAs != nil {
		flags |= (1 << 29)
	}
	if e.AvailableReactions != nil {
		flags |= (1 << 30)
	}
	if e.Stories != nil {
		flags2 |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelFull)
	x.Int(flags)
	x.Int(flags2)
	x.Long(e.ID)
	x.String(e.About)
	if e.ParticipantsCount.IsSet {
		x.Int(e.ParticipantsCount.Value)
	}
	if e.AdminsCount.IsSet {
		x.Int(e.AdminsCount.Value)
	}
	if e.KickedCount.IsSet {
		x.Int(e.KickedCount.Value)
	}
	if e.BannedCount.IsSet {
		x.Int(e.BannedCount.Value)
	}
	if e.OnlineCount.IsSet {
		x.Int(e.OnlineCount.Value)
	}
	x.Int(e.ReadInboxMaxID)
	x.Int(e.ReadOutboxMaxID)
	x.Int(e.UnreadCount)
	x.Object(e.ChatPhoto)
	x.Object(e.NotifySettings)
	if e.ExportedInvite != nil {
		x.Object(e.ExportedInvite)
	}
	x.Vector(e.BotInfo)
	if e.MigratedFromChatID.IsSet {
		x.Long(e.MigratedFromChatID.Value)
	}
	if e.MigratedFromMaxID.IsSet {
		x.Int(e.MigratedFromMaxID.Value)
	}
	if e.PinnedMsgID.IsSet {
		x.Int(e.PinnedMsgID.Value)
	}
	if e.Stickerset != nil {
		x.Object(e.Stickerset)
	}
	if e.AvailableMinID.IsSet {
		x.Int(e.AvailableMinID.Value)
	}
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	if e.LinkedChatID.IsSet {
		x.Long(e.LinkedChatID.Value)
	}
	if e.Location != nil {
		x.Object(e.Location)
	}
	if e.SlowmodeSeconds.IsSet {
		x.Int(e.SlowmodeSeconds.Value)
	}
	if e.SlowmodeNextSendDate.IsSet {
		x.Int(e.SlowmodeNextSendDate.Value)
	}
	if e.StatsDc.IsSet {
		x.Int(e.StatsDc.Value)
	}
	x.Int(e.Pts)
	if e.Call != nil {
		x.Object(e.Call)
	}
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	if e.PendingSuggestions != nil {
		x.VectorString(e.PendingSuggestions)
	}
	if e.GroupcallDefaultJoinAs != nil {
		x.Object(e.GroupcallDefaultJoinAs)
	}
	if e.ThemeEmoticon.IsSet {
		x.String(e.ThemeEmoticon.Value)
	}
	if e.RequestsPending.IsSet {
		x.Int(e.RequestsPending.Value)
	}
	if e.RecentRequesters != nil {
		x.VectorLong(e.RecentRequesters)
	}
	if e.DefaultSendAs != nil {
		x.Object(e.DefaultSendAs)
	}
	if e.AvailableReactions != nil {
		x.Object(e.AvailableReactions)
	}
	if e.Stories != nil {
		x.Object(e.Stories)
	}
	return x.buf
}

func (e TL_chatParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipant)
	x.Long(e.UserID)
	x.Long(e.InviterID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_chatParticipantCreator) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipantCreator)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_chatParticipantAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipantAdmin)
	x.Long(e.UserID)
	x.Long(e.InviterID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_chatParticipantsForbidden) encode() []byte {
	var flags int32
	if e.SelfParticipant != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipantsForbidden)
	x.Int(flags)
	x.Long(e.ChatID)
	if e.SelfParticipant != nil {
		x.Object(e.SelfParticipant)
	}
	return x.buf
}

func (e TL_chatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipants)
	x.Long(e.ChatID)
	x.Vector(e.Participants)
	x.Int(e.Version)
	return x.buf
}

func (e TL_chatPhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatPhotoEmpty)
	return x.buf
}

func (e TL_chatPhoto) encode() []byte {
	var flags int32
	if e.HasVideo {
		flags |= (1 << 0)
	}
	if e.StrippedThumb != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatPhoto)
	x.Int(flags)
	x.Long(e.PhotoID)
	if e.StrippedThumb != nil {
		x.StringBytes(e.StrippedThumb)
	}
	x.Int(e.DcID)
	return x.buf
}

func (e TL_messageEmpty) encode() []byte {
	var flags int32
	if e.PeerID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEmpty)
	x.Int(flags)
	x.Int(e.ID)
	if e.PeerID != nil {
		x.Object(e.PeerID)
	}
	return x.buf
}

func (e TL_message) encode() []byte {
	var flags int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Mentioned {
		flags |= (1 << 4)
	}
	if e.MediaUnread {
		flags |= (1 << 5)
	}
	if e.Silent {
		flags |= (1 << 13)
	}
	if e.Post {
		flags |= (1 << 14)
	}
	if e.FromScheduled {
		flags |= (1 << 18)
	}
	if e.Legacy {
		flags |= (1 << 19)
	}
	if e.EditHide {
		flags |= (1 << 21)
	}
	if e.Pinned {
		flags |= (1 << 24)
	}
	if e.Noforwards {
		flags |= (1 << 26)
	}
	if e.InvertMedia {
		flags |= (1 << 27)
	}
	if e.FromID != nil {
		flags |= (1 << 8)
	}
	if e.FwdFrom != nil {
		flags |= (1 << 2)
	}
	if e.ViaBotID.IsSet {
		flags |= (1 << 11)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 3)
	}
	if e.Media != nil {
		flags |= (1 << 9)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 6)
	}
	if e.Entities != nil {
		flags |= (1 << 7)
	}
	if e.Views.IsSet {
		flags |= (1 << 10)
	}
	if e.Forwards.IsSet {
		flags |= (1 << 10)
	}
	if e.Replies != nil {
		flags |= (1 << 23)
	}
	if e.EditDate.IsSet {
		flags |= (1 << 15)
	}
	if e.PostAuthor.IsSet {
		flags |= (1 << 16)
	}
	if e.GroupedID.IsSet {
		flags |= (1 << 17)
	}
	if e.Reactions != nil {
		flags |= (1 << 20)
	}
	if e.RestrictionReason != nil {
		flags |= (1 << 22)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_message)
	x.Int(flags)
	x.Int(e.ID)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	x.Object(e.PeerID)
	if e.FwdFrom != nil {
		x.Object(e.FwdFrom)
	}
	if e.ViaBotID.IsSet {
		x.Long(e.ViaBotID.Value)
	}
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Int(e.Date)
	x.String(e.Message)
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.Views.IsSet {
		x.Int(e.Views.Value)
	}
	if e.Forwards.IsSet {
		x.Int(e.Forwards.Value)
	}
	if e.Replies != nil {
		x.Object(e.Replies)
	}
	if e.EditDate.IsSet {
		x.Int(e.EditDate.Value)
	}
	if e.PostAuthor.IsSet {
		x.String(e.PostAuthor.Value)
	}
	if e.GroupedID.IsSet {
		x.Long(e.GroupedID.Value)
	}
	if e.Reactions != nil {
		x.Object(e.Reactions)
	}
	if e.RestrictionReason != nil {
		x.Vector(e.RestrictionReason)
	}
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	return x.buf
}

func (e TL_messageService) encode() []byte {
	var flags int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Mentioned {
		flags |= (1 << 4)
	}
	if e.MediaUnread {
		flags |= (1 << 5)
	}
	if e.Silent {
		flags |= (1 << 13)
	}
	if e.Post {
		flags |= (1 << 14)
	}
	if e.Legacy {
		flags |= (1 << 19)
	}
	if e.FromID != nil {
		flags |= (1 << 8)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 3)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageService)
	x.Int(flags)
	x.Int(e.ID)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	x.Object(e.PeerID)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Int(e.Date)
	x.Object(e.Action)
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	return x.buf
}

func (e TL_messageMediaEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaEmpty)
	return x.buf
}

func (e TL_messageMediaPhoto) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.TtlSeconds.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaPhoto)
	x.Int(flags)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.TtlSeconds.IsSet {
		x.Int(e.TtlSeconds.Value)
	}
	return x.buf
}

func (e TL_messageMediaGeo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaGeo)
	x.Object(e.Geo)
	return x.buf
}

func (e TL_messageMediaContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaContact)
	x.String(e.PhoneNumber)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Vcard)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_messageMediaUnsupported) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaUnsupported)
	return x.buf
}

func (e TL_messageMediaDocument) encode() []byte {
	var flags int32
	if e.Nopremium {
		flags |= (1 << 3)
	}
	if e.Spoiler {
		flags |= (1 << 4)
	}
	if e.Document != nil {
		flags |= (1 << 0)
	}
	if e.AltDocument != nil {
		flags |= (1 << 5)
	}
	if e.TtlSeconds.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaDocument)
	x.Int(flags)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.AltDocument != nil {
		x.Object(e.AltDocument)
	}
	if e.TtlSeconds.IsSet {
		x.Int(e.TtlSeconds.Value)
	}
	return x.buf
}

func (e TL_messageMediaWebPage) encode() []byte {
	var flags int32
	if e.ForceLargeMedia {
		flags |= (1 << 0)
	}
	if e.ForceSmallMedia {
		flags |= (1 << 1)
	}
	if e.Manual {
		flags |= (1 << 3)
	}
	if e.Safe {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaWebPage)
	x.Int(flags)
	x.Object(e.Webpage)
	return x.buf
}

func (e TL_messageMediaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaVenue)
	x.Object(e.Geo)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	return x.buf
}

func (e TL_messageMediaGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaGame)
	x.Object(e.Game)
	return x.buf
}

func (e TL_messageMediaInvoice) encode() []byte {
	var flags int32
	if e.ShippingAddressRequested {
		flags |= (1 << 1)
	}
	if e.Test {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.ReceiptMsgID.IsSet {
		flags |= (1 << 2)
	}
	if e.ExtendedMedia != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaInvoice)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.ReceiptMsgID.IsSet {
		x.Int(e.ReceiptMsgID.Value)
	}
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	x.String(e.StartParam)
	if e.ExtendedMedia != nil {
		x.Object(e.ExtendedMedia)
	}
	return x.buf
}

func (e TL_messageMediaGeoLive) encode() []byte {
	var flags int32
	if e.Heading.IsSet {
		flags |= (1 << 0)
	}
	if e.ProximityNotificationRadius.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaGeoLive)
	x.Int(flags)
	x.Object(e.Geo)
	if e.Heading.IsSet {
		x.Int(e.Heading.Value)
	}
	x.Int(e.Period)
	if e.ProximityNotificationRadius.IsSet {
		x.Int(e.ProximityNotificationRadius.Value)
	}
	return x.buf
}

func (e TL_messageMediaPoll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaPoll)
	x.Object(e.Poll)
	x.Object(e.Results)
	return x.buf
}

func (e TL_messageMediaDice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaDice)
	x.Int(e.Value)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_messageMediaStory) encode() []byte {
	var flags int32
	if e.ViaMention {
		flags |= (1 << 1)
	}
	if e.Story != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaStory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Story != nil {
		x.Object(e.Story)
	}
	return x.buf
}

func (e TL_messageMediaGiveaway) encode() []byte {
	var flags int32
	if e.OnlyNewSubscribers {
		flags |= (1 << 0)
	}
	if e.CountriesIso2 != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaGiveaway)
	x.Int(flags)
	x.VectorLong(e.Channels)
	if e.CountriesIso2 != nil {
		x.VectorString(e.CountriesIso2)
	}
	x.Int(e.Quantity)
	x.Int(e.Months)
	x.Int(e.UntilDate)
	return x.buf
}

func (e TL_messageActionEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionEmpty)
	return x.buf
}

func (e TL_messageActionChatCreate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatCreate)
	x.String(e.Title)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_messageActionChatEditTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatEditTitle)
	x.String(e.Title)
	return x.buf
}

func (e TL_messageActionChatEditPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatEditPhoto)
	x.Object(e.Photo)
	return x.buf
}

func (e TL_messageActionChatDeletePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatDeletePhoto)
	return x.buf
}

func (e TL_messageActionChatAddUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatAddUser)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_messageActionChatDeleteUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatDeleteUser)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_messageActionChatJoinedByLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatJoinedByLink)
	x.Long(e.InviterID)
	return x.buf
}

func (e TL_messageActionChannelCreate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChannelCreate)
	x.String(e.Title)
	return x.buf
}

func (e TL_messageActionChatMigrateTo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatMigrateTo)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_messageActionChannelMigrateFrom) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChannelMigrateFrom)
	x.String(e.Title)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_messageActionPinMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPinMessage)
	return x.buf
}

func (e TL_messageActionHistoryClear) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionHistoryClear)
	return x.buf
}

func (e TL_messageActionGameScore) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGameScore)
	x.Long(e.GameID)
	x.Int(e.Score)
	return x.buf
}

func (e TL_messageActionPaymentSentMe) encode() []byte {
	var flags int32
	if e.RecurringInit {
		flags |= (1 << 2)
	}
	if e.RecurringUsed {
		flags |= (1 << 3)
	}
	if e.Info != nil {
		flags |= (1 << 0)
	}
	if e.ShippingOptionID.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPaymentSentMe)
	x.Int(flags)
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	x.StringBytes(e.Payload)
	if e.Info != nil {
		x.Object(e.Info)
	}
	if e.ShippingOptionID.IsSet {
		x.String(e.ShippingOptionID.Value)
	}
	x.Object(e.Charge)
	return x.buf
}

func (e TL_messageActionPaymentSent) encode() []byte {
	var flags int32
	if e.RecurringInit {
		flags |= (1 << 2)
	}
	if e.RecurringUsed {
		flags |= (1 << 3)
	}
	if e.InvoiceSlug.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPaymentSent)
	x.Int(flags)
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	if e.InvoiceSlug.IsSet {
		x.String(e.InvoiceSlug.Value)
	}
	return x.buf
}

func (e TL_messageActionPhoneCall) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 2)
	}
	if e.Reason != nil {
		flags |= (1 << 0)
	}
	if e.Duration.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPhoneCall)
	x.Int(flags)
	x.Long(e.CallID)
	if e.Reason != nil {
		x.Object(e.Reason)
	}
	if e.Duration.IsSet {
		x.Int(e.Duration.Value)
	}
	return x.buf
}

func (e TL_messageActionScreenshotTaken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionScreenshotTaken)
	return x.buf
}

func (e TL_messageActionCustomAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionCustomAction)
	x.String(e.Message)
	return x.buf
}

func (e TL_messageActionBotAllowed) encode() []byte {
	var flags int32
	if e.AttachMenu {
		flags |= (1 << 1)
	}
	if e.FromRequest {
		flags |= (1 << 3)
	}
	if e.Domain.IsSet {
		flags |= (1 << 0)
	}
	if e.App != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionBotAllowed)
	x.Int(flags)
	if e.Domain.IsSet {
		x.String(e.Domain.Value)
	}
	if e.App != nil {
		x.Object(e.App)
	}
	return x.buf
}

func (e TL_messageActionSecureValuesSentMe) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSecureValuesSentMe)
	x.Vector(e.Values)
	x.Object(e.Credentials)
	return x.buf
}

func (e TL_messageActionSecureValuesSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSecureValuesSent)
	x.Vector(e.Types)
	return x.buf
}

func (e TL_messageActionContactSignUp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionContactSignUp)
	return x.buf
}

func (e TL_messageActionGeoProximityReached) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGeoProximityReached)
	x.Object(e.FromID)
	x.Object(e.ToID)
	x.Int(e.Distance)
	return x.buf
}

func (e TL_messageActionGroupCall) encode() []byte {
	var flags int32
	if e.Duration.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGroupCall)
	x.Int(flags)
	x.Object(e.Call)
	if e.Duration.IsSet {
		x.Int(e.Duration.Value)
	}
	return x.buf
}

func (e TL_messageActionInviteToGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionInviteToGroupCall)
	x.Object(e.Call)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_messageActionSetMessagesTTL) encode() []byte {
	var flags int32
	if e.AutoSettingFrom.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSetMessagesTTL)
	x.Int(flags)
	x.Int(e.Period)
	if e.AutoSettingFrom.IsSet {
		x.Long(e.AutoSettingFrom.Value)
	}
	return x.buf
}

func (e TL_messageActionGroupCallScheduled) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGroupCallScheduled)
	x.Object(e.Call)
	x.Int(e.ScheduleDate)
	return x.buf
}

func (e TL_messageActionSetChatTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSetChatTheme)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_messageActionChatJoinedByRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatJoinedByRequest)
	return x.buf
}

func (e TL_messageActionWebViewDataSentMe) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionWebViewDataSentMe)
	x.String(e.Text)
	x.String(e.Data)
	return x.buf
}

func (e TL_messageActionWebViewDataSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionWebViewDataSent)
	x.String(e.Text)
	return x.buf
}

func (e TL_messageActionGiftPremium) encode() []byte {
	var flags int32
	if e.CryptoCurrency.IsSet {
		flags |= (1 << 0)
	}
	if e.CryptoAmount.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGiftPremium)
	x.Int(flags)
	x.String(e.Currency)
	x.Long(e.Amount)
	x.Int(e.Months)
	if e.CryptoCurrency.IsSet {
		x.String(e.CryptoCurrency.Value)
	}
	if e.CryptoAmount.IsSet {
		x.Long(e.CryptoAmount.Value)
	}
	return x.buf
}

func (e TL_messageActionTopicCreate) encode() []byte {
	var flags int32
	if e.IconEmojiID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionTopicCreate)
	x.Int(flags)
	x.String(e.Title)
	x.Int(e.IconColor)
	if e.IconEmojiID.IsSet {
		x.Long(e.IconEmojiID.Value)
	}
	return x.buf
}

func (e TL_messageActionTopicEdit) encode() []byte {
	var flags int32
	if e.Title.IsSet {
		flags |= (1 << 0)
	}
	if e.IconEmojiID.IsSet {
		flags |= (1 << 1)
	}
	if e.Closed.IsSet {
		flags |= (1 << 2)
	}
	if e.Hidden.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionTopicEdit)
	x.Int(flags)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.IconEmojiID.IsSet {
		x.Long(e.IconEmojiID.Value)
	}
	if e.Closed.IsSet {
		x.Bool(e.Closed.Value)
	}
	if e.Hidden.IsSet {
		x.Bool(e.Hidden.Value)
	}
	return x.buf
}

func (e TL_messageActionSuggestProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSuggestProfilePhoto)
	x.Object(e.Photo)
	return x.buf
}

func (e TL_messageActionRequestedPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionRequestedPeer)
	x.Int(e.ButtonID)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messageActionSetChatWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSetChatWallPaper)
	x.Object(e.Wallpaper)
	return x.buf
}

func (e TL_messageActionSetSameChatWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSetSameChatWallPaper)
	x.Object(e.Wallpaper)
	return x.buf
}

func (e TL_messageActionGiftCode) encode() []byte {
	var flags int32
	if e.ViaGiveaway {
		flags |= (1 << 0)
	}
	if e.Unclaimed {
		flags |= (1 << 2)
	}
	if e.BoostPeer != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGiftCode)
	x.Int(flags)
	if e.BoostPeer != nil {
		x.Object(e.BoostPeer)
	}
	x.Int(e.Months)
	x.String(e.Slug)
	return x.buf
}

func (e TL_messageActionGiveawayLaunch) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGiveawayLaunch)
	return x.buf
}

func (e TL_dialog) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 2)
	}
	if e.UnreadMark {
		flags |= (1 << 3)
	}
	if e.Pts.IsSet {
		flags |= (1 << 0)
	}
	if e.Draft != nil {
		flags |= (1 << 1)
	}
	if e.FolderID.IsSet {
		flags |= (1 << 4)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialog)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.TopMessage)
	x.Int(e.ReadInboxMaxID)
	x.Int(e.ReadOutboxMaxID)
	x.Int(e.UnreadCount)
	x.Int(e.UnreadMentionsCount)
	x.Int(e.UnreadReactionsCount)
	x.Object(e.NotifySettings)
	if e.Pts.IsSet {
		x.Int(e.Pts.Value)
	}
	if e.Draft != nil {
		x.Object(e.Draft)
	}
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	return x.buf
}

func (e TL_dialogFolder) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFolder)
	x.Int(flags)
	x.Object(e.Folder)
	x.Object(e.Peer)
	x.Int(e.TopMessage)
	x.Int(e.UnreadMutedPeersCount)
	x.Int(e.UnreadUnmutedPeersCount)
	x.Int(e.UnreadMutedMessagesCount)
	x.Int(e.UnreadUnmutedMessagesCount)
	return x.buf
}

func (e TL_photoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_photo) encode() []byte {
	var flags int32
	if e.HasStickers {
		flags |= (1 << 0)
	}
	if e.VideoSizes != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_photo)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.Int(e.Date)
	x.Vector(e.Sizes)
	if e.VideoSizes != nil {
		x.Vector(e.VideoSizes)
	}
	x.Int(e.DcID)
	return x.buf
}

func (e TL_photoSizeEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoSizeEmpty)
	x.String(e.Type)
	return x.buf
}

func (e TL_photoSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoSize)
	x.String(e.Type)
	x.Int(e.W)
	x.Int(e.H)
	x.Int(e.Size)
	return x.buf
}

func (e TL_photoCachedSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoCachedSize)
	x.String(e.Type)
	x.Int(e.W)
	x.Int(e.H)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_photoStrippedSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoStrippedSize)
	x.String(e.Type)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_photoSizeProgressive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoSizeProgressive)
	x.String(e.Type)
	x.Int(e.W)
	x.Int(e.H)
	x.VectorInt(e.Sizes)
	return x.buf
}

func (e TL_photoPathSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoPathSize)
	x.String(e.Type)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_geoPointEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_geoPointEmpty)
	return x.buf
}

func (e TL_geoPoint) encode() []byte {
	var flags int32
	if e.AccuracyRadius.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_geoPoint)
	x.Int(flags)
	x.Double(e.Long)
	x.Double(e.Lat)
	x.Long(e.AccessHash)
	if e.AccuracyRadius.IsSet {
		x.Int(e.AccuracyRadius.Value)
	}
	return x.buf
}

func (e TL_auth_sentCode) encode() []byte {
	var flags int32
	if e.NextType != nil {
		flags |= (1 << 1)
	}
	if e.Timeout.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCode)
	x.Int(flags)
	x.Object(e.Type)
	x.String(e.PhoneCodeHash)
	if e.NextType != nil {
		x.Object(e.NextType)
	}
	if e.Timeout.IsSet {
		x.Int(e.Timeout.Value)
	}
	return x.buf
}

func (e TL_auth_sentCodeSuccess) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeSuccess)
	x.Object(e.Authorization)
	return x.buf
}

func (e TL_auth_authorization) encode() []byte {
	var flags int32
	if e.SetupPasswordRequired {
		flags |= (1 << 1)
	}
	if e.OtherwiseReloginDays.IsSet {
		flags |= (1 << 1)
	}
	if e.TmpSessions.IsSet {
		flags |= (1 << 0)
	}
	if e.FutureAuthToken != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_authorization)
	x.Int(flags)
	if e.OtherwiseReloginDays.IsSet {
		x.Int(e.OtherwiseReloginDays.Value)
	}
	if e.TmpSessions.IsSet {
		x.Int(e.TmpSessions.Value)
	}
	if e.FutureAuthToken != nil {
		x.StringBytes(e.FutureAuthToken)
	}
	x.Object(e.User)
	return x.buf
}

func (e TL_auth_authorizationSignUpRequired) encode() []byte {
	var flags int32
	if e.TermsOfService != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_authorizationSignUpRequired)
	x.Int(flags)
	if e.TermsOfService != nil {
		x.Object(e.TermsOfService)
	}
	return x.buf
}

func (e TL_auth_exportedAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_exportedAuthorization)
	x.Long(e.ID)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_inputNotifyPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_inputNotifyUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyUsers)
	return x.buf
}

func (e TL_inputNotifyChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyChats)
	return x.buf
}

func (e TL_inputNotifyBroadcasts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyBroadcasts)
	return x.buf
}

func (e TL_inputNotifyForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyForumTopic)
	x.Object(e.Peer)
	x.Int(e.TopMsgID)
	return x.buf
}

func (e TL_inputPeerNotifySettings) encode() []byte {
	var flags int32
	if e.ShowPreviews.IsSet {
		flags |= (1 << 0)
	}
	if e.Silent.IsSet {
		flags |= (1 << 1)
	}
	if e.MuteUntil.IsSet {
		flags |= (1 << 2)
	}
	if e.Sound != nil {
		flags |= (1 << 3)
	}
	if e.StoriesMuted.IsSet {
		flags |= (1 << 6)
	}
	if e.StoriesHideSender.IsSet {
		flags |= (1 << 7)
	}
	if e.StoriesSound != nil {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerNotifySettings)
	x.Int(flags)
	if e.ShowPreviews.IsSet {
		x.Bool(e.ShowPreviews.Value)
	}
	if e.Silent.IsSet {
		x.Bool(e.Silent.Value)
	}
	if e.MuteUntil.IsSet {
		x.Int(e.MuteUntil.Value)
	}
	if e.Sound != nil {
		x.Object(e.Sound)
	}
	if e.StoriesMuted.IsSet {
		x.Bool(e.StoriesMuted.Value)
	}
	if e.StoriesHideSender.IsSet {
		x.Bool(e.StoriesHideSender.Value)
	}
	if e.StoriesSound != nil {
		x.Object(e.StoriesSound)
	}
	return x.buf
}

func (e TL_peerNotifySettings) encode() []byte {
	var flags int32
	if e.ShowPreviews.IsSet {
		flags |= (1 << 0)
	}
	if e.Silent.IsSet {
		flags |= (1 << 1)
	}
	if e.MuteUntil.IsSet {
		flags |= (1 << 2)
	}
	if e.IosSound != nil {
		flags |= (1 << 3)
	}
	if e.AndroidSound != nil {
		flags |= (1 << 4)
	}
	if e.OtherSound != nil {
		flags |= (1 << 5)
	}
	if e.StoriesMuted.IsSet {
		flags |= (1 << 6)
	}
	if e.StoriesHideSender.IsSet {
		flags |= (1 << 7)
	}
	if e.StoriesIosSound != nil {
		flags |= (1 << 8)
	}
	if e.StoriesAndroidSound != nil {
		flags |= (1 << 9)
	}
	if e.StoriesOtherSound != nil {
		flags |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerNotifySettings)
	x.Int(flags)
	if e.ShowPreviews.IsSet {
		x.Bool(e.ShowPreviews.Value)
	}
	if e.Silent.IsSet {
		x.Bool(e.Silent.Value)
	}
	if e.MuteUntil.IsSet {
		x.Int(e.MuteUntil.Value)
	}
	if e.IosSound != nil {
		x.Object(e.IosSound)
	}
	if e.AndroidSound != nil {
		x.Object(e.AndroidSound)
	}
	if e.OtherSound != nil {
		x.Object(e.OtherSound)
	}
	if e.StoriesMuted.IsSet {
		x.Bool(e.StoriesMuted.Value)
	}
	if e.StoriesHideSender.IsSet {
		x.Bool(e.StoriesHideSender.Value)
	}
	if e.StoriesIosSound != nil {
		x.Object(e.StoriesIosSound)
	}
	if e.StoriesAndroidSound != nil {
		x.Object(e.StoriesAndroidSound)
	}
	if e.StoriesOtherSound != nil {
		x.Object(e.StoriesOtherSound)
	}
	return x.buf
}

func (e TL_peerSettings) encode() []byte {
	var flags int32
	if e.ReportSpam {
		flags |= (1 << 0)
	}
	if e.AddContact {
		flags |= (1 << 1)
	}
	if e.BlockContact {
		flags |= (1 << 2)
	}
	if e.ShareContact {
		flags |= (1 << 3)
	}
	if e.NeedContactsException {
		flags |= (1 << 4)
	}
	if e.ReportGeo {
		flags |= (1 << 5)
	}
	if e.Autoarchived {
		flags |= (1 << 7)
	}
	if e.InviteMembers {
		flags |= (1 << 8)
	}
	if e.RequestChatBroadcast {
		flags |= (1 << 10)
	}
	if e.GeoDistance.IsSet {
		flags |= (1 << 6)
	}
	if e.RequestChatTitle.IsSet {
		flags |= (1 << 9)
	}
	if e.RequestChatDate.IsSet {
		flags |= (1 << 9)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerSettings)
	x.Int(flags)
	if e.GeoDistance.IsSet {
		x.Int(e.GeoDistance.Value)
	}
	if e.RequestChatTitle.IsSet {
		x.String(e.RequestChatTitle.Value)
	}
	if e.RequestChatDate.IsSet {
		x.Int(e.RequestChatDate.Value)
	}
	return x.buf
}

func (e TL_wallPaper) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.Default {
		flags |= (1 << 1)
	}
	if e.Pattern {
		flags |= (1 << 3)
	}
	if e.Dark {
		flags |= (1 << 4)
	}
	if e.Settings != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_wallPaper)
	x.Long(e.ID)
	x.Int(flags)
	x.Long(e.AccessHash)
	x.String(e.Slug)
	x.Object(e.Document)
	if e.Settings != nil {
		x.Object(e.Settings)
	}
	return x.buf
}

func (e TL_wallPaperNoFile) encode() []byte {
	var flags int32
	if e.Default {
		flags |= (1 << 1)
	}
	if e.Dark {
		flags |= (1 << 4)
	}
	if e.Settings != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_wallPaperNoFile)
	x.Long(e.ID)
	x.Int(flags)
	if e.Settings != nil {
		x.Object(e.Settings)
	}
	return x.buf
}

func (e TL_inputReportReasonSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonSpam)
	return x.buf
}

func (e TL_inputReportReasonViolence) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonViolence)
	return x.buf
}

func (e TL_inputReportReasonPornography) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonPornography)
	return x.buf
}

func (e TL_inputReportReasonChildAbuse) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonChildAbuse)
	return x.buf
}

func (e TL_inputReportReasonOther) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonOther)
	return x.buf
}

func (e TL_inputReportReasonCopyright) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonCopyright)
	return x.buf
}

func (e TL_inputReportReasonGeoIrrelevant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonGeoIrrelevant)
	return x.buf
}

func (e TL_inputReportReasonFake) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonFake)
	return x.buf
}

func (e TL_inputReportReasonIllegalDrugs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonIllegalDrugs)
	return x.buf
}

func (e TL_inputReportReasonPersonalDetails) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonPersonalDetails)
	return x.buf
}

func (e TL_userFull) encode() []byte {
	var flags int32
	if e.Blocked {
		flags |= (1 << 0)
	}
	if e.PhoneCallsAvailable {
		flags |= (1 << 4)
	}
	if e.PhoneCallsPrivate {
		flags |= (1 << 5)
	}
	if e.CanPinMessage {
		flags |= (1 << 7)
	}
	if e.HasScheduled {
		flags |= (1 << 12)
	}
	if e.VideoCallsAvailable {
		flags |= (1 << 13)
	}
	if e.VoiceMessagesForbidden {
		flags |= (1 << 20)
	}
	if e.TranslationsDisabled {
		flags |= (1 << 23)
	}
	if e.StoriesPinnedAvailable {
		flags |= (1 << 26)
	}
	if e.BlockedMyStoriesFrom {
		flags |= (1 << 27)
	}
	if e.About.IsSet {
		flags |= (1 << 1)
	}
	if e.PersonalPhoto != nil {
		flags |= (1 << 21)
	}
	if e.ProfilePhoto != nil {
		flags |= (1 << 2)
	}
	if e.FallbackPhoto != nil {
		flags |= (1 << 22)
	}
	if e.BotInfo != nil {
		flags |= (1 << 3)
	}
	if e.PinnedMsgID.IsSet {
		flags |= (1 << 6)
	}
	if e.FolderID.IsSet {
		flags |= (1 << 11)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 14)
	}
	if e.ThemeEmoticon.IsSet {
		flags |= (1 << 15)
	}
	if e.PrivateForwardName.IsSet {
		flags |= (1 << 16)
	}
	if e.BotGroupAdminRights != nil {
		flags |= (1 << 17)
	}
	if e.BotBroadcastAdminRights != nil {
		flags |= (1 << 18)
	}
	if e.PremiumGifts != nil {
		flags |= (1 << 19)
	}
	if e.Wallpaper != nil {
		flags |= (1 << 24)
	}
	if e.Stories != nil {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_userFull)
	x.Int(flags)
	x.Long(e.ID)
	if e.About.IsSet {
		x.String(e.About.Value)
	}
	x.Object(e.Settings)
	if e.PersonalPhoto != nil {
		x.Object(e.PersonalPhoto)
	}
	if e.ProfilePhoto != nil {
		x.Object(e.ProfilePhoto)
	}
	if e.FallbackPhoto != nil {
		x.Object(e.FallbackPhoto)
	}
	x.Object(e.NotifySettings)
	if e.BotInfo != nil {
		x.Object(e.BotInfo)
	}
	if e.PinnedMsgID.IsSet {
		x.Int(e.PinnedMsgID.Value)
	}
	x.Int(e.CommonChatsCount)
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	if e.ThemeEmoticon.IsSet {
		x.String(e.ThemeEmoticon.Value)
	}
	if e.PrivateForwardName.IsSet {
		x.String(e.PrivateForwardName.Value)
	}
	if e.BotGroupAdminRights != nil {
		x.Object(e.BotGroupAdminRights)
	}
	if e.BotBroadcastAdminRights != nil {
		x.Object(e.BotBroadcastAdminRights)
	}
	if e.PremiumGifts != nil {
		x.Vector(e.PremiumGifts)
	}
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	if e.Stories != nil {
		x.Object(e.Stories)
	}
	return x.buf
}

func (e TL_contact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contact)
	x.Long(e.UserID)
	x.Bool(e.Mutual)
	return x.buf
}

func (e TL_importedContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_importedContact)
	x.Long(e.UserID)
	x.Long(e.ClientID)
	return x.buf
}

func (e TL_contactStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contactStatus)
	x.Long(e.UserID)
	x.Object(e.Status)
	return x.buf
}

func (e TL_contacts_contactsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_contactsNotModified)
	return x.buf
}

func (e TL_contacts_contacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_contacts)
	x.Vector(e.Contacts)
	x.Int(e.SavedCount)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_contacts_importedContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_importedContacts)
	x.Vector(e.Imported)
	x.Vector(e.PopularInvites)
	x.VectorLong(e.RetryContacts)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_contacts_blocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_blocked)
	x.Vector(e.Blocked)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_contacts_blockedSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_blockedSlice)
	x.Int(e.Count)
	x.Vector(e.Blocked)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_dialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dialogs)
	x.Vector(e.Dialogs)
	x.Vector(e.Messages)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_dialogsSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dialogsSlice)
	x.Int(e.Count)
	x.Vector(e.Dialogs)
	x.Vector(e.Messages)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_dialogsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dialogsNotModified)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messages_messages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messages)
	x.Vector(e.Messages)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_messagesSlice) encode() []byte {
	var flags int32
	if e.Inexact {
		flags |= (1 << 1)
	}
	if e.NextRate.IsSet {
		flags |= (1 << 0)
	}
	if e.OffsetIdOffset.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messagesSlice)
	x.Int(flags)
	x.Int(e.Count)
	if e.NextRate.IsSet {
		x.Int(e.NextRate.Value)
	}
	if e.OffsetIdOffset.IsSet {
		x.Int(e.OffsetIdOffset.Value)
	}
	x.Vector(e.Messages)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_channelMessages) encode() []byte {
	var flags int32
	if e.Inexact {
		flags |= (1 << 1)
	}
	if e.OffsetIdOffset.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_channelMessages)
	x.Int(flags)
	x.Int(e.Pts)
	x.Int(e.Count)
	if e.OffsetIdOffset.IsSet {
		x.Int(e.OffsetIdOffset.Value)
	}
	x.Vector(e.Messages)
	x.Vector(e.Topics)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_messagesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messagesNotModified)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messages_chats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chats)
	x.Vector(e.Chats)
	return x.buf
}

func (e TL_messages_chatsSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chatsSlice)
	x.Int(e.Count)
	x.Vector(e.Chats)
	return x.buf
}

func (e TL_messages_chatFull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chatFull)
	x.Object(e.FullChat)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_affectedHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_affectedHistory)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	x.Int(e.Offset)
	return x.buf
}

func (e TL_inputMessagesFilterEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterEmpty)
	return x.buf
}

func (e TL_inputMessagesFilterPhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterPhotos)
	return x.buf
}

func (e TL_inputMessagesFilterVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterVideo)
	return x.buf
}

func (e TL_inputMessagesFilterPhotoVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterPhotoVideo)
	return x.buf
}

func (e TL_inputMessagesFilterDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterDocument)
	return x.buf
}

func (e TL_inputMessagesFilterUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterUrl)
	return x.buf
}

func (e TL_inputMessagesFilterGif) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterGif)
	return x.buf
}

func (e TL_inputMessagesFilterVoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterVoice)
	return x.buf
}

func (e TL_inputMessagesFilterMusic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterMusic)
	return x.buf
}

func (e TL_inputMessagesFilterChatPhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterChatPhotos)
	return x.buf
}

func (e TL_inputMessagesFilterPhoneCalls) encode() []byte {
	var flags int32
	if e.Missed {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterPhoneCalls)
	x.Int(flags)
	return x.buf
}

func (e TL_inputMessagesFilterRoundVoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterRoundVoice)
	return x.buf
}

func (e TL_inputMessagesFilterRoundVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterRoundVideo)
	return x.buf
}

func (e TL_inputMessagesFilterMyMentions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterMyMentions)
	return x.buf
}

func (e TL_inputMessagesFilterGeo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterGeo)
	return x.buf
}

func (e TL_inputMessagesFilterContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterContacts)
	return x.buf
}

func (e TL_inputMessagesFilterPinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterPinned)
	return x.buf
}

func (e TL_updateNewMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewMessage)
	x.Object(e.Message)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateMessageID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessageID)
	x.Int(e.ID)
	x.Long(e.RandomID)
	return x.buf
}

func (e TL_updateDeleteMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDeleteMessages)
	x.VectorInt(e.Messages)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateUserTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserTyping)
	x.Long(e.UserID)
	x.Object(e.Action)
	return x.buf
}

func (e TL_updateChatUserTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatUserTyping)
	x.Long(e.ChatID)
	x.Object(e.FromID)
	x.Object(e.Action)
	return x.buf
}

func (e TL_updateChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipants)
	x.Object(e.Participants)
	return x.buf
}

func (e TL_updateUserStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserStatus)
	x.Long(e.UserID)
	x.Object(e.Status)
	return x.buf
}

func (e TL_updateUserName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserName)
	x.Long(e.UserID)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.Vector(e.Usernames)
	return x.buf
}

func (e TL_updateNewAuthorization) encode() []byte {
	var flags int32
	if e.Unconfirmed {
		flags |= (1 << 0)
	}
	if e.Date.IsSet {
		flags |= (1 << 0)
	}
	if e.Device.IsSet {
		flags |= (1 << 0)
	}
	if e.Location.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewAuthorization)
	x.Int(flags)
	x.Long(e.Hash)
	if e.Date.IsSet {
		x.Int(e.Date.Value)
	}
	if e.Device.IsSet {
		x.String(e.Device.Value)
	}
	if e.Location.IsSet {
		x.String(e.Location.Value)
	}
	return x.buf
}

func (e TL_updateNewEncryptedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewEncryptedMessage)
	x.Object(e.Message)
	x.Int(e.Qts)
	return x.buf
}

func (e TL_updateEncryptedChatTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEncryptedChatTyping)
	x.Int(e.ChatID)
	return x.buf
}

func (e TL_updateEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEncryption)
	x.Object(e.Chat)
	x.Int(e.Date)
	return x.buf
}

func (e TL_updateEncryptedMessagesRead) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEncryptedMessagesRead)
	x.Int(e.ChatID)
	x.Int(e.MaxDate)
	x.Int(e.Date)
	return x.buf
}

func (e TL_updateChatParticipantAdd) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipantAdd)
	x.Long(e.ChatID)
	x.Long(e.UserID)
	x.Long(e.InviterID)
	x.Int(e.Date)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateChatParticipantDelete) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipantDelete)
	x.Long(e.ChatID)
	x.Long(e.UserID)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateDcOptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDcOptions)
	x.Vector(e.DcOptions)
	return x.buf
}

func (e TL_updateNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNotifySettings)
	x.Object(e.Peer)
	x.Object(e.NotifySettings)
	return x.buf
}

func (e TL_updateServiceNotification) encode() []byte {
	var flags int32
	if e.Popup {
		flags |= (1 << 0)
	}
	if e.InvertMedia {
		flags |= (1 << 2)
	}
	if e.InboxDate.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateServiceNotification)
	x.Int(flags)
	if e.InboxDate.IsSet {
		x.Int(e.InboxDate.Value)
	}
	x.String(e.Type)
	x.String(e.Message)
	x.Object(e.Media)
	x.Vector(e.Entities)
	return x.buf
}

func (e TL_updatePrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePrivacy)
	x.Object(e.Key)
	x.Vector(e.Rules)
	return x.buf
}

func (e TL_updateUserPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserPhone)
	x.Long(e.UserID)
	x.String(e.Phone)
	return x.buf
}

func (e TL_updateReadHistoryInbox) encode() []byte {
	var flags int32
	if e.FolderID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadHistoryInbox)
	x.Int(flags)
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	x.Object(e.Peer)
	x.Int(e.MaxID)
	x.Int(e.StillUnreadCount)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateReadHistoryOutbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadHistoryOutbox)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateWebPage)
	x.Object(e.Webpage)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateReadMessagesContents) encode() []byte {
	var flags int32
	if e.Date.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadMessagesContents)
	x.Int(flags)
	x.VectorInt(e.Messages)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	if e.Date.IsSet {
		x.Int(e.Date.Value)
	}
	return x.buf
}

func (e TL_updateChannelTooLong) encode() []byte {
	var flags int32
	if e.Pts.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelTooLong)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.Pts.IsSet {
		x.Int(e.Pts.Value)
	}
	return x.buf
}

func (e TL_updateChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannel)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_updateNewChannelMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewChannelMessage)
	x.Object(e.Message)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateReadChannelInbox) encode() []byte {
	var flags int32
	if e.FolderID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadChannelInbox)
	x.Int(flags)
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	x.Long(e.ChannelID)
	x.Int(e.MaxID)
	x.Int(e.StillUnreadCount)
	x.Int(e.Pts)
	return x.buf
}

func (e TL_updateDeleteChannelMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDeleteChannelMessages)
	x.Long(e.ChannelID)
	x.VectorInt(e.Messages)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateChannelMessageViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelMessageViews)
	x.Long(e.ChannelID)
	x.Int(e.ID)
	x.Int(e.Views)
	return x.buf
}

func (e TL_updateChatParticipantAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipantAdmin)
	x.Long(e.ChatID)
	x.Long(e.UserID)
	x.Bool(e.IsAdmin)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateNewStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewStickerSet)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_updateStickerSetsOrder) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStickerSetsOrder)
	x.Int(flags)
	x.VectorLong(e.Order)
	return x.buf
}

func (e TL_updateStickerSets) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStickerSets)
	x.Int(flags)
	return x.buf
}

func (e TL_updateSavedGifs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateSavedGifs)
	return x.buf
}

func (e TL_updateBotInlineQuery) encode() []byte {
	var flags int32
	if e.Geo != nil {
		flags |= (1 << 0)
	}
	if e.PeerType != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotInlineQuery)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.String(e.Query)
	if e.Geo != nil {
		x.Object(e.Geo)
	}
	if e.PeerType != nil {
		x.Object(e.PeerType)
	}
	x.String(e.Offset)
	return x.buf
}

func (e TL_updateBotInlineSend) encode() []byte {
	var flags int32
	if e.Geo != nil {
		flags |= (1 << 0)
	}
	if e.MsgID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotInlineSend)
	x.Int(flags)
	x.Long(e.UserID)
	x.String(e.Query)
	if e.Geo != nil {
		x.Object(e.Geo)
	}
	x.String(e.ID)
	if e.MsgID != nil {
		x.Object(e.MsgID)
	}
	return x.buf
}

func (e TL_updateEditChannelMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEditChannelMessage)
	x.Object(e.Message)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateBotCallbackQuery) encode() []byte {
	var flags int32
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.GameShortName.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotCallbackQuery)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.ChatInstance)
	if e.Data != nil {
		x.StringBytes(e.Data)
	}
	if e.GameShortName.IsSet {
		x.String(e.GameShortName.Value)
	}
	return x.buf
}

func (e TL_updateEditMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEditMessage)
	x.Object(e.Message)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateInlineBotCallbackQuery) encode() []byte {
	var flags int32
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.GameShortName.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateInlineBotCallbackQuery)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.Object(e.MsgID)
	x.Long(e.ChatInstance)
	if e.Data != nil {
		x.StringBytes(e.Data)
	}
	if e.GameShortName.IsSet {
		x.String(e.GameShortName.Value)
	}
	return x.buf
}

func (e TL_updateReadChannelOutbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadChannelOutbox)
	x.Long(e.ChannelID)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_updateDraftMessage) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDraftMessage)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	x.Object(e.Draft)
	return x.buf
}

func (e TL_updateReadFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadFeaturedStickers)
	return x.buf
}

func (e TL_updateRecentStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateRecentStickers)
	return x.buf
}

func (e TL_updateConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateConfig)
	return x.buf
}

func (e TL_updatePtsChanged) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePtsChanged)
	return x.buf
}

func (e TL_updateChannelWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelWebPage)
	x.Long(e.ChannelID)
	x.Object(e.Webpage)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateDialogPinned) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	if e.FolderID.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogPinned)
	x.Int(flags)
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	x.Object(e.Peer)
	return x.buf
}

func (e TL_updatePinnedDialogs) encode() []byte {
	var flags int32
	if e.FolderID.IsSet {
		flags |= (1 << 1)
	}
	if e.Order != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePinnedDialogs)
	x.Int(flags)
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	if e.Order != nil {
		x.Vector(e.Order)
	}
	return x.buf
}

func (e TL_updateBotWebhookJSON) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotWebhookJSON)
	x.Object(e.Data)
	return x.buf
}

func (e TL_updateBotWebhookJSONQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotWebhookJSONQuery)
	x.Long(e.QueryID)
	x.Object(e.Data)
	x.Int(e.Timeout)
	return x.buf
}

func (e TL_updateBotShippingQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotShippingQuery)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.StringBytes(e.Payload)
	x.Object(e.ShippingAddress)
	return x.buf
}

func (e TL_updateBotPrecheckoutQuery) encode() []byte {
	var flags int32
	if e.Info != nil {
		flags |= (1 << 0)
	}
	if e.ShippingOptionID.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotPrecheckoutQuery)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.StringBytes(e.Payload)
	if e.Info != nil {
		x.Object(e.Info)
	}
	if e.ShippingOptionID.IsSet {
		x.String(e.ShippingOptionID.Value)
	}
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	return x.buf
}

func (e TL_updatePhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePhoneCall)
	x.Object(e.PhoneCall)
	return x.buf
}

func (e TL_updateLangPackTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateLangPackTooLong)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_updateLangPack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateLangPack)
	x.Object(e.Difference)
	return x.buf
}

func (e TL_updateFavedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateFavedStickers)
	return x.buf
}

func (e TL_updateChannelReadMessagesContents) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelReadMessagesContents)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	x.VectorInt(e.Messages)
	return x.buf
}

func (e TL_updateContactsReset) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateContactsReset)
	return x.buf
}

func (e TL_updateChannelAvailableMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelAvailableMessages)
	x.Long(e.ChannelID)
	x.Int(e.AvailableMinID)
	return x.buf
}

func (e TL_updateDialogUnreadMark) encode() []byte {
	var flags int32
	if e.Unread {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogUnreadMark)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_updateMessagePoll) encode() []byte {
	var flags int32
	if e.Poll != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessagePoll)
	x.Int(flags)
	x.Long(e.PollID)
	if e.Poll != nil {
		x.Object(e.Poll)
	}
	x.Object(e.Results)
	return x.buf
}

func (e TL_updateChatDefaultBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatDefaultBannedRights)
	x.Object(e.Peer)
	x.Object(e.DefaultBannedRights)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateFolderPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateFolderPeers)
	x.Vector(e.FolderPeers)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updatePeerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePeerSettings)
	x.Object(e.Peer)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_updatePeerLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePeerLocated)
	x.Vector(e.Peers)
	return x.buf
}

func (e TL_updateNewScheduledMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewScheduledMessage)
	x.Object(e.Message)
	return x.buf
}

func (e TL_updateDeleteScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDeleteScheduledMessages)
	x.Object(e.Peer)
	x.VectorInt(e.Messages)
	return x.buf
}

func (e TL_updateTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateTheme)
	x.Object(e.Theme)
	return x.buf
}

func (e TL_updateGeoLiveViewed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateGeoLiveViewed)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_updateLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateLoginToken)
	return x.buf
}

func (e TL_updateMessagePollVote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessagePollVote)
	x.Long(e.PollID)
	x.Object(e.Peer)
	x.VectorBytes(e.Options)
	x.Int(e.Qts)
	return x.buf
}

func (e TL_updateDialogFilter) encode() []byte {
	var flags int32
	if e.Filter != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogFilter)
	x.Int(flags)
	x.Int(e.ID)
	if e.Filter != nil {
		x.Object(e.Filter)
	}
	return x.buf
}

func (e TL_updateDialogFilterOrder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogFilterOrder)
	x.VectorInt(e.Order)
	return x.buf
}

func (e TL_updateDialogFilters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogFilters)
	return x.buf
}

func (e TL_updatePhoneCallSignalingData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePhoneCallSignalingData)
	x.Long(e.PhoneCallID)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_updateChannelMessageForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelMessageForwards)
	x.Long(e.ChannelID)
	x.Int(e.ID)
	x.Int(e.Forwards)
	return x.buf
}

func (e TL_updateReadChannelDiscussionInbox) encode() []byte {
	var flags int32
	if e.BroadcastID.IsSet {
		flags |= (1 << 0)
	}
	if e.BroadcastPost.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadChannelDiscussionInbox)
	x.Int(flags)
	x.Long(e.ChannelID)
	x.Int(e.TopMsgID)
	x.Int(e.ReadMaxID)
	if e.BroadcastID.IsSet {
		x.Long(e.BroadcastID.Value)
	}
	if e.BroadcastPost.IsSet {
		x.Int(e.BroadcastPost.Value)
	}
	return x.buf
}

func (e TL_updateReadChannelDiscussionOutbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadChannelDiscussionOutbox)
	x.Long(e.ChannelID)
	x.Int(e.TopMsgID)
	x.Int(e.ReadMaxID)
	return x.buf
}

func (e TL_updatePeerBlocked) encode() []byte {
	var flags int32
	if e.Blocked {
		flags |= (1 << 0)
	}
	if e.BlockedMyStoriesFrom {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePeerBlocked)
	x.Int(flags)
	x.Object(e.PeerID)
	return x.buf
}

func (e TL_updateChannelUserTyping) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelUserTyping)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	x.Object(e.FromID)
	x.Object(e.Action)
	return x.buf
}

func (e TL_updatePinnedMessages) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePinnedMessages)
	x.Int(flags)
	x.Object(e.Peer)
	x.VectorInt(e.Messages)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updatePinnedChannelMessages) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePinnedChannelMessages)
	x.Int(flags)
	x.Long(e.ChannelID)
	x.VectorInt(e.Messages)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_updateChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_updateGroupCallParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateGroupCallParticipants)
	x.Object(e.Call)
	x.Vector(e.Participants)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateGroupCall)
	x.Long(e.ChatID)
	x.Object(e.Call)
	return x.buf
}

func (e TL_updatePeerHistoryTTL) encode() []byte {
	var flags int32
	if e.TtlPeriod.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePeerHistoryTTL)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	return x.buf
}

func (e TL_updateChatParticipant) encode() []byte {
	var flags int32
	if e.PrevParticipant != nil {
		flags |= (1 << 0)
	}
	if e.NewParticipant != nil {
		flags |= (1 << 1)
	}
	if e.Invite != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipant)
	x.Int(flags)
	x.Long(e.ChatID)
	x.Int(e.Date)
	x.Long(e.ActorID)
	x.Long(e.UserID)
	if e.PrevParticipant != nil {
		x.Object(e.PrevParticipant)
	}
	if e.NewParticipant != nil {
		x.Object(e.NewParticipant)
	}
	if e.Invite != nil {
		x.Object(e.Invite)
	}
	x.Int(e.Qts)
	return x.buf
}

func (e TL_updateChannelParticipant) encode() []byte {
	var flags int32
	if e.ViaChatlist {
		flags |= (1 << 3)
	}
	if e.PrevParticipant != nil {
		flags |= (1 << 0)
	}
	if e.NewParticipant != nil {
		flags |= (1 << 1)
	}
	if e.Invite != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelParticipant)
	x.Int(flags)
	x.Long(e.ChannelID)
	x.Int(e.Date)
	x.Long(e.ActorID)
	x.Long(e.UserID)
	if e.PrevParticipant != nil {
		x.Object(e.PrevParticipant)
	}
	if e.NewParticipant != nil {
		x.Object(e.NewParticipant)
	}
	if e.Invite != nil {
		x.Object(e.Invite)
	}
	x.Int(e.Qts)
	return x.buf
}

func (e TL_updateBotStopped) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotStopped)
	x.Long(e.UserID)
	x.Int(e.Date)
	x.Bool(e.Stopped)
	x.Int(e.Qts)
	return x.buf
}

func (e TL_updateGroupCallConnection) encode() []byte {
	var flags int32
	if e.Presentation {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateGroupCallConnection)
	x.Int(flags)
	x.Object(e.Params)
	return x.buf
}

func (e TL_updateBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotCommands)
	x.Object(e.Peer)
	x.Long(e.BotID)
	x.Vector(e.Commands)
	return x.buf
}

func (e TL_updatePendingJoinRequests) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePendingJoinRequests)
	x.Object(e.Peer)
	x.Int(e.RequestsPending)
	x.VectorLong(e.RecentRequesters)
	return x.buf
}

func (e TL_updateBotChatInviteRequester) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotChatInviteRequester)
	x.Object(e.Peer)
	x.Int(e.Date)
	x.Long(e.UserID)
	x.String(e.About)
	x.Object(e.Invite)
	x.Int(e.Qts)
	return x.buf
}

func (e TL_updateMessageReactions) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessageReactions)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	x.Object(e.Reactions)
	return x.buf
}

func (e TL_updateAttachMenuBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateAttachMenuBots)
	return x.buf
}

func (e TL_updateWebViewResultSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateWebViewResultSent)
	x.Long(e.QueryID)
	return x.buf
}

func (e TL_updateBotMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotMenuButton)
	x.Long(e.BotID)
	x.Object(e.Button)
	return x.buf
}

func (e TL_updateSavedRingtones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateSavedRingtones)
	return x.buf
}

func (e TL_updateTranscribedAudio) encode() []byte {
	var flags int32
	if e.Pending {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateTranscribedAudio)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.TranscriptionID)
	x.String(e.Text)
	return x.buf
}

func (e TL_updateReadFeaturedEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadFeaturedEmojiStickers)
	return x.buf
}

func (e TL_updateUserEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserEmojiStatus)
	x.Long(e.UserID)
	x.Object(e.EmojiStatus)
	return x.buf
}

func (e TL_updateRecentEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateRecentEmojiStatuses)
	return x.buf
}

func (e TL_updateRecentReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateRecentReactions)
	return x.buf
}

func (e TL_updateMoveStickerSetToTop) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMoveStickerSetToTop)
	x.Int(flags)
	x.Long(e.Stickerset)
	return x.buf
}

func (e TL_updateMessageExtendedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessageExtendedMedia)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Object(e.ExtendedMedia)
	return x.buf
}

func (e TL_updateChannelPinnedTopic) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelPinnedTopic)
	x.Int(flags)
	x.Long(e.ChannelID)
	x.Int(e.TopicID)
	return x.buf
}

func (e TL_updateChannelPinnedTopics) encode() []byte {
	var flags int32
	if e.Order != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelPinnedTopics)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.Order != nil {
		x.VectorInt(e.Order)
	}
	return x.buf
}

func (e TL_updateUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUser)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_updateAutoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateAutoSaveSettings)
	return x.buf
}

func (e TL_updateGroupInvitePrivacyForbidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateGroupInvitePrivacyForbidden)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_updateStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStory)
	x.Object(e.Peer)
	x.Object(e.Story)
	return x.buf
}

func (e TL_updateReadStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadStories)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_updateStoryID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStoryID)
	x.Int(e.ID)
	x.Long(e.RandomID)
	return x.buf
}

func (e TL_updateStoriesStealthMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStoriesStealthMode)
	x.Object(e.StealthMode)
	return x.buf
}

func (e TL_updateSentStoryReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateSentStoryReaction)
	x.Object(e.Peer)
	x.Int(e.StoryID)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_updates_state) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_state)
	x.Int(e.Pts)
	x.Int(e.Qts)
	x.Int(e.Date)
	x.Int(e.Seq)
	x.Int(e.UnreadCount)
	return x.buf
}

func (e TL_updates_differenceEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_differenceEmpty)
	x.Int(e.Date)
	x.Int(e.Seq)
	return x.buf
}

func (e TL_updates_difference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_difference)
	x.Vector(e.NewMessages)
	x.Vector(e.NewEncryptedMessages)
	x.Vector(e.OtherUpdates)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	x.Object(e.State)
	return x.buf
}

func (e TL_updates_differenceSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_differenceSlice)
	x.Vector(e.NewMessages)
	x.Vector(e.NewEncryptedMessages)
	x.Vector(e.OtherUpdates)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	x.Object(e.IntermediateState)
	return x.buf
}

func (e TL_updates_differenceTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_differenceTooLong)
	x.Int(e.Pts)
	return x.buf
}

func (e TL_updatesTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatesTooLong)
	return x.buf
}

func (e TL_updateShortMessage) encode() []byte {
	var flags int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Mentioned {
		flags |= (1 << 4)
	}
	if e.MediaUnread {
		flags |= (1 << 5)
	}
	if e.Silent {
		flags |= (1 << 13)
	}
	if e.FwdFrom != nil {
		flags |= (1 << 2)
	}
	if e.ViaBotID.IsSet {
		flags |= (1 << 11)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 7)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateShortMessage)
	x.Int(flags)
	x.Int(e.ID)
	x.Long(e.UserID)
	x.String(e.Message)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	x.Int(e.Date)
	if e.FwdFrom != nil {
		x.Object(e.FwdFrom)
	}
	if e.ViaBotID.IsSet {
		x.Long(e.ViaBotID.Value)
	}
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	return x.buf
}

func (e TL_updateShortChatMessage) encode() []byte {
	var flags int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Mentioned {
		flags |= (1 << 4)
	}
	if e.MediaUnread {
		flags |= (1 << 5)
	}
	if e.Silent {
		flags |= (1 << 13)
	}
	if e.FwdFrom != nil {
		flags |= (1 << 2)
	}
	if e.ViaBotID.IsSet {
		flags |= (1 << 11)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 7)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateShortChatMessage)
	x.Int(flags)
	x.Int(e.ID)
	x.Long(e.FromID)
	x.Long(e.ChatID)
	x.String(e.Message)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	x.Int(e.Date)
	if e.FwdFrom != nil {
		x.Object(e.FwdFrom)
	}
	if e.ViaBotID.IsSet {
		x.Long(e.ViaBotID.Value)
	}
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	return x.buf
}

func (e TL_updateShort) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateShort)
	x.Object(e.Update)
	x.Int(e.Date)
	return x.buf
}

func (e TL_updatesCombined) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatesCombined)
	x.Vector(e.Updates)
	x.Vector(e.Users)
	x.Vector(e.Chats)
	x.Int(e.Date)
	x.Int(e.SeqStart)
	x.Int(e.Seq)
	return x.buf
}

func (e TL_updates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates)
	x.Vector(e.Updates)
	x.Vector(e.Users)
	x.Vector(e.Chats)
	x.Int(e.Date)
	x.Int(e.Seq)
	return x.buf
}

func (e TL_updateShortSentMessage) encode() []byte {
	var flags int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Media != nil {
		flags |= (1 << 9)
	}
	if e.Entities != nil {
		flags |= (1 << 7)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateShortSentMessage)
	x.Int(flags)
	x.Int(e.ID)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	x.Int(e.Date)
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	return x.buf
}

func (e TL_photos_photos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_photos)
	x.Vector(e.Photos)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_photos_photosSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_photosSlice)
	x.Int(e.Count)
	x.Vector(e.Photos)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_photos_photo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_photo)
	x.Object(e.Photo)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_upload_file) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_file)
	x.Object(e.Type)
	x.Int(e.Mtime)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_upload_fileCdnRedirect) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_fileCdnRedirect)
	x.Int(e.DcID)
	x.StringBytes(e.FileToken)
	x.StringBytes(e.EncryptionKey)
	x.StringBytes(e.EncryptionIv)
	x.Vector(e.FileHashes)
	return x.buf
}

func (e TL_dcOption) encode() []byte {
	var flags int32
	if e.Ipv6 {
		flags |= (1 << 0)
	}
	if e.MediaOnly {
		flags |= (1 << 1)
	}
	if e.TcpoOnly {
		flags |= (1 << 2)
	}
	if e.Cdn {
		flags |= (1 << 3)
	}
	if e.Static {
		flags |= (1 << 4)
	}
	if e.ThisPortOnly {
		flags |= (1 << 5)
	}
	if e.Secret != nil {
		flags |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dcOption)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.IpAddress)
	x.Int(e.Port)
	if e.Secret != nil {
		x.StringBytes(e.Secret)
	}
	return x.buf
}

func (e TL_config) encode() []byte {
	var flags int32
	if e.DefaultP2pContacts {
		flags |= (1 << 3)
	}
	if e.PreloadFeaturedStickers {
		flags |= (1 << 4)
	}
	if e.RevokePmInbox {
		flags |= (1 << 6)
	}
	if e.BlockedMode {
		flags |= (1 << 8)
	}
	if e.ForceTryIpv6 {
		flags |= (1 << 14)
	}
	if e.TmpSessions.IsSet {
		flags |= (1 << 0)
	}
	if e.AutoupdateUrlPrefix.IsSet {
		flags |= (1 << 7)
	}
	if e.GifSearchUsername.IsSet {
		flags |= (1 << 9)
	}
	if e.VenueSearchUsername.IsSet {
		flags |= (1 << 10)
	}
	if e.ImgSearchUsername.IsSet {
		flags |= (1 << 11)
	}
	if e.StaticMapsProvider.IsSet {
		flags |= (1 << 12)
	}
	if e.SuggestedLangCode.IsSet {
		flags |= (1 << 2)
	}
	if e.LangPackVersion.IsSet {
		flags |= (1 << 2)
	}
	if e.BaseLangPackVersion.IsSet {
		flags |= (1 << 2)
	}
	if e.ReactionsDefault != nil {
		flags |= (1 << 15)
	}
	if e.AutologinToken.IsSet {
		flags |= (1 << 16)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_config)
	x.Int(flags)
	x.Int(e.Date)
	x.Int(e.Expires)
	x.Bool(e.TestMode)
	x.Int(e.ThisDc)
	x.Vector(e.DcOptions)
	x.String(e.DcTxtDomainName)
	x.Int(e.ChatSizeMax)
	x.Int(e.MegagroupSizeMax)
	x.Int(e.ForwardedCountMax)
	x.Int(e.OnlineUpdatePeriodMs)
	x.Int(e.OfflineBlurTimeoutMs)
	x.Int(e.OfflineIdleTimeoutMs)
	x.Int(e.OnlineCloudTimeoutMs)
	x.Int(e.NotifyCloudDelayMs)
	x.Int(e.NotifyDefaultDelayMs)
	x.Int(e.PushChatPeriodMs)
	x.Int(e.PushChatLimit)
	x.Int(e.EditTimeLimit)
	x.Int(e.RevokeTimeLimit)
	x.Int(e.RevokePmTimeLimit)
	x.Int(e.RatingEDecay)
	x.Int(e.StickersRecentLimit)
	x.Int(e.ChannelsReadMediaPeriod)
	if e.TmpSessions.IsSet {
		x.Int(e.TmpSessions.Value)
	}
	x.Int(e.CallReceiveTimeoutMs)
	x.Int(e.CallRingTimeoutMs)
	x.Int(e.CallConnectTimeoutMs)
	x.Int(e.CallPacketTimeoutMs)
	x.String(e.MeUrlPrefix)
	if e.AutoupdateUrlPrefix.IsSet {
		x.String(e.AutoupdateUrlPrefix.Value)
	}
	if e.GifSearchUsername.IsSet {
		x.String(e.GifSearchUsername.Value)
	}
	if e.VenueSearchUsername.IsSet {
		x.String(e.VenueSearchUsername.Value)
	}
	if e.ImgSearchUsername.IsSet {
		x.String(e.ImgSearchUsername.Value)
	}
	if e.StaticMapsProvider.IsSet {
		x.String(e.StaticMapsProvider.Value)
	}
	x.Int(e.CaptionLengthMax)
	x.Int(e.MessageLengthMax)
	x.Int(e.WebfileDcID)
	if e.SuggestedLangCode.IsSet {
		x.String(e.SuggestedLangCode.Value)
	}
	if e.LangPackVersion.IsSet {
		x.Int(e.LangPackVersion.Value)
	}
	if e.BaseLangPackVersion.IsSet {
		x.Int(e.BaseLangPackVersion.Value)
	}
	if e.ReactionsDefault != nil {
		x.Object(e.ReactionsDefault)
	}
	if e.AutologinToken.IsSet {
		x.String(e.AutologinToken.Value)
	}
	return x.buf
}

func (e TL_nearestDc) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_nearestDc)
	x.String(e.Country)
	x.Int(e.ThisDc)
	x.Int(e.NearestDc)
	return x.buf
}

func (e TL_help_appUpdate) encode() []byte {
	var flags int32
	if e.CanNotSkip {
		flags |= (1 << 0)
	}
	if e.Document != nil {
		flags |= (1 << 1)
	}
	if e.Url.IsSet {
		flags |= (1 << 2)
	}
	if e.Sticker != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_appUpdate)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.Version)
	x.String(e.Text)
	x.Vector(e.Entities)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	if e.Sticker != nil {
		x.Object(e.Sticker)
	}
	return x.buf
}

func (e TL_help_noAppUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_noAppUpdate)
	return x.buf
}

func (e TL_help_inviteText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_inviteText)
	x.String(e.Message)
	return x.buf
}

func (e TL_encryptedChatEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChatEmpty)
	x.Int(e.ID)
	return x.buf
}

func (e TL_encryptedChatWaiting) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChatWaiting)
	x.Int(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	return x.buf
}

func (e TL_encryptedChatRequested) encode() []byte {
	var flags int32
	if e.FolderID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChatRequested)
	x.Int(flags)
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	x.Int(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GA)
	return x.buf
}

func (e TL_encryptedChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChat)
	x.Int(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GAOrB)
	x.Long(e.KeyFingerprint)
	return x.buf
}

func (e TL_encryptedChatDiscarded) encode() []byte {
	var flags int32
	if e.HistoryDeleted {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChatDiscarded)
	x.Int(flags)
	x.Int(e.ID)
	return x.buf
}

func (e TL_inputEncryptedChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedChat)
	x.Int(e.ChatID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_encryptedFileEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedFileEmpty)
	return x.buf
}

func (e TL_encryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedFile)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Long(e.Size)
	x.Int(e.DcID)
	x.Int(e.KeyFingerprint)
	return x.buf
}

func (e TL_inputEncryptedFileEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFileEmpty)
	return x.buf
}

func (e TL_inputEncryptedFileUploaded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFileUploaded)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.String(e.Md5Checksum)
	x.Int(e.KeyFingerprint)
	return x.buf
}

func (e TL_inputEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFile)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputEncryptedFileBigUploaded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFileBigUploaded)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.Int(e.KeyFingerprint)
	return x.buf
}

func (e TL_encryptedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedMessage)
	x.Long(e.RandomID)
	x.Int(e.ChatID)
	x.Int(e.Date)
	x.StringBytes(e.Bytes)
	x.Object(e.File)
	return x.buf
}

func (e TL_encryptedMessageService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedMessageService)
	x.Long(e.RandomID)
	x.Int(e.ChatID)
	x.Int(e.Date)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_messages_dhConfigNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dhConfigNotModified)
	x.StringBytes(e.Random)
	return x.buf
}

func (e TL_messages_dhConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dhConfig)
	x.Int(e.G)
	x.StringBytes(e.P)
	x.Int(e.Version)
	x.StringBytes(e.Random)
	return x.buf
}

func (e TL_messages_sentEncryptedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sentEncryptedMessage)
	x.Int(e.Date)
	return x.buf
}

func (e TL_messages_sentEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sentEncryptedFile)
	x.Int(e.Date)
	x.Object(e.File)
	return x.buf
}

func (e TL_inputDocumentEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDocumentEmpty)
	return x.buf
}

func (e TL_inputDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDocument)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	return x.buf
}

func (e TL_documentEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_document) encode() []byte {
	var flags int32
	if e.Thumbs != nil {
		flags |= (1 << 0)
	}
	if e.VideoThumbs != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_document)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.Int(e.Date)
	x.String(e.MimeType)
	x.Long(e.Size)
	if e.Thumbs != nil {
		x.Vector(e.Thumbs)
	}
	if e.VideoThumbs != nil {
		x.Vector(e.VideoThumbs)
	}
	x.Int(e.DcID)
	x.Vector(e.Attributes)
	return x.buf
}

func (e TL_help_support) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_support)
	x.String(e.PhoneNumber)
	x.Object(e.User)
	return x.buf
}

func (e TL_notifyPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_notifyUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyUsers)
	return x.buf
}

func (e TL_notifyChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyChats)
	return x.buf
}

func (e TL_notifyBroadcasts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyBroadcasts)
	return x.buf
}

func (e TL_notifyForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyForumTopic)
	x.Object(e.Peer)
	x.Int(e.TopMsgID)
	return x.buf
}

func (e TL_sendMessageTypingAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageTypingAction)
	return x.buf
}

func (e TL_sendMessageCancelAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageCancelAction)
	return x.buf
}

func (e TL_sendMessageRecordVideoAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageRecordVideoAction)
	return x.buf
}

func (e TL_sendMessageUploadVideoAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadVideoAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageRecordAudioAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageRecordAudioAction)
	return x.buf
}

func (e TL_sendMessageUploadAudioAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadAudioAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageUploadPhotoAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadPhotoAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageUploadDocumentAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadDocumentAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageGeoLocationAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageGeoLocationAction)
	return x.buf
}

func (e TL_sendMessageChooseContactAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageChooseContactAction)
	return x.buf
}

func (e TL_sendMessageGamePlayAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageGamePlayAction)
	return x.buf
}

func (e TL_sendMessageRecordRoundAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageRecordRoundAction)
	return x.buf
}

func (e TL_sendMessageUploadRoundAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadRoundAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_speakingInGroupCallAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_speakingInGroupCallAction)
	return x.buf
}

func (e TL_sendMessageHistoryImportAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageHistoryImportAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageChooseStickerAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageChooseStickerAction)
	return x.buf
}

func (e TL_sendMessageEmojiInteraction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageEmojiInteraction)
	x.String(e.Emoticon)
	x.Int(e.MsgID)
	x.Object(e.Interaction)
	return x.buf
}

func (e TL_sendMessageEmojiInteractionSeen) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageEmojiInteractionSeen)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_contacts_found) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_found)
	x.Vector(e.MyResults)
	x.Vector(e.Results)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_inputPrivacyKeyStatusTimestamp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyStatusTimestamp)
	return x.buf
}

func (e TL_inputPrivacyKeyChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyChatInvite)
	return x.buf
}

func (e TL_inputPrivacyKeyPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyPhoneCall)
	return x.buf
}

func (e TL_inputPrivacyKeyPhoneP2P) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyPhoneP2P)
	return x.buf
}

func (e TL_inputPrivacyKeyForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyForwards)
	return x.buf
}

func (e TL_inputPrivacyKeyProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyProfilePhoto)
	return x.buf
}

func (e TL_inputPrivacyKeyPhoneNumber) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyPhoneNumber)
	return x.buf
}

func (e TL_inputPrivacyKeyAddedByPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyAddedByPhone)
	return x.buf
}

func (e TL_inputPrivacyKeyVoiceMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyVoiceMessages)
	return x.buf
}

func (e TL_inputPrivacyKeyAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyAbout)
	return x.buf
}

func (e TL_privacyKeyStatusTimestamp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyStatusTimestamp)
	return x.buf
}

func (e TL_privacyKeyChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyChatInvite)
	return x.buf
}

func (e TL_privacyKeyPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyPhoneCall)
	return x.buf
}

func (e TL_privacyKeyPhoneP2P) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyPhoneP2P)
	return x.buf
}

func (e TL_privacyKeyForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyForwards)
	return x.buf
}

func (e TL_privacyKeyProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyProfilePhoto)
	return x.buf
}

func (e TL_privacyKeyPhoneNumber) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyPhoneNumber)
	return x.buf
}

func (e TL_privacyKeyAddedByPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyAddedByPhone)
	return x.buf
}

func (e TL_privacyKeyVoiceMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyVoiceMessages)
	return x.buf
}

func (e TL_privacyKeyAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyAbout)
	return x.buf
}

func (e TL_inputPrivacyValueAllowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowContacts)
	return x.buf
}

func (e TL_inputPrivacyValueAllowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowAll)
	return x.buf
}

func (e TL_inputPrivacyValueAllowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowUsers)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueDisallowContacts)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueDisallowAll)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueDisallowUsers)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_inputPrivacyValueAllowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowChatParticipants)
	x.VectorLong(e.Chats)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueDisallowChatParticipants)
	x.VectorLong(e.Chats)
	return x.buf
}

func (e TL_inputPrivacyValueAllowCloseFriends) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowCloseFriends)
	return x.buf
}

func (e TL_privacyValueAllowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowContacts)
	return x.buf
}

func (e TL_privacyValueAllowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowAll)
	return x.buf
}

func (e TL_privacyValueAllowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowUsers)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_privacyValueDisallowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueDisallowContacts)
	return x.buf
}

func (e TL_privacyValueDisallowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueDisallowAll)
	return x.buf
}

func (e TL_privacyValueDisallowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueDisallowUsers)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_privacyValueAllowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowChatParticipants)
	x.VectorLong(e.Chats)
	return x.buf
}

func (e TL_privacyValueDisallowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueDisallowChatParticipants)
	x.VectorLong(e.Chats)
	return x.buf
}

func (e TL_privacyValueAllowCloseFriends) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowCloseFriends)
	return x.buf
}

func (e TL_account_privacyRules) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_privacyRules)
	x.Vector(e.Rules)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_accountDaysTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_accountDaysTTL)
	x.Int(e.Days)
	return x.buf
}

func (e TL_documentAttributeImageSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeImageSize)
	x.Int(e.W)
	x.Int(e.H)
	return x.buf
}

func (e TL_documentAttributeAnimated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeAnimated)
	return x.buf
}

func (e TL_documentAttributeSticker) encode() []byte {
	var flags int32
	if e.Mask {
		flags |= (1 << 1)
	}
	if e.MaskCoords != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeSticker)
	x.Int(flags)
	x.String(e.Alt)
	x.Object(e.Stickerset)
	if e.MaskCoords != nil {
		x.Object(e.MaskCoords)
	}
	return x.buf
}

func (e TL_documentAttributeVideo) encode() []byte {
	var flags int32
	if e.RoundMessage {
		flags |= (1 << 0)
	}
	if e.SupportsStreaming {
		flags |= (1 << 1)
	}
	if e.Nosound {
		flags |= (1 << 3)
	}
	if e.PreloadPrefixSize.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeVideo)
	x.Int(flags)
	x.Double(e.Duration)
	x.Int(e.W)
	x.Int(e.H)
	if e.PreloadPrefixSize.IsSet {
		x.Int(e.PreloadPrefixSize.Value)
	}
	return x.buf
}

func (e TL_documentAttributeAudio) encode() []byte {
	var flags int32
	if e.Voice {
		flags |= (1 << 10)
	}
	if e.Title.IsSet {
		flags |= (1 << 0)
	}
	if e.Performer.IsSet {
		flags |= (1 << 1)
	}
	if e.Waveform != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeAudio)
	x.Int(flags)
	x.Int(e.Duration)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Performer.IsSet {
		x.String(e.Performer.Value)
	}
	if e.Waveform != nil {
		x.StringBytes(e.Waveform)
	}
	return x.buf
}

func (e TL_documentAttributeFilename) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeFilename)
	x.String(e.FileName)
	return x.buf
}

func (e TL_documentAttributeHasStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeHasStickers)
	return x.buf
}

func (e TL_documentAttributeCustomEmoji) encode() []byte {
	var flags int32
	if e.Free {
		flags |= (1 << 0)
	}
	if e.TextColor {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeCustomEmoji)
	x.Int(flags)
	x.String(e.Alt)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_messages_stickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickersNotModified)
	return x.buf
}

func (e TL_messages_stickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickers)
	x.Long(e.Hash)
	x.Vector(e.Stickers)
	return x.buf
}

func (e TL_stickerPack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerPack)
	x.String(e.Emoticon)
	x.VectorLong(e.Documents)
	return x.buf
}

func (e TL_messages_allStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_allStickersNotModified)
	return x.buf
}

func (e TL_messages_allStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_allStickers)
	x.Long(e.Hash)
	x.Vector(e.Sets)
	return x.buf
}

func (e TL_messages_affectedMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_affectedMessages)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	return x.buf
}

func (e TL_webPageEmpty) encode() []byte {
	var flags int32
	if e.Url.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPageEmpty)
	x.Int(flags)
	x.Long(e.ID)
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	return x.buf
}

func (e TL_webPagePending) encode() []byte {
	var flags int32
	if e.Url.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPagePending)
	x.Int(flags)
	x.Long(e.ID)
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	x.Int(e.Date)
	return x.buf
}

func (e TL_webPage) encode() []byte {
	var flags int32
	if e.HasLargeMedia {
		flags |= (1 << 13)
	}
	if e.Type.IsSet {
		flags |= (1 << 0)
	}
	if e.SiteName.IsSet {
		flags |= (1 << 1)
	}
	if e.Title.IsSet {
		flags |= (1 << 2)
	}
	if e.Description.IsSet {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 4)
	}
	if e.EmbedUrl.IsSet {
		flags |= (1 << 5)
	}
	if e.EmbedType.IsSet {
		flags |= (1 << 5)
	}
	if e.EmbedWidth.IsSet {
		flags |= (1 << 6)
	}
	if e.EmbedHeight.IsSet {
		flags |= (1 << 6)
	}
	if e.Duration.IsSet {
		flags |= (1 << 7)
	}
	if e.Author.IsSet {
		flags |= (1 << 8)
	}
	if e.Document != nil {
		flags |= (1 << 9)
	}
	if e.CachedPage != nil {
		flags |= (1 << 10)
	}
	if e.Attributes != nil {
		flags |= (1 << 12)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPage)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.Url)
	x.String(e.DisplayUrl)
	x.Int(e.Hash)
	if e.Type.IsSet {
		x.String(e.Type.Value)
	}
	if e.SiteName.IsSet {
		x.String(e.SiteName.Value)
	}
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Description.IsSet {
		x.String(e.Description.Value)
	}
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.EmbedUrl.IsSet {
		x.String(e.EmbedUrl.Value)
	}
	if e.EmbedType.IsSet {
		x.String(e.EmbedType.Value)
	}
	if e.EmbedWidth.IsSet {
		x.Int(e.EmbedWidth.Value)
	}
	if e.EmbedHeight.IsSet {
		x.Int(e.EmbedHeight.Value)
	}
	if e.Duration.IsSet {
		x.Int(e.Duration.Value)
	}
	if e.Author.IsSet {
		x.String(e.Author.Value)
	}
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.CachedPage != nil {
		x.Object(e.CachedPage)
	}
	if e.Attributes != nil {
		x.Vector(e.Attributes)
	}
	return x.buf
}

func (e TL_webPageNotModified) encode() []byte {
	var flags int32
	if e.CachedPageViews.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPageNotModified)
	x.Int(flags)
	if e.CachedPageViews.IsSet {
		x.Int(e.CachedPageViews.Value)
	}
	return x.buf
}

func (e TL_authorization) encode() []byte {
	var flags int32
	if e.Current {
		flags |= (1 << 0)
	}
	if e.OfficialApp {
		flags |= (1 << 1)
	}
	if e.PasswordPending {
		flags |= (1 << 2)
	}
	if e.EncryptedRequestsDisabled {
		flags |= (1 << 3)
	}
	if e.CallRequestsDisabled {
		flags |= (1 << 4)
	}
	if e.Unconfirmed {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_authorization)
	x.Int(flags)
	x.Long(e.Hash)
	x.String(e.DeviceModel)
	x.String(e.Platform)
	x.String(e.SystemVersion)
	x.Int(e.ApiID)
	x.String(e.AppName)
	x.String(e.AppVersion)
	x.Int(e.DateCreated)
	x.Int(e.DateActive)
	x.String(e.Ip)
	x.String(e.Country)
	x.String(e.Region)
	return x.buf
}

func (e TL_account_authorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_authorizations)
	x.Int(e.AuthorizationTtlDays)
	x.Vector(e.Authorizations)
	return x.buf
}

func (e TL_account_password) encode() []byte {
	var flags int32
	if e.HasRecovery {
		flags |= (1 << 0)
	}
	if e.HasSecureValues {
		flags |= (1 << 1)
	}
	if e.HasPassword {
		flags |= (1 << 2)
	}
	if e.CurrentAlgo != nil {
		flags |= (1 << 2)
	}
	if e.SrpB != nil {
		flags |= (1 << 2)
	}
	if e.SrpID.IsSet {
		flags |= (1 << 2)
	}
	if e.Hint.IsSet {
		flags |= (1 << 3)
	}
	if e.EmailUnconfirmedPattern.IsSet {
		flags |= (1 << 4)
	}
	if e.PendingResetDate.IsSet {
		flags |= (1 << 5)
	}
	if e.LoginEmailPattern.IsSet {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_password)
	x.Int(flags)
	if e.CurrentAlgo != nil {
		x.Object(e.CurrentAlgo)
	}
	if e.SrpB != nil {
		x.StringBytes(e.SrpB)
	}
	if e.SrpID.IsSet {
		x.Long(e.SrpID.Value)
	}
	if e.Hint.IsSet {
		x.String(e.Hint.Value)
	}
	if e.EmailUnconfirmedPattern.IsSet {
		x.String(e.EmailUnconfirmedPattern.Value)
	}
	x.Object(e.NewAlgo)
	x.Object(e.NewSecureAlgo)
	x.StringBytes(e.SecureRandom)
	if e.PendingResetDate.IsSet {
		x.Int(e.PendingResetDate.Value)
	}
	if e.LoginEmailPattern.IsSet {
		x.String(e.LoginEmailPattern.Value)
	}
	return x.buf
}

func (e TL_account_passwordSettings) encode() []byte {
	var flags int32
	if e.Email.IsSet {
		flags |= (1 << 0)
	}
	if e.SecureSettings != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_passwordSettings)
	x.Int(flags)
	if e.Email.IsSet {
		x.String(e.Email.Value)
	}
	if e.SecureSettings != nil {
		x.Object(e.SecureSettings)
	}
	return x.buf
}

func (e TL_account_passwordInputSettings) encode() []byte {
	var flags int32
	if e.NewAlgo != nil {
		flags |= (1 << 0)
	}
	if e.NewPasswordHash != nil {
		flags |= (1 << 0)
	}
	if e.Hint.IsSet {
		flags |= (1 << 0)
	}
	if e.Email.IsSet {
		flags |= (1 << 1)
	}
	if e.NewSecureSettings != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_passwordInputSettings)
	x.Int(flags)
	if e.NewAlgo != nil {
		x.Object(e.NewAlgo)
	}
	if e.NewPasswordHash != nil {
		x.StringBytes(e.NewPasswordHash)
	}
	if e.Hint.IsSet {
		x.String(e.Hint.Value)
	}
	if e.Email.IsSet {
		x.String(e.Email.Value)
	}
	if e.NewSecureSettings != nil {
		x.Object(e.NewSecureSettings)
	}
	return x.buf
}

func (e TL_auth_passwordRecovery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_passwordRecovery)
	x.String(e.EmailPattern)
	return x.buf
}

func (e TL_receivedNotifyMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_receivedNotifyMessage)
	x.Int(e.ID)
	x.Int(e.Flags)
	return x.buf
}

func (e TL_chatInviteExported) encode() []byte {
	var flags int32
	if e.Revoked {
		flags |= (1 << 0)
	}
	if e.Permanent {
		flags |= (1 << 5)
	}
	if e.RequestNeeded {
		flags |= (1 << 6)
	}
	if e.StartDate.IsSet {
		flags |= (1 << 4)
	}
	if e.ExpireDate.IsSet {
		flags |= (1 << 1)
	}
	if e.UsageLimit.IsSet {
		flags |= (1 << 2)
	}
	if e.Usage.IsSet {
		flags |= (1 << 3)
	}
	if e.Requested.IsSet {
		flags |= (1 << 7)
	}
	if e.Title.IsSet {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInviteExported)
	x.Int(flags)
	x.String(e.Link)
	x.Long(e.AdminID)
	x.Int(e.Date)
	if e.StartDate.IsSet {
		x.Int(e.StartDate.Value)
	}
	if e.ExpireDate.IsSet {
		x.Int(e.ExpireDate.Value)
	}
	if e.UsageLimit.IsSet {
		x.Int(e.UsageLimit.Value)
	}
	if e.Usage.IsSet {
		x.Int(e.Usage.Value)
	}
	if e.Requested.IsSet {
		x.Int(e.Requested.Value)
	}
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	return x.buf
}

func (e TL_chatInvitePublicJoinRequests) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInvitePublicJoinRequests)
	return x.buf
}

func (e TL_chatInviteAlready) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInviteAlready)
	x.Object(e.Chat)
	return x.buf
}

func (e TL_chatInvite) encode() []byte {
	var flags int32
	if e.Channel {
		flags |= (1 << 0)
	}
	if e.Broadcast {
		flags |= (1 << 1)
	}
	if e.Public {
		flags |= (1 << 2)
	}
	if e.Megagroup {
		flags |= (1 << 3)
	}
	if e.RequestNeeded {
		flags |= (1 << 6)
	}
	if e.Verified {
		flags |= (1 << 7)
	}
	if e.Scam {
		flags |= (1 << 8)
	}
	if e.Fake {
		flags |= (1 << 9)
	}
	if e.About.IsSet {
		flags |= (1 << 5)
	}
	if e.Participants != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInvite)
	x.Int(flags)
	x.String(e.Title)
	if e.About.IsSet {
		x.String(e.About.Value)
	}
	x.Object(e.Photo)
	x.Int(e.ParticipantsCount)
	if e.Participants != nil {
		x.Vector(e.Participants)
	}
	x.Int(e.Color)
	return x.buf
}

func (e TL_chatInvitePeek) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInvitePeek)
	x.Object(e.Chat)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_inputStickerSetEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetEmpty)
	return x.buf
}

func (e TL_inputStickerSetID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetID)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputStickerSetShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetShortName)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_inputStickerSetAnimatedEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetAnimatedEmoji)
	return x.buf
}

func (e TL_inputStickerSetDice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetDice)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_inputStickerSetAnimatedEmojiAnimations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetAnimatedEmojiAnimations)
	return x.buf
}

func (e TL_inputStickerSetPremiumGifts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetPremiumGifts)
	return x.buf
}

func (e TL_inputStickerSetEmojiGenericAnimations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetEmojiGenericAnimations)
	return x.buf
}

func (e TL_inputStickerSetEmojiDefaultStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetEmojiDefaultStatuses)
	return x.buf
}

func (e TL_inputStickerSetEmojiDefaultTopicIcons) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetEmojiDefaultTopicIcons)
	return x.buf
}

func (e TL_stickerSet) encode() []byte {
	var flags int32
	if e.Archived {
		flags |= (1 << 1)
	}
	if e.Official {
		flags |= (1 << 2)
	}
	if e.Masks {
		flags |= (1 << 3)
	}
	if e.Animated {
		flags |= (1 << 5)
	}
	if e.Videos {
		flags |= (1 << 6)
	}
	if e.Emojis {
		flags |= (1 << 7)
	}
	if e.TextColor {
		flags |= (1 << 9)
	}
	if e.InstalledDate.IsSet {
		flags |= (1 << 0)
	}
	if e.Thumbs != nil {
		flags |= (1 << 4)
	}
	if e.ThumbDcID.IsSet {
		flags |= (1 << 4)
	}
	if e.ThumbVersion.IsSet {
		flags |= (1 << 4)
	}
	if e.ThumbDocumentID.IsSet {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSet)
	x.Int(flags)
	if e.InstalledDate.IsSet {
		x.Int(e.InstalledDate.Value)
	}
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.Title)
	x.String(e.ShortName)
	if e.Thumbs != nil {
		x.Vector(e.Thumbs)
	}
	if e.ThumbDcID.IsSet {
		x.Int(e.ThumbDcID.Value)
	}
	if e.ThumbVersion.IsSet {
		x.Int(e.ThumbVersion.Value)
	}
	if e.ThumbDocumentID.IsSet {
		x.Long(e.ThumbDocumentID.Value)
	}
	x.Int(e.Count)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_stickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickerSet)
	x.Object(e.Set)
	x.Vector(e.Packs)
	x.Vector(e.Keywords)
	x.Vector(e.Documents)
	return x.buf
}

func (e TL_messages_stickerSetNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickerSetNotModified)
	return x.buf
}

func (e TL_botCommand) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommand)
	x.String(e.Command)
	x.String(e.Description)
	return x.buf
}

func (e TL_botInfo) encode() []byte {
	var flags int32
	if e.UserID.IsSet {
		flags |= (1 << 0)
	}
	if e.Description.IsSet {
		flags |= (1 << 1)
	}
	if e.DescriptionPhoto != nil {
		flags |= (1 << 4)
	}
	if e.DescriptionDocument != nil {
		flags |= (1 << 5)
	}
	if e.Commands != nil {
		flags |= (1 << 2)
	}
	if e.MenuButton != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInfo)
	x.Int(flags)
	if e.UserID.IsSet {
		x.Long(e.UserID.Value)
	}
	if e.Description.IsSet {
		x.String(e.Description.Value)
	}
	if e.DescriptionPhoto != nil {
		x.Object(e.DescriptionPhoto)
	}
	if e.DescriptionDocument != nil {
		x.Object(e.DescriptionDocument)
	}
	if e.Commands != nil {
		x.Vector(e.Commands)
	}
	if e.MenuButton != nil {
		x.Object(e.MenuButton)
	}
	return x.buf
}

func (e TL_keyboardButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButton)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonUrl)
	x.String(e.Text)
	x.String(e.Url)
	return x.buf
}

func (e TL_keyboardButtonCallback) encode() []byte {
	var flags int32
	if e.RequiresPassword {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonCallback)
	x.Int(flags)
	x.String(e.Text)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_keyboardButtonRequestPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRequestPhone)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonRequestGeoLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRequestGeoLocation)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonSwitchInline) encode() []byte {
	var flags int32
	if e.SamePeer {
		flags |= (1 << 0)
	}
	if e.PeerTypes != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonSwitchInline)
	x.Int(flags)
	x.String(e.Text)
	x.String(e.Query)
	if e.PeerTypes != nil {
		x.Vector(e.PeerTypes)
	}
	return x.buf
}

func (e TL_keyboardButtonGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonGame)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonBuy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonBuy)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonUrlAuth) encode() []byte {
	var flags int32
	if e.FwdText.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonUrlAuth)
	x.Int(flags)
	x.String(e.Text)
	if e.FwdText.IsSet {
		x.String(e.FwdText.Value)
	}
	x.String(e.Url)
	x.Int(e.ButtonID)
	return x.buf
}

func (e TL_inputKeyboardButtonUrlAuth) encode() []byte {
	var flags int32
	if e.RequestWriteAccess {
		flags |= (1 << 0)
	}
	if e.FwdText.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputKeyboardButtonUrlAuth)
	x.Int(flags)
	x.String(e.Text)
	if e.FwdText.IsSet {
		x.String(e.FwdText.Value)
	}
	x.String(e.Url)
	x.Object(e.Bot)
	return x.buf
}

func (e TL_keyboardButtonRequestPoll) encode() []byte {
	var flags int32
	if e.Quiz.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRequestPoll)
	x.Int(flags)
	if e.Quiz.IsSet {
		x.Bool(e.Quiz.Value)
	}
	x.String(e.Text)
	return x.buf
}

func (e TL_inputKeyboardButtonUserProfile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputKeyboardButtonUserProfile)
	x.String(e.Text)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_keyboardButtonUserProfile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonUserProfile)
	x.String(e.Text)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_keyboardButtonWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonWebView)
	x.String(e.Text)
	x.String(e.Url)
	return x.buf
}

func (e TL_keyboardButtonSimpleWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonSimpleWebView)
	x.String(e.Text)
	x.String(e.Url)
	return x.buf
}

func (e TL_keyboardButtonRequestPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRequestPeer)
	x.String(e.Text)
	x.Int(e.ButtonID)
	x.Object(e.PeerType)
	return x.buf
}

func (e TL_keyboardButtonRow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRow)
	x.Vector(e.Buttons)
	return x.buf
}

func (e TL_replyKeyboardHide) encode() []byte {
	var flags int32
	if e.Selective {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_replyKeyboardHide)
	x.Int(flags)
	return x.buf
}

func (e TL_replyKeyboardForceReply) encode() []byte {
	var flags int32
	if e.SingleUse {
		flags |= (1 << 1)
	}
	if e.Selective {
		flags |= (1 << 2)
	}
	if e.Placeholder.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_replyKeyboardForceReply)
	x.Int(flags)
	if e.Placeholder.IsSet {
		x.String(e.Placeholder.Value)
	}
	return x.buf
}

func (e TL_replyKeyboardMarkup) encode() []byte {
	var flags int32
	if e.Resize {
		flags |= (1 << 0)
	}
	if e.SingleUse {
		flags |= (1 << 1)
	}
	if e.Selective {
		flags |= (1 << 2)
	}
	if e.Persistent {
		flags |= (1 << 4)
	}
	if e.Placeholder.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_replyKeyboardMarkup)
	x.Int(flags)
	x.Vector(e.Rows)
	if e.Placeholder.IsSet {
		x.String(e.Placeholder.Value)
	}
	return x.buf
}

func (e TL_replyInlineMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_replyInlineMarkup)
	x.Vector(e.Rows)
	return x.buf
}

func (e TL_messageEntityUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityUnknown)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityMention) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityMention)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityHashtag) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityHashtag)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityBotCommand) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityBotCommand)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityUrl)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityEmail)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityBold) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityBold)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityItalic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityItalic)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityCode)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityPre) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityPre)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.String(e.Language)
	return x.buf
}

func (e TL_messageEntityTextUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityTextUrl)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.String(e.Url)
	return x.buf
}

func (e TL_messageEntityMentionName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityMentionName)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_inputMessageEntityMentionName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessageEntityMentionName)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messageEntityPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityPhone)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityCashtag) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityCashtag)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityUnderline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityUnderline)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityStrike) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityStrike)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityBankCard) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityBankCard)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntitySpoiler) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntitySpoiler)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityCustomEmoji)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.Long(e.DocumentID)
	return x.buf
}

func (e TL_messageEntityBlockquote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityBlockquote)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_inputChannelEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChannelEmpty)
	return x.buf
}

func (e TL_inputChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChannel)
	x.Long(e.ChannelID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputChannelFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChannelFromMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_contacts_resolvedPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resolvedPeer)
	x.Object(e.Peer)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messageRange) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageRange)
	x.Int(e.MinID)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_updates_channelDifferenceEmpty) encode() []byte {
	var flags int32
	if e.Final {
		flags |= (1 << 0)
	}
	if e.Timeout.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_channelDifferenceEmpty)
	x.Int(flags)
	x.Int(e.Pts)
	if e.Timeout.IsSet {
		x.Int(e.Timeout.Value)
	}
	return x.buf
}

func (e TL_updates_channelDifferenceTooLong) encode() []byte {
	var flags int32
	if e.Final {
		flags |= (1 << 0)
	}
	if e.Timeout.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_channelDifferenceTooLong)
	x.Int(flags)
	if e.Timeout.IsSet {
		x.Int(e.Timeout.Value)
	}
	x.Object(e.Dialog)
	x.Vector(e.Messages)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_updates_channelDifference) encode() []byte {
	var flags int32
	if e.Final {
		flags |= (1 << 0)
	}
	if e.Timeout.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_channelDifference)
	x.Int(flags)
	x.Int(e.Pts)
	if e.Timeout.IsSet {
		x.Int(e.Timeout.Value)
	}
	x.Vector(e.NewMessages)
	x.Vector(e.OtherUpdates)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_channelMessagesFilterEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelMessagesFilterEmpty)
	return x.buf
}

func (e TL_channelMessagesFilter) encode() []byte {
	var flags int32
	if e.ExcludeNewMessages {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelMessagesFilter)
	x.Int(flags)
	x.Vector(e.Ranges)
	return x.buf
}

func (e TL_channelParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipant)
	x.Long(e.UserID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_channelParticipantSelf) encode() []byte {
	var flags int32
	if e.ViaRequest {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantSelf)
	x.Int(flags)
	x.Long(e.UserID)
	x.Long(e.InviterID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_channelParticipantCreator) encode() []byte {
	var flags int32
	if e.Rank.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantCreator)
	x.Int(flags)
	x.Long(e.UserID)
	x.Object(e.AdminRights)
	if e.Rank.IsSet {
		x.String(e.Rank.Value)
	}
	return x.buf
}

func (e TL_channelParticipantAdmin) encode() []byte {
	var flags int32
	if e.CanEdit {
		flags |= (1 << 0)
	}
	if e.Self {
		flags |= (1 << 1)
	}
	if e.InviterID.IsSet {
		flags |= (1 << 1)
	}
	if e.Rank.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantAdmin)
	x.Int(flags)
	x.Long(e.UserID)
	if e.InviterID.IsSet {
		x.Long(e.InviterID.Value)
	}
	x.Long(e.PromotedBy)
	x.Int(e.Date)
	x.Object(e.AdminRights)
	if e.Rank.IsSet {
		x.String(e.Rank.Value)
	}
	return x.buf
}

func (e TL_channelParticipantBanned) encode() []byte {
	var flags int32
	if e.Left {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantBanned)
	x.Int(flags)
	x.Object(e.Peer)
	x.Long(e.KickedBy)
	x.Int(e.Date)
	x.Object(e.BannedRights)
	return x.buf
}

func (e TL_channelParticipantLeft) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantLeft)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_channelParticipantsRecent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsRecent)
	return x.buf
}

func (e TL_channelParticipantsAdmins) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsAdmins)
	return x.buf
}

func (e TL_channelParticipantsKicked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsKicked)
	x.String(e.Q)
	return x.buf
}

func (e TL_channelParticipantsBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsBots)
	return x.buf
}

func (e TL_channelParticipantsBanned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsBanned)
	x.String(e.Q)
	return x.buf
}

func (e TL_channelParticipantsSearch) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsSearch)
	x.String(e.Q)
	return x.buf
}

func (e TL_channelParticipantsContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsContacts)
	x.String(e.Q)
	return x.buf
}

func (e TL_channelParticipantsMentions) encode() []byte {
	var flags int32
	if e.Q.IsSet {
		flags |= (1 << 0)
	}
	if e.TopMsgID.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsMentions)
	x.Int(flags)
	if e.Q.IsSet {
		x.String(e.Q.Value)
	}
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	return x.buf
}

func (e TL_channels_channelParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_channelParticipants)
	x.Int(e.Count)
	x.Vector(e.Participants)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_channels_channelParticipantsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_channelParticipantsNotModified)
	return x.buf
}

func (e TL_channels_channelParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_channelParticipant)
	x.Object(e.Participant)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_help_termsOfService) encode() []byte {
	var flags int32
	if e.Popup {
		flags |= (1 << 0)
	}
	if e.MinAgeConfirm.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_termsOfService)
	x.Int(flags)
	x.Object(e.ID)
	x.String(e.Text)
	x.Vector(e.Entities)
	if e.MinAgeConfirm.IsSet {
		x.Int(e.MinAgeConfirm.Value)
	}
	return x.buf
}

func (e TL_messages_savedGifsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_savedGifsNotModified)
	return x.buf
}

func (e TL_messages_savedGifs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_savedGifs)
	x.Long(e.Hash)
	x.Vector(e.Gifs)
	return x.buf
}

func (e TL_inputBotInlineMessageMediaAuto) encode() []byte {
	var flags int32
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaAuto)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageText) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 0)
	}
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageText)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaGeo) encode() []byte {
	var flags int32
	if e.Heading.IsSet {
		flags |= (1 << 0)
	}
	if e.Period.IsSet {
		flags |= (1 << 1)
	}
	if e.ProximityNotificationRadius.IsSet {
		flags |= (1 << 3)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaGeo)
	x.Int(flags)
	x.Object(e.GeoPoint)
	if e.Heading.IsSet {
		x.Int(e.Heading.Value)
	}
	if e.Period.IsSet {
		x.Int(e.Period.Value)
	}
	if e.ProximityNotificationRadius.IsSet {
		x.Int(e.ProximityNotificationRadius.Value)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaVenue) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaVenue)
	x.Int(flags)
	x.Object(e.GeoPoint)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaContact) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaContact)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Vcard)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageGame) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageGame)
	x.Int(flags)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaInvoice) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaInvoice)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	x.StringBytes(e.Payload)
	x.String(e.Provider)
	x.Object(e.ProviderData)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaWebPage) encode() []byte {
	var flags int32
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.ForceLargeMedia {
		flags |= (1 << 4)
	}
	if e.ForceSmallMedia {
		flags |= (1 << 5)
	}
	if e.Optional {
		flags |= (1 << 6)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaWebPage)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	x.String(e.Url)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineResult) encode() []byte {
	var flags int32
	if e.Title.IsSet {
		flags |= (1 << 1)
	}
	if e.Description.IsSet {
		flags |= (1 << 2)
	}
	if e.Url.IsSet {
		flags |= (1 << 3)
	}
	if e.Thumb != nil {
		flags |= (1 << 4)
	}
	if e.Content != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineResult)
	x.Int(flags)
	x.String(e.ID)
	x.String(e.Type)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Description.IsSet {
		x.String(e.Description.Value)
	}
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	if e.Content != nil {
		x.Object(e.Content)
	}
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_inputBotInlineResultPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineResultPhoto)
	x.String(e.ID)
	x.String(e.Type)
	x.Object(e.Photo)
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_inputBotInlineResultDocument) encode() []byte {
	var flags int32
	if e.Title.IsSet {
		flags |= (1 << 1)
	}
	if e.Description.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineResultDocument)
	x.Int(flags)
	x.String(e.ID)
	x.String(e.Type)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Description.IsSet {
		x.String(e.Description.Value)
	}
	x.Object(e.Document)
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_inputBotInlineResultGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineResultGame)
	x.String(e.ID)
	x.String(e.ShortName)
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_botInlineMessageMediaAuto) encode() []byte {
	var flags int32
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaAuto)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageText) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 0)
	}
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageText)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaGeo) encode() []byte {
	var flags int32
	if e.Heading.IsSet {
		flags |= (1 << 0)
	}
	if e.Period.IsSet {
		flags |= (1 << 1)
	}
	if e.ProximityNotificationRadius.IsSet {
		flags |= (1 << 3)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaGeo)
	x.Int(flags)
	x.Object(e.Geo)
	if e.Heading.IsSet {
		x.Int(e.Heading.Value)
	}
	if e.Period.IsSet {
		x.Int(e.Period.Value)
	}
	if e.ProximityNotificationRadius.IsSet {
		x.Int(e.ProximityNotificationRadius.Value)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaVenue) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaVenue)
	x.Int(flags)
	x.Object(e.Geo)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaContact) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaContact)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Vcard)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaInvoice) encode() []byte {
	var flags int32
	if e.ShippingAddressRequested {
		flags |= (1 << 1)
	}
	if e.Test {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaInvoice)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaWebPage) encode() []byte {
	var flags int32
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.ForceLargeMedia {
		flags |= (1 << 4)
	}
	if e.ForceSmallMedia {
		flags |= (1 << 5)
	}
	if e.Manual {
		flags |= (1 << 7)
	}
	if e.Safe {
		flags |= (1 << 8)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaWebPage)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	x.String(e.Url)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineResult) encode() []byte {
	var flags int32
	if e.Title.IsSet {
		flags |= (1 << 1)
	}
	if e.Description.IsSet {
		flags |= (1 << 2)
	}
	if e.Url.IsSet {
		flags |= (1 << 3)
	}
	if e.Thumb != nil {
		flags |= (1 << 4)
	}
	if e.Content != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineResult)
	x.Int(flags)
	x.String(e.ID)
	x.String(e.Type)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Description.IsSet {
		x.String(e.Description.Value)
	}
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	if e.Content != nil {
		x.Object(e.Content)
	}
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_botInlineMediaResult) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.Document != nil {
		flags |= (1 << 1)
	}
	if e.Title.IsSet {
		flags |= (1 << 2)
	}
	if e.Description.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMediaResult)
	x.Int(flags)
	x.String(e.ID)
	x.String(e.Type)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Description.IsSet {
		x.String(e.Description.Value)
	}
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_messages_botResults) encode() []byte {
	var flags int32
	if e.Gallery {
		flags |= (1 << 0)
	}
	if e.NextOffset.IsSet {
		flags |= (1 << 1)
	}
	if e.SwitchPm != nil {
		flags |= (1 << 2)
	}
	if e.SwitchWebview != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_botResults)
	x.Int(flags)
	x.Long(e.QueryID)
	if e.NextOffset.IsSet {
		x.String(e.NextOffset.Value)
	}
	if e.SwitchPm != nil {
		x.Object(e.SwitchPm)
	}
	if e.SwitchWebview != nil {
		x.Object(e.SwitchWebview)
	}
	x.Vector(e.Results)
	x.Int(e.CacheTime)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_exportedMessageLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_exportedMessageLink)
	x.String(e.Link)
	x.String(e.Html)
	return x.buf
}

func (e TL_messageFwdHeader) encode() []byte {
	var flags int32
	if e.Imported {
		flags |= (1 << 7)
	}
	if e.FromID != nil {
		flags |= (1 << 0)
	}
	if e.FromName.IsSet {
		flags |= (1 << 5)
	}
	if e.ChannelPost.IsSet {
		flags |= (1 << 2)
	}
	if e.PostAuthor.IsSet {
		flags |= (1 << 3)
	}
	if e.SavedFromPeer != nil {
		flags |= (1 << 4)
	}
	if e.SavedFromMsgID.IsSet {
		flags |= (1 << 4)
	}
	if e.PsaType.IsSet {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageFwdHeader)
	x.Int(flags)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	if e.FromName.IsSet {
		x.String(e.FromName.Value)
	}
	x.Int(e.Date)
	if e.ChannelPost.IsSet {
		x.Int(e.ChannelPost.Value)
	}
	if e.PostAuthor.IsSet {
		x.String(e.PostAuthor.Value)
	}
	if e.SavedFromPeer != nil {
		x.Object(e.SavedFromPeer)
	}
	if e.SavedFromMsgID.IsSet {
		x.Int(e.SavedFromMsgID.Value)
	}
	if e.PsaType.IsSet {
		x.String(e.PsaType.Value)
	}
	return x.buf
}

func (e TL_auth_codeTypeSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeSms)
	return x.buf
}

func (e TL_auth_codeTypeCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeCall)
	return x.buf
}

func (e TL_auth_codeTypeFlashCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeFlashCall)
	return x.buf
}

func (e TL_auth_codeTypeMissedCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeMissedCall)
	return x.buf
}

func (e TL_auth_codeTypeFragmentSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeFragmentSms)
	return x.buf
}

func (e TL_auth_sentCodeTypeApp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeApp)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeSms)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeCall)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeFlashCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeFlashCall)
	x.String(e.Pattern)
	return x.buf
}

func (e TL_auth_sentCodeTypeMissedCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeMissedCall)
	x.String(e.Prefix)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeEmailCode) encode() []byte {
	var flags int32
	if e.AppleSigninAllowed {
		flags |= (1 << 0)
	}
	if e.GoogleSigninAllowed {
		flags |= (1 << 1)
	}
	if e.ResetAvailablePeriod.IsSet {
		flags |= (1 << 3)
	}
	if e.ResetPendingDate.IsSet {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeEmailCode)
	x.Int(flags)
	x.String(e.EmailPattern)
	x.Int(e.Length)
	if e.ResetAvailablePeriod.IsSet {
		x.Int(e.ResetAvailablePeriod.Value)
	}
	if e.ResetPendingDate.IsSet {
		x.Int(e.ResetPendingDate.Value)
	}
	return x.buf
}

func (e TL_auth_sentCodeTypeSetUpEmailRequired) encode() []byte {
	var flags int32
	if e.AppleSigninAllowed {
		flags |= (1 << 0)
	}
	if e.GoogleSigninAllowed {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeSetUpEmailRequired)
	x.Int(flags)
	return x.buf
}

func (e TL_auth_sentCodeTypeFragmentSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeFragmentSms)
	x.String(e.Url)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeFirebaseSms) encode() []byte {
	var flags int32
	if e.Nonce != nil {
		flags |= (1 << 0)
	}
	if e.Receipt.IsSet {
		flags |= (1 << 1)
	}
	if e.PushTimeout.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeFirebaseSms)
	x.Int(flags)
	if e.Nonce != nil {
		x.StringBytes(e.Nonce)
	}
	if e.Receipt.IsSet {
		x.String(e.Receipt.Value)
	}
	if e.PushTimeout.IsSet {
		x.Int(e.PushTimeout.Value)
	}
	x.Int(e.Length)
	return x.buf
}

func (e TL_messages_botCallbackAnswer) encode() []byte {
	var flags int32
	if e.Alert {
		flags |= (1 << 1)
	}
	if e.HasUrl {
		flags |= (1 << 3)
	}
	if e.NativeUi {
		flags |= (1 << 4)
	}
	if e.Message.IsSet {
		flags |= (1 << 0)
	}
	if e.Url.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_botCallbackAnswer)
	x.Int(flags)
	if e.Message.IsSet {
		x.String(e.Message.Value)
	}
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	x.Int(e.CacheTime)
	return x.buf
}

func (e TL_messages_messageEditData) encode() []byte {
	var flags int32
	if e.Caption {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messageEditData)
	x.Int(flags)
	return x.buf
}

func (e TL_inputBotInlineMessageID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageID)
	x.Int(e.DcID)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputBotInlineMessageID64) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageID64)
	x.Int(e.DcID)
	x.Long(e.OwnerID)
	x.Int(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inlineBotSwitchPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineBotSwitchPM)
	x.String(e.Text)
	x.String(e.StartParam)
	return x.buf
}

func (e TL_messages_peerDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_peerDialogs)
	x.Vector(e.Dialogs)
	x.Vector(e.Messages)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	x.Object(e.State)
	return x.buf
}

func (e TL_topPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeer)
	x.Object(e.Peer)
	x.Double(e.Rating)
	return x.buf
}

func (e TL_topPeerCategoryBotsPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryBotsPM)
	return x.buf
}

func (e TL_topPeerCategoryBotsInline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryBotsInline)
	return x.buf
}

func (e TL_topPeerCategoryCorrespondents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryCorrespondents)
	return x.buf
}

func (e TL_topPeerCategoryGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryGroups)
	return x.buf
}

func (e TL_topPeerCategoryChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryChannels)
	return x.buf
}

func (e TL_topPeerCategoryPhoneCalls) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryPhoneCalls)
	return x.buf
}

func (e TL_topPeerCategoryForwardUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryForwardUsers)
	return x.buf
}

func (e TL_topPeerCategoryForwardChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryForwardChats)
	return x.buf
}

func (e TL_topPeerCategoryPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryPeers)
	x.Object(e.Category)
	x.Int(e.Count)
	x.Vector(e.Peers)
	return x.buf
}

func (e TL_contacts_topPeersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_topPeersNotModified)
	return x.buf
}

func (e TL_contacts_topPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_topPeers)
	x.Vector(e.Categories)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_contacts_topPeersDisabled) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_topPeersDisabled)
	return x.buf
}

func (e TL_draftMessageEmpty) encode() []byte {
	var flags int32
	if e.Date.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_draftMessageEmpty)
	x.Int(flags)
	if e.Date.IsSet {
		x.Int(e.Date.Value)
	}
	return x.buf
}

func (e TL_draftMessage) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.InvertMedia {
		flags |= (1 << 6)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 4)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.Media != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_draftMessage)
	x.Int(flags)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.Media != nil {
		x.Object(e.Media)
	}
	x.Int(e.Date)
	return x.buf
}

func (e TL_messages_featuredStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_featuredStickersNotModified)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messages_featuredStickers) encode() []byte {
	var flags int32
	if e.Premium {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_featuredStickers)
	x.Int(flags)
	x.Long(e.Hash)
	x.Int(e.Count)
	x.Vector(e.Sets)
	x.VectorLong(e.Unread)
	return x.buf
}

func (e TL_messages_recentStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_recentStickersNotModified)
	return x.buf
}

func (e TL_messages_recentStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_recentStickers)
	x.Long(e.Hash)
	x.Vector(e.Packs)
	x.Vector(e.Stickers)
	x.VectorInt(e.Dates)
	return x.buf
}

func (e TL_messages_archivedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_archivedStickers)
	x.Int(e.Count)
	x.Vector(e.Sets)
	return x.buf
}

func (e TL_messages_stickerSetInstallResultSuccess) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickerSetInstallResultSuccess)
	return x.buf
}

func (e TL_messages_stickerSetInstallResultArchive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickerSetInstallResultArchive)
	x.Vector(e.Sets)
	return x.buf
}

func (e TL_stickerSetCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSetCovered)
	x.Object(e.Set)
	x.Object(e.Cover)
	return x.buf
}

func (e TL_stickerSetMultiCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSetMultiCovered)
	x.Object(e.Set)
	x.Vector(e.Covers)
	return x.buf
}

func (e TL_stickerSetFullCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSetFullCovered)
	x.Object(e.Set)
	x.Vector(e.Packs)
	x.Vector(e.Keywords)
	x.Vector(e.Documents)
	return x.buf
}

func (e TL_stickerSetNoCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSetNoCovered)
	x.Object(e.Set)
	return x.buf
}

func (e TL_maskCoords) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_maskCoords)
	x.Int(e.N)
	x.Double(e.X)
	x.Double(e.Y)
	x.Double(e.Zoom)
	return x.buf
}

func (e TL_inputStickeredMediaPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickeredMediaPhoto)
	x.Object(e.ID)
	return x.buf
}

func (e TL_inputStickeredMediaDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickeredMediaDocument)
	x.Object(e.ID)
	return x.buf
}

func (e TL_game) encode() []byte {
	var flags int32
	if e.Document != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_game)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.ShortName)
	x.String(e.Title)
	x.String(e.Description)
	x.Object(e.Photo)
	if e.Document != nil {
		x.Object(e.Document)
	}
	return x.buf
}

func (e TL_inputGameID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGameID)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputGameShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGameShortName)
	x.Object(e.BotID)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_highScore) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_highScore)
	x.Int(e.Pos)
	x.Long(e.UserID)
	x.Int(e.Score)
	return x.buf
}

func (e TL_messages_highScores) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_highScores)
	x.Vector(e.Scores)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_textEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textEmpty)
	return x.buf
}

func (e TL_textPlain) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textPlain)
	x.String(e.Text)
	return x.buf
}

func (e TL_textBold) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textBold)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textItalic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textItalic)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textUnderline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textUnderline)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textStrike) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textStrike)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textFixed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textFixed)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textUrl)
	x.Object(e.Text)
	x.String(e.Url)
	x.Long(e.WebpageID)
	return x.buf
}

func (e TL_textEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textEmail)
	x.Object(e.Text)
	x.String(e.Email)
	return x.buf
}

func (e TL_textConcat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textConcat)
	x.Vector(e.Texts)
	return x.buf
}

func (e TL_textSubscript) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textSubscript)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textSuperscript) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textSuperscript)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textMarked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textMarked)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textPhone)
	x.Object(e.Text)
	x.String(e.Phone)
	return x.buf
}

func (e TL_textImage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textImage)
	x.Long(e.DocumentID)
	x.Int(e.W)
	x.Int(e.H)
	return x.buf
}

func (e TL_textAnchor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textAnchor)
	x.Object(e.Text)
	x.String(e.Name)
	return x.buf
}

func (e TL_pageBlockUnsupported) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockUnsupported)
	return x.buf
}

func (e TL_pageBlockTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockTitle)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockSubtitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockSubtitle)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockAuthorDate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockAuthorDate)
	x.Object(e.Author)
	x.Int(e.PublishedDate)
	return x.buf
}

func (e TL_pageBlockHeader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockHeader)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockSubheader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockSubheader)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockParagraph) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockParagraph)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockPreformatted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockPreformatted)
	x.Object(e.Text)
	x.String(e.Language)
	return x.buf
}

func (e TL_pageBlockFooter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockFooter)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockDivider) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockDivider)
	return x.buf
}

func (e TL_pageBlockAnchor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockAnchor)
	x.String(e.Name)
	return x.buf
}

func (e TL_pageBlockList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockList)
	x.Vector(e.Items)
	return x.buf
}

func (e TL_pageBlockBlockquote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockBlockquote)
	x.Object(e.Text)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockPullquote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockPullquote)
	x.Object(e.Text)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockPhoto) encode() []byte {
	var flags int32
	if e.Url.IsSet {
		flags |= (1 << 0)
	}
	if e.WebpageID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockPhoto)
	x.Int(flags)
	x.Long(e.PhotoID)
	x.Object(e.Caption)
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	if e.WebpageID.IsSet {
		x.Long(e.WebpageID.Value)
	}
	return x.buf
}

func (e TL_pageBlockVideo) encode() []byte {
	var flags int32
	if e.Autoplay {
		flags |= (1 << 0)
	}
	if e.Loop {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockVideo)
	x.Int(flags)
	x.Long(e.VideoID)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockCover) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockCover)
	x.Object(e.Cover)
	return x.buf
}

func (e TL_pageBlockEmbed) encode() []byte {
	var flags int32
	if e.FullWidth {
		flags |= (1 << 0)
	}
	if e.AllowScrolling {
		flags |= (1 << 3)
	}
	if e.Url.IsSet {
		flags |= (1 << 1)
	}
	if e.Html.IsSet {
		flags |= (1 << 2)
	}
	if e.PosterPhotoID.IsSet {
		flags |= (1 << 4)
	}
	if e.W.IsSet {
		flags |= (1 << 5)
	}
	if e.H.IsSet {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockEmbed)
	x.Int(flags)
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	if e.Html.IsSet {
		x.String(e.Html.Value)
	}
	if e.PosterPhotoID.IsSet {
		x.Long(e.PosterPhotoID.Value)
	}
	if e.W.IsSet {
		x.Int(e.W.Value)
	}
	if e.H.IsSet {
		x.Int(e.H.Value)
	}
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockEmbedPost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockEmbedPost)
	x.String(e.Url)
	x.Long(e.WebpageID)
	x.Long(e.AuthorPhotoID)
	x.String(e.Author)
	x.Int(e.Date)
	x.Vector(e.Blocks)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockCollage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockCollage)
	x.Vector(e.Items)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockSlideshow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockSlideshow)
	x.Vector(e.Items)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_pageBlockAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockAudio)
	x.Long(e.AudioID)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockKicker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockKicker)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockTable) encode() []byte {
	var flags int32
	if e.Bordered {
		flags |= (1 << 0)
	}
	if e.Striped {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockTable)
	x.Int(flags)
	x.Object(e.Title)
	x.Vector(e.Rows)
	return x.buf
}

func (e TL_pageBlockOrderedList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockOrderedList)
	x.Vector(e.Items)
	return x.buf
}

func (e TL_pageBlockDetails) encode() []byte {
	var flags int32
	if e.Open {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockDetails)
	x.Int(flags)
	x.Vector(e.Blocks)
	x.Object(e.Title)
	return x.buf
}

func (e TL_pageBlockRelatedArticles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockRelatedArticles)
	x.Object(e.Title)
	x.Vector(e.Articles)
	return x.buf
}

func (e TL_pageBlockMap) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockMap)
	x.Object(e.Geo)
	x.Int(e.Zoom)
	x.Int(e.W)
	x.Int(e.H)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_phoneCallDiscardReasonMissed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscardReasonMissed)
	return x.buf
}

func (e TL_phoneCallDiscardReasonDisconnect) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscardReasonDisconnect)
	return x.buf
}

func (e TL_phoneCallDiscardReasonHangup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscardReasonHangup)
	return x.buf
}

func (e TL_phoneCallDiscardReasonBusy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscardReasonBusy)
	return x.buf
}

func (e TL_dataJSON) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dataJSON)
	x.String(e.Data)
	return x.buf
}

func (e TL_labeledPrice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_labeledPrice)
	x.String(e.Label)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_invoice) encode() []byte {
	var flags int32
	if e.Test {
		flags |= (1 << 0)
	}
	if e.NameRequested {
		flags |= (1 << 1)
	}
	if e.PhoneRequested {
		flags |= (1 << 2)
	}
	if e.EmailRequested {
		flags |= (1 << 3)
	}
	if e.ShippingAddressRequested {
		flags |= (1 << 4)
	}
	if e.Flexible {
		flags |= (1 << 5)
	}
	if e.PhoneToProvider {
		flags |= (1 << 6)
	}
	if e.EmailToProvider {
		flags |= (1 << 7)
	}
	if e.Recurring {
		flags |= (1 << 9)
	}
	if e.MaxTipAmount.IsSet {
		flags |= (1 << 8)
	}
	if e.SuggestedTipAmounts != nil {
		flags |= (1 << 8)
	}
	if e.TermsUrl.IsSet {
		flags |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_invoice)
	x.Int(flags)
	x.String(e.Currency)
	x.Vector(e.Prices)
	if e.MaxTipAmount.IsSet {
		x.Long(e.MaxTipAmount.Value)
	}
	if e.SuggestedTipAmounts != nil {
		x.VectorLong(e.SuggestedTipAmounts)
	}
	if e.TermsUrl.IsSet {
		x.String(e.TermsUrl.Value)
	}
	return x.buf
}

func (e TL_paymentCharge) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_paymentCharge)
	x.String(e.ID)
	x.String(e.ProviderChargeID)
	return x.buf
}

func (e TL_postAddress) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_postAddress)
	x.String(e.StreetLine1)
	x.String(e.StreetLine2)
	x.String(e.City)
	x.String(e.State)
	x.String(e.CountryIso2)
	x.String(e.PostCode)
	return x.buf
}

func (e TL_paymentRequestedInfo) encode() []byte {
	var flags int32
	if e.Name.IsSet {
		flags |= (1 << 0)
	}
	if e.Phone.IsSet {
		flags |= (1 << 1)
	}
	if e.Email.IsSet {
		flags |= (1 << 2)
	}
	if e.ShippingAddress != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_paymentRequestedInfo)
	x.Int(flags)
	if e.Name.IsSet {
		x.String(e.Name.Value)
	}
	if e.Phone.IsSet {
		x.String(e.Phone.Value)
	}
	if e.Email.IsSet {
		x.String(e.Email.Value)
	}
	if e.ShippingAddress != nil {
		x.Object(e.ShippingAddress)
	}
	return x.buf
}

func (e TL_paymentSavedCredentialsCard) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_paymentSavedCredentialsCard)
	x.String(e.ID)
	x.String(e.Title)
	return x.buf
}

func (e TL_webDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_webDocument)
	x.String(e.Url)
	x.Long(e.AccessHash)
	x.Int(e.Size)
	x.String(e.MimeType)
	x.Vector(e.Attributes)
	return x.buf
}

func (e TL_webDocumentNoProxy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_webDocumentNoProxy)
	x.String(e.Url)
	x.Int(e.Size)
	x.String(e.MimeType)
	x.Vector(e.Attributes)
	return x.buf
}

func (e TL_inputWebDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWebDocument)
	x.String(e.Url)
	x.Int(e.Size)
	x.String(e.MimeType)
	x.Vector(e.Attributes)
	return x.buf
}

func (e TL_inputWebFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWebFileLocation)
	x.String(e.Url)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputWebFileGeoPointLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWebFileGeoPointLocation)
	x.Object(e.GeoPoint)
	x.Long(e.AccessHash)
	x.Int(e.W)
	x.Int(e.H)
	x.Int(e.Zoom)
	x.Int(e.Scale)
	return x.buf
}

func (e TL_inputWebFileAudioAlbumThumbLocation) encode() []byte {
	var flags int32
	if e.Small {
		flags |= (1 << 2)
	}
	if e.Document != nil {
		flags |= (1 << 0)
	}
	if e.Title.IsSet {
		flags |= (1 << 1)
	}
	if e.Performer.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWebFileAudioAlbumThumbLocation)
	x.Int(flags)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Performer.IsSet {
		x.String(e.Performer.Value)
	}
	return x.buf
}

func (e TL_upload_webFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_webFile)
	x.Int(e.Size)
	x.String(e.MimeType)
	x.Object(e.FileType)
	x.Int(e.Mtime)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_payments_paymentForm) encode() []byte {
	var flags int32
	if e.CanSaveCredentials {
		flags |= (1 << 2)
	}
	if e.PasswordMissing {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 5)
	}
	if e.NativeProvider.IsSet {
		flags |= (1 << 4)
	}
	if e.NativeParams != nil {
		flags |= (1 << 4)
	}
	if e.AdditionalMethods != nil {
		flags |= (1 << 6)
	}
	if e.SavedInfo != nil {
		flags |= (1 << 0)
	}
	if e.SavedCredentials != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentForm)
	x.Int(flags)
	x.Long(e.FormID)
	x.Long(e.BotID)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	x.Long(e.ProviderID)
	x.String(e.Url)
	if e.NativeProvider.IsSet {
		x.String(e.NativeProvider.Value)
	}
	if e.NativeParams != nil {
		x.Object(e.NativeParams)
	}
	if e.AdditionalMethods != nil {
		x.Vector(e.AdditionalMethods)
	}
	if e.SavedInfo != nil {
		x.Object(e.SavedInfo)
	}
	if e.SavedCredentials != nil {
		x.Vector(e.SavedCredentials)
	}
	x.Vector(e.Users)
	return x.buf
}

func (e TL_payments_validatedRequestedInfo) encode() []byte {
	var flags int32
	if e.ID.IsSet {
		flags |= (1 << 0)
	}
	if e.ShippingOptions != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_validatedRequestedInfo)
	x.Int(flags)
	if e.ID.IsSet {
		x.String(e.ID.Value)
	}
	if e.ShippingOptions != nil {
		x.Vector(e.ShippingOptions)
	}
	return x.buf
}

func (e TL_payments_paymentResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentResult)
	x.Object(e.Updates)
	return x.buf
}

func (e TL_payments_paymentVerificationNeeded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentVerificationNeeded)
	x.String(e.Url)
	return x.buf
}

func (e TL_payments_paymentReceipt) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 2)
	}
	if e.Info != nil {
		flags |= (1 << 0)
	}
	if e.Shipping != nil {
		flags |= (1 << 1)
	}
	if e.TipAmount.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentReceipt)
	x.Int(flags)
	x.Int(e.Date)
	x.Long(e.BotID)
	x.Long(e.ProviderID)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	if e.Info != nil {
		x.Object(e.Info)
	}
	if e.Shipping != nil {
		x.Object(e.Shipping)
	}
	if e.TipAmount.IsSet {
		x.Long(e.TipAmount.Value)
	}
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	x.String(e.CredentialsTitle)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_payments_savedInfo) encode() []byte {
	var flags int32
	if e.HasSavedCredentials {
		flags |= (1 << 1)
	}
	if e.SavedInfo != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_savedInfo)
	x.Int(flags)
	if e.SavedInfo != nil {
		x.Object(e.SavedInfo)
	}
	return x.buf
}

func (e TL_inputPaymentCredentialsSaved) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPaymentCredentialsSaved)
	x.String(e.ID)
	x.StringBytes(e.TmpPassword)
	return x.buf
}

func (e TL_inputPaymentCredentials) encode() []byte {
	var flags int32
	if e.Save {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPaymentCredentials)
	x.Int(flags)
	x.Object(e.Data)
	return x.buf
}

func (e TL_inputPaymentCredentialsApplePay) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPaymentCredentialsApplePay)
	x.Object(e.PaymentData)
	return x.buf
}

func (e TL_inputPaymentCredentialsGooglePay) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPaymentCredentialsGooglePay)
	x.Object(e.PaymentToken)
	return x.buf
}

func (e TL_account_tmpPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_tmpPassword)
	x.StringBytes(e.TmpPassword)
	x.Int(e.ValidUntil)
	return x.buf
}

func (e TL_shippingOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_shippingOption)
	x.String(e.ID)
	x.String(e.Title)
	x.Vector(e.Prices)
	return x.buf
}

func (e TL_inputStickerSetItem) encode() []byte {
	var flags int32
	if e.MaskCoords != nil {
		flags |= (1 << 0)
	}
	if e.Keywords.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetItem)
	x.Int(flags)
	x.Object(e.Document)
	x.String(e.Emoji)
	if e.MaskCoords != nil {
		x.Object(e.MaskCoords)
	}
	if e.Keywords.IsSet {
		x.String(e.Keywords.Value)
	}
	return x.buf
}

func (e TL_inputPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhoneCall)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_phoneCallEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_phoneCallWaiting) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 6)
	}
	if e.ReceiveDate.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallWaiting)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.Object(e.Protocol)
	if e.ReceiveDate.IsSet {
		x.Int(e.ReceiveDate.Value)
	}
	return x.buf
}

func (e TL_phoneCallRequested) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallRequested)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GAHash)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phoneCallAccepted) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallAccepted)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GB)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phoneCall) encode() []byte {
	var flags int32
	if e.P2pAllowed {
		flags |= (1 << 5)
	}
	if e.Video {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCall)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GAOrB)
	x.Long(e.KeyFingerprint)
	x.Object(e.Protocol)
	x.Vector(e.Connections)
	x.Int(e.StartDate)
	return x.buf
}

func (e TL_phoneCallDiscarded) encode() []byte {
	var flags int32
	if e.NeedRating {
		flags |= (1 << 2)
	}
	if e.NeedDebug {
		flags |= (1 << 3)
	}
	if e.Video {
		flags |= (1 << 6)
	}
	if e.Reason != nil {
		flags |= (1 << 0)
	}
	if e.Duration.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscarded)
	x.Int(flags)
	x.Long(e.ID)
	if e.Reason != nil {
		x.Object(e.Reason)
	}
	if e.Duration.IsSet {
		x.Int(e.Duration.Value)
	}
	return x.buf
}

func (e TL_phoneConnection) encode() []byte {
	var flags int32
	if e.Tcp {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneConnection)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.Ip)
	x.String(e.Ipv6)
	x.Int(e.Port)
	x.StringBytes(e.PeerTag)
	return x.buf
}

func (e TL_phoneConnectionWebrtc) encode() []byte {
	var flags int32
	if e.Turn {
		flags |= (1 << 0)
	}
	if e.Stun {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneConnectionWebrtc)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.Ip)
	x.String(e.Ipv6)
	x.Int(e.Port)
	x.String(e.Username)
	x.String(e.Password)
	return x.buf
}

func (e TL_phoneCallProtocol) encode() []byte {
	var flags int32
	if e.UdpP2p {
		flags |= (1 << 0)
	}
	if e.UdpReflector {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallProtocol)
	x.Int(flags)
	x.Int(e.MinLayer)
	x.Int(e.MaxLayer)
	x.VectorString(e.LibraryVersions)
	return x.buf
}

func (e TL_phone_phoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_phoneCall)
	x.Object(e.PhoneCall)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_upload_cdnFileReuploadNeeded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_cdnFileReuploadNeeded)
	x.StringBytes(e.RequestToken)
	return x.buf
}

func (e TL_upload_cdnFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_cdnFile)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_cdnPublicKey) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_cdnPublicKey)
	x.Int(e.DcID)
	x.String(e.PublicKey)
	return x.buf
}

func (e TL_cdnConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_cdnConfig)
	x.Vector(e.PublicKeys)
	return x.buf
}

func (e TL_langPackString) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackString)
	x.String(e.Key)
	x.String(e.Value)
	return x.buf
}

func (e TL_langPackStringPluralized) encode() []byte {
	var flags int32
	if e.ZeroValue.IsSet {
		flags |= (1 << 0)
	}
	if e.OneValue.IsSet {
		flags |= (1 << 1)
	}
	if e.TwoValue.IsSet {
		flags |= (1 << 2)
	}
	if e.FewValue.IsSet {
		flags |= (1 << 3)
	}
	if e.ManyValue.IsSet {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackStringPluralized)
	x.Int(flags)
	x.String(e.Key)
	if e.ZeroValue.IsSet {
		x.String(e.ZeroValue.Value)
	}
	if e.OneValue.IsSet {
		x.String(e.OneValue.Value)
	}
	if e.TwoValue.IsSet {
		x.String(e.TwoValue.Value)
	}
	if e.FewValue.IsSet {
		x.String(e.FewValue.Value)
	}
	if e.ManyValue.IsSet {
		x.String(e.ManyValue.Value)
	}
	x.String(e.OtherValue)
	return x.buf
}

func (e TL_langPackStringDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackStringDeleted)
	x.String(e.Key)
	return x.buf
}

func (e TL_langPackDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackDifference)
	x.String(e.LangCode)
	x.Int(e.FromVersion)
	x.Int(e.Version)
	x.Vector(e.Strings)
	return x.buf
}

func (e TL_langPackLanguage) encode() []byte {
	var flags int32
	if e.Official {
		flags |= (1 << 0)
	}
	if e.Rtl {
		flags |= (1 << 2)
	}
	if e.Beta {
		flags |= (1 << 3)
	}
	if e.BaseLangCode.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackLanguage)
	x.Int(flags)
	x.String(e.Name)
	x.String(e.NativeName)
	x.String(e.LangCode)
	if e.BaseLangCode.IsSet {
		x.String(e.BaseLangCode.Value)
	}
	x.String(e.PluralCode)
	x.Int(e.StringsCount)
	x.Int(e.TranslatedCount)
	x.String(e.TranslationsUrl)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeTitle)
	x.String(e.PrevValue)
	x.String(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeAbout)
	x.String(e.PrevValue)
	x.String(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeUsername)
	x.String(e.PrevValue)
	x.String(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangePhoto)
	x.Object(e.PrevPhoto)
	x.Object(e.NewPhoto)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleInvites)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleSignatures) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleSignatures)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionUpdatePinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionUpdatePinned)
	x.Object(e.Message)
	return x.buf
}

func (e TL_channelAdminLogEventActionEditMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionEditMessage)
	x.Object(e.PrevMessage)
	x.Object(e.NewMessage)
	return x.buf
}

func (e TL_channelAdminLogEventActionDeleteMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionDeleteMessage)
	x.Object(e.Message)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantJoin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantJoin)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantLeave) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantLeave)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantInvite)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantToggleBan) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantToggleBan)
	x.Object(e.PrevParticipant)
	x.Object(e.NewParticipant)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantToggleAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantToggleAdmin)
	x.Object(e.PrevParticipant)
	x.Object(e.NewParticipant)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeStickerSet)
	x.Object(e.PrevStickerset)
	x.Object(e.NewStickerset)
	return x.buf
}

func (e TL_channelAdminLogEventActionTogglePreHistoryHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionTogglePreHistoryHidden)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionDefaultBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionDefaultBannedRights)
	x.Object(e.PrevBannedRights)
	x.Object(e.NewBannedRights)
	return x.buf
}

func (e TL_channelAdminLogEventActionStopPoll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionStopPoll)
	x.Object(e.Message)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeLinkedChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeLinkedChat)
	x.Long(e.PrevValue)
	x.Long(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeLocation)
	x.Object(e.PrevValue)
	x.Object(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleSlowMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleSlowMode)
	x.Int(e.PrevValue)
	x.Int(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionStartGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionStartGroupCall)
	x.Object(e.Call)
	return x.buf
}

func (e TL_channelAdminLogEventActionDiscardGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionDiscardGroupCall)
	x.Object(e.Call)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantMute) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantMute)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantUnmute) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantUnmute)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleGroupCallSetting) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleGroupCallSetting)
	x.Bool(e.JoinMuted)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantJoinByInvite) encode() []byte {
	var flags int32
	if e.ViaChatlist {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantJoinByInvite)
	x.Int(flags)
	x.Object(e.Invite)
	return x.buf
}

func (e TL_channelAdminLogEventActionExportedInviteDelete) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionExportedInviteDelete)
	x.Object(e.Invite)
	return x.buf
}

func (e TL_channelAdminLogEventActionExportedInviteRevoke) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionExportedInviteRevoke)
	x.Object(e.Invite)
	return x.buf
}

func (e TL_channelAdminLogEventActionExportedInviteEdit) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionExportedInviteEdit)
	x.Object(e.PrevInvite)
	x.Object(e.NewInvite)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantVolume) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantVolume)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeHistoryTTL)
	x.Int(e.PrevValue)
	x.Int(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantJoinByRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantJoinByRequest)
	x.Object(e.Invite)
	x.Long(e.ApprovedBy)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleNoForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleNoForwards)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionSendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionSendMessage)
	x.Object(e.Message)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeAvailableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeAvailableReactions)
	x.Object(e.PrevValue)
	x.Object(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeUsernames)
	x.VectorString(e.PrevValue)
	x.VectorString(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleForum) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleForum)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionCreateTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionCreateTopic)
	x.Object(e.Topic)
	return x.buf
}

func (e TL_channelAdminLogEventActionEditTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionEditTopic)
	x.Object(e.PrevTopic)
	x.Object(e.NewTopic)
	return x.buf
}

func (e TL_channelAdminLogEventActionDeleteTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionDeleteTopic)
	x.Object(e.Topic)
	return x.buf
}

func (e TL_channelAdminLogEventActionPinTopic) encode() []byte {
	var flags int32
	if e.PrevTopic != nil {
		flags |= (1 << 0)
	}
	if e.NewTopic != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionPinTopic)
	x.Int(flags)
	if e.PrevTopic != nil {
		x.Object(e.PrevTopic)
	}
	if e.NewTopic != nil {
		x.Object(e.NewTopic)
	}
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleAntiSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleAntiSpam)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeColor)
	x.Int(e.PrevValue)
	x.Int(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeBackgroundEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeBackgroundEmoji)
	x.Long(e.PrevValue)
	x.Long(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEvent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEvent)
	x.Long(e.ID)
	x.Int(e.Date)
	x.Long(e.UserID)
	x.Object(e.Action)
	return x.buf
}

func (e TL_channels_adminLogResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_adminLogResults)
	x.Vector(e.Events)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_channelAdminLogEventsFilter) encode() []byte {
	var flags int32
	if e.Join {
		flags |= (1 << 0)
	}
	if e.Leave {
		flags |= (1 << 1)
	}
	if e.Invite {
		flags |= (1 << 2)
	}
	if e.Ban {
		flags |= (1 << 3)
	}
	if e.Unban {
		flags |= (1 << 4)
	}
	if e.Kick {
		flags |= (1 << 5)
	}
	if e.Unkick {
		flags |= (1 << 6)
	}
	if e.Promote {
		flags |= (1 << 7)
	}
	if e.Demote {
		flags |= (1 << 8)
	}
	if e.Info {
		flags |= (1 << 9)
	}
	if e.Settings {
		flags |= (1 << 10)
	}
	if e.Pinned {
		flags |= (1 << 11)
	}
	if e.Edit {
		flags |= (1 << 12)
	}
	if e.Delete {
		flags |= (1 << 13)
	}
	if e.GroupCall {
		flags |= (1 << 14)
	}
	if e.Invites {
		flags |= (1 << 15)
	}
	if e.Send {
		flags |= (1 << 16)
	}
	if e.Forums {
		flags |= (1 << 17)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventsFilter)
	x.Int(flags)
	return x.buf
}

func (e TL_popularContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_popularContact)
	x.Long(e.ClientID)
	x.Int(e.Importers)
	return x.buf
}

func (e TL_messages_favedStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_favedStickersNotModified)
	return x.buf
}

func (e TL_messages_favedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_favedStickers)
	x.Long(e.Hash)
	x.Vector(e.Packs)
	x.Vector(e.Stickers)
	return x.buf
}

func (e TL_recentMeUrlUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeUrlUnknown)
	x.String(e.Url)
	return x.buf
}

func (e TL_recentMeUrlUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeUrlUser)
	x.String(e.Url)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_recentMeUrlChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeUrlChat)
	x.String(e.Url)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_recentMeUrlChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeUrlChatInvite)
	x.String(e.Url)
	x.Object(e.ChatInvite)
	return x.buf
}

func (e TL_recentMeUrlStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeUrlStickerSet)
	x.String(e.Url)
	x.Object(e.Set)
	return x.buf
}

func (e TL_help_recentMeUrls) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_recentMeUrls)
	x.Vector(e.Urls)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_inputSingleMedia) encode() []byte {
	var flags int32
	if e.Entities != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSingleMedia)
	x.Int(flags)
	x.Object(e.Media)
	x.Long(e.RandomID)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	return x.buf
}

func (e TL_webAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_webAuthorization)
	x.Long(e.Hash)
	x.Long(e.BotID)
	x.String(e.Domain)
	x.String(e.Browser)
	x.String(e.Platform)
	x.Int(e.DateCreated)
	x.Int(e.DateActive)
	x.String(e.Ip)
	x.String(e.Region)
	return x.buf
}

func (e TL_account_webAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_webAuthorizations)
	x.Vector(e.Authorizations)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_inputMessageID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessageID)
	x.Int(e.ID)
	return x.buf
}

func (e TL_inputMessageReplyTo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessageReplyTo)
	x.Int(e.ID)
	return x.buf
}

func (e TL_inputMessagePinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagePinned)
	return x.buf
}

func (e TL_inputMessageCallbackQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessageCallbackQuery)
	x.Int(e.ID)
	x.Long(e.QueryID)
	return x.buf
}

func (e TL_inputDialogPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDialogPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_inputDialogPeerFolder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDialogPeerFolder)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_dialogPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_dialogPeerFolder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogPeerFolder)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_messages_foundStickerSetsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_foundStickerSetsNotModified)
	return x.buf
}

func (e TL_messages_foundStickerSets) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_foundStickerSets)
	x.Long(e.Hash)
	x.Vector(e.Sets)
	return x.buf
}

func (e TL_fileHash) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_fileHash)
	x.Long(e.Offset)
	x.Int(e.Limit)
	x.StringBytes(e.Hash)
	return x.buf
}

func (e TL_inputClientProxy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputClientProxy)
	x.String(e.Address)
	x.Int(e.Port)
	return x.buf
}

func (e TL_help_termsOfServiceUpdateEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_termsOfServiceUpdateEmpty)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_help_termsOfServiceUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_termsOfServiceUpdate)
	x.Int(e.Expires)
	x.Object(e.TermsOfService)
	return x.buf
}

func (e TL_inputSecureFileUploaded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSecureFileUploaded)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.String(e.Md5Checksum)
	x.StringBytes(e.FileHash)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_inputSecureFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSecureFile)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_secureFileEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureFileEmpty)
	return x.buf
}

func (e TL_secureFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureFile)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Long(e.Size)
	x.Int(e.DcID)
	x.Int(e.Date)
	x.StringBytes(e.FileHash)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_secureData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureData)
	x.StringBytes(e.Data)
	x.StringBytes(e.DataHash)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_securePlainPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePlainPhone)
	x.String(e.Phone)
	return x.buf
}

func (e TL_securePlainEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePlainEmail)
	x.String(e.Email)
	return x.buf
}

func (e TL_secureValueTypePersonalDetails) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypePersonalDetails)
	return x.buf
}

func (e TL_secureValueTypePassport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypePassport)
	return x.buf
}

func (e TL_secureValueTypeDriverLicense) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeDriverLicense)
	return x.buf
}

func (e TL_secureValueTypeIdentityCard) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeIdentityCard)
	return x.buf
}

func (e TL_secureValueTypeInternalPassport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeInternalPassport)
	return x.buf
}

func (e TL_secureValueTypeAddress) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeAddress)
	return x.buf
}

func (e TL_secureValueTypeUtilityBill) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeUtilityBill)
	return x.buf
}

func (e TL_secureValueTypeBankStatement) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeBankStatement)
	return x.buf
}

func (e TL_secureValueTypeRentalAgreement) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeRentalAgreement)
	return x.buf
}

func (e TL_secureValueTypePassportRegistration) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypePassportRegistration)
	return x.buf
}

func (e TL_secureValueTypeTemporaryRegistration) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeTemporaryRegistration)
	return x.buf
}

func (e TL_secureValueTypePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypePhone)
	return x.buf
}

func (e TL_secureValueTypeEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeEmail)
	return x.buf
}

func (e TL_secureValue) encode() []byte {
	var flags int32
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.FrontSide != nil {
		flags |= (1 << 1)
	}
	if e.ReverseSide != nil {
		flags |= (1 << 2)
	}
	if e.Selfie != nil {
		flags |= (1 << 3)
	}
	if e.Translation != nil {
		flags |= (1 << 6)
	}
	if e.Files != nil {
		flags |= (1 << 4)
	}
	if e.PlainData != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValue)
	x.Int(flags)
	x.Object(e.Type)
	if e.Data != nil {
		x.Object(e.Data)
	}
	if e.FrontSide != nil {
		x.Object(e.FrontSide)
	}
	if e.ReverseSide != nil {
		x.Object(e.ReverseSide)
	}
	if e.Selfie != nil {
		x.Object(e.Selfie)
	}
	if e.Translation != nil {
		x.Vector(e.Translation)
	}
	if e.Files != nil {
		x.Vector(e.Files)
	}
	if e.PlainData != nil {
		x.Object(e.PlainData)
	}
	x.StringBytes(e.Hash)
	return x.buf
}

func (e TL_inputSecureValue) encode() []byte {
	var flags int32
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.FrontSide != nil {
		flags |= (1 << 1)
	}
	if e.ReverseSide != nil {
		flags |= (1 << 2)
	}
	if e.Selfie != nil {
		flags |= (1 << 3)
	}
	if e.Translation != nil {
		flags |= (1 << 6)
	}
	if e.Files != nil {
		flags |= (1 << 4)
	}
	if e.PlainData != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSecureValue)
	x.Int(flags)
	x.Object(e.Type)
	if e.Data != nil {
		x.Object(e.Data)
	}
	if e.FrontSide != nil {
		x.Object(e.FrontSide)
	}
	if e.ReverseSide != nil {
		x.Object(e.ReverseSide)
	}
	if e.Selfie != nil {
		x.Object(e.Selfie)
	}
	if e.Translation != nil {
		x.Vector(e.Translation)
	}
	if e.Files != nil {
		x.Vector(e.Files)
	}
	if e.PlainData != nil {
		x.Object(e.PlainData)
	}
	return x.buf
}

func (e TL_secureValueHash) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueHash)
	x.Object(e.Type)
	x.StringBytes(e.Hash)
	return x.buf
}

func (e TL_secureValueErrorData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorData)
	x.Object(e.Type)
	x.StringBytes(e.DataHash)
	x.String(e.Field)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorFrontSide) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorFrontSide)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorReverseSide) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorReverseSide)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorSelfie) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorSelfie)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorFile)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorFiles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorFiles)
	x.Object(e.Type)
	x.VectorBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueError) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueError)
	x.Object(e.Type)
	x.StringBytes(e.Hash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorTranslationFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorTranslationFile)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorTranslationFiles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorTranslationFiles)
	x.Object(e.Type)
	x.VectorBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureCredentialsEncrypted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureCredentialsEncrypted)
	x.StringBytes(e.Data)
	x.StringBytes(e.Hash)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_account_authorizationForm) encode() []byte {
	var flags int32
	if e.PrivacyPolicyUrl.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_authorizationForm)
	x.Int(flags)
	x.Vector(e.RequiredTypes)
	x.Vector(e.Values)
	x.Vector(e.Errors)
	x.Vector(e.Users)
	if e.PrivacyPolicyUrl.IsSet {
		x.String(e.PrivacyPolicyUrl.Value)
	}
	return x.buf
}

func (e TL_account_sentEmailCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sentEmailCode)
	x.String(e.EmailPattern)
	x.Int(e.Length)
	return x.buf
}

func (e TL_help_deepLinkInfoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_deepLinkInfoEmpty)
	return x.buf
}

func (e TL_help_deepLinkInfo) encode() []byte {
	var flags int32
	if e.UpdateApp {
		flags |= (1 << 0)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_deepLinkInfo)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	return x.buf
}

func (e TL_savedPhoneContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_savedPhoneContact)
	x.String(e.Phone)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.Int(e.Date)
	return x.buf
}

func (e TL_account_takeout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_takeout)
	x.Long(e.ID)
	return x.buf
}

func (e TL_passwordKdfAlgoUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_passwordKdfAlgoUnknown)
	return x.buf
}

func (e TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)
	x.StringBytes(e.Salt1)
	x.StringBytes(e.Salt2)
	x.Int(e.G)
	x.StringBytes(e.P)
	return x.buf
}

func (e TL_securePasswordKdfAlgoUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePasswordKdfAlgoUnknown)
	return x.buf
}

func (e TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000)
	x.StringBytes(e.Salt)
	return x.buf
}

func (e TL_securePasswordKdfAlgoSHA512) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePasswordKdfAlgoSHA512)
	x.StringBytes(e.Salt)
	return x.buf
}

func (e TL_secureSecretSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureSecretSettings)
	x.Object(e.SecureAlgo)
	x.StringBytes(e.SecureSecret)
	x.Long(e.SecureSecretID)
	return x.buf
}

func (e TL_inputCheckPasswordEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputCheckPasswordEmpty)
	return x.buf
}

func (e TL_inputCheckPasswordSRP) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputCheckPasswordSRP)
	x.Long(e.SrpID)
	x.StringBytes(e.A)
	x.StringBytes(e.M1)
	return x.buf
}

func (e TL_secureRequiredType) encode() []byte {
	var flags int32
	if e.NativeNames {
		flags |= (1 << 0)
	}
	if e.SelfieRequired {
		flags |= (1 << 1)
	}
	if e.TranslationRequired {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureRequiredType)
	x.Int(flags)
	x.Object(e.Type)
	return x.buf
}

func (e TL_secureRequiredTypeOneOf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureRequiredTypeOneOf)
	x.Vector(e.Types)
	return x.buf
}

func (e TL_help_passportConfigNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_passportConfigNotModified)
	return x.buf
}

func (e TL_help_passportConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_passportConfig)
	x.Int(e.Hash)
	x.Object(e.CountriesLangs)
	return x.buf
}

func (e TL_inputAppEvent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputAppEvent)
	x.Double(e.Time)
	x.String(e.Type)
	x.Long(e.Peer)
	x.Object(e.Data)
	return x.buf
}

func (e TL_jsonObjectValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonObjectValue)
	x.String(e.Key)
	x.Object(e.Value)
	return x.buf
}

func (e TL_jsonNull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonNull)
	return x.buf
}

func (e TL_jsonBool) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonBool)
	x.Bool(e.Value)
	return x.buf
}

func (e TL_jsonNumber) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonNumber)
	x.Double(e.Value)
	return x.buf
}

func (e TL_jsonString) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonString)
	x.String(e.Value)
	return x.buf
}

func (e TL_jsonArray) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonArray)
	x.Vector(e.Value)
	return x.buf
}

func (e TL_jsonObject) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonObject)
	x.Vector(e.Value)
	return x.buf
}

func (e TL_pageTableCell) encode() []byte {
	var flags int32
	if e.Header {
		flags |= (1 << 0)
	}
	if e.AlignCenter {
		flags |= (1 << 3)
	}
	if e.AlignRight {
		flags |= (1 << 4)
	}
	if e.ValignMiddle {
		flags |= (1 << 5)
	}
	if e.ValignBottom {
		flags |= (1 << 6)
	}
	if e.Text != nil {
		flags |= (1 << 7)
	}
	if e.Colspan.IsSet {
		flags |= (1 << 1)
	}
	if e.Rowspan.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageTableCell)
	x.Int(flags)
	if e.Text != nil {
		x.Object(e.Text)
	}
	if e.Colspan.IsSet {
		x.Int(e.Colspan.Value)
	}
	if e.Rowspan.IsSet {
		x.Int(e.Rowspan.Value)
	}
	return x.buf
}

func (e TL_pageTableRow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageTableRow)
	x.Vector(e.Cells)
	return x.buf
}

func (e TL_pageCaption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageCaption)
	x.Object(e.Text)
	x.Object(e.Credit)
	return x.buf
}

func (e TL_pageListItemText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageListItemText)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageListItemBlocks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageListItemBlocks)
	x.Vector(e.Blocks)
	return x.buf
}

func (e TL_pageListOrderedItemText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageListOrderedItemText)
	x.String(e.Num)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageListOrderedItemBlocks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageListOrderedItemBlocks)
	x.String(e.Num)
	x.Vector(e.Blocks)
	return x.buf
}

func (e TL_pageRelatedArticle) encode() []byte {
	var flags int32
	if e.Title.IsSet {
		flags |= (1 << 0)
	}
	if e.Description.IsSet {
		flags |= (1 << 1)
	}
	if e.PhotoID.IsSet {
		flags |= (1 << 2)
	}
	if e.Author.IsSet {
		flags |= (1 << 3)
	}
	if e.PublishedDate.IsSet {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageRelatedArticle)
	x.Int(flags)
	x.String(e.Url)
	x.Long(e.WebpageID)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Description.IsSet {
		x.String(e.Description.Value)
	}
	if e.PhotoID.IsSet {
		x.Long(e.PhotoID.Value)
	}
	if e.Author.IsSet {
		x.String(e.Author.Value)
	}
	if e.PublishedDate.IsSet {
		x.Int(e.PublishedDate.Value)
	}
	return x.buf
}

func (e TL_page) encode() []byte {
	var flags int32
	if e.Part {
		flags |= (1 << 0)
	}
	if e.Rtl {
		flags |= (1 << 1)
	}
	if e.V2 {
		flags |= (1 << 2)
	}
	if e.Views.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_page)
	x.Int(flags)
	x.String(e.Url)
	x.Vector(e.Blocks)
	x.Vector(e.Photos)
	x.Vector(e.Documents)
	if e.Views.IsSet {
		x.Int(e.Views.Value)
	}
	return x.buf
}

func (e TL_help_supportName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_supportName)
	x.String(e.Name)
	return x.buf
}

func (e TL_help_userInfoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_userInfoEmpty)
	return x.buf
}

func (e TL_help_userInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_userInfo)
	x.String(e.Message)
	x.Vector(e.Entities)
	x.String(e.Author)
	x.Int(e.Date)
	return x.buf
}

func (e TL_pollAnswer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pollAnswer)
	x.String(e.Text)
	x.StringBytes(e.Option)
	return x.buf
}

func (e TL_poll) encode() []byte {
	var flags int32
	if e.Closed {
		flags |= (1 << 0)
	}
	if e.PublicVoters {
		flags |= (1 << 1)
	}
	if e.MultipleChoice {
		flags |= (1 << 2)
	}
	if e.Quiz {
		flags |= (1 << 3)
	}
	if e.ClosePeriod.IsSet {
		flags |= (1 << 4)
	}
	if e.CloseDate.IsSet {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_poll)
	x.Long(e.ID)
	x.Int(flags)
	x.String(e.Question)
	x.Vector(e.Answers)
	if e.ClosePeriod.IsSet {
		x.Int(e.ClosePeriod.Value)
	}
	if e.CloseDate.IsSet {
		x.Int(e.CloseDate.Value)
	}
	return x.buf
}

func (e TL_pollAnswerVoters) encode() []byte {
	var flags int32
	if e.Chosen {
		flags |= (1 << 0)
	}
	if e.Correct {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pollAnswerVoters)
	x.Int(flags)
	x.StringBytes(e.Option)
	x.Int(e.Voters)
	return x.buf
}

func (e TL_pollResults) encode() []byte {
	var flags int32
	if e.Min {
		flags |= (1 << 0)
	}
	if e.Results != nil {
		flags |= (1 << 1)
	}
	if e.TotalVoters.IsSet {
		flags |= (1 << 2)
	}
	if e.RecentVoters != nil {
		flags |= (1 << 3)
	}
	if e.Solution.IsSet {
		flags |= (1 << 4)
	}
	if e.SolutionEntities != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pollResults)
	x.Int(flags)
	if e.Results != nil {
		x.Vector(e.Results)
	}
	if e.TotalVoters.IsSet {
		x.Int(e.TotalVoters.Value)
	}
	if e.RecentVoters != nil {
		x.Vector(e.RecentVoters)
	}
	if e.Solution.IsSet {
		x.String(e.Solution.Value)
	}
	if e.SolutionEntities != nil {
		x.Vector(e.SolutionEntities)
	}
	return x.buf
}

func (e TL_chatOnlines) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatOnlines)
	x.Int(e.Onlines)
	return x.buf
}

func (e TL_statsURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsURL)
	x.String(e.Url)
	return x.buf
}

func (e TL_chatAdminRights) encode() []byte {
	var flags int32
	if e.ChangeInfo {
		flags |= (1 << 0)
	}
	if e.PostMessages {
		flags |= (1 << 1)
	}
	if e.EditMessages {
		flags |= (1 << 2)
	}
	if e.DeleteMessages {
		flags |= (1 << 3)
	}
	if e.BanUsers {
		flags |= (1 << 4)
	}
	if e.InviteUsers {
		flags |= (1 << 5)
	}
	if e.PinMessages {
		flags |= (1 << 7)
	}
	if e.AddAdmins {
		flags |= (1 << 9)
	}
	if e.Anonymous {
		flags |= (1 << 10)
	}
	if e.ManageCall {
		flags |= (1 << 11)
	}
	if e.Other {
		flags |= (1 << 12)
	}
	if e.ManageTopics {
		flags |= (1 << 13)
	}
	if e.PostStories {
		flags |= (1 << 14)
	}
	if e.EditStories {
		flags |= (1 << 15)
	}
	if e.DeleteStories {
		flags |= (1 << 16)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatAdminRights)
	x.Int(flags)
	return x.buf
}

func (e TL_chatBannedRights) encode() []byte {
	var flags int32
	if e.ViewMessages {
		flags |= (1 << 0)
	}
	if e.SendMessages {
		flags |= (1 << 1)
	}
	if e.SendMedia {
		flags |= (1 << 2)
	}
	if e.SendStickers {
		flags |= (1 << 3)
	}
	if e.SendGifs {
		flags |= (1 << 4)
	}
	if e.SendGames {
		flags |= (1 << 5)
	}
	if e.SendInline {
		flags |= (1 << 6)
	}
	if e.EmbedLinks {
		flags |= (1 << 7)
	}
	if e.SendPolls {
		flags |= (1 << 8)
	}
	if e.ChangeInfo {
		flags |= (1 << 10)
	}
	if e.InviteUsers {
		flags |= (1 << 15)
	}
	if e.PinMessages {
		flags |= (1 << 17)
	}
	if e.ManageTopics {
		flags |= (1 << 18)
	}
	if e.SendPhotos {
		flags |= (1 << 19)
	}
	if e.SendVideos {
		flags |= (1 << 20)
	}
	if e.SendRoundvideos {
		flags |= (1 << 21)
	}
	if e.SendAudios {
		flags |= (1 << 22)
	}
	if e.SendVoices {
		flags |= (1 << 23)
	}
	if e.SendDocs {
		flags |= (1 << 24)
	}
	if e.SendPlain {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatBannedRights)
	x.Int(flags)
	x.Int(e.UntilDate)
	return x.buf
}

func (e TL_inputWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWallPaper)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputWallPaperSlug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWallPaperSlug)
	x.String(e.Slug)
	return x.buf
}

func (e TL_inputWallPaperNoFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWallPaperNoFile)
	x.Long(e.ID)
	return x.buf
}

func (e TL_account_wallPapersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_wallPapersNotModified)
	return x.buf
}

func (e TL_account_wallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_wallPapers)
	x.Long(e.Hash)
	x.Vector(e.Wallpapers)
	return x.buf
}

func (e TL_codeSettings) encode() []byte {
	var flags int32
	if e.AllowFlashcall {
		flags |= (1 << 0)
	}
	if e.CurrentNumber {
		flags |= (1 << 1)
	}
	if e.AllowAppHash {
		flags |= (1 << 4)
	}
	if e.AllowMissedCall {
		flags |= (1 << 5)
	}
	if e.AllowFirebase {
		flags |= (1 << 7)
	}
	if e.LogoutTokens != nil {
		flags |= (1 << 6)
	}
	if e.Token.IsSet {
		flags |= (1 << 8)
	}
	if e.AppSandbox.IsSet {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_codeSettings)
	x.Int(flags)
	if e.LogoutTokens != nil {
		x.VectorBytes(e.LogoutTokens)
	}
	if e.Token.IsSet {
		x.String(e.Token.Value)
	}
	if e.AppSandbox.IsSet {
		x.Bool(e.AppSandbox.Value)
	}
	return x.buf
}

func (e TL_wallPaperSettings) encode() []byte {
	var flags int32
	if e.Blur {
		flags |= (1 << 1)
	}
	if e.Motion {
		flags |= (1 << 2)
	}
	if e.BackgroundColor.IsSet {
		flags |= (1 << 0)
	}
	if e.SecondBackgroundColor.IsSet {
		flags |= (1 << 4)
	}
	if e.ThirdBackgroundColor.IsSet {
		flags |= (1 << 5)
	}
	if e.FourthBackgroundColor.IsSet {
		flags |= (1 << 6)
	}
	if e.Intensity.IsSet {
		flags |= (1 << 3)
	}
	if e.Rotation.IsSet {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_wallPaperSettings)
	x.Int(flags)
	if e.BackgroundColor.IsSet {
		x.Int(e.BackgroundColor.Value)
	}
	if e.SecondBackgroundColor.IsSet {
		x.Int(e.SecondBackgroundColor.Value)
	}
	if e.ThirdBackgroundColor.IsSet {
		x.Int(e.ThirdBackgroundColor.Value)
	}
	if e.FourthBackgroundColor.IsSet {
		x.Int(e.FourthBackgroundColor.Value)
	}
	if e.Intensity.IsSet {
		x.Int(e.Intensity.Value)
	}
	if e.Rotation.IsSet {
		x.Int(e.Rotation.Value)
	}
	return x.buf
}

func (e TL_autoDownloadSettings) encode() []byte {
	var flags int32
	if e.Disabled {
		flags |= (1 << 0)
	}
	if e.VideoPreloadLarge {
		flags |= (1 << 1)
	}
	if e.AudioPreloadNext {
		flags |= (1 << 2)
	}
	if e.PhonecallsLessData {
		flags |= (1 << 3)
	}
	if e.StoriesPreload {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_autoDownloadSettings)
	x.Int(flags)
	x.Int(e.PhotoSizeMax)
	x.Long(e.VideoSizeMax)
	x.Long(e.FileSizeMax)
	x.Int(e.VideoUploadMaxbitrate)
	x.Int(e.SmallQueueActiveOperationsMax)
	x.Int(e.LargeQueueActiveOperationsMax)
	return x.buf
}

func (e TL_account_autoDownloadSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_autoDownloadSettings)
	x.Object(e.Low)
	x.Object(e.Medium)
	x.Object(e.High)
	return x.buf
}

func (e TL_emojiKeyword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiKeyword)
	x.String(e.Keyword)
	x.VectorString(e.Emoticons)
	return x.buf
}

func (e TL_emojiKeywordDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiKeywordDeleted)
	x.String(e.Keyword)
	x.VectorString(e.Emoticons)
	return x.buf
}

func (e TL_emojiKeywordsDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiKeywordsDifference)
	x.String(e.LangCode)
	x.Int(e.FromVersion)
	x.Int(e.Version)
	x.Vector(e.Keywords)
	return x.buf
}

func (e TL_emojiURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiURL)
	x.String(e.Url)
	return x.buf
}

func (e TL_emojiLanguage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiLanguage)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_folder) encode() []byte {
	var flags int32
	if e.AutofillNewBroadcasts {
		flags |= (1 << 0)
	}
	if e.AutofillPublicGroups {
		flags |= (1 << 1)
	}
	if e.AutofillNewCorrespondents {
		flags |= (1 << 2)
	}
	if e.Photo != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_folder)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.Title)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	return x.buf
}

func (e TL_inputFolderPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputFolderPeer)
	x.Object(e.Peer)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_folderPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_folderPeer)
	x.Object(e.Peer)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_messages_searchCounter) encode() []byte {
	var flags int32
	if e.Inexact {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchCounter)
	x.Int(flags)
	x.Object(e.Filter)
	x.Int(e.Count)
	return x.buf
}

func (e TL_urlAuthResultRequest) encode() []byte {
	var flags int32
	if e.RequestWriteAccess {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_urlAuthResultRequest)
	x.Int(flags)
	x.Object(e.Bot)
	x.String(e.Domain)
	return x.buf
}

func (e TL_urlAuthResultAccepted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_urlAuthResultAccepted)
	x.String(e.Url)
	return x.buf
}

func (e TL_urlAuthResultDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_urlAuthResultDefault)
	return x.buf
}

func (e TL_channelLocationEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelLocationEmpty)
	return x.buf
}

func (e TL_channelLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelLocation)
	x.Object(e.GeoPoint)
	x.String(e.Address)
	return x.buf
}

func (e TL_peerLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerLocated)
	x.Object(e.Peer)
	x.Int(e.Expires)
	x.Int(e.Distance)
	return x.buf
}

func (e TL_peerSelfLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerSelfLocated)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_restrictionReason) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_restrictionReason)
	x.String(e.Platform)
	x.String(e.Reason)
	x.String(e.Text)
	return x.buf
}

func (e TL_inputTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputTheme)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputThemeSlug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputThemeSlug)
	x.String(e.Slug)
	return x.buf
}

func (e TL_theme) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.Default {
		flags |= (1 << 1)
	}
	if e.ForChat {
		flags |= (1 << 5)
	}
	if e.Document != nil {
		flags |= (1 << 2)
	}
	if e.Settings != nil {
		flags |= (1 << 3)
	}
	if e.Emoticon.IsSet {
		flags |= (1 << 6)
	}
	if e.InstallsCount.IsSet {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_theme)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.Slug)
	x.String(e.Title)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Settings != nil {
		x.Vector(e.Settings)
	}
	if e.Emoticon.IsSet {
		x.String(e.Emoticon.Value)
	}
	if e.InstallsCount.IsSet {
		x.Int(e.InstallsCount.Value)
	}
	return x.buf
}

func (e TL_account_themesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_themesNotModified)
	return x.buf
}

func (e TL_account_themes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_themes)
	x.Long(e.Hash)
	x.Vector(e.Themes)
	return x.buf
}

func (e TL_auth_loginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_loginToken)
	x.Int(e.Expires)
	x.StringBytes(e.Token)
	return x.buf
}

func (e TL_auth_loginTokenMigrateTo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_loginTokenMigrateTo)
	x.Int(e.DcID)
	x.StringBytes(e.Token)
	return x.buf
}

func (e TL_auth_loginTokenSuccess) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_loginTokenSuccess)
	x.Object(e.Authorization)
	return x.buf
}

func (e TL_account_contentSettings) encode() []byte {
	var flags int32
	if e.SensitiveEnabled {
		flags |= (1 << 0)
	}
	if e.SensitiveCanChange {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_contentSettings)
	x.Int(flags)
	return x.buf
}

func (e TL_messages_inactiveChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_inactiveChats)
	x.VectorInt(e.Dates)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_baseThemeClassic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeClassic)
	return x.buf
}

func (e TL_baseThemeDay) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeDay)
	return x.buf
}

func (e TL_baseThemeNight) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeNight)
	return x.buf
}

func (e TL_baseThemeTinted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeTinted)
	return x.buf
}

func (e TL_baseThemeArctic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeArctic)
	return x.buf
}

func (e TL_inputThemeSettings) encode() []byte {
	var flags int32
	if e.MessageColorsAnimated {
		flags |= (1 << 2)
	}
	if e.OutboxAccentColor.IsSet {
		flags |= (1 << 3)
	}
	if e.MessageColors != nil {
		flags |= (1 << 0)
	}
	if e.Wallpaper != nil {
		flags |= (1 << 1)
	}
	if e.WallpaperSettings != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputThemeSettings)
	x.Int(flags)
	x.Object(e.BaseTheme)
	x.Int(e.AccentColor)
	if e.OutboxAccentColor.IsSet {
		x.Int(e.OutboxAccentColor.Value)
	}
	if e.MessageColors != nil {
		x.VectorInt(e.MessageColors)
	}
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	if e.WallpaperSettings != nil {
		x.Object(e.WallpaperSettings)
	}
	return x.buf
}

func (e TL_themeSettings) encode() []byte {
	var flags int32
	if e.MessageColorsAnimated {
		flags |= (1 << 2)
	}
	if e.OutboxAccentColor.IsSet {
		flags |= (1 << 3)
	}
	if e.MessageColors != nil {
		flags |= (1 << 0)
	}
	if e.Wallpaper != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_themeSettings)
	x.Int(flags)
	x.Object(e.BaseTheme)
	x.Int(e.AccentColor)
	if e.OutboxAccentColor.IsSet {
		x.Int(e.OutboxAccentColor.Value)
	}
	if e.MessageColors != nil {
		x.VectorInt(e.MessageColors)
	}
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	return x.buf
}

func (e TL_webPageAttributeTheme) encode() []byte {
	var flags int32
	if e.Documents != nil {
		flags |= (1 << 0)
	}
	if e.Settings != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPageAttributeTheme)
	x.Int(flags)
	if e.Documents != nil {
		x.Vector(e.Documents)
	}
	if e.Settings != nil {
		x.Object(e.Settings)
	}
	return x.buf
}

func (e TL_webPageAttributeStory) encode() []byte {
	var flags int32
	if e.Story != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPageAttributeStory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Story != nil {
		x.Object(e.Story)
	}
	return x.buf
}

func (e TL_messages_votesList) encode() []byte {
	var flags int32
	if e.NextOffset.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_votesList)
	x.Int(flags)
	x.Int(e.Count)
	x.Vector(e.Votes)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	if e.NextOffset.IsSet {
		x.String(e.NextOffset.Value)
	}
	return x.buf
}

func (e TL_bankCardOpenUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bankCardOpenUrl)
	x.String(e.Url)
	x.String(e.Name)
	return x.buf
}

func (e TL_payments_bankCardData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_bankCardData)
	x.String(e.Title)
	x.Vector(e.OpenUrls)
	return x.buf
}

func (e TL_dialogFilter) encode() []byte {
	var flags int32
	if e.Contacts {
		flags |= (1 << 0)
	}
	if e.NonContacts {
		flags |= (1 << 1)
	}
	if e.Groups {
		flags |= (1 << 2)
	}
	if e.Broadcasts {
		flags |= (1 << 3)
	}
	if e.Bots {
		flags |= (1 << 4)
	}
	if e.ExcludeMuted {
		flags |= (1 << 11)
	}
	if e.ExcludeRead {
		flags |= (1 << 12)
	}
	if e.ExcludeArchived {
		flags |= (1 << 13)
	}
	if e.Emoticon.IsSet {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFilter)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.Title)
	if e.Emoticon.IsSet {
		x.String(e.Emoticon.Value)
	}
	x.Vector(e.PinnedPeers)
	x.Vector(e.IncludePeers)
	x.Vector(e.ExcludePeers)
	return x.buf
}

func (e TL_dialogFilterDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFilterDefault)
	return x.buf
}

func (e TL_dialogFilterChatlist) encode() []byte {
	var flags int32
	if e.HasMyInvites {
		flags |= (1 << 26)
	}
	if e.Emoticon.IsSet {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFilterChatlist)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.Title)
	if e.Emoticon.IsSet {
		x.String(e.Emoticon.Value)
	}
	x.Vector(e.PinnedPeers)
	x.Vector(e.IncludePeers)
	return x.buf
}

func (e TL_dialogFilterSuggested) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFilterSuggested)
	x.Object(e.Filter)
	x.String(e.Description)
	return x.buf
}

func (e TL_statsDateRangeDays) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsDateRangeDays)
	x.Int(e.MinDate)
	x.Int(e.MaxDate)
	return x.buf
}

func (e TL_statsAbsValueAndPrev) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsAbsValueAndPrev)
	x.Double(e.Current)
	x.Double(e.Previous)
	return x.buf
}

func (e TL_statsPercentValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsPercentValue)
	x.Double(e.Part)
	x.Double(e.Total)
	return x.buf
}

func (e TL_statsGraphAsync) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGraphAsync)
	x.String(e.Token)
	return x.buf
}

func (e TL_statsGraphError) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGraphError)
	x.String(e.Error)
	return x.buf
}

func (e TL_statsGraph) encode() []byte {
	var flags int32
	if e.ZoomToken.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGraph)
	x.Int(flags)
	x.Object(e.Json)
	if e.ZoomToken.IsSet {
		x.String(e.ZoomToken.Value)
	}
	return x.buf
}

func (e TL_messageInteractionCounters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageInteractionCounters)
	x.Int(e.MsgID)
	x.Int(e.Views)
	x.Int(e.Forwards)
	return x.buf
}

func (e TL_stats_broadcastStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_broadcastStats)
	x.Object(e.Period)
	x.Object(e.Followers)
	x.Object(e.ViewsPerPost)
	x.Object(e.SharesPerPost)
	x.Object(e.EnabledNotifications)
	x.Object(e.GrowthGraph)
	x.Object(e.FollowersGraph)
	x.Object(e.MuteGraph)
	x.Object(e.TopHoursGraph)
	x.Object(e.InteractionsGraph)
	x.Object(e.IvInteractionsGraph)
	x.Object(e.ViewsBySourceGraph)
	x.Object(e.NewFollowersBySourceGraph)
	x.Object(e.LanguagesGraph)
	x.Vector(e.RecentMessageInteractions)
	return x.buf
}

func (e TL_help_promoDataEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_promoDataEmpty)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_help_promoData) encode() []byte {
	var flags int32
	if e.Proxy {
		flags |= (1 << 0)
	}
	if e.PsaType.IsSet {
		flags |= (1 << 1)
	}
	if e.PsaMessage.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_promoData)
	x.Int(flags)
	x.Int(e.Expires)
	x.Object(e.Peer)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	if e.PsaType.IsSet {
		x.String(e.PsaType.Value)
	}
	if e.PsaMessage.IsSet {
		x.String(e.PsaMessage.Value)
	}
	return x.buf
}

func (e TL_videoSize) encode() []byte {
	var flags int32
	if e.VideoStartTs.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_videoSize)
	x.Int(flags)
	x.String(e.Type)
	x.Int(e.W)
	x.Int(e.H)
	x.Int(e.Size)
	if e.VideoStartTs.IsSet {
		x.Double(e.VideoStartTs.Value)
	}
	return x.buf
}

func (e TL_videoSizeEmojiMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_videoSizeEmojiMarkup)
	x.Long(e.EmojiID)
	x.VectorInt(e.BackgroundColors)
	return x.buf
}

func (e TL_videoSizeStickerMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_videoSizeStickerMarkup)
	x.Object(e.Stickerset)
	x.Long(e.StickerID)
	x.VectorInt(e.BackgroundColors)
	return x.buf
}

func (e TL_statsGroupTopPoster) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGroupTopPoster)
	x.Long(e.UserID)
	x.Int(e.Messages)
	x.Int(e.AvgChars)
	return x.buf
}

func (e TL_statsGroupTopAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGroupTopAdmin)
	x.Long(e.UserID)
	x.Int(e.Deleted)
	x.Int(e.Kicked)
	x.Int(e.Banned)
	return x.buf
}

func (e TL_statsGroupTopInviter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGroupTopInviter)
	x.Long(e.UserID)
	x.Int(e.Invitations)
	return x.buf
}

func (e TL_stats_megagroupStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_megagroupStats)
	x.Object(e.Period)
	x.Object(e.Members)
	x.Object(e.Messages)
	x.Object(e.Viewers)
	x.Object(e.Posters)
	x.Object(e.GrowthGraph)
	x.Object(e.MembersGraph)
	x.Object(e.NewMembersBySourceGraph)
	x.Object(e.LanguagesGraph)
	x.Object(e.MessagesGraph)
	x.Object(e.ActionsGraph)
	x.Object(e.TopHoursGraph)
	x.Object(e.WeekdaysGraph)
	x.Vector(e.TopPosters)
	x.Vector(e.TopAdmins)
	x.Vector(e.TopInviters)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_globalPrivacySettings) encode() []byte {
	var flags int32
	if e.ArchiveAndMuteNewNoncontactPeers {
		flags |= (1 << 0)
	}
	if e.KeepArchivedUnmuted {
		flags |= (1 << 1)
	}
	if e.KeepArchivedFolders {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_globalPrivacySettings)
	x.Int(flags)
	return x.buf
}

func (e TL_help_countryCode) encode() []byte {
	var flags int32
	if e.Prefixes != nil {
		flags |= (1 << 0)
	}
	if e.Patterns != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_countryCode)
	x.Int(flags)
	x.String(e.CountryCode)
	if e.Prefixes != nil {
		x.VectorString(e.Prefixes)
	}
	if e.Patterns != nil {
		x.VectorString(e.Patterns)
	}
	return x.buf
}

func (e TL_help_country) encode() []byte {
	var flags int32
	if e.Hidden {
		flags |= (1 << 0)
	}
	if e.Name.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_country)
	x.Int(flags)
	x.String(e.Iso2)
	x.String(e.DefaultName)
	if e.Name.IsSet {
		x.String(e.Name.Value)
	}
	x.Vector(e.CountryCodes)
	return x.buf
}

func (e TL_help_countriesListNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_countriesListNotModified)
	return x.buf
}

func (e TL_help_countriesList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_countriesList)
	x.Vector(e.Countries)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messageViews) encode() []byte {
	var flags int32
	if e.Views.IsSet {
		flags |= (1 << 0)
	}
	if e.Forwards.IsSet {
		flags |= (1 << 1)
	}
	if e.Replies != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageViews)
	x.Int(flags)
	if e.Views.IsSet {
		x.Int(e.Views.Value)
	}
	if e.Forwards.IsSet {
		x.Int(e.Forwards.Value)
	}
	if e.Replies != nil {
		x.Object(e.Replies)
	}
	return x.buf
}

func (e TL_messages_messageViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messageViews)
	x.Vector(e.Views)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_discussionMessage) encode() []byte {
	var flags int32
	if e.MaxID.IsSet {
		flags |= (1 << 0)
	}
	if e.ReadInboxMaxID.IsSet {
		flags |= (1 << 1)
	}
	if e.ReadOutboxMaxID.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_discussionMessage)
	x.Int(flags)
	x.Vector(e.Messages)
	if e.MaxID.IsSet {
		x.Int(e.MaxID.Value)
	}
	if e.ReadInboxMaxID.IsSet {
		x.Int(e.ReadInboxMaxID.Value)
	}
	if e.ReadOutboxMaxID.IsSet {
		x.Int(e.ReadOutboxMaxID.Value)
	}
	x.Int(e.UnreadCount)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messageReplyHeader) encode() []byte {
	var flags int32
	if e.ReplyToScheduled {
		flags |= (1 << 2)
	}
	if e.ForumTopic {
		flags |= (1 << 3)
	}
	if e.Quote {
		flags |= (1 << 9)
	}
	if e.ReplyToMsgID.IsSet {
		flags |= (1 << 4)
	}
	if e.ReplyToPeerID != nil {
		flags |= (1 << 0)
	}
	if e.ReplyFrom != nil {
		flags |= (1 << 5)
	}
	if e.ReplyMedia != nil {
		flags |= (1 << 8)
	}
	if e.ReplyToTopID.IsSet {
		flags |= (1 << 1)
	}
	if e.QuoteText.IsSet {
		flags |= (1 << 6)
	}
	if e.QuoteEntities != nil {
		flags |= (1 << 7)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageReplyHeader)
	x.Int(flags)
	if e.ReplyToMsgID.IsSet {
		x.Int(e.ReplyToMsgID.Value)
	}
	if e.ReplyToPeerID != nil {
		x.Object(e.ReplyToPeerID)
	}
	if e.ReplyFrom != nil {
		x.Object(e.ReplyFrom)
	}
	if e.ReplyMedia != nil {
		x.Object(e.ReplyMedia)
	}
	if e.ReplyToTopID.IsSet {
		x.Int(e.ReplyToTopID.Value)
	}
	if e.QuoteText.IsSet {
		x.String(e.QuoteText.Value)
	}
	if e.QuoteEntities != nil {
		x.Vector(e.QuoteEntities)
	}
	return x.buf
}

func (e TL_messageReplyStoryHeader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageReplyStoryHeader)
	x.Long(e.UserID)
	x.Int(e.StoryID)
	return x.buf
}

func (e TL_messageReplies) encode() []byte {
	var flags int32
	if e.Comments {
		flags |= (1 << 0)
	}
	if e.RecentRepliers != nil {
		flags |= (1 << 1)
	}
	if e.ChannelID.IsSet {
		flags |= (1 << 0)
	}
	if e.MaxID.IsSet {
		flags |= (1 << 2)
	}
	if e.ReadMaxID.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageReplies)
	x.Int(flags)
	x.Int(e.Replies)
	x.Int(e.RepliesPts)
	if e.RecentRepliers != nil {
		x.Vector(e.RecentRepliers)
	}
	if e.ChannelID.IsSet {
		x.Long(e.ChannelID.Value)
	}
	if e.MaxID.IsSet {
		x.Int(e.MaxID.Value)
	}
	if e.ReadMaxID.IsSet {
		x.Int(e.ReadMaxID.Value)
	}
	return x.buf
}

func (e TL_peerBlocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerBlocked)
	x.Object(e.PeerID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_stats_messageStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_messageStats)
	x.Object(e.ViewsGraph)
	return x.buf
}

func (e TL_groupCallDiscarded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallDiscarded)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Duration)
	return x.buf
}

func (e TL_groupCall) encode() []byte {
	var flags int32
	if e.JoinMuted {
		flags |= (1 << 1)
	}
	if e.CanChangeJoinMuted {
		flags |= (1 << 2)
	}
	if e.JoinDateAsc {
		flags |= (1 << 6)
	}
	if e.ScheduleStartSubscribed {
		flags |= (1 << 8)
	}
	if e.CanStartVideo {
		flags |= (1 << 9)
	}
	if e.RecordVideoActive {
		flags |= (1 << 11)
	}
	if e.RtmpStream {
		flags |= (1 << 12)
	}
	if e.ListenersHidden {
		flags |= (1 << 13)
	}
	if e.Title.IsSet {
		flags |= (1 << 3)
	}
	if e.StreamDcID.IsSet {
		flags |= (1 << 4)
	}
	if e.RecordStartDate.IsSet {
		flags |= (1 << 5)
	}
	if e.ScheduleDate.IsSet {
		flags |= (1 << 7)
	}
	if e.UnmutedVideoCount.IsSet {
		flags |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCall)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.ParticipantsCount)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.StreamDcID.IsSet {
		x.Int(e.StreamDcID.Value)
	}
	if e.RecordStartDate.IsSet {
		x.Int(e.RecordStartDate.Value)
	}
	if e.ScheduleDate.IsSet {
		x.Int(e.ScheduleDate.Value)
	}
	if e.UnmutedVideoCount.IsSet {
		x.Int(e.UnmutedVideoCount.Value)
	}
	x.Int(e.UnmutedVideoLimit)
	x.Int(e.Version)
	return x.buf
}

func (e TL_inputGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGroupCall)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_groupCallParticipant) encode() []byte {
	var flags int32
	if e.Muted {
		flags |= (1 << 0)
	}
	if e.Left {
		flags |= (1 << 1)
	}
	if e.CanSelfUnmute {
		flags |= (1 << 2)
	}
	if e.JustJoined {
		flags |= (1 << 4)
	}
	if e.Versioned {
		flags |= (1 << 5)
	}
	if e.Min {
		flags |= (1 << 8)
	}
	if e.MutedByYou {
		flags |= (1 << 9)
	}
	if e.VolumeByAdmin {
		flags |= (1 << 10)
	}
	if e.Self {
		flags |= (1 << 12)
	}
	if e.VideoJoined {
		flags |= (1 << 15)
	}
	if e.ActiveDate.IsSet {
		flags |= (1 << 3)
	}
	if e.Volume.IsSet {
		flags |= (1 << 7)
	}
	if e.About.IsSet {
		flags |= (1 << 11)
	}
	if e.RaiseHandRating.IsSet {
		flags |= (1 << 13)
	}
	if e.Video != nil {
		flags |= (1 << 6)
	}
	if e.Presentation != nil {
		flags |= (1 << 14)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallParticipant)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.Date)
	if e.ActiveDate.IsSet {
		x.Int(e.ActiveDate.Value)
	}
	x.Int(e.Source)
	if e.Volume.IsSet {
		x.Int(e.Volume.Value)
	}
	if e.About.IsSet {
		x.String(e.About.Value)
	}
	if e.RaiseHandRating.IsSet {
		x.Long(e.RaiseHandRating.Value)
	}
	if e.Video != nil {
		x.Object(e.Video)
	}
	if e.Presentation != nil {
		x.Object(e.Presentation)
	}
	return x.buf
}

func (e TL_phone_groupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_groupCall)
	x.Object(e.Call)
	x.Vector(e.Participants)
	x.String(e.ParticipantsNextOffset)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_phone_groupParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_groupParticipants)
	x.Int(e.Count)
	x.Vector(e.Participants)
	x.String(e.NextOffset)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	x.Int(e.Version)
	return x.buf
}

func (e TL_inlineQueryPeerTypeSameBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeSameBotPM)
	return x.buf
}

func (e TL_inlineQueryPeerTypePM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypePM)
	return x.buf
}

func (e TL_inlineQueryPeerTypeChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeChat)
	return x.buf
}

func (e TL_inlineQueryPeerTypeMegagroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeMegagroup)
	return x.buf
}

func (e TL_inlineQueryPeerTypeBroadcast) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeBroadcast)
	return x.buf
}

func (e TL_inlineQueryPeerTypeBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeBotPM)
	return x.buf
}

func (e TL_messages_historyImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_historyImport)
	x.Long(e.ID)
	return x.buf
}

func (e TL_messages_historyImportParsed) encode() []byte {
	var flags int32
	if e.Pm {
		flags |= (1 << 0)
	}
	if e.Group {
		flags |= (1 << 1)
	}
	if e.Title.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_historyImportParsed)
	x.Int(flags)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	return x.buf
}

func (e TL_messages_affectedFoundMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_affectedFoundMessages)
	x.Int(e.Pts)
	x.Int(e.PtsCount)
	x.Int(e.Offset)
	x.VectorInt(e.Messages)
	return x.buf
}

func (e TL_chatInviteImporter) encode() []byte {
	var flags int32
	if e.Requested {
		flags |= (1 << 0)
	}
	if e.ViaChatlist {
		flags |= (1 << 3)
	}
	if e.About.IsSet {
		flags |= (1 << 2)
	}
	if e.ApprovedBy.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInviteImporter)
	x.Int(flags)
	x.Long(e.UserID)
	x.Int(e.Date)
	if e.About.IsSet {
		x.String(e.About.Value)
	}
	if e.ApprovedBy.IsSet {
		x.Long(e.ApprovedBy.Value)
	}
	return x.buf
}

func (e TL_messages_exportedChatInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_exportedChatInvites)
	x.Int(e.Count)
	x.Vector(e.Invites)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_exportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_exportedChatInvite)
	x.Object(e.Invite)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_exportedChatInviteReplaced) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_exportedChatInviteReplaced)
	x.Object(e.Invite)
	x.Object(e.NewInvite)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_chatInviteImporters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chatInviteImporters)
	x.Int(e.Count)
	x.Vector(e.Importers)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_chatAdminWithInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatAdminWithInvites)
	x.Long(e.AdminID)
	x.Int(e.InvitesCount)
	x.Int(e.RevokedInvitesCount)
	return x.buf
}

func (e TL_messages_chatAdminsWithInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chatAdminsWithInvites)
	x.Vector(e.Admins)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_checkedHistoryImportPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_checkedHistoryImportPeer)
	x.String(e.ConfirmText)
	return x.buf
}

func (e TL_phone_joinAsPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_joinAsPeers)
	x.Vector(e.Peers)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_phone_exportedGroupCallInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_exportedGroupCallInvite)
	x.String(e.Link)
	return x.buf
}

func (e TL_groupCallParticipantVideoSourceGroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallParticipantVideoSourceGroup)
	x.String(e.Semantics)
	x.VectorInt(e.Sources)
	return x.buf
}

func (e TL_groupCallParticipantVideo) encode() []byte {
	var flags int32
	if e.Paused {
		flags |= (1 << 0)
	}
	if e.AudioSource.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallParticipantVideo)
	x.Int(flags)
	x.String(e.Endpoint)
	x.Vector(e.SourceGroups)
	if e.AudioSource.IsSet {
		x.Int(e.AudioSource.Value)
	}
	return x.buf
}

func (e TL_stickers_suggestedShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_suggestedShortName)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_botCommandScopeDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopeDefault)
	return x.buf
}

func (e TL_botCommandScopeUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopeUsers)
	return x.buf
}

func (e TL_botCommandScopeChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopeChats)
	return x.buf
}

func (e TL_botCommandScopeChatAdmins) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopeChatAdmins)
	return x.buf
}

func (e TL_botCommandScopePeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopePeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_botCommandScopePeerAdmins) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopePeerAdmins)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_botCommandScopePeerUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopePeerUser)
	x.Object(e.Peer)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_account_resetPasswordFailedWait) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetPasswordFailedWait)
	x.Int(e.RetryDate)
	return x.buf
}

func (e TL_account_resetPasswordRequestedWait) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetPasswordRequestedWait)
	x.Int(e.UntilDate)
	return x.buf
}

func (e TL_account_resetPasswordOk) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetPasswordOk)
	return x.buf
}

func (e TL_sponsoredMessage) encode() []byte {
	var flags int32
	if e.Recommended {
		flags |= (1 << 5)
	}
	if e.ShowPeerPhoto {
		flags |= (1 << 6)
	}
	if e.FromID != nil {
		flags |= (1 << 3)
	}
	if e.ChatInvite != nil {
		flags |= (1 << 4)
	}
	if e.ChatInviteHash.IsSet {
		flags |= (1 << 4)
	}
	if e.ChannelPost.IsSet {
		flags |= (1 << 2)
	}
	if e.StartParam.IsSet {
		flags |= (1 << 0)
	}
	if e.Webpage != nil {
		flags |= (1 << 9)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.SponsorInfo.IsSet {
		flags |= (1 << 7)
	}
	if e.AdditionalInfo.IsSet {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_sponsoredMessage)
	x.Int(flags)
	x.StringBytes(e.RandomID)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	if e.ChatInvite != nil {
		x.Object(e.ChatInvite)
	}
	if e.ChatInviteHash.IsSet {
		x.String(e.ChatInviteHash.Value)
	}
	if e.ChannelPost.IsSet {
		x.Int(e.ChannelPost.Value)
	}
	if e.StartParam.IsSet {
		x.String(e.StartParam.Value)
	}
	if e.Webpage != nil {
		x.Object(e.Webpage)
	}
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.SponsorInfo.IsSet {
		x.String(e.SponsorInfo.Value)
	}
	if e.AdditionalInfo.IsSet {
		x.String(e.AdditionalInfo.Value)
	}
	return x.buf
}

func (e TL_messages_sponsoredMessages) encode() []byte {
	var flags int32
	if e.PostsBetween.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sponsoredMessages)
	x.Int(flags)
	if e.PostsBetween.IsSet {
		x.Int(e.PostsBetween.Value)
	}
	x.Vector(e.Messages)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_sponsoredMessagesEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sponsoredMessagesEmpty)
	return x.buf
}

func (e TL_searchResultsCalendarPeriod) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_searchResultsCalendarPeriod)
	x.Int(e.Date)
	x.Int(e.MinMsgID)
	x.Int(e.MaxMsgID)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messages_searchResultsCalendar) encode() []byte {
	var flags int32
	if e.Inexact {
		flags |= (1 << 0)
	}
	if e.OffsetIdOffset.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchResultsCalendar)
	x.Int(flags)
	x.Int(e.Count)
	x.Int(e.MinDate)
	x.Int(e.MinMsgID)
	if e.OffsetIdOffset.IsSet {
		x.Int(e.OffsetIdOffset.Value)
	}
	x.Vector(e.Periods)
	x.Vector(e.Messages)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_searchResultPosition) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_searchResultPosition)
	x.Int(e.MsgID)
	x.Int(e.Date)
	x.Int(e.Offset)
	return x.buf
}

func (e TL_messages_searchResultsPositions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchResultsPositions)
	x.Int(e.Count)
	x.Vector(e.Positions)
	return x.buf
}

func (e TL_channels_sendAsPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_sendAsPeers)
	x.Vector(e.Peers)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_users_userFull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_users_userFull)
	x.Object(e.FullUser)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_peerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_peerSettings)
	x.Object(e.Settings)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_auth_loggedOut) encode() []byte {
	var flags int32
	if e.FutureAuthToken != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_loggedOut)
	x.Int(flags)
	if e.FutureAuthToken != nil {
		x.StringBytes(e.FutureAuthToken)
	}
	return x.buf
}

func (e TL_reactionCount) encode() []byte {
	var flags int32
	if e.ChosenOrder.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionCount)
	x.Int(flags)
	if e.ChosenOrder.IsSet {
		x.Int(e.ChosenOrder.Value)
	}
	x.Object(e.Reaction)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messageReactions) encode() []byte {
	var flags int32
	if e.Min {
		flags |= (1 << 0)
	}
	if e.CanSeeList {
		flags |= (1 << 2)
	}
	if e.RecentReactions != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageReactions)
	x.Int(flags)
	x.Vector(e.Results)
	if e.RecentReactions != nil {
		x.Vector(e.RecentReactions)
	}
	return x.buf
}

func (e TL_messages_messageReactionsList) encode() []byte {
	var flags int32
	if e.NextOffset.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messageReactionsList)
	x.Int(flags)
	x.Int(e.Count)
	x.Vector(e.Reactions)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	if e.NextOffset.IsSet {
		x.String(e.NextOffset.Value)
	}
	return x.buf
}

func (e TL_availableReaction) encode() []byte {
	var flags int32
	if e.Inactive {
		flags |= (1 << 0)
	}
	if e.Premium {
		flags |= (1 << 2)
	}
	if e.AroundAnimation != nil {
		flags |= (1 << 1)
	}
	if e.CenterIcon != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_availableReaction)
	x.Int(flags)
	x.String(e.Reaction)
	x.String(e.Title)
	x.Object(e.StaticIcon)
	x.Object(e.AppearAnimation)
	x.Object(e.SelectAnimation)
	x.Object(e.ActivateAnimation)
	x.Object(e.EffectAnimation)
	if e.AroundAnimation != nil {
		x.Object(e.AroundAnimation)
	}
	if e.CenterIcon != nil {
		x.Object(e.CenterIcon)
	}
	return x.buf
}

func (e TL_messages_availableReactionsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_availableReactionsNotModified)
	return x.buf
}

func (e TL_messages_availableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_availableReactions)
	x.Int(e.Hash)
	x.Vector(e.Reactions)
	return x.buf
}

func (e TL_messagePeerReaction) encode() []byte {
	var flags int32
	if e.Big {
		flags |= (1 << 0)
	}
	if e.Unread {
		flags |= (1 << 1)
	}
	if e.My {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messagePeerReaction)
	x.Int(flags)
	x.Object(e.PeerID)
	x.Int(e.Date)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_groupCallStreamChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallStreamChannel)
	x.Int(e.Channel)
	x.Int(e.Scale)
	x.Long(e.LastTimestampMs)
	return x.buf
}

func (e TL_phone_groupCallStreamChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_groupCallStreamChannels)
	x.Vector(e.Channels)
	return x.buf
}

func (e TL_phone_groupCallStreamRtmpUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_groupCallStreamRtmpUrl)
	x.String(e.Url)
	x.String(e.Key)
	return x.buf
}

func (e TL_attachMenuBotIconColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBotIconColor)
	x.String(e.Name)
	x.Int(e.Color)
	return x.buf
}

func (e TL_attachMenuBotIcon) encode() []byte {
	var flags int32
	if e.Colors != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBotIcon)
	x.Int(flags)
	x.String(e.Name)
	x.Object(e.Icon)
	if e.Colors != nil {
		x.Vector(e.Colors)
	}
	return x.buf
}

func (e TL_attachMenuBot) encode() []byte {
	var flags int32
	if e.Inactive {
		flags |= (1 << 0)
	}
	if e.HasSettings {
		flags |= (1 << 1)
	}
	if e.RequestWriteAccess {
		flags |= (1 << 2)
	}
	if e.ShowInAttachMenu {
		flags |= (1 << 3)
	}
	if e.ShowInSideMenu {
		flags |= (1 << 4)
	}
	if e.SideMenuDisclaimerNeeded {
		flags |= (1 << 5)
	}
	if e.PeerTypes != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBot)
	x.Int(flags)
	x.Long(e.BotID)
	x.String(e.ShortName)
	if e.PeerTypes != nil {
		x.Vector(e.PeerTypes)
	}
	x.Vector(e.Icons)
	return x.buf
}

func (e TL_attachMenuBotsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBotsNotModified)
	return x.buf
}

func (e TL_attachMenuBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBots)
	x.Long(e.Hash)
	x.Vector(e.Bots)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_attachMenuBotsBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBotsBot)
	x.Object(e.Bot)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_webViewResultUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_webViewResultUrl)
	x.Long(e.QueryID)
	x.String(e.Url)
	return x.buf
}

func (e TL_simpleWebViewResultUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_simpleWebViewResultUrl)
	x.String(e.Url)
	return x.buf
}

func (e TL_webViewMessageSent) encode() []byte {
	var flags int32
	if e.MsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webViewMessageSent)
	x.Int(flags)
	if e.MsgID != nil {
		x.Object(e.MsgID)
	}
	return x.buf
}

func (e TL_botMenuButtonDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botMenuButtonDefault)
	return x.buf
}

func (e TL_botMenuButtonCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botMenuButtonCommands)
	return x.buf
}

func (e TL_botMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botMenuButton)
	x.String(e.Text)
	x.String(e.Url)
	return x.buf
}

func (e TL_account_savedRingtonesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_savedRingtonesNotModified)
	return x.buf
}

func (e TL_account_savedRingtones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_savedRingtones)
	x.Long(e.Hash)
	x.Vector(e.Ringtones)
	return x.buf
}

func (e TL_notificationSoundDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notificationSoundDefault)
	return x.buf
}

func (e TL_notificationSoundNone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notificationSoundNone)
	return x.buf
}

func (e TL_notificationSoundLocal) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notificationSoundLocal)
	x.String(e.Title)
	x.String(e.Data)
	return x.buf
}

func (e TL_notificationSoundRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notificationSoundRingtone)
	x.Long(e.ID)
	return x.buf
}

func (e TL_account_savedRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_savedRingtone)
	return x.buf
}

func (e TL_account_savedRingtoneConverted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_savedRingtoneConverted)
	x.Object(e.Document)
	return x.buf
}

func (e TL_attachMenuPeerTypeSameBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypeSameBotPM)
	return x.buf
}

func (e TL_attachMenuPeerTypeBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypeBotPM)
	return x.buf
}

func (e TL_attachMenuPeerTypePM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypePM)
	return x.buf
}

func (e TL_attachMenuPeerTypeChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypeChat)
	return x.buf
}

func (e TL_attachMenuPeerTypeBroadcast) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypeBroadcast)
	return x.buf
}

func (e TL_inputInvoiceMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputInvoiceMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_inputInvoiceSlug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputInvoiceSlug)
	x.String(e.Slug)
	return x.buf
}

func (e TL_inputInvoicePremiumGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputInvoicePremiumGiftCode)
	x.Object(e.Purpose)
	x.Object(e.Option)
	return x.buf
}

func (e TL_payments_exportedInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_exportedInvoice)
	x.String(e.Url)
	return x.buf
}

func (e TL_messages_transcribedAudio) encode() []byte {
	var flags int32
	if e.Pending {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_transcribedAudio)
	x.Int(flags)
	x.Long(e.TranscriptionID)
	x.String(e.Text)
	return x.buf
}

func (e TL_help_premiumPromo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_premiumPromo)
	x.String(e.StatusText)
	x.Vector(e.StatusEntities)
	x.VectorString(e.VideoSections)
	x.Vector(e.Videos)
	x.Vector(e.PeriodOptions)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_inputStorePaymentPremiumSubscription) encode() []byte {
	var flags int32
	if e.Restore {
		flags |= (1 << 0)
	}
	if e.Upgrade {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentPremiumSubscription)
	x.Int(flags)
	return x.buf
}

func (e TL_inputStorePaymentGiftPremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentGiftPremium)
	x.Object(e.UserID)
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_inputStorePaymentPremiumGiftCode) encode() []byte {
	var flags int32
	if e.BoostPeer != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentPremiumGiftCode)
	x.Int(flags)
	x.Vector(e.Users)
	if e.BoostPeer != nil {
		x.Object(e.BoostPeer)
	}
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_inputStorePaymentPremiumGiveaway) encode() []byte {
	var flags int32
	if e.OnlyNewSubscribers {
		flags |= (1 << 0)
	}
	if e.AdditionalPeers != nil {
		flags |= (1 << 1)
	}
	if e.CountriesIso2 != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentPremiumGiveaway)
	x.Int(flags)
	x.Object(e.BoostPeer)
	if e.AdditionalPeers != nil {
		x.Vector(e.AdditionalPeers)
	}
	if e.CountriesIso2 != nil {
		x.VectorString(e.CountriesIso2)
	}
	x.Long(e.RandomID)
	x.Int(e.UntilDate)
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_premiumGiftOption) encode() []byte {
	var flags int32
	if e.StoreProduct.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premiumGiftOption)
	x.Int(flags)
	x.Int(e.Months)
	x.String(e.Currency)
	x.Long(e.Amount)
	x.String(e.BotUrl)
	if e.StoreProduct.IsSet {
		x.String(e.StoreProduct.Value)
	}
	return x.buf
}

func (e TL_paymentFormMethod) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_paymentFormMethod)
	x.String(e.Url)
	x.String(e.Title)
	return x.buf
}

func (e TL_emojiStatusEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiStatusEmpty)
	return x.buf
}

func (e TL_emojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiStatus)
	x.Long(e.DocumentID)
	return x.buf
}

func (e TL_emojiStatusUntil) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiStatusUntil)
	x.Long(e.DocumentID)
	x.Int(e.Until)
	return x.buf
}

func (e TL_account_emojiStatusesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_emojiStatusesNotModified)
	return x.buf
}

func (e TL_account_emojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_emojiStatuses)
	x.Long(e.Hash)
	x.Vector(e.Statuses)
	return x.buf
}

func (e TL_reactionEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionEmpty)
	return x.buf
}

func (e TL_reactionEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionEmoji)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_reactionCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionCustomEmoji)
	x.Long(e.DocumentID)
	return x.buf
}

func (e TL_chatReactionsNone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatReactionsNone)
	return x.buf
}

func (e TL_chatReactionsAll) encode() []byte {
	var flags int32
	if e.AllowCustom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatReactionsAll)
	x.Int(flags)
	return x.buf
}

func (e TL_chatReactionsSome) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatReactionsSome)
	x.Vector(e.Reactions)
	return x.buf
}

func (e TL_messages_reactionsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reactionsNotModified)
	return x.buf
}

func (e TL_messages_reactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reactions)
	x.Long(e.Hash)
	x.Vector(e.Reactions)
	return x.buf
}

func (e TL_emailVerifyPurposeLoginSetup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerifyPurposeLoginSetup)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	return x.buf
}

func (e TL_emailVerifyPurposeLoginChange) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerifyPurposeLoginChange)
	return x.buf
}

func (e TL_emailVerifyPurposePassport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerifyPurposePassport)
	return x.buf
}

func (e TL_emailVerificationCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerificationCode)
	x.String(e.Code)
	return x.buf
}

func (e TL_emailVerificationGoogle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerificationGoogle)
	x.String(e.Token)
	return x.buf
}

func (e TL_emailVerificationApple) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerificationApple)
	x.String(e.Token)
	return x.buf
}

func (e TL_account_emailVerified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_emailVerified)
	x.String(e.Email)
	return x.buf
}

func (e TL_account_emailVerifiedLogin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_emailVerifiedLogin)
	x.String(e.Email)
	x.Object(e.SentCode)
	return x.buf
}

func (e TL_premiumSubscriptionOption) encode() []byte {
	var flags int32
	if e.Current {
		flags |= (1 << 1)
	}
	if e.CanPurchaseUpgrade {
		flags |= (1 << 2)
	}
	if e.Transaction.IsSet {
		flags |= (1 << 3)
	}
	if e.StoreProduct.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premiumSubscriptionOption)
	x.Int(flags)
	if e.Transaction.IsSet {
		x.String(e.Transaction.Value)
	}
	x.Int(e.Months)
	x.String(e.Currency)
	x.Long(e.Amount)
	x.String(e.BotUrl)
	if e.StoreProduct.IsSet {
		x.String(e.StoreProduct.Value)
	}
	return x.buf
}

func (e TL_sendAsPeer) encode() []byte {
	var flags int32
	if e.PremiumRequired {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendAsPeer)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messageExtendedMediaPreview) encode() []byte {
	var flags int32
	if e.W.IsSet {
		flags |= (1 << 0)
	}
	if e.H.IsSet {
		flags |= (1 << 0)
	}
	if e.Thumb != nil {
		flags |= (1 << 1)
	}
	if e.VideoDuration.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageExtendedMediaPreview)
	x.Int(flags)
	if e.W.IsSet {
		x.Int(e.W.Value)
	}
	if e.H.IsSet {
		x.Int(e.H.Value)
	}
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	if e.VideoDuration.IsSet {
		x.Int(e.VideoDuration.Value)
	}
	return x.buf
}

func (e TL_messageExtendedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageExtendedMedia)
	x.Object(e.Media)
	return x.buf
}

func (e TL_stickerKeyword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerKeyword)
	x.Long(e.DocumentID)
	x.VectorString(e.Keyword)
	return x.buf
}

func (e TL_username) encode() []byte {
	var flags int32
	if e.Editable {
		flags |= (1 << 0)
	}
	if e.Active {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_username)
	x.Int(flags)
	x.String(e.Username)
	return x.buf
}

func (e TL_forumTopicDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_forumTopicDeleted)
	x.Int(e.ID)
	return x.buf
}

func (e TL_forumTopic) encode() []byte {
	var flags int32
	if e.My {
		flags |= (1 << 1)
	}
	if e.Closed {
		flags |= (1 << 2)
	}
	if e.Pinned {
		flags |= (1 << 3)
	}
	if e.Short {
		flags |= (1 << 5)
	}
	if e.Hidden {
		flags |= (1 << 6)
	}
	if e.IconEmojiID.IsSet {
		flags |= (1 << 0)
	}
	if e.Draft != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_forumTopic)
	x.Int(flags)
	x.Int(e.ID)
	x.Int(e.Date)
	x.String(e.Title)
	x.Int(e.IconColor)
	if e.IconEmojiID.IsSet {
		x.Long(e.IconEmojiID.Value)
	}
	x.Int(e.TopMessage)
	x.Int(e.ReadInboxMaxID)
	x.Int(e.ReadOutboxMaxID)
	x.Int(e.UnreadCount)
	x.Int(e.UnreadMentionsCount)
	x.Int(e.UnreadReactionsCount)
	x.Object(e.FromID)
	x.Object(e.NotifySettings)
	if e.Draft != nil {
		x.Object(e.Draft)
	}
	return x.buf
}

func (e TL_messages_forumTopics) encode() []byte {
	var flags int32
	if e.OrderByCreateDate {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_forumTopics)
	x.Int(flags)
	x.Int(e.Count)
	x.Vector(e.Topics)
	x.Vector(e.Messages)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	x.Int(e.Pts)
	return x.buf
}

func (e TL_defaultHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_defaultHistoryTTL)
	x.Int(e.Period)
	return x.buf
}

func (e TL_exportedContactToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_exportedContactToken)
	x.String(e.Url)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_requestPeerTypeUser) encode() []byte {
	var flags int32
	if e.Bot.IsSet {
		flags |= (1 << 0)
	}
	if e.Premium.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_requestPeerTypeUser)
	x.Int(flags)
	if e.Bot.IsSet {
		x.Bool(e.Bot.Value)
	}
	if e.Premium.IsSet {
		x.Bool(e.Premium.Value)
	}
	return x.buf
}

func (e TL_requestPeerTypeChat) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.BotParticipant {
		flags |= (1 << 5)
	}
	if e.HasUsername.IsSet {
		flags |= (1 << 3)
	}
	if e.Forum.IsSet {
		flags |= (1 << 4)
	}
	if e.UserAdminRights != nil {
		flags |= (1 << 1)
	}
	if e.BotAdminRights != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_requestPeerTypeChat)
	x.Int(flags)
	if e.HasUsername.IsSet {
		x.Bool(e.HasUsername.Value)
	}
	if e.Forum.IsSet {
		x.Bool(e.Forum.Value)
	}
	if e.UserAdminRights != nil {
		x.Object(e.UserAdminRights)
	}
	if e.BotAdminRights != nil {
		x.Object(e.BotAdminRights)
	}
	return x.buf
}

func (e TL_requestPeerTypeBroadcast) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.HasUsername.IsSet {
		flags |= (1 << 3)
	}
	if e.UserAdminRights != nil {
		flags |= (1 << 1)
	}
	if e.BotAdminRights != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_requestPeerTypeBroadcast)
	x.Int(flags)
	if e.HasUsername.IsSet {
		x.Bool(e.HasUsername.Value)
	}
	if e.UserAdminRights != nil {
		x.Object(e.UserAdminRights)
	}
	if e.BotAdminRights != nil {
		x.Object(e.BotAdminRights)
	}
	return x.buf
}

func (e TL_emojiListNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiListNotModified)
	return x.buf
}

func (e TL_emojiList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiList)
	x.Long(e.Hash)
	x.VectorLong(e.DocumentID)
	return x.buf
}

func (e TL_emojiGroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiGroup)
	x.String(e.Title)
	x.Long(e.IconEmojiID)
	x.VectorString(e.Emoticons)
	return x.buf
}

func (e TL_messages_emojiGroupsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_emojiGroupsNotModified)
	return x.buf
}

func (e TL_messages_emojiGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_emojiGroups)
	x.Int(e.Hash)
	x.Vector(e.Groups)
	return x.buf
}

func (e TL_textWithEntities) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textWithEntities)
	x.String(e.Text)
	x.Vector(e.Entities)
	return x.buf
}

func (e TL_messages_translateResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_translateResult)
	x.Vector(e.Result)
	return x.buf
}

func (e TL_autoSaveSettings) encode() []byte {
	var flags int32
	if e.Photos {
		flags |= (1 << 0)
	}
	if e.Videos {
		flags |= (1 << 1)
	}
	if e.VideoMaxSize.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_autoSaveSettings)
	x.Int(flags)
	if e.VideoMaxSize.IsSet {
		x.Long(e.VideoMaxSize.Value)
	}
	return x.buf
}

func (e TL_autoSaveException) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_autoSaveException)
	x.Object(e.Peer)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_autoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_autoSaveSettings)
	x.Object(e.UsersSettings)
	x.Object(e.ChatsSettings)
	x.Object(e.BroadcastsSettings)
	x.Vector(e.Exceptions)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_help_appConfigNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_appConfigNotModified)
	return x.buf
}

func (e TL_help_appConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_appConfig)
	x.Int(e.Hash)
	x.Object(e.Config)
	return x.buf
}

func (e TL_inputBotAppID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotAppID)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputBotAppShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotAppShortName)
	x.Object(e.BotID)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_botAppNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botAppNotModified)
	return x.buf
}

func (e TL_botApp) encode() []byte {
	var flags int32
	if e.Document != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botApp)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.ShortName)
	x.String(e.Title)
	x.String(e.Description)
	x.Object(e.Photo)
	if e.Document != nil {
		x.Object(e.Document)
	}
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_botApp) encode() []byte {
	var flags int32
	if e.Inactive {
		flags |= (1 << 0)
	}
	if e.RequestWriteAccess {
		flags |= (1 << 1)
	}
	if e.HasSettings {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_botApp)
	x.Int(flags)
	x.Object(e.App)
	return x.buf
}

func (e TL_appWebViewResultUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_appWebViewResultUrl)
	x.String(e.Url)
	return x.buf
}

func (e TL_inlineBotWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineBotWebView)
	x.String(e.Text)
	x.String(e.Url)
	return x.buf
}

func (e TL_readParticipantDate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_readParticipantDate)
	x.Long(e.UserID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_inputChatlistDialogFilter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChatlistDialogFilter)
	x.Int(e.FilterID)
	return x.buf
}

func (e TL_exportedChatlistInvite) encode() []byte {
	var flags int32
	x := NewEncodeBuf(512)
	x.UInt(CRC_exportedChatlistInvite)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Url)
	x.Vector(e.Peers)
	return x.buf
}

func (e TL_chatlists_exportedChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_exportedChatlistInvite)
	x.Object(e.Filter)
	x.Object(e.Invite)
	return x.buf
}

func (e TL_chatlists_exportedInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_exportedInvites)
	x.Vector(e.Invites)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_chatlists_chatlistInviteAlready) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_chatlistInviteAlready)
	x.Int(e.FilterID)
	x.Vector(e.MissingPeers)
	x.Vector(e.AlreadyPeers)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_chatlists_chatlistInvite) encode() []byte {
	var flags int32
	if e.Emoticon.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_chatlistInvite)
	x.Int(flags)
	x.String(e.Title)
	if e.Emoticon.IsSet {
		x.String(e.Emoticon.Value)
	}
	x.Vector(e.Peers)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_chatlists_chatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_chatlistUpdates)
	x.Vector(e.MissingPeers)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_bots_botInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_botInfo)
	x.String(e.Name)
	x.String(e.About)
	x.String(e.Description)
	return x.buf
}

func (e TL_messagePeerVote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messagePeerVote)
	x.Object(e.Peer)
	x.StringBytes(e.Option)
	x.Int(e.Date)
	return x.buf
}

func (e TL_messagePeerVoteInputOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messagePeerVoteInputOption)
	x.Object(e.Peer)
	x.Int(e.Date)
	return x.buf
}

func (e TL_messagePeerVoteMultiple) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messagePeerVoteMultiple)
	x.Object(e.Peer)
	x.VectorBytes(e.Options)
	x.Int(e.Date)
	return x.buf
}

func (e TL_sponsoredWebPage) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_sponsoredWebPage)
	x.Int(flags)
	x.String(e.Url)
	x.String(e.SiteName)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	return x.buf
}

func (e TL_storyViews) encode() []byte {
	var flags int32
	if e.HasViewers {
		flags |= (1 << 1)
	}
	if e.ForwardsCount.IsSet {
		flags |= (1 << 2)
	}
	if e.Reactions != nil {
		flags |= (1 << 3)
	}
	if e.ReactionsCount.IsSet {
		flags |= (1 << 4)
	}
	if e.RecentViewers != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyViews)
	x.Int(flags)
	x.Int(e.ViewsCount)
	if e.ForwardsCount.IsSet {
		x.Int(e.ForwardsCount.Value)
	}
	if e.Reactions != nil {
		x.Vector(e.Reactions)
	}
	if e.ReactionsCount.IsSet {
		x.Int(e.ReactionsCount.Value)
	}
	if e.RecentViewers != nil {
		x.VectorLong(e.RecentViewers)
	}
	return x.buf
}

func (e TL_storyItemDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyItemDeleted)
	x.Int(e.ID)
	return x.buf
}

func (e TL_storyItemSkipped) encode() []byte {
	var flags int32
	if e.CloseFriends {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyItemSkipped)
	x.Int(flags)
	x.Int(e.ID)
	x.Int(e.Date)
	x.Int(e.ExpireDate)
	return x.buf
}

func (e TL_storyItem) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 5)
	}
	if e.Public {
		flags |= (1 << 7)
	}
	if e.CloseFriends {
		flags |= (1 << 8)
	}
	if e.Min {
		flags |= (1 << 9)
	}
	if e.Noforwards {
		flags |= (1 << 10)
	}
	if e.Edited {
		flags |= (1 << 11)
	}
	if e.Contacts {
		flags |= (1 << 12)
	}
	if e.SelectedContacts {
		flags |= (1 << 13)
	}
	if e.Out {
		flags |= (1 << 16)
	}
	if e.Caption.IsSet {
		flags |= (1 << 0)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.MediaAreas != nil {
		flags |= (1 << 14)
	}
	if e.Privacy != nil {
		flags |= (1 << 2)
	}
	if e.Views != nil {
		flags |= (1 << 3)
	}
	if e.SentReaction != nil {
		flags |= (1 << 15)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyItem)
	x.Int(flags)
	x.Int(e.ID)
	x.Int(e.Date)
	x.Int(e.ExpireDate)
	if e.Caption.IsSet {
		x.String(e.Caption.Value)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	x.Object(e.Media)
	if e.MediaAreas != nil {
		x.Vector(e.MediaAreas)
	}
	if e.Privacy != nil {
		x.Vector(e.Privacy)
	}
	if e.Views != nil {
		x.Object(e.Views)
	}
	if e.SentReaction != nil {
		x.Object(e.SentReaction)
	}
	return x.buf
}

func (e TL_stories_allStoriesNotModified) encode() []byte {
	var flags int32
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_allStoriesNotModified)
	x.Int(flags)
	x.String(e.State)
	x.Object(e.StealthMode)
	return x.buf
}

func (e TL_stories_allStories) encode() []byte {
	var flags int32
	if e.HasMore {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_allStories)
	x.Int(flags)
	x.Int(e.Count)
	x.String(e.State)
	x.Vector(e.PeerStories)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	x.Object(e.StealthMode)
	return x.buf
}

func (e TL_stories_stories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_stories)
	x.Int(e.Count)
	x.Vector(e.Stories)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_storyView) encode() []byte {
	var flags int32
	if e.Blocked {
		flags |= (1 << 0)
	}
	if e.BlockedMyStoriesFrom {
		flags |= (1 << 1)
	}
	if e.Reaction != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyView)
	x.Int(flags)
	x.Long(e.UserID)
	x.Int(e.Date)
	if e.Reaction != nil {
		x.Object(e.Reaction)
	}
	return x.buf
}

func (e TL_stories_storyViewsList) encode() []byte {
	var flags int32
	if e.NextOffset.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_storyViewsList)
	x.Int(flags)
	x.Int(e.Count)
	x.Int(e.ReactionsCount)
	x.Vector(e.Views)
	x.Vector(e.Users)
	if e.NextOffset.IsSet {
		x.String(e.NextOffset.Value)
	}
	return x.buf
}

func (e TL_stories_storyViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_storyViews)
	x.Vector(e.Views)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_inputReplyToMessage) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	if e.ReplyToPeerID != nil {
		flags |= (1 << 1)
	}
	if e.QuoteText.IsSet {
		flags |= (1 << 2)
	}
	if e.QuoteEntities != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReplyToMessage)
	x.Int(flags)
	x.Int(e.ReplyToMsgID)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	if e.ReplyToPeerID != nil {
		x.Object(e.ReplyToPeerID)
	}
	if e.QuoteText.IsSet {
		x.String(e.QuoteText.Value)
	}
	if e.QuoteEntities != nil {
		x.Vector(e.QuoteEntities)
	}
	return x.buf
}

func (e TL_inputReplyToStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReplyToStory)
	x.Object(e.UserID)
	x.Int(e.StoryID)
	return x.buf
}

func (e TL_exportedStoryLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_exportedStoryLink)
	x.String(e.Link)
	return x.buf
}

func (e TL_storiesStealthMode) encode() []byte {
	var flags int32
	if e.ActiveUntilDate.IsSet {
		flags |= (1 << 0)
	}
	if e.CooldownUntilDate.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storiesStealthMode)
	x.Int(flags)
	if e.ActiveUntilDate.IsSet {
		x.Int(e.ActiveUntilDate.Value)
	}
	if e.CooldownUntilDate.IsSet {
		x.Int(e.CooldownUntilDate.Value)
	}
	return x.buf
}

func (e TL_mediaAreaCoordinates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaCoordinates)
	x.Double(e.X)
	x.Double(e.Y)
	x.Double(e.W)
	x.Double(e.H)
	x.Double(e.Rotation)
	return x.buf
}

func (e TL_mediaAreaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaVenue)
	x.Object(e.Coordinates)
	x.Object(e.Geo)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	return x.buf
}

func (e TL_inputMediaAreaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaAreaVenue)
	x.Object(e.Coordinates)
	x.Long(e.QueryID)
	x.String(e.ResultID)
	return x.buf
}

func (e TL_mediaAreaGeoPoint) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaGeoPoint)
	x.Object(e.Coordinates)
	x.Object(e.Geo)
	return x.buf
}

func (e TL_mediaAreaSuggestedReaction) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	if e.Flipped {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaSuggestedReaction)
	x.Int(flags)
	x.Object(e.Coordinates)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_peerStories) encode() []byte {
	var flags int32
	if e.MaxReadID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerStories)
	x.Int(flags)
	x.Object(e.Peer)
	if e.MaxReadID.IsSet {
		x.Int(e.MaxReadID.Value)
	}
	x.Vector(e.Stories)
	return x.buf
}

func (e TL_stories_peerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_peerStories)
	x.Object(e.Stories)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_messages_webPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_webPage)
	x.Object(e.Webpage)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_premiumGiftCodeOption) encode() []byte {
	var flags int32
	if e.StoreProduct.IsSet {
		flags |= (1 << 0)
	}
	if e.StoreQuantity.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premiumGiftCodeOption)
	x.Int(flags)
	x.Int(e.Users)
	x.Int(e.Months)
	if e.StoreProduct.IsSet {
		x.String(e.StoreProduct.Value)
	}
	if e.StoreQuantity.IsSet {
		x.Int(e.StoreQuantity.Value)
	}
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_payments_checkedGiftCode) encode() []byte {
	var flags int32
	if e.ViaGiveaway {
		flags |= (1 << 2)
	}
	if e.GiveawayMsgID.IsSet {
		flags |= (1 << 3)
	}
	if e.ToID.IsSet {
		flags |= (1 << 0)
	}
	if e.UsedDate.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_checkedGiftCode)
	x.Int(flags)
	x.Object(e.FromID)
	if e.GiveawayMsgID.IsSet {
		x.Int(e.GiveawayMsgID.Value)
	}
	if e.ToID.IsSet {
		x.Long(e.ToID.Value)
	}
	x.Int(e.Date)
	x.Int(e.Months)
	if e.UsedDate.IsSet {
		x.Int(e.UsedDate.Value)
	}
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_payments_giveawayInfo) encode() []byte {
	var flags int32
	if e.Participating {
		flags |= (1 << 0)
	}
	if e.PreparingResults {
		flags |= (1 << 3)
	}
	if e.JoinedTooEarlyDate.IsSet {
		flags |= (1 << 1)
	}
	if e.AdminDisallowedChatID.IsSet {
		flags |= (1 << 2)
	}
	if e.DisallowedCountry.IsSet {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_giveawayInfo)
	x.Int(flags)
	x.Int(e.StartDate)
	if e.JoinedTooEarlyDate.IsSet {
		x.Int(e.JoinedTooEarlyDate.Value)
	}
	if e.AdminDisallowedChatID.IsSet {
		x.Long(e.AdminDisallowedChatID.Value)
	}
	if e.DisallowedCountry.IsSet {
		x.String(e.DisallowedCountry.Value)
	}
	return x.buf
}

func (e TL_payments_giveawayInfoResults) encode() []byte {
	var flags int32
	if e.Winner {
		flags |= (1 << 0)
	}
	if e.Refunded {
		flags |= (1 << 1)
	}
	if e.GiftCodeSlug.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_giveawayInfoResults)
	x.Int(flags)
	x.Int(e.StartDate)
	if e.GiftCodeSlug.IsSet {
		x.String(e.GiftCodeSlug.Value)
	}
	x.Int(e.FinishDate)
	x.Int(e.WinnersCount)
	x.Int(e.ActivatedCount)
	return x.buf
}

func (e TL_prepaidGiveaway) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_prepaidGiveaway)
	x.Long(e.ID)
	x.Int(e.Months)
	x.Int(e.Quantity)
	x.Int(e.Date)
	return x.buf
}

func (e TL_boost) encode() []byte {
	var flags int32
	if e.Gift {
		flags |= (1 << 1)
	}
	if e.Giveaway {
		flags |= (1 << 2)
	}
	if e.Unclaimed {
		flags |= (1 << 3)
	}
	if e.UserID.IsSet {
		flags |= (1 << 0)
	}
	if e.GiveawayMsgID.IsSet {
		flags |= (1 << 2)
	}
	if e.UsedGiftSlug.IsSet {
		flags |= (1 << 4)
	}
	if e.Multiplier.IsSet {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_boost)
	x.Int(flags)
	x.String(e.ID)
	if e.UserID.IsSet {
		x.Long(e.UserID.Value)
	}
	if e.GiveawayMsgID.IsSet {
		x.Int(e.GiveawayMsgID.Value)
	}
	x.Int(e.Date)
	x.Int(e.Expires)
	if e.UsedGiftSlug.IsSet {
		x.String(e.UsedGiftSlug.Value)
	}
	if e.Multiplier.IsSet {
		x.Int(e.Multiplier.Value)
	}
	return x.buf
}

func (e TL_premium_boostsList) encode() []byte {
	var flags int32
	if e.NextOffset.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_boostsList)
	x.Int(flags)
	x.Int(e.Count)
	x.Vector(e.Boosts)
	if e.NextOffset.IsSet {
		x.String(e.NextOffset.Value)
	}
	x.Vector(e.Users)
	return x.buf
}

func (e TL_myBoost) encode() []byte {
	var flags int32
	if e.Peer != nil {
		flags |= (1 << 0)
	}
	if e.CooldownUntilDate.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_myBoost)
	x.Int(flags)
	x.Int(e.Slot)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	x.Int(e.Date)
	x.Int(e.Expires)
	if e.CooldownUntilDate.IsSet {
		x.Int(e.CooldownUntilDate.Value)
	}
	return x.buf
}

func (e TL_premium_myBoosts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_myBoosts)
	x.Vector(e.MyBoosts)
	x.Vector(e.Chats)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_premium_boostsStatus) encode() []byte {
	var flags int32
	if e.MyBoost {
		flags |= (1 << 2)
	}
	if e.GiftBoosts.IsSet {
		flags |= (1 << 4)
	}
	if e.NextLevelBoosts.IsSet {
		flags |= (1 << 0)
	}
	if e.PremiumAudience != nil {
		flags |= (1 << 1)
	}
	if e.PrepaidGiveaways != nil {
		flags |= (1 << 3)
	}
	if e.MyBoostSlots != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_boostsStatus)
	x.Int(flags)
	x.Int(e.Level)
	x.Int(e.CurrentLevelBoosts)
	x.Int(e.Boosts)
	if e.GiftBoosts.IsSet {
		x.Int(e.GiftBoosts.Value)
	}
	if e.NextLevelBoosts.IsSet {
		x.Int(e.NextLevelBoosts.Value)
	}
	if e.PremiumAudience != nil {
		x.Object(e.PremiumAudience)
	}
	x.String(e.BoostUrl)
	if e.PrepaidGiveaways != nil {
		x.Vector(e.PrepaidGiveaways)
	}
	if e.MyBoostSlots != nil {
		x.VectorInt(e.MyBoostSlots)
	}
	return x.buf
}

func (e TL_invokeAfterMsg) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeAfterMsg)
	x.Long(e.MsgID)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeAfterMsgs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeAfterMsgs)
	x.VectorLong(e.MsgIds)
	x.Object(e.Query)
	return x.buf
}

func (e TL_initConnection) encode() []byte {
	var flags int32
	if e.Proxy != nil {
		flags |= (1 << 0)
	}
	if e.Params != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_initConnection)
	x.Int(flags)
	x.Int(e.ApiID)
	x.String(e.DeviceModel)
	x.String(e.SystemVersion)
	x.String(e.AppVersion)
	x.String(e.SystemLangCode)
	x.String(e.LangPack)
	x.String(e.LangCode)
	if e.Proxy != nil {
		x.Object(e.Proxy)
	}
	if e.Params != nil {
		x.Object(e.Params)
	}
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithLayer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithLayer)
	x.Int(e.Layer)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithoutUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithoutUpdates)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithMessagesRange) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithMessagesRange)
	x.Object(e.Range)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithTakeout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithTakeout)
	x.Long(e.TakeoutID)
	x.Object(e.Query)
	return x.buf
}

func (e TL_auth_sendCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sendCode)
	x.String(e.PhoneNumber)
	x.Int(e.ApiID)
	x.String(e.ApiHash)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_auth_signUp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_signUp)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	x.String(e.FirstName)
	x.String(e.LastName)
	return x.buf
}

func (e TL_auth_signIn) encode() []byte {
	var flags int32
	if e.PhoneCode.IsSet {
		flags |= (1 << 0)
	}
	if e.EmailVerification != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_signIn)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	if e.PhoneCode.IsSet {
		x.String(e.PhoneCode.Value)
	}
	if e.EmailVerification != nil {
		x.Object(e.EmailVerification)
	}
	return x.buf
}

func (e TL_auth_logOut) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_logOut)
	return x.buf
}

func (e TL_auth_resetAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_resetAuthorizations)
	return x.buf
}

func (e TL_auth_exportAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_exportAuthorization)
	x.Int(e.DcID)
	return x.buf
}

func (e TL_auth_importAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_importAuthorization)
	x.Long(e.ID)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_auth_bindTempAuthKey) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_bindTempAuthKey)
	x.Long(e.PermAuthKeyID)
	x.Long(e.Nonce)
	x.Int(e.ExpiresAt)
	x.StringBytes(e.EncryptedMessage)
	return x.buf
}

func (e TL_auth_importBotAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_importBotAuthorization)
	x.Int(e.Flags)
	x.Int(e.ApiID)
	x.String(e.ApiHash)
	x.String(e.BotAuthToken)
	return x.buf
}

func (e TL_auth_checkPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_checkPassword)
	x.Object(e.Password)
	return x.buf
}

func (e TL_auth_requestPasswordRecovery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_requestPasswordRecovery)
	return x.buf
}

func (e TL_auth_recoverPassword) encode() []byte {
	var flags int32
	if e.NewSettings != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_recoverPassword)
	x.Int(flags)
	x.String(e.Code)
	if e.NewSettings != nil {
		x.Object(e.NewSettings)
	}
	return x.buf
}

func (e TL_auth_resendCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_resendCode)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	return x.buf
}

func (e TL_auth_cancelCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_cancelCode)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	return x.buf
}

func (e TL_auth_dropTempAuthKeys) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_dropTempAuthKeys)
	x.VectorLong(e.ExceptAuthKeys)
	return x.buf
}

func (e TL_auth_exportLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_exportLoginToken)
	x.Int(e.ApiID)
	x.String(e.ApiHash)
	x.VectorLong(e.ExceptIds)
	return x.buf
}

func (e TL_auth_importLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_importLoginToken)
	x.StringBytes(e.Token)
	return x.buf
}

func (e TL_auth_acceptLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_acceptLoginToken)
	x.StringBytes(e.Token)
	return x.buf
}

func (e TL_auth_checkRecoveryPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_checkRecoveryPassword)
	x.String(e.Code)
	return x.buf
}

func (e TL_auth_importWebTokenAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_importWebTokenAuthorization)
	x.Int(e.ApiID)
	x.String(e.ApiHash)
	x.String(e.WebAuthToken)
	return x.buf
}

func (e TL_auth_requestFirebaseSms) encode() []byte {
	var flags int32
	if e.SafetyNetToken.IsSet {
		flags |= (1 << 0)
	}
	if e.IosPushSecret.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_requestFirebaseSms)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	if e.SafetyNetToken.IsSet {
		x.String(e.SafetyNetToken.Value)
	}
	if e.IosPushSecret.IsSet {
		x.String(e.IosPushSecret.Value)
	}
	return x.buf
}

func (e TL_auth_resetLoginEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_resetLoginEmail)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	return x.buf
}

func (e TL_account_registerDevice) encode() []byte {
	var flags int32
	if e.NoMuted {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_registerDevice)
	x.Int(flags)
	x.Int(e.TokenType)
	x.String(e.Token)
	x.Bool(e.AppSandbox)
	x.StringBytes(e.Secret)
	x.VectorLong(e.OtherUids)
	return x.buf
}

func (e TL_account_unregisterDevice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_unregisterDevice)
	x.Int(e.TokenType)
	x.String(e.Token)
	x.VectorLong(e.OtherUids)
	return x.buf
}

func (e TL_account_updateNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateNotifySettings)
	x.Object(e.Peer)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_getNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getNotifySettings)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_account_resetNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetNotifySettings)
	return x.buf
}

func (e TL_account_updateProfile) encode() []byte {
	var flags int32
	if e.FirstName.IsSet {
		flags |= (1 << 0)
	}
	if e.LastName.IsSet {
		flags |= (1 << 1)
	}
	if e.About.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateProfile)
	x.Int(flags)
	if e.FirstName.IsSet {
		x.String(e.FirstName.Value)
	}
	if e.LastName.IsSet {
		x.String(e.LastName.Value)
	}
	if e.About.IsSet {
		x.String(e.About.Value)
	}
	return x.buf
}

func (e TL_account_updateStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateStatus)
	x.Bool(e.Offline)
	return x.buf
}

func (e TL_account_getWallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getWallPapers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_reportPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_reportPeer)
	x.Object(e.Peer)
	x.Object(e.Reason)
	x.String(e.Message)
	return x.buf
}

func (e TL_account_checkUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_checkUsername)
	x.String(e.Username)
	return x.buf
}

func (e TL_account_updateUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateUsername)
	x.String(e.Username)
	return x.buf
}

func (e TL_account_getPrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getPrivacy)
	x.Object(e.Key)
	return x.buf
}

func (e TL_account_setPrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setPrivacy)
	x.Object(e.Key)
	x.Vector(e.Rules)
	return x.buf
}

func (e TL_account_deleteAccount) encode() []byte {
	var flags int32
	if e.Password != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_deleteAccount)
	x.Int(flags)
	x.String(e.Reason)
	if e.Password != nil {
		x.Object(e.Password)
	}
	return x.buf
}

func (e TL_account_getAccountTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAccountTTL)
	return x.buf
}

func (e TL_account_setAccountTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setAccountTTL)
	x.Object(e.Ttl)
	return x.buf
}

func (e TL_account_sendChangePhoneCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sendChangePhoneCode)
	x.String(e.PhoneNumber)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_changePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_changePhone)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	x.String(e.PhoneCode)
	return x.buf
}

func (e TL_account_updateDeviceLocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateDeviceLocked)
	x.Int(e.Period)
	return x.buf
}

func (e TL_account_getAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAuthorizations)
	return x.buf
}

func (e TL_account_resetAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetAuthorization)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getPassword)
	return x.buf
}

func (e TL_account_getPasswordSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getPasswordSettings)
	x.Object(e.Password)
	return x.buf
}

func (e TL_account_updatePasswordSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updatePasswordSettings)
	x.Object(e.Password)
	x.Object(e.NewSettings)
	return x.buf
}

func (e TL_account_sendConfirmPhoneCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sendConfirmPhoneCode)
	x.String(e.Hash)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_confirmPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_confirmPhone)
	x.String(e.PhoneCodeHash)
	x.String(e.PhoneCode)
	return x.buf
}

func (e TL_account_getTmpPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getTmpPassword)
	x.Object(e.Password)
	x.Int(e.Period)
	return x.buf
}

func (e TL_account_getWebAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getWebAuthorizations)
	return x.buf
}

func (e TL_account_resetWebAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetWebAuthorization)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_resetWebAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetWebAuthorizations)
	return x.buf
}

func (e TL_account_getAllSecureValues) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAllSecureValues)
	return x.buf
}

func (e TL_account_getSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getSecureValue)
	x.Vector(e.Types)
	return x.buf
}

func (e TL_account_saveSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveSecureValue)
	x.Object(e.Value)
	x.Long(e.SecureSecretID)
	return x.buf
}

func (e TL_account_deleteSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_deleteSecureValue)
	x.Vector(e.Types)
	return x.buf
}

func (e TL_account_getAuthorizationForm) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAuthorizationForm)
	x.Long(e.BotID)
	x.String(e.Scope)
	x.String(e.PublicKey)
	return x.buf
}

func (e TL_account_acceptAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_acceptAuthorization)
	x.Long(e.BotID)
	x.String(e.Scope)
	x.String(e.PublicKey)
	x.Vector(e.ValueHashes)
	x.Object(e.Credentials)
	return x.buf
}

func (e TL_account_sendVerifyPhoneCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sendVerifyPhoneCode)
	x.String(e.PhoneNumber)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_verifyPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_verifyPhone)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	x.String(e.PhoneCode)
	return x.buf
}

func (e TL_account_sendVerifyEmailCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sendVerifyEmailCode)
	x.Object(e.Purpose)
	x.String(e.Email)
	return x.buf
}

func (e TL_account_verifyEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_verifyEmail)
	x.Object(e.Purpose)
	x.Object(e.Verification)
	return x.buf
}

func (e TL_account_initTakeoutSession) encode() []byte {
	var flags int32
	if e.Contacts {
		flags |= (1 << 0)
	}
	if e.MessageUsers {
		flags |= (1 << 1)
	}
	if e.MessageChats {
		flags |= (1 << 2)
	}
	if e.MessageMegagroups {
		flags |= (1 << 3)
	}
	if e.MessageChannels {
		flags |= (1 << 4)
	}
	if e.Files {
		flags |= (1 << 5)
	}
	if e.FileMaxSize.IsSet {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_initTakeoutSession)
	x.Int(flags)
	if e.FileMaxSize.IsSet {
		x.Long(e.FileMaxSize.Value)
	}
	return x.buf
}

func (e TL_account_finishTakeoutSession) encode() []byte {
	var flags int32
	if e.Success {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_finishTakeoutSession)
	x.Int(flags)
	return x.buf
}

func (e TL_account_confirmPasswordEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_confirmPasswordEmail)
	x.String(e.Code)
	return x.buf
}

func (e TL_account_resendPasswordEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resendPasswordEmail)
	return x.buf
}

func (e TL_account_cancelPasswordEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_cancelPasswordEmail)
	return x.buf
}

func (e TL_account_getContactSignUpNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getContactSignUpNotification)
	return x.buf
}

func (e TL_account_setContactSignUpNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setContactSignUpNotification)
	x.Bool(e.Silent)
	return x.buf
}

func (e TL_account_getNotifyExceptions) encode() []byte {
	var flags int32
	if e.CompareSound {
		flags |= (1 << 1)
	}
	if e.CompareStories {
		flags |= (1 << 2)
	}
	if e.Peer != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getNotifyExceptions)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	return x.buf
}

func (e TL_account_getWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getWallPaper)
	x.Object(e.Wallpaper)
	return x.buf
}

func (e TL_account_uploadWallPaper) encode() []byte {
	var flags int32
	if e.ForChat {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_uploadWallPaper)
	x.Int(flags)
	x.Object(e.File)
	x.String(e.MimeType)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_saveWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveWallPaper)
	x.Object(e.Wallpaper)
	x.Bool(e.Unsave)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_installWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_installWallPaper)
	x.Object(e.Wallpaper)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_resetWallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetWallPapers)
	return x.buf
}

func (e TL_account_getAutoDownloadSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAutoDownloadSettings)
	return x.buf
}

func (e TL_account_saveAutoDownloadSettings) encode() []byte {
	var flags int32
	if e.Low {
		flags |= (1 << 0)
	}
	if e.High {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveAutoDownloadSettings)
	x.Int(flags)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_uploadTheme) encode() []byte {
	var flags int32
	if e.Thumb != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_uploadTheme)
	x.Int(flags)
	x.Object(e.File)
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	x.String(e.FileName)
	x.String(e.MimeType)
	return x.buf
}

func (e TL_account_createTheme) encode() []byte {
	var flags int32
	if e.Document != nil {
		flags |= (1 << 2)
	}
	if e.Settings != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_createTheme)
	x.Int(flags)
	x.String(e.Slug)
	x.String(e.Title)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Settings != nil {
		x.Vector(e.Settings)
	}
	return x.buf
}

func (e TL_account_updateTheme) encode() []byte {
	var flags int32
	if e.Slug.IsSet {
		flags |= (1 << 0)
	}
	if e.Title.IsSet {
		flags |= (1 << 1)
	}
	if e.Document != nil {
		flags |= (1 << 2)
	}
	if e.Settings != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateTheme)
	x.Int(flags)
	x.String(e.Format)
	x.Object(e.Theme)
	if e.Slug.IsSet {
		x.String(e.Slug.Value)
	}
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Settings != nil {
		x.Vector(e.Settings)
	}
	return x.buf
}

func (e TL_account_saveTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveTheme)
	x.Object(e.Theme)
	x.Bool(e.Unsave)
	return x.buf
}

func (e TL_account_installTheme) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	if e.Theme != nil {
		flags |= (1 << 1)
	}
	if e.Format.IsSet {
		flags |= (1 << 2)
	}
	if e.BaseTheme != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_installTheme)
	x.Int(flags)
	if e.Theme != nil {
		x.Object(e.Theme)
	}
	if e.Format.IsSet {
		x.String(e.Format.Value)
	}
	if e.BaseTheme != nil {
		x.Object(e.BaseTheme)
	}
	return x.buf
}

func (e TL_account_getTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getTheme)
	x.String(e.Format)
	x.Object(e.Theme)
	return x.buf
}

func (e TL_account_getThemes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getThemes)
	x.String(e.Format)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_setContentSettings) encode() []byte {
	var flags int32
	if e.SensitiveEnabled {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setContentSettings)
	x.Int(flags)
	return x.buf
}

func (e TL_account_getContentSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getContentSettings)
	return x.buf
}

func (e TL_account_getMultiWallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getMultiWallPapers)
	x.Vector(e.Wallpapers)
	return x.buf
}

func (e TL_account_getGlobalPrivacySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getGlobalPrivacySettings)
	return x.buf
}

func (e TL_account_setGlobalPrivacySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setGlobalPrivacySettings)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_reportProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_reportProfilePhoto)
	x.Object(e.Peer)
	x.Object(e.PhotoID)
	x.Object(e.Reason)
	x.String(e.Message)
	return x.buf
}

func (e TL_account_resetPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetPassword)
	return x.buf
}

func (e TL_account_declinePasswordReset) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_declinePasswordReset)
	return x.buf
}

func (e TL_account_getChatThemes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getChatThemes)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_setAuthorizationTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setAuthorizationTTL)
	x.Int(e.AuthorizationTtlDays)
	return x.buf
}

func (e TL_account_changeAuthorizationSettings) encode() []byte {
	var flags int32
	if e.Confirmed {
		flags |= (1 << 3)
	}
	if e.EncryptedRequestsDisabled.IsSet {
		flags |= (1 << 0)
	}
	if e.CallRequestsDisabled.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_changeAuthorizationSettings)
	x.Int(flags)
	x.Long(e.Hash)
	if e.EncryptedRequestsDisabled.IsSet {
		x.Bool(e.EncryptedRequestsDisabled.Value)
	}
	if e.CallRequestsDisabled.IsSet {
		x.Bool(e.CallRequestsDisabled.Value)
	}
	return x.buf
}

func (e TL_account_getSavedRingtones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getSavedRingtones)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_saveRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveRingtone)
	x.Object(e.ID)
	x.Bool(e.Unsave)
	return x.buf
}

func (e TL_account_uploadRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_uploadRingtone)
	x.Object(e.File)
	x.String(e.FileName)
	x.String(e.MimeType)
	return x.buf
}

func (e TL_account_updateEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateEmojiStatus)
	x.Object(e.EmojiStatus)
	return x.buf
}

func (e TL_account_getDefaultEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getDefaultEmojiStatuses)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getRecentEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getRecentEmojiStatuses)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_clearRecentEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_clearRecentEmojiStatuses)
	return x.buf
}

func (e TL_account_reorderUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_reorderUsernames)
	x.VectorString(e.Order)
	return x.buf
}

func (e TL_account_toggleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_toggleUsername)
	x.String(e.Username)
	x.Bool(e.Active)
	return x.buf
}

func (e TL_account_getDefaultProfilePhotoEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getDefaultProfilePhotoEmojis)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getDefaultGroupPhotoEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getDefaultGroupPhotoEmojis)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getAutoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAutoSaveSettings)
	return x.buf
}

func (e TL_account_saveAutoSaveSettings) encode() []byte {
	var flags int32
	if e.Users {
		flags |= (1 << 0)
	}
	if e.Chats {
		flags |= (1 << 1)
	}
	if e.Broadcasts {
		flags |= (1 << 2)
	}
	if e.Peer != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveAutoSaveSettings)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_deleteAutoSaveExceptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_deleteAutoSaveExceptions)
	return x.buf
}

func (e TL_account_invalidateSignInCodes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_invalidateSignInCodes)
	x.VectorString(e.Codes)
	return x.buf
}

func (e TL_account_updateColor) encode() []byte {
	var flags int32
	if e.BackgroundEmojiID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateColor)
	x.Int(flags)
	x.Int(e.Color)
	if e.BackgroundEmojiID.IsSet {
		x.Long(e.BackgroundEmojiID.Value)
	}
	return x.buf
}

func (e TL_account_getDefaultBackgroundEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getDefaultBackgroundEmojis)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_users_getUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_users_getUsers)
	x.Vector(e.ID)
	return x.buf
}

func (e TL_users_getFullUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_users_getFullUser)
	x.Object(e.ID)
	return x.buf
}

func (e TL_users_setSecureValueErrors) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_users_setSecureValueErrors)
	x.Object(e.ID)
	x.Vector(e.Errors)
	return x.buf
}

func (e TL_contacts_getContactIDs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getContactIDs)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_contacts_getStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getStatuses)
	return x.buf
}

func (e TL_contacts_getContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getContacts)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_contacts_importContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_importContacts)
	x.Vector(e.Contacts)
	return x.buf
}

func (e TL_contacts_deleteContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_deleteContacts)
	x.Vector(e.ID)
	return x.buf
}

func (e TL_contacts_deleteByPhones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_deleteByPhones)
	x.VectorString(e.Phones)
	return x.buf
}

func (e TL_contacts_block) encode() []byte {
	var flags int32
	if e.MyStoriesFrom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_block)
	x.Int(flags)
	x.Object(e.ID)
	return x.buf
}

func (e TL_contacts_unblock) encode() []byte {
	var flags int32
	if e.MyStoriesFrom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_unblock)
	x.Int(flags)
	x.Object(e.ID)
	return x.buf
}

func (e TL_contacts_getBlocked) encode() []byte {
	var flags int32
	if e.MyStoriesFrom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getBlocked)
	x.Int(flags)
	x.Int(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_contacts_search) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_search)
	x.String(e.Q)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_contacts_resolveUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resolveUsername)
	x.String(e.Username)
	return x.buf
}

func (e TL_contacts_getTopPeers) encode() []byte {
	var flags int32
	if e.Correspondents {
		flags |= (1 << 0)
	}
	if e.BotsPm {
		flags |= (1 << 1)
	}
	if e.BotsInline {
		flags |= (1 << 2)
	}
	if e.PhoneCalls {
		flags |= (1 << 3)
	}
	if e.ForwardUsers {
		flags |= (1 << 4)
	}
	if e.ForwardChats {
		flags |= (1 << 5)
	}
	if e.Groups {
		flags |= (1 << 10)
	}
	if e.Channels {
		flags |= (1 << 15)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getTopPeers)
	x.Int(flags)
	x.Int(e.Offset)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_contacts_resetTopPeerRating) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resetTopPeerRating)
	x.Object(e.Category)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_contacts_resetSaved) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resetSaved)
	return x.buf
}

func (e TL_contacts_getSaved) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getSaved)
	return x.buf
}

func (e TL_contacts_toggleTopPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_toggleTopPeers)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_contacts_addContact) encode() []byte {
	var flags int32
	if e.AddPhonePrivacyException {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_addContact)
	x.Int(flags)
	x.Object(e.ID)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Phone)
	return x.buf
}

func (e TL_contacts_acceptContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_acceptContact)
	x.Object(e.ID)
	return x.buf
}

func (e TL_contacts_getLocated) encode() []byte {
	var flags int32
	if e.Background {
		flags |= (1 << 1)
	}
	if e.SelfExpires.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getLocated)
	x.Int(flags)
	x.Object(e.GeoPoint)
	if e.SelfExpires.IsSet {
		x.Int(e.SelfExpires.Value)
	}
	return x.buf
}

func (e TL_contacts_blockFromReplies) encode() []byte {
	var flags int32
	if e.DeleteMessage {
		flags |= (1 << 0)
	}
	if e.DeleteHistory {
		flags |= (1 << 1)
	}
	if e.ReportSpam {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_blockFromReplies)
	x.Int(flags)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_contacts_resolvePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resolvePhone)
	x.String(e.Phone)
	return x.buf
}

func (e TL_contacts_exportContactToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_exportContactToken)
	return x.buf
}

func (e TL_contacts_importContactToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_importContactToken)
	x.String(e.Token)
	return x.buf
}

func (e TL_contacts_editCloseFriends) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_editCloseFriends)
	x.VectorLong(e.ID)
	return x.buf
}

func (e TL_contacts_setBlocked) encode() []byte {
	var flags int32
	if e.MyStoriesFrom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_setBlocked)
	x.Int(flags)
	x.Vector(e.ID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessages)
	x.Vector(e.ID)
	return x.buf
}

func (e TL_messages_getDialogs) encode() []byte {
	var flags int32
	if e.ExcludePinned {
		flags |= (1 << 0)
	}
	if e.FolderID.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDialogs)
	x.Int(flags)
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	x.Int(e.OffsetDate)
	x.Int(e.OffsetID)
	x.Object(e.OffsetPeer)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getHistory)
	x.Object(e.Peer)
	x.Int(e.OffsetID)
	x.Int(e.OffsetDate)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_search) encode() []byte {
	var flags int32
	if e.FromID != nil {
		flags |= (1 << 0)
	}
	if e.TopMsgID.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_search)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.Q)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	x.Object(e.Filter)
	x.Int(e.MinDate)
	x.Int(e.MaxDate)
	x.Int(e.OffsetID)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_readHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readHistory)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_messages_deleteHistory) encode() []byte {
	var flags int32
	if e.JustClear {
		flags |= (1 << 0)
	}
	if e.Revoke {
		flags |= (1 << 1)
	}
	if e.MinDate.IsSet {
		flags |= (1 << 2)
	}
	if e.MaxDate.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteHistory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	if e.MinDate.IsSet {
		x.Int(e.MinDate.Value)
	}
	if e.MaxDate.IsSet {
		x.Int(e.MaxDate.Value)
	}
	return x.buf
}

func (e TL_messages_deleteMessages) encode() []byte {
	var flags int32
	if e.Revoke {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteMessages)
	x.Int(flags)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_receivedMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_receivedMessages)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_messages_setTyping) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setTyping)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	x.Object(e.Action)
	return x.buf
}

func (e TL_messages_sendMessage) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.ClearDraft {
		flags |= (1 << 7)
	}
	if e.Noforwards {
		flags |= (1 << 14)
	}
	if e.UpdateStickersetsOrder {
		flags |= (1 << 15)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.ScheduleDate.IsSet {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendMessage)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.String(e.Message)
	x.Long(e.RandomID)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.ScheduleDate.IsSet {
		x.Int(e.ScheduleDate.Value)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_messages_sendMedia) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.ClearDraft {
		flags |= (1 << 7)
	}
	if e.Noforwards {
		flags |= (1 << 14)
	}
	if e.UpdateStickersetsOrder {
		flags |= (1 << 15)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.ScheduleDate.IsSet {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendMedia)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Object(e.Media)
	x.String(e.Message)
	x.Long(e.RandomID)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.ScheduleDate.IsSet {
		x.Int(e.ScheduleDate.Value)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_messages_forwardMessages) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.WithMyScore {
		flags |= (1 << 8)
	}
	if e.DropAuthor {
		flags |= (1 << 11)
	}
	if e.DropMediaCaptions {
		flags |= (1 << 12)
	}
	if e.Noforwards {
		flags |= (1 << 14)
	}
	if e.TopMsgID.IsSet {
		flags |= (1 << 9)
	}
	if e.ScheduleDate.IsSet {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_forwardMessages)
	x.Int(flags)
	x.Object(e.FromPeer)
	x.VectorInt(e.ID)
	x.VectorLong(e.RandomID)
	x.Object(e.ToPeer)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	if e.ScheduleDate.IsSet {
		x.Int(e.ScheduleDate.Value)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_messages_reportSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reportSpam)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getPeerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPeerSettings)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_report) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_report)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	x.Object(e.Reason)
	x.String(e.Message)
	return x.buf
}

func (e TL_messages_getChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getChats)
	x.VectorLong(e.ID)
	return x.buf
}

func (e TL_messages_getFullChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getFullChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_messages_editChatTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatTitle)
	x.Long(e.ChatID)
	x.String(e.Title)
	return x.buf
}

func (e TL_messages_editChatPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatPhoto)
	x.Long(e.ChatID)
	x.Object(e.Photo)
	return x.buf
}

func (e TL_messages_addChatUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_addChatUser)
	x.Long(e.ChatID)
	x.Object(e.UserID)
	x.Int(e.FwdLimit)
	return x.buf
}

func (e TL_messages_deleteChatUser) encode() []byte {
	var flags int32
	if e.RevokeHistory {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteChatUser)
	x.Int(flags)
	x.Long(e.ChatID)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messages_createChat) encode() []byte {
	var flags int32
	if e.TtlPeriod.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_createChat)
	x.Int(flags)
	x.Vector(e.Users)
	x.String(e.Title)
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	return x.buf
}

func (e TL_messages_getDhConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDhConfig)
	x.Int(e.Version)
	x.Int(e.RandomLength)
	return x.buf
}

func (e TL_messages_requestEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestEncryption)
	x.Object(e.UserID)
	x.Int(e.RandomID)
	x.StringBytes(e.GA)
	return x.buf
}

func (e TL_messages_acceptEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_acceptEncryption)
	x.Object(e.Peer)
	x.StringBytes(e.GB)
	x.Long(e.KeyFingerprint)
	return x.buf
}

func (e TL_messages_discardEncryption) encode() []byte {
	var flags int32
	if e.DeleteHistory {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_discardEncryption)
	x.Int(flags)
	x.Int(e.ChatID)
	return x.buf
}

func (e TL_messages_setEncryptedTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setEncryptedTyping)
	x.Object(e.Peer)
	x.Bool(e.Typing)
	return x.buf
}

func (e TL_messages_readEncryptedHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readEncryptedHistory)
	x.Object(e.Peer)
	x.Int(e.MaxDate)
	return x.buf
}

func (e TL_messages_sendEncrypted) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendEncrypted)
	x.Int(flags)
	x.Object(e.Peer)
	x.Long(e.RandomID)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_messages_sendEncryptedFile) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendEncryptedFile)
	x.Int(flags)
	x.Object(e.Peer)
	x.Long(e.RandomID)
	x.StringBytes(e.Data)
	x.Object(e.File)
	return x.buf
}

func (e TL_messages_sendEncryptedService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendEncryptedService)
	x.Object(e.Peer)
	x.Long(e.RandomID)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_messages_receivedQueue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_receivedQueue)
	x.Int(e.MaxQts)
	return x.buf
}

func (e TL_messages_reportEncryptedSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reportEncryptedSpam)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_readMessageContents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readMessageContents)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_getStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getStickers)
	x.String(e.Emoticon)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getAllStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAllStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getWebPagePreview) encode() []byte {
	var flags int32
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getWebPagePreview)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	return x.buf
}

func (e TL_messages_exportChatInvite) encode() []byte {
	var flags int32
	if e.LegacyRevokePermanent {
		flags |= (1 << 2)
	}
	if e.RequestNeeded {
		flags |= (1 << 3)
	}
	if e.ExpireDate.IsSet {
		flags |= (1 << 0)
	}
	if e.UsageLimit.IsSet {
		flags |= (1 << 1)
	}
	if e.Title.IsSet {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_exportChatInvite)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ExpireDate.IsSet {
		x.Int(e.ExpireDate.Value)
	}
	if e.UsageLimit.IsSet {
		x.Int(e.UsageLimit.Value)
	}
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	return x.buf
}

func (e TL_messages_checkChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_checkChatInvite)
	x.String(e.Hash)
	return x.buf
}

func (e TL_messages_importChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_importChatInvite)
	x.String(e.Hash)
	return x.buf
}

func (e TL_messages_getStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getStickerSet)
	x.Object(e.Stickerset)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_installStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_installStickerSet)
	x.Object(e.Stickerset)
	x.Bool(e.Archived)
	return x.buf
}

func (e TL_messages_uninstallStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_uninstallStickerSet)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_messages_startBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_startBot)
	x.Object(e.Bot)
	x.Object(e.Peer)
	x.Long(e.RandomID)
	x.String(e.StartParam)
	return x.buf
}

func (e TL_messages_getMessagesViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessagesViews)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	x.Bool(e.Increment)
	return x.buf
}

func (e TL_messages_editChatAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatAdmin)
	x.Long(e.ChatID)
	x.Object(e.UserID)
	x.Bool(e.IsAdmin)
	return x.buf
}

func (e TL_messages_migrateChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_migrateChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_messages_searchGlobal) encode() []byte {
	var flags int32
	if e.FolderID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchGlobal)
	x.Int(flags)
	if e.FolderID.IsSet {
		x.Int(e.FolderID.Value)
	}
	x.String(e.Q)
	x.Object(e.Filter)
	x.Int(e.MinDate)
	x.Int(e.MaxDate)
	x.Int(e.OffsetRate)
	x.Object(e.OffsetPeer)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_reorderStickerSets) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reorderStickerSets)
	x.Int(flags)
	x.VectorLong(e.Order)
	return x.buf
}

func (e TL_messages_getDocumentByHash) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDocumentByHash)
	x.StringBytes(e.Sha256)
	x.Long(e.Size)
	x.String(e.MimeType)
	return x.buf
}

func (e TL_messages_getSavedGifs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSavedGifs)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_saveGif) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_saveGif)
	x.Object(e.ID)
	x.Bool(e.Unsave)
	return x.buf
}

func (e TL_messages_getInlineBotResults) encode() []byte {
	var flags int32
	if e.GeoPoint != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getInlineBotResults)
	x.Int(flags)
	x.Object(e.Bot)
	x.Object(e.Peer)
	if e.GeoPoint != nil {
		x.Object(e.GeoPoint)
	}
	x.String(e.Query)
	x.String(e.Offset)
	return x.buf
}

func (e TL_messages_setInlineBotResults) encode() []byte {
	var flags int32
	if e.Gallery {
		flags |= (1 << 0)
	}
	if e.Private {
		flags |= (1 << 1)
	}
	if e.NextOffset.IsSet {
		flags |= (1 << 2)
	}
	if e.SwitchPm != nil {
		flags |= (1 << 3)
	}
	if e.SwitchWebview != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setInlineBotResults)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Vector(e.Results)
	x.Int(e.CacheTime)
	if e.NextOffset.IsSet {
		x.String(e.NextOffset.Value)
	}
	if e.SwitchPm != nil {
		x.Object(e.SwitchPm)
	}
	if e.SwitchWebview != nil {
		x.Object(e.SwitchWebview)
	}
	return x.buf
}

func (e TL_messages_sendInlineBotResult) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.ClearDraft {
		flags |= (1 << 7)
	}
	if e.HideVia {
		flags |= (1 << 11)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.ScheduleDate.IsSet {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendInlineBotResult)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Long(e.RandomID)
	x.Long(e.QueryID)
	x.String(e.ID)
	if e.ScheduleDate.IsSet {
		x.Int(e.ScheduleDate.Value)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_messages_getMessageEditData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessageEditData)
	x.Object(e.Peer)
	x.Int(e.ID)
	return x.buf
}

func (e TL_messages_editMessage) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.Message.IsSet {
		flags |= (1 << 11)
	}
	if e.Media != nil {
		flags |= (1 << 14)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.ScheduleDate.IsSet {
		flags |= (1 << 15)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editMessage)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Message.IsSet {
		x.String(e.Message.Value)
	}
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.ScheduleDate.IsSet {
		x.Int(e.ScheduleDate.Value)
	}
	return x.buf
}

func (e TL_messages_editInlineBotMessage) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.Message.IsSet {
		flags |= (1 << 11)
	}
	if e.Media != nil {
		flags |= (1 << 14)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editInlineBotMessage)
	x.Int(flags)
	x.Object(e.ID)
	if e.Message.IsSet {
		x.String(e.Message.Value)
	}
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	return x.buf
}

func (e TL_messages_getBotCallbackAnswer) encode() []byte {
	var flags int32
	if e.Game {
		flags |= (1 << 1)
	}
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.Password != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getBotCallbackAnswer)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	if e.Data != nil {
		x.StringBytes(e.Data)
	}
	if e.Password != nil {
		x.Object(e.Password)
	}
	return x.buf
}

func (e TL_messages_setBotCallbackAnswer) encode() []byte {
	var flags int32
	if e.Alert {
		flags |= (1 << 1)
	}
	if e.Message.IsSet {
		flags |= (1 << 0)
	}
	if e.Url.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setBotCallbackAnswer)
	x.Int(flags)
	x.Long(e.QueryID)
	if e.Message.IsSet {
		x.String(e.Message.Value)
	}
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	x.Int(e.CacheTime)
	return x.buf
}

func (e TL_messages_getPeerDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPeerDialogs)
	x.Vector(e.Peers)
	return x.buf
}

func (e TL_messages_saveDraft) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.InvertMedia {
		flags |= (1 << 6)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 4)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.Media != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_saveDraft)
	x.Int(flags)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Object(e.Peer)
	x.String(e.Message)
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.Media != nil {
		x.Object(e.Media)
	}
	return x.buf
}

func (e TL_messages_getAllDrafts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAllDrafts)
	return x.buf
}

func (e TL_messages_getFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getFeaturedStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_readFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readFeaturedStickers)
	x.VectorLong(e.ID)
	return x.buf
}

func (e TL_messages_getRecentStickers) encode() []byte {
	var flags int32
	if e.Attached {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getRecentStickers)
	x.Int(flags)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_saveRecentSticker) encode() []byte {
	var flags int32
	if e.Attached {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_saveRecentSticker)
	x.Int(flags)
	x.Object(e.ID)
	x.Bool(e.Unsave)
	return x.buf
}

func (e TL_messages_clearRecentStickers) encode() []byte {
	var flags int32
	if e.Attached {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_clearRecentStickers)
	x.Int(flags)
	return x.buf
}

func (e TL_messages_getArchivedStickers) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getArchivedStickers)
	x.Int(flags)
	x.Long(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getMaskStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMaskStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getAttachedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAttachedStickers)
	x.Object(e.Media)
	return x.buf
}

func (e TL_messages_setGameScore) encode() []byte {
	var flags int32
	if e.EditMessage {
		flags |= (1 << 0)
	}
	if e.Force {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setGameScore)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	x.Object(e.UserID)
	x.Int(e.Score)
	return x.buf
}

func (e TL_messages_setInlineGameScore) encode() []byte {
	var flags int32
	if e.EditMessage {
		flags |= (1 << 0)
	}
	if e.Force {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setInlineGameScore)
	x.Int(flags)
	x.Object(e.ID)
	x.Object(e.UserID)
	x.Int(e.Score)
	return x.buf
}

func (e TL_messages_getGameHighScores) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getGameHighScores)
	x.Object(e.Peer)
	x.Int(e.ID)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messages_getInlineGameHighScores) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getInlineGameHighScores)
	x.Object(e.ID)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messages_getCommonChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getCommonChats)
	x.Object(e.UserID)
	x.Long(e.MaxID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getWebPage)
	x.String(e.Url)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_toggleDialogPin) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleDialogPin)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_reorderPinnedDialogs) encode() []byte {
	var flags int32
	if e.Force {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reorderPinnedDialogs)
	x.Int(flags)
	x.Int(e.FolderID)
	x.Vector(e.Order)
	return x.buf
}

func (e TL_messages_getPinnedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPinnedDialogs)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_messages_setBotShippingResults) encode() []byte {
	var flags int32
	if e.Error.IsSet {
		flags |= (1 << 0)
	}
	if e.ShippingOptions != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setBotShippingResults)
	x.Int(flags)
	x.Long(e.QueryID)
	if e.Error.IsSet {
		x.String(e.Error.Value)
	}
	if e.ShippingOptions != nil {
		x.Vector(e.ShippingOptions)
	}
	return x.buf
}

func (e TL_messages_setBotPrecheckoutResults) encode() []byte {
	var flags int32
	if e.Success {
		flags |= (1 << 1)
	}
	if e.Error.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setBotPrecheckoutResults)
	x.Int(flags)
	x.Long(e.QueryID)
	if e.Error.IsSet {
		x.String(e.Error.Value)
	}
	return x.buf
}

func (e TL_messages_uploadMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_uploadMedia)
	x.Object(e.Peer)
	x.Object(e.Media)
	return x.buf
}

func (e TL_messages_sendScreenshotNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendScreenshotNotification)
	x.Object(e.Peer)
	x.Object(e.ReplyTo)
	x.Long(e.RandomID)
	return x.buf
}

func (e TL_messages_getFavedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getFavedStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_faveSticker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_faveSticker)
	x.Object(e.ID)
	x.Bool(e.Unfave)
	return x.buf
}

func (e TL_messages_getUnreadMentions) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getUnreadMentions)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	x.Int(e.OffsetID)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	return x.buf
}

func (e TL_messages_readMentions) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readMentions)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	return x.buf
}

func (e TL_messages_getRecentLocations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getRecentLocations)
	x.Object(e.Peer)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_sendMultiMedia) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.ClearDraft {
		flags |= (1 << 7)
	}
	if e.Noforwards {
		flags |= (1 << 14)
	}
	if e.UpdateStickersetsOrder {
		flags |= (1 << 15)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.ScheduleDate.IsSet {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendMultiMedia)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Vector(e.MultiMedia)
	if e.ScheduleDate.IsSet {
		x.Int(e.ScheduleDate.Value)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_messages_uploadEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_uploadEncryptedFile)
	x.Object(e.Peer)
	x.Object(e.File)
	return x.buf
}

func (e TL_messages_searchStickerSets) encode() []byte {
	var flags int32
	if e.ExcludeFeatured {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchStickerSets)
	x.Int(flags)
	x.String(e.Q)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getSplitRanges) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSplitRanges)
	return x.buf
}

func (e TL_messages_markDialogUnread) encode() []byte {
	var flags int32
	if e.Unread {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_markDialogUnread)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getDialogUnreadMarks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDialogUnreadMarks)
	return x.buf
}

func (e TL_messages_clearAllDrafts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_clearAllDrafts)
	return x.buf
}

func (e TL_messages_updatePinnedMessage) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 0)
	}
	if e.Unpin {
		flags |= (1 << 1)
	}
	if e.PmOneside {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_updatePinnedMessage)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	return x.buf
}

func (e TL_messages_sendVote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendVote)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.VectorBytes(e.Options)
	return x.buf
}

func (e TL_messages_getPollResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPollResults)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_getOnlines) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getOnlines)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_editChatAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatAbout)
	x.Object(e.Peer)
	x.String(e.About)
	return x.buf
}

func (e TL_messages_editChatDefaultBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatDefaultBannedRights)
	x.Object(e.Peer)
	x.Object(e.BannedRights)
	return x.buf
}

func (e TL_messages_getEmojiKeywords) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiKeywords)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_messages_getEmojiKeywordsDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiKeywordsDifference)
	x.String(e.LangCode)
	x.Int(e.FromVersion)
	return x.buf
}

func (e TL_messages_getEmojiKeywordsLanguages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiKeywordsLanguages)
	x.VectorString(e.LangCodes)
	return x.buf
}

func (e TL_messages_getEmojiURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiURL)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_messages_getSearchCounters) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSearchCounters)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	x.Vector(e.Filters)
	return x.buf
}

func (e TL_messages_requestUrlAuth) encode() []byte {
	var flags int32
	if e.Peer != nil {
		flags |= (1 << 1)
	}
	if e.MsgID.IsSet {
		flags |= (1 << 1)
	}
	if e.ButtonID.IsSet {
		flags |= (1 << 1)
	}
	if e.Url.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestUrlAuth)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	if e.MsgID.IsSet {
		x.Int(e.MsgID.Value)
	}
	if e.ButtonID.IsSet {
		x.Int(e.ButtonID.Value)
	}
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	return x.buf
}

func (e TL_messages_acceptUrlAuth) encode() []byte {
	var flags int32
	if e.WriteAllowed {
		flags |= (1 << 0)
	}
	if e.Peer != nil {
		flags |= (1 << 1)
	}
	if e.MsgID.IsSet {
		flags |= (1 << 1)
	}
	if e.ButtonID.IsSet {
		flags |= (1 << 1)
	}
	if e.Url.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_acceptUrlAuth)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	if e.MsgID.IsSet {
		x.Int(e.MsgID.Value)
	}
	if e.ButtonID.IsSet {
		x.Int(e.ButtonID.Value)
	}
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	return x.buf
}

func (e TL_messages_hidePeerSettingsBar) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_hidePeerSettingsBar)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getScheduledHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getScheduledHistory)
	x.Object(e.Peer)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getScheduledMessages)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_sendScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendScheduledMessages)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_deleteScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteScheduledMessages)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_getPollVotes) encode() []byte {
	var flags int32
	if e.Option != nil {
		flags |= (1 << 0)
	}
	if e.Offset.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPollVotes)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Option != nil {
		x.StringBytes(e.Option)
	}
	if e.Offset.IsSet {
		x.String(e.Offset.Value)
	}
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_toggleStickerSets) encode() []byte {
	var flags int32
	if e.Uninstall {
		flags |= (1 << 0)
	}
	if e.Archive {
		flags |= (1 << 1)
	}
	if e.Unarchive {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleStickerSets)
	x.Int(flags)
	x.Vector(e.Stickersets)
	return x.buf
}

func (e TL_messages_getDialogFilters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDialogFilters)
	return x.buf
}

func (e TL_messages_getSuggestedDialogFilters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSuggestedDialogFilters)
	return x.buf
}

func (e TL_messages_updateDialogFilter) encode() []byte {
	var flags int32
	if e.Filter != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_updateDialogFilter)
	x.Int(flags)
	x.Int(e.ID)
	if e.Filter != nil {
		x.Object(e.Filter)
	}
	return x.buf
}

func (e TL_messages_updateDialogFiltersOrder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_updateDialogFiltersOrder)
	x.VectorInt(e.Order)
	return x.buf
}

func (e TL_messages_getOldFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getOldFeaturedStickers)
	x.Int(e.Offset)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getReplies) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getReplies)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Int(e.OffsetID)
	x.Int(e.OffsetDate)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getDiscussionMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDiscussionMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_readDiscussion) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readDiscussion)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Int(e.ReadMaxID)
	return x.buf
}

func (e TL_messages_unpinAllMessages) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_unpinAllMessages)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	return x.buf
}

func (e TL_messages_deleteChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_messages_deletePhoneCallHistory) encode() []byte {
	var flags int32
	if e.Revoke {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deletePhoneCallHistory)
	x.Int(flags)
	return x.buf
}

func (e TL_messages_checkHistoryImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_checkHistoryImport)
	x.String(e.ImportHead)
	return x.buf
}

func (e TL_messages_initHistoryImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_initHistoryImport)
	x.Object(e.Peer)
	x.Object(e.File)
	x.Int(e.MediaCount)
	return x.buf
}

func (e TL_messages_uploadImportedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_uploadImportedMedia)
	x.Object(e.Peer)
	x.Long(e.ImportID)
	x.String(e.FileName)
	x.Object(e.Media)
	return x.buf
}

func (e TL_messages_startHistoryImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_startHistoryImport)
	x.Object(e.Peer)
	x.Long(e.ImportID)
	return x.buf
}

func (e TL_messages_getExportedChatInvites) encode() []byte {
	var flags int32
	if e.Revoked {
		flags |= (1 << 3)
	}
	if e.OffsetDate.IsSet {
		flags |= (1 << 2)
	}
	if e.OffsetLink.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getExportedChatInvites)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.AdminID)
	if e.OffsetDate.IsSet {
		x.Int(e.OffsetDate.Value)
	}
	if e.OffsetLink.IsSet {
		x.String(e.OffsetLink.Value)
	}
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getExportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getExportedChatInvite)
	x.Object(e.Peer)
	x.String(e.Link)
	return x.buf
}

func (e TL_messages_editExportedChatInvite) encode() []byte {
	var flags int32
	if e.Revoked {
		flags |= (1 << 2)
	}
	if e.ExpireDate.IsSet {
		flags |= (1 << 0)
	}
	if e.UsageLimit.IsSet {
		flags |= (1 << 1)
	}
	if e.RequestNeeded.IsSet {
		flags |= (1 << 3)
	}
	if e.Title.IsSet {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editExportedChatInvite)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.Link)
	if e.ExpireDate.IsSet {
		x.Int(e.ExpireDate.Value)
	}
	if e.UsageLimit.IsSet {
		x.Int(e.UsageLimit.Value)
	}
	if e.RequestNeeded.IsSet {
		x.Bool(e.RequestNeeded.Value)
	}
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	return x.buf
}

func (e TL_messages_deleteRevokedExportedChatInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteRevokedExportedChatInvites)
	x.Object(e.Peer)
	x.Object(e.AdminID)
	return x.buf
}

func (e TL_messages_deleteExportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteExportedChatInvite)
	x.Object(e.Peer)
	x.String(e.Link)
	return x.buf
}

func (e TL_messages_getAdminsWithInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAdminsWithInvites)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getChatInviteImporters) encode() []byte {
	var flags int32
	if e.Requested {
		flags |= (1 << 0)
	}
	if e.Link.IsSet {
		flags |= (1 << 1)
	}
	if e.Q.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getChatInviteImporters)
	x.Int(flags)
	x.Object(e.Peer)
	if e.Link.IsSet {
		x.String(e.Link.Value)
	}
	if e.Q.IsSet {
		x.String(e.Q.Value)
	}
	x.Int(e.OffsetDate)
	x.Object(e.OffsetUser)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_setHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setHistoryTTL)
	x.Object(e.Peer)
	x.Int(e.Period)
	return x.buf
}

func (e TL_messages_checkHistoryImportPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_checkHistoryImportPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_setChatTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setChatTheme)
	x.Object(e.Peer)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_messages_getMessageReadParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessageReadParticipants)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_getSearchResultsCalendar) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSearchResultsCalendar)
	x.Object(e.Peer)
	x.Object(e.Filter)
	x.Int(e.OffsetID)
	x.Int(e.OffsetDate)
	return x.buf
}

func (e TL_messages_getSearchResultsPositions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSearchResultsPositions)
	x.Object(e.Peer)
	x.Object(e.Filter)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_hideChatJoinRequest) encode() []byte {
	var flags int32
	if e.Approved {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_hideChatJoinRequest)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messages_hideAllChatJoinRequests) encode() []byte {
	var flags int32
	if e.Approved {
		flags |= (1 << 0)
	}
	if e.Link.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_hideAllChatJoinRequests)
	x.Int(flags)
	x.Object(e.Peer)
	if e.Link.IsSet {
		x.String(e.Link.Value)
	}
	return x.buf
}

func (e TL_messages_toggleNoForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleNoForwards)
	x.Object(e.Peer)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_messages_saveDefaultSendAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_saveDefaultSendAs)
	x.Object(e.Peer)
	x.Object(e.SendAs)
	return x.buf
}

func (e TL_messages_sendReaction) encode() []byte {
	var flags int32
	if e.Big {
		flags |= (1 << 1)
	}
	if e.AddToRecent {
		flags |= (1 << 2)
	}
	if e.Reaction != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendReaction)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	if e.Reaction != nil {
		x.Vector(e.Reaction)
	}
	return x.buf
}

func (e TL_messages_getMessagesReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessagesReactions)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_getMessageReactionsList) encode() []byte {
	var flags int32
	if e.Reaction != nil {
		flags |= (1 << 0)
	}
	if e.Offset.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessageReactionsList)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Reaction != nil {
		x.Object(e.Reaction)
	}
	if e.Offset.IsSet {
		x.String(e.Offset.Value)
	}
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_setChatAvailableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setChatAvailableReactions)
	x.Object(e.Peer)
	x.Object(e.AvailableReactions)
	return x.buf
}

func (e TL_messages_getAvailableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAvailableReactions)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_setDefaultReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setDefaultReaction)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_messages_translateText) encode() []byte {
	var flags int32
	if e.Peer != nil {
		flags |= (1 << 0)
	}
	if e.ID != nil {
		flags |= (1 << 0)
	}
	if e.Text != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_translateText)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	if e.ID != nil {
		x.VectorInt(e.ID)
	}
	if e.Text != nil {
		x.Vector(e.Text)
	}
	x.String(e.ToLang)
	return x.buf
}

func (e TL_messages_getUnreadReactions) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getUnreadReactions)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	x.Int(e.OffsetID)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	return x.buf
}

func (e TL_messages_readReactions) encode() []byte {
	var flags int32
	if e.TopMsgID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readReactions)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID.IsSet {
		x.Int(e.TopMsgID.Value)
	}
	return x.buf
}

func (e TL_messages_searchSentMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchSentMedia)
	x.String(e.Q)
	x.Object(e.Filter)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getAttachMenuBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAttachMenuBots)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getAttachMenuBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAttachMenuBot)
	x.Object(e.Bot)
	return x.buf
}

func (e TL_messages_toggleBotInAttachMenu) encode() []byte {
	var flags int32
	if e.WriteAllowed {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleBotInAttachMenu)
	x.Int(flags)
	x.Object(e.Bot)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_messages_requestWebView) encode() []byte {
	var flags int32
	if e.FromBotMenu {
		flags |= (1 << 4)
	}
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Url.IsSet {
		flags |= (1 << 1)
	}
	if e.StartParam.IsSet {
		flags |= (1 << 3)
	}
	if e.ThemeParams != nil {
		flags |= (1 << 2)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestWebView)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.Bot)
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	if e.StartParam.IsSet {
		x.String(e.StartParam.Value)
	}
	if e.ThemeParams != nil {
		x.Object(e.ThemeParams)
	}
	x.String(e.Platform)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_messages_prolongWebView) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_prolongWebView)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.Bot)
	x.Long(e.QueryID)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_messages_requestSimpleWebView) encode() []byte {
	var flags int32
	if e.FromSwitchWebview {
		flags |= (1 << 1)
	}
	if e.FromSideMenu {
		flags |= (1 << 2)
	}
	if e.Url.IsSet {
		flags |= (1 << 3)
	}
	if e.StartParam.IsSet {
		flags |= (1 << 4)
	}
	if e.ThemeParams != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestSimpleWebView)
	x.Int(flags)
	x.Object(e.Bot)
	if e.Url.IsSet {
		x.String(e.Url.Value)
	}
	if e.StartParam.IsSet {
		x.String(e.StartParam.Value)
	}
	if e.ThemeParams != nil {
		x.Object(e.ThemeParams)
	}
	x.String(e.Platform)
	return x.buf
}

func (e TL_messages_sendWebViewResultMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendWebViewResultMessage)
	x.String(e.BotQueryID)
	x.Object(e.Result)
	return x.buf
}

func (e TL_messages_sendWebViewData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendWebViewData)
	x.Object(e.Bot)
	x.Long(e.RandomID)
	x.String(e.ButtonText)
	x.String(e.Data)
	return x.buf
}

func (e TL_messages_transcribeAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_transcribeAudio)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_rateTranscribedAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_rateTranscribedAudio)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.TranscriptionID)
	x.Bool(e.Good)
	return x.buf
}

func (e TL_messages_getCustomEmojiDocuments) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getCustomEmojiDocuments)
	x.VectorLong(e.DocumentID)
	return x.buf
}

func (e TL_messages_getEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getFeaturedEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getFeaturedEmojiStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_reportReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reportReaction)
	x.Object(e.Peer)
	x.Int(e.ID)
	x.Object(e.ReactionPeer)
	return x.buf
}

func (e TL_messages_getTopReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getTopReactions)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getRecentReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getRecentReactions)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_clearRecentReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_clearRecentReactions)
	return x.buf
}

func (e TL_messages_getExtendedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getExtendedMedia)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_setDefaultHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setDefaultHistoryTTL)
	x.Int(e.Period)
	return x.buf
}

func (e TL_messages_getDefaultHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDefaultHistoryTTL)
	return x.buf
}

func (e TL_messages_sendBotRequestedPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendBotRequestedPeer)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Int(e.ButtonID)
	x.Object(e.RequestedPeer)
	return x.buf
}

func (e TL_messages_getEmojiGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiGroups)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_getEmojiStatusGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiStatusGroups)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_getEmojiProfilePhotoGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiProfilePhotoGroups)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_searchCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchCustomEmoji)
	x.String(e.Emoticon)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_togglePeerTranslations) encode() []byte {
	var flags int32
	if e.Disabled {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_togglePeerTranslations)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getBotApp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getBotApp)
	x.Object(e.App)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_requestAppWebView) encode() []byte {
	var flags int32
	if e.WriteAllowed {
		flags |= (1 << 0)
	}
	if e.StartParam.IsSet {
		flags |= (1 << 1)
	}
	if e.ThemeParams != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestAppWebView)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.App)
	if e.StartParam.IsSet {
		x.String(e.StartParam.Value)
	}
	if e.ThemeParams != nil {
		x.Object(e.ThemeParams)
	}
	x.String(e.Platform)
	return x.buf
}

func (e TL_messages_setChatWallPaper) encode() []byte {
	var flags int32
	if e.Wallpaper != nil {
		flags |= (1 << 0)
	}
	if e.Settings != nil {
		flags |= (1 << 2)
	}
	if e.ID.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setChatWallPaper)
	x.Int(flags)
	x.Object(e.Peer)
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	if e.Settings != nil {
		x.Object(e.Settings)
	}
	if e.ID.IsSet {
		x.Int(e.ID.Value)
	}
	return x.buf
}

func (e TL_updates_getState) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_getState)
	return x.buf
}

func (e TL_updates_getDifference) encode() []byte {
	var flags int32
	if e.PtsLimit.IsSet {
		flags |= (1 << 1)
	}
	if e.PtsTotalLimit.IsSet {
		flags |= (1 << 0)
	}
	if e.QtsLimit.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_getDifference)
	x.Int(flags)
	x.Int(e.Pts)
	if e.PtsLimit.IsSet {
		x.Int(e.PtsLimit.Value)
	}
	if e.PtsTotalLimit.IsSet {
		x.Int(e.PtsTotalLimit.Value)
	}
	x.Int(e.Date)
	x.Int(e.Qts)
	if e.QtsLimit.IsSet {
		x.Int(e.QtsLimit.Value)
	}
	return x.buf
}

func (e TL_updates_getChannelDifference) encode() []byte {
	var flags int32
	if e.Force {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_getChannelDifference)
	x.Int(flags)
	x.Object(e.Channel)
	x.Object(e.Filter)
	x.Int(e.Pts)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_photos_updateProfilePhoto) encode() []byte {
	var flags int32
	if e.Fallback {
		flags |= (1 << 0)
	}
	if e.Bot != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_updateProfilePhoto)
	x.Int(flags)
	if e.Bot != nil {
		x.Object(e.Bot)
	}
	x.Object(e.ID)
	return x.buf
}

func (e TL_photos_uploadProfilePhoto) encode() []byte {
	var flags int32
	if e.Fallback {
		flags |= (1 << 3)
	}
	if e.Bot != nil {
		flags |= (1 << 5)
	}
	if e.File != nil {
		flags |= (1 << 0)
	}
	if e.Video != nil {
		flags |= (1 << 1)
	}
	if e.VideoStartTs.IsSet {
		flags |= (1 << 2)
	}
	if e.VideoEmojiMarkup != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_uploadProfilePhoto)
	x.Int(flags)
	if e.Bot != nil {
		x.Object(e.Bot)
	}
	if e.File != nil {
		x.Object(e.File)
	}
	if e.Video != nil {
		x.Object(e.Video)
	}
	if e.VideoStartTs.IsSet {
		x.Double(e.VideoStartTs.Value)
	}
	if e.VideoEmojiMarkup != nil {
		x.Object(e.VideoEmojiMarkup)
	}
	return x.buf
}

func (e TL_photos_deletePhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_deletePhotos)
	x.Vector(e.ID)
	return x.buf
}

func (e TL_photos_getUserPhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_getUserPhotos)
	x.Object(e.UserID)
	x.Int(e.Offset)
	x.Long(e.MaxID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_photos_uploadContactProfilePhoto) encode() []byte {
	var flags int32
	if e.Suggest {
		flags |= (1 << 3)
	}
	if e.Save {
		flags |= (1 << 4)
	}
	if e.File != nil {
		flags |= (1 << 0)
	}
	if e.Video != nil {
		flags |= (1 << 1)
	}
	if e.VideoStartTs.IsSet {
		flags |= (1 << 2)
	}
	if e.VideoEmojiMarkup != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_uploadContactProfilePhoto)
	x.Int(flags)
	x.Object(e.UserID)
	if e.File != nil {
		x.Object(e.File)
	}
	if e.Video != nil {
		x.Object(e.Video)
	}
	if e.VideoStartTs.IsSet {
		x.Double(e.VideoStartTs.Value)
	}
	if e.VideoEmojiMarkup != nil {
		x.Object(e.VideoEmojiMarkup)
	}
	return x.buf
}

func (e TL_upload_saveFilePart) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_saveFilePart)
	x.Long(e.FileID)
	x.Int(e.FilePart)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_upload_getFile) encode() []byte {
	var flags int32
	if e.Precise {
		flags |= (1 << 0)
	}
	if e.CdnSupported {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getFile)
	x.Int(flags)
	x.Object(e.Location)
	x.Long(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_upload_saveBigFilePart) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_saveBigFilePart)
	x.Long(e.FileID)
	x.Int(e.FilePart)
	x.Int(e.FileTotalParts)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_upload_getWebFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getWebFile)
	x.Object(e.Location)
	x.Int(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_upload_getCdnFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getCdnFile)
	x.StringBytes(e.FileToken)
	x.Long(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_upload_reuploadCdnFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_reuploadCdnFile)
	x.StringBytes(e.FileToken)
	x.StringBytes(e.RequestToken)
	return x.buf
}

func (e TL_upload_getCdnFileHashes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getCdnFileHashes)
	x.StringBytes(e.FileToken)
	x.Long(e.Offset)
	return x.buf
}

func (e TL_upload_getFileHashes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getFileHashes)
	x.Object(e.Location)
	x.Long(e.Offset)
	return x.buf
}

func (e TL_help_getConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getConfig)
	return x.buf
}

func (e TL_help_getNearestDc) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getNearestDc)
	return x.buf
}

func (e TL_help_getAppUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getAppUpdate)
	x.String(e.Source)
	return x.buf
}

func (e TL_help_getInviteText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getInviteText)
	return x.buf
}

func (e TL_help_getSupport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getSupport)
	return x.buf
}

func (e TL_help_getAppChangelog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getAppChangelog)
	x.String(e.PrevAppVersion)
	return x.buf
}

func (e TL_help_setBotUpdatesStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_setBotUpdatesStatus)
	x.Int(e.PendingUpdatesCount)
	x.String(e.Message)
	return x.buf
}

func (e TL_help_getCdnConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getCdnConfig)
	return x.buf
}

func (e TL_help_getRecentMeUrls) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getRecentMeUrls)
	x.String(e.Referer)
	return x.buf
}

func (e TL_help_getTermsOfServiceUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getTermsOfServiceUpdate)
	return x.buf
}

func (e TL_help_acceptTermsOfService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_acceptTermsOfService)
	x.Object(e.ID)
	return x.buf
}

func (e TL_help_getDeepLinkInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getDeepLinkInfo)
	x.String(e.Path)
	return x.buf
}

func (e TL_help_getAppConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getAppConfig)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_help_saveAppLog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_saveAppLog)
	x.Vector(e.Events)
	return x.buf
}

func (e TL_help_getPassportConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getPassportConfig)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_help_getSupportName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getSupportName)
	return x.buf
}

func (e TL_help_getUserInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getUserInfo)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_help_editUserInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_editUserInfo)
	x.Object(e.UserID)
	x.String(e.Message)
	x.Vector(e.Entities)
	return x.buf
}

func (e TL_help_getPromoData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getPromoData)
	return x.buf
}

func (e TL_help_hidePromoData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_hidePromoData)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_help_dismissSuggestion) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_dismissSuggestion)
	x.Object(e.Peer)
	x.String(e.Suggestion)
	return x.buf
}

func (e TL_help_getCountriesList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getCountriesList)
	x.String(e.LangCode)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_help_getPremiumPromo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getPremiumPromo)
	return x.buf
}

func (e TL_channels_readHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_readHistory)
	x.Object(e.Channel)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_channels_deleteMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteMessages)
	x.Object(e.Channel)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_channels_reportSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_reportSpam)
	x.Object(e.Channel)
	x.Object(e.Participant)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_channels_getMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getMessages)
	x.Object(e.Channel)
	x.Vector(e.ID)
	return x.buf
}

func (e TL_channels_getParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getParticipants)
	x.Object(e.Channel)
	x.Object(e.Filter)
	x.Int(e.Offset)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_channels_getParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getParticipant)
	x.Object(e.Channel)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channels_getChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getChannels)
	x.Vector(e.ID)
	return x.buf
}

func (e TL_channels_getFullChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getFullChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_createChannel) encode() []byte {
	var flags int32
	if e.Broadcast {
		flags |= (1 << 0)
	}
	if e.Megagroup {
		flags |= (1 << 1)
	}
	if e.ForImport {
		flags |= (1 << 3)
	}
	if e.Forum {
		flags |= (1 << 5)
	}
	if e.GeoPoint != nil {
		flags |= (1 << 2)
	}
	if e.Address.IsSet {
		flags |= (1 << 2)
	}
	if e.TtlPeriod.IsSet {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_createChannel)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.About)
	if e.GeoPoint != nil {
		x.Object(e.GeoPoint)
	}
	if e.Address.IsSet {
		x.String(e.Address.Value)
	}
	if e.TtlPeriod.IsSet {
		x.Int(e.TtlPeriod.Value)
	}
	return x.buf
}

func (e TL_channels_editAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editAdmin)
	x.Object(e.Channel)
	x.Object(e.UserID)
	x.Object(e.AdminRights)
	x.String(e.Rank)
	return x.buf
}

func (e TL_channels_editTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editTitle)
	x.Object(e.Channel)
	x.String(e.Title)
	return x.buf
}

func (e TL_channels_editPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editPhoto)
	x.Object(e.Channel)
	x.Object(e.Photo)
	return x.buf
}

func (e TL_channels_checkUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_checkUsername)
	x.Object(e.Channel)
	x.String(e.Username)
	return x.buf
}

func (e TL_channels_updateUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_updateUsername)
	x.Object(e.Channel)
	x.String(e.Username)
	return x.buf
}

func (e TL_channels_joinChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_joinChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_leaveChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_leaveChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_inviteToChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_inviteToChannel)
	x.Object(e.Channel)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_channels_deleteChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_exportMessageLink) encode() []byte {
	var flags int32
	if e.Grouped {
		flags |= (1 << 0)
	}
	if e.Thread {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_exportMessageLink)
	x.Int(flags)
	x.Object(e.Channel)
	x.Int(e.ID)
	return x.buf
}

func (e TL_channels_toggleSignatures) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleSignatures)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_getAdminedPublicChannels) encode() []byte {
	var flags int32
	if e.ByLocation {
		flags |= (1 << 0)
	}
	if e.CheckLimit {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getAdminedPublicChannels)
	x.Int(flags)
	return x.buf
}

func (e TL_channels_editBanned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editBanned)
	x.Object(e.Channel)
	x.Object(e.Participant)
	x.Object(e.BannedRights)
	return x.buf
}

func (e TL_channels_getAdminLog) encode() []byte {
	var flags int32
	if e.EventsFilter != nil {
		flags |= (1 << 0)
	}
	if e.Admins != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getAdminLog)
	x.Int(flags)
	x.Object(e.Channel)
	x.String(e.Q)
	if e.EventsFilter != nil {
		x.Object(e.EventsFilter)
	}
	if e.Admins != nil {
		x.Vector(e.Admins)
	}
	x.Long(e.MaxID)
	x.Long(e.MinID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_channels_setStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_setStickers)
	x.Object(e.Channel)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_channels_readMessageContents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_readMessageContents)
	x.Object(e.Channel)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_channels_deleteHistory) encode() []byte {
	var flags int32
	if e.ForEveryone {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteHistory)
	x.Int(flags)
	x.Object(e.Channel)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_channels_togglePreHistoryHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_togglePreHistoryHidden)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_getLeftChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getLeftChannels)
	x.Int(e.Offset)
	return x.buf
}

func (e TL_channels_getGroupsForDiscussion) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getGroupsForDiscussion)
	return x.buf
}

func (e TL_channels_setDiscussionGroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_setDiscussionGroup)
	x.Object(e.Broadcast)
	x.Object(e.Group)
	return x.buf
}

func (e TL_channels_editCreator) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editCreator)
	x.Object(e.Channel)
	x.Object(e.UserID)
	x.Object(e.Password)
	return x.buf
}

func (e TL_channels_editLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editLocation)
	x.Object(e.Channel)
	x.Object(e.GeoPoint)
	x.String(e.Address)
	return x.buf
}

func (e TL_channels_toggleSlowMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleSlowMode)
	x.Object(e.Channel)
	x.Int(e.Seconds)
	return x.buf
}

func (e TL_channels_getInactiveChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getInactiveChannels)
	return x.buf
}

func (e TL_channels_convertToGigagroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_convertToGigagroup)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_viewSponsoredMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_viewSponsoredMessage)
	x.Object(e.Channel)
	x.StringBytes(e.RandomID)
	return x.buf
}

func (e TL_channels_getSponsoredMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getSponsoredMessages)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_getSendAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getSendAs)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_channels_deleteParticipantHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteParticipantHistory)
	x.Object(e.Channel)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channels_toggleJoinToSend) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleJoinToSend)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_toggleJoinRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleJoinRequest)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_reorderUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_reorderUsernames)
	x.Object(e.Channel)
	x.VectorString(e.Order)
	return x.buf
}

func (e TL_channels_toggleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleUsername)
	x.Object(e.Channel)
	x.String(e.Username)
	x.Bool(e.Active)
	return x.buf
}

func (e TL_channels_deactivateAllUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deactivateAllUsernames)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_toggleForum) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleForum)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_createForumTopic) encode() []byte {
	var flags int32
	if e.IconColor.IsSet {
		flags |= (1 << 0)
	}
	if e.IconEmojiID.IsSet {
		flags |= (1 << 3)
	}
	if e.SendAs != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_createForumTopic)
	x.Int(flags)
	x.Object(e.Channel)
	x.String(e.Title)
	if e.IconColor.IsSet {
		x.Int(e.IconColor.Value)
	}
	if e.IconEmojiID.IsSet {
		x.Long(e.IconEmojiID.Value)
	}
	x.Long(e.RandomID)
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_channels_getForumTopics) encode() []byte {
	var flags int32
	if e.Q.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getForumTopics)
	x.Int(flags)
	x.Object(e.Channel)
	if e.Q.IsSet {
		x.String(e.Q.Value)
	}
	x.Int(e.OffsetDate)
	x.Int(e.OffsetID)
	x.Int(e.OffsetTopic)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_channels_getForumTopicsByID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getForumTopicsByID)
	x.Object(e.Channel)
	x.VectorInt(e.Topics)
	return x.buf
}

func (e TL_channels_editForumTopic) encode() []byte {
	var flags int32
	if e.Title.IsSet {
		flags |= (1 << 0)
	}
	if e.IconEmojiID.IsSet {
		flags |= (1 << 1)
	}
	if e.Closed.IsSet {
		flags |= (1 << 2)
	}
	if e.Hidden.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editForumTopic)
	x.Int(flags)
	x.Object(e.Channel)
	x.Int(e.TopicID)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.IconEmojiID.IsSet {
		x.Long(e.IconEmojiID.Value)
	}
	if e.Closed.IsSet {
		x.Bool(e.Closed.Value)
	}
	if e.Hidden.IsSet {
		x.Bool(e.Hidden.Value)
	}
	return x.buf
}

func (e TL_channels_updatePinnedForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_updatePinnedForumTopic)
	x.Object(e.Channel)
	x.Int(e.TopicID)
	x.Bool(e.Pinned)
	return x.buf
}

func (e TL_channels_deleteTopicHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteTopicHistory)
	x.Object(e.Channel)
	x.Int(e.TopMsgID)
	return x.buf
}

func (e TL_channels_reorderPinnedForumTopics) encode() []byte {
	var flags int32
	if e.Force {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_reorderPinnedForumTopics)
	x.Int(flags)
	x.Object(e.Channel)
	x.VectorInt(e.Order)
	return x.buf
}

func (e TL_channels_toggleAntiSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleAntiSpam)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_reportAntiSpamFalsePositive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_reportAntiSpamFalsePositive)
	x.Object(e.Channel)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_channels_toggleParticipantsHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleParticipantsHidden)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_clickSponsoredMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_clickSponsoredMessage)
	x.Object(e.Channel)
	x.StringBytes(e.RandomID)
	return x.buf
}

func (e TL_channels_updateColor) encode() []byte {
	var flags int32
	if e.BackgroundEmojiID.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_updateColor)
	x.Int(flags)
	x.Object(e.Channel)
	x.Int(e.Color)
	if e.BackgroundEmojiID.IsSet {
		x.Long(e.BackgroundEmojiID.Value)
	}
	return x.buf
}

func (e TL_bots_sendCustomRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_sendCustomRequest)
	x.String(e.CustomMethod)
	x.Object(e.Params)
	return x.buf
}

func (e TL_bots_answerWebhookJSONQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_answerWebhookJSONQuery)
	x.Long(e.QueryID)
	x.Object(e.Data)
	return x.buf
}

func (e TL_bots_setBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotCommands)
	x.Object(e.Scope)
	x.String(e.LangCode)
	x.Vector(e.Commands)
	return x.buf
}

func (e TL_bots_resetBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_resetBotCommands)
	x.Object(e.Scope)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_bots_getBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_getBotCommands)
	x.Object(e.Scope)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_bots_setBotMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotMenuButton)
	x.Object(e.UserID)
	x.Object(e.Button)
	return x.buf
}

func (e TL_bots_getBotMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_getBotMenuButton)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_bots_setBotBroadcastDefaultAdminRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotBroadcastDefaultAdminRights)
	x.Object(e.AdminRights)
	return x.buf
}

func (e TL_bots_setBotGroupDefaultAdminRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotGroupDefaultAdminRights)
	x.Object(e.AdminRights)
	return x.buf
}

func (e TL_bots_setBotInfo) encode() []byte {
	var flags int32
	if e.Bot != nil {
		flags |= (1 << 2)
	}
	if e.Name.IsSet {
		flags |= (1 << 3)
	}
	if e.About.IsSet {
		flags |= (1 << 0)
	}
	if e.Description.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotInfo)
	x.Int(flags)
	if e.Bot != nil {
		x.Object(e.Bot)
	}
	x.String(e.LangCode)
	if e.Name.IsSet {
		x.String(e.Name.Value)
	}
	if e.About.IsSet {
		x.String(e.About.Value)
	}
	if e.Description.IsSet {
		x.String(e.Description.Value)
	}
	return x.buf
}

func (e TL_bots_getBotInfo) encode() []byte {
	var flags int32
	if e.Bot != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_getBotInfo)
	x.Int(flags)
	if e.Bot != nil {
		x.Object(e.Bot)
	}
	x.String(e.LangCode)
	return x.buf
}

func (e TL_bots_reorderUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_reorderUsernames)
	x.Object(e.Bot)
	x.VectorString(e.Order)
	return x.buf
}

func (e TL_bots_toggleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_toggleUsername)
	x.Object(e.Bot)
	x.String(e.Username)
	x.Bool(e.Active)
	return x.buf
}

func (e TL_bots_canSendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_canSendMessage)
	x.Object(e.Bot)
	return x.buf
}

func (e TL_bots_allowSendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_allowSendMessage)
	x.Object(e.Bot)
	return x.buf
}

func (e TL_bots_invokeWebViewCustomMethod) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_invokeWebViewCustomMethod)
	x.Object(e.Bot)
	x.String(e.CustomMethod)
	x.Object(e.Params)
	return x.buf
}

func (e TL_payments_getPaymentForm) encode() []byte {
	var flags int32
	if e.ThemeParams != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getPaymentForm)
	x.Int(flags)
	x.Object(e.Invoice)
	if e.ThemeParams != nil {
		x.Object(e.ThemeParams)
	}
	return x.buf
}

func (e TL_payments_getPaymentReceipt) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getPaymentReceipt)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_payments_validateRequestedInfo) encode() []byte {
	var flags int32
	if e.Save {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_validateRequestedInfo)
	x.Int(flags)
	x.Object(e.Invoice)
	x.Object(e.Info)
	return x.buf
}

func (e TL_payments_sendPaymentForm) encode() []byte {
	var flags int32
	if e.RequestedInfoID.IsSet {
		flags |= (1 << 0)
	}
	if e.ShippingOptionID.IsSet {
		flags |= (1 << 1)
	}
	if e.TipAmount.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_sendPaymentForm)
	x.Int(flags)
	x.Long(e.FormID)
	x.Object(e.Invoice)
	if e.RequestedInfoID.IsSet {
		x.String(e.RequestedInfoID.Value)
	}
	if e.ShippingOptionID.IsSet {
		x.String(e.ShippingOptionID.Value)
	}
	x.Object(e.Credentials)
	if e.TipAmount.IsSet {
		x.Long(e.TipAmount.Value)
	}
	return x.buf
}

func (e TL_payments_getSavedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getSavedInfo)
	return x.buf
}

func (e TL_payments_clearSavedInfo) encode() []byte {
	var flags int32
	if e.Credentials {
		flags |= (1 << 0)
	}
	if e.Info {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_clearSavedInfo)
	x.Int(flags)
	return x.buf
}

func (e TL_payments_getBankCardData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getBankCardData)
	x.String(e.Number)
	return x.buf
}

func (e TL_payments_exportInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_exportInvoice)
	x.Object(e.InvoiceMedia)
	return x.buf
}

func (e TL_payments_assignAppStoreTransaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_assignAppStoreTransaction)
	x.StringBytes(e.Receipt)
	x.Object(e.Purpose)
	return x.buf
}

func (e TL_payments_assignPlayMarketTransaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_assignPlayMarketTransaction)
	x.Object(e.Receipt)
	x.Object(e.Purpose)
	return x.buf
}

func (e TL_payments_canPurchasePremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_canPurchasePremium)
	x.Object(e.Purpose)
	return x.buf
}

func (e TL_payments_getPremiumGiftCodeOptions) encode() []byte {
	var flags int32
	if e.BoostPeer != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getPremiumGiftCodeOptions)
	x.Int(flags)
	if e.BoostPeer != nil {
		x.Object(e.BoostPeer)
	}
	return x.buf
}

func (e TL_payments_checkGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_checkGiftCode)
	x.String(e.Slug)
	return x.buf
}

func (e TL_payments_applyGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_applyGiftCode)
	x.String(e.Slug)
	return x.buf
}

func (e TL_payments_getGiveawayInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getGiveawayInfo)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_payments_launchPrepaidGiveaway) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_launchPrepaidGiveaway)
	x.Object(e.Peer)
	x.Long(e.GiveawayID)
	x.Object(e.Purpose)
	return x.buf
}

func (e TL_stickers_createStickerSet) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Animated {
		flags |= (1 << 1)
	}
	if e.Videos {
		flags |= (1 << 4)
	}
	if e.Emojis {
		flags |= (1 << 5)
	}
	if e.TextColor {
		flags |= (1 << 6)
	}
	if e.Thumb != nil {
		flags |= (1 << 2)
	}
	if e.Software.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_createStickerSet)
	x.Int(flags)
	x.Object(e.UserID)
	x.String(e.Title)
	x.String(e.ShortName)
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	x.Vector(e.Stickers)
	if e.Software.IsSet {
		x.String(e.Software.Value)
	}
	return x.buf
}

func (e TL_stickers_removeStickerFromSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_removeStickerFromSet)
	x.Object(e.Sticker)
	return x.buf
}

func (e TL_stickers_changeStickerPosition) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_changeStickerPosition)
	x.Object(e.Sticker)
	x.Int(e.Position)
	return x.buf
}

func (e TL_stickers_addStickerToSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_addStickerToSet)
	x.Object(e.Stickerset)
	x.Object(e.Sticker)
	return x.buf
}

func (e TL_stickers_setStickerSetThumb) encode() []byte {
	var flags int32
	if e.Thumb != nil {
		flags |= (1 << 0)
	}
	if e.ThumbDocumentID.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_setStickerSetThumb)
	x.Int(flags)
	x.Object(e.Stickerset)
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	if e.ThumbDocumentID.IsSet {
		x.Long(e.ThumbDocumentID.Value)
	}
	return x.buf
}

func (e TL_stickers_checkShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_checkShortName)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_stickers_suggestShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_suggestShortName)
	x.String(e.Title)
	return x.buf
}

func (e TL_stickers_changeSticker) encode() []byte {
	var flags int32
	if e.Emoji.IsSet {
		flags |= (1 << 0)
	}
	if e.MaskCoords != nil {
		flags |= (1 << 1)
	}
	if e.Keywords.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_changeSticker)
	x.Int(flags)
	x.Object(e.Sticker)
	if e.Emoji.IsSet {
		x.String(e.Emoji.Value)
	}
	if e.MaskCoords != nil {
		x.Object(e.MaskCoords)
	}
	if e.Keywords.IsSet {
		x.String(e.Keywords.Value)
	}
	return x.buf
}

func (e TL_stickers_renameStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_renameStickerSet)
	x.Object(e.Stickerset)
	x.String(e.Title)
	return x.buf
}

func (e TL_stickers_deleteStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_deleteStickerSet)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_phone_getCallConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getCallConfig)
	return x.buf
}

func (e TL_phone_requestCall) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_requestCall)
	x.Int(flags)
	x.Object(e.UserID)
	x.Int(e.RandomID)
	x.StringBytes(e.GAHash)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phone_acceptCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_acceptCall)
	x.Object(e.Peer)
	x.StringBytes(e.GB)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phone_confirmCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_confirmCall)
	x.Object(e.Peer)
	x.StringBytes(e.GA)
	x.Long(e.KeyFingerprint)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phone_receivedCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_receivedCall)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_phone_discardCall) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_discardCall)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.Duration)
	x.Object(e.Reason)
	x.Long(e.ConnectionID)
	return x.buf
}

func (e TL_phone_setCallRating) encode() []byte {
	var flags int32
	if e.UserInitiative {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_setCallRating)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.Rating)
	x.String(e.Comment)
	return x.buf
}

func (e TL_phone_saveCallDebug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_saveCallDebug)
	x.Object(e.Peer)
	x.Object(e.Debug)
	return x.buf
}

func (e TL_phone_sendSignalingData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_sendSignalingData)
	x.Object(e.Peer)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_phone_createGroupCall) encode() []byte {
	var flags int32
	if e.RtmpStream {
		flags |= (1 << 2)
	}
	if e.Title.IsSet {
		flags |= (1 << 0)
	}
	if e.ScheduleDate.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_createGroupCall)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.RandomID)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.ScheduleDate.IsSet {
		x.Int(e.ScheduleDate.Value)
	}
	return x.buf
}

func (e TL_phone_joinGroupCall) encode() []byte {
	var flags int32
	if e.Muted {
		flags |= (1 << 0)
	}
	if e.VideoStopped {
		flags |= (1 << 2)
	}
	if e.InviteHash.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_joinGroupCall)
	x.Int(flags)
	x.Object(e.Call)
	x.Object(e.JoinAs)
	if e.InviteHash.IsSet {
		x.String(e.InviteHash.Value)
	}
	x.Object(e.Params)
	return x.buf
}

func (e TL_phone_leaveGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_leaveGroupCall)
	x.Object(e.Call)
	x.Int(e.Source)
	return x.buf
}

func (e TL_phone_inviteToGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_inviteToGroupCall)
	x.Object(e.Call)
	x.Vector(e.Users)
	return x.buf
}

func (e TL_phone_discardGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_discardGroupCall)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_toggleGroupCallSettings) encode() []byte {
	var flags int32
	if e.ResetInviteHash {
		flags |= (1 << 1)
	}
	if e.JoinMuted.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_toggleGroupCallSettings)
	x.Int(flags)
	x.Object(e.Call)
	if e.JoinMuted.IsSet {
		x.Bool(e.JoinMuted.Value)
	}
	return x.buf
}

func (e TL_phone_getGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupCall)
	x.Object(e.Call)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_phone_getGroupParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupParticipants)
	x.Object(e.Call)
	x.Vector(e.Ids)
	x.VectorInt(e.Sources)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_phone_checkGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_checkGroupCall)
	x.Object(e.Call)
	x.VectorInt(e.Sources)
	return x.buf
}

func (e TL_phone_toggleGroupCallRecord) encode() []byte {
	var flags int32
	if e.Start {
		flags |= (1 << 0)
	}
	if e.Video {
		flags |= (1 << 2)
	}
	if e.Title.IsSet {
		flags |= (1 << 1)
	}
	if e.VideoPortrait.IsSet {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_toggleGroupCallRecord)
	x.Int(flags)
	x.Object(e.Call)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.VideoPortrait.IsSet {
		x.Bool(e.VideoPortrait.Value)
	}
	return x.buf
}

func (e TL_phone_editGroupCallParticipant) encode() []byte {
	var flags int32
	if e.Muted.IsSet {
		flags |= (1 << 0)
	}
	if e.Volume.IsSet {
		flags |= (1 << 1)
	}
	if e.RaiseHand.IsSet {
		flags |= (1 << 2)
	}
	if e.VideoStopped.IsSet {
		flags |= (1 << 3)
	}
	if e.VideoPaused.IsSet {
		flags |= (1 << 4)
	}
	if e.PresentationPaused.IsSet {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_editGroupCallParticipant)
	x.Int(flags)
	x.Object(e.Call)
	x.Object(e.Participant)
	if e.Muted.IsSet {
		x.Bool(e.Muted.Value)
	}
	if e.Volume.IsSet {
		x.Int(e.Volume.Value)
	}
	if e.RaiseHand.IsSet {
		x.Bool(e.RaiseHand.Value)
	}
	if e.VideoStopped.IsSet {
		x.Bool(e.VideoStopped.Value)
	}
	if e.VideoPaused.IsSet {
		x.Bool(e.VideoPaused.Value)
	}
	if e.PresentationPaused.IsSet {
		x.Bool(e.PresentationPaused.Value)
	}
	return x.buf
}

func (e TL_phone_editGroupCallTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_editGroupCallTitle)
	x.Object(e.Call)
	x.String(e.Title)
	return x.buf
}

func (e TL_phone_getGroupCallJoinAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupCallJoinAs)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_phone_exportGroupCallInvite) encode() []byte {
	var flags int32
	if e.CanSelfUnmute {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_exportGroupCallInvite)
	x.Int(flags)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_toggleGroupCallStartSubscription) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_toggleGroupCallStartSubscription)
	x.Object(e.Call)
	x.Bool(e.Subscribed)
	return x.buf
}

func (e TL_phone_startScheduledGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_startScheduledGroupCall)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_saveDefaultGroupCallJoinAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_saveDefaultGroupCallJoinAs)
	x.Object(e.Peer)
	x.Object(e.JoinAs)
	return x.buf
}

func (e TL_phone_joinGroupCallPresentation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_joinGroupCallPresentation)
	x.Object(e.Call)
	x.Object(e.Params)
	return x.buf
}

func (e TL_phone_leaveGroupCallPresentation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_leaveGroupCallPresentation)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_getGroupCallStreamChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupCallStreamChannels)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_getGroupCallStreamRtmpUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupCallStreamRtmpUrl)
	x.Object(e.Peer)
	x.Bool(e.Revoke)
	return x.buf
}

func (e TL_phone_saveCallLog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_saveCallLog)
	x.Object(e.Peer)
	x.Object(e.File)
	return x.buf
}

func (e TL_langpack_getLangPack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getLangPack)
	x.String(e.LangPack)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_langpack_getStrings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getStrings)
	x.String(e.LangPack)
	x.String(e.LangCode)
	x.VectorString(e.Keys)
	return x.buf
}

func (e TL_langpack_getDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getDifference)
	x.String(e.LangPack)
	x.String(e.LangCode)
	x.Int(e.FromVersion)
	return x.buf
}

func (e TL_langpack_getLanguages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getLanguages)
	x.String(e.LangPack)
	return x.buf
}

func (e TL_langpack_getLanguage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getLanguage)
	x.String(e.LangPack)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_folders_editPeerFolders) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_folders_editPeerFolders)
	x.Vector(e.FolderPeers)
	return x.buf
}

func (e TL_stats_getBroadcastStats) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getBroadcastStats)
	x.Int(flags)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_stats_loadAsyncGraph) encode() []byte {
	var flags int32
	if e.X.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_loadAsyncGraph)
	x.Int(flags)
	x.String(e.Token)
	if e.X.IsSet {
		x.Long(e.X.Value)
	}
	return x.buf
}

func (e TL_stats_getMegagroupStats) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getMegagroupStats)
	x.Int(flags)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_stats_getMessagePublicForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getMessagePublicForwards)
	x.Object(e.Channel)
	x.Int(e.MsgID)
	x.Int(e.OffsetRate)
	x.Object(e.OffsetPeer)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stats_getMessageStats) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getMessageStats)
	x.Int(flags)
	x.Object(e.Channel)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_chatlists_exportChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_exportChatlistInvite)
	x.Object(e.Chatlist)
	x.String(e.Title)
	x.Vector(e.Peers)
	return x.buf
}

func (e TL_chatlists_deleteExportedInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_deleteExportedInvite)
	x.Object(e.Chatlist)
	x.String(e.Slug)
	return x.buf
}

func (e TL_chatlists_editExportedInvite) encode() []byte {
	var flags int32
	if e.Title.IsSet {
		flags |= (1 << 1)
	}
	if e.Peers != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_editExportedInvite)
	x.Int(flags)
	x.Object(e.Chatlist)
	x.String(e.Slug)
	if e.Title.IsSet {
		x.String(e.Title.Value)
	}
	if e.Peers != nil {
		x.Vector(e.Peers)
	}
	return x.buf
}

func (e TL_chatlists_getExportedInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_getExportedInvites)
	x.Object(e.Chatlist)
	return x.buf
}

func (e TL_chatlists_checkChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_checkChatlistInvite)
	x.String(e.Slug)
	return x.buf
}

func (e TL_chatlists_joinChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_joinChatlistInvite)
	x.String(e.Slug)
	x.Vector(e.Peers)
	return x.buf
}

func (e TL_chatlists_getChatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_getChatlistUpdates)
	x.Object(e.Chatlist)
	return x.buf
}

func (e TL_chatlists_joinChatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_joinChatlistUpdates)
	x.Object(e.Chatlist)
	x.Vector(e.Peers)
	return x.buf
}

func (e TL_chatlists_hideChatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_hideChatlistUpdates)
	x.Object(e.Chatlist)
	return x.buf
}

func (e TL_chatlists_getLeaveChatlistSuggestions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_getLeaveChatlistSuggestions)
	x.Object(e.Chatlist)
	return x.buf
}

func (e TL_chatlists_leaveChatlist) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_leaveChatlist)
	x.Object(e.Chatlist)
	x.Vector(e.Peers)
	return x.buf
}

func (e TL_stories_canSendStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_canSendStory)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_stories_sendStory) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 2)
	}
	if e.Noforwards {
		flags |= (1 << 4)
	}
	if e.MediaAreas != nil {
		flags |= (1 << 5)
	}
	if e.Caption.IsSet {
		flags |= (1 << 0)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.Period.IsSet {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_sendStory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.Media)
	if e.MediaAreas != nil {
		x.Vector(e.MediaAreas)
	}
	if e.Caption.IsSet {
		x.String(e.Caption.Value)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	x.Vector(e.PrivacyRules)
	x.Long(e.RandomID)
	if e.Period.IsSet {
		x.Int(e.Period.Value)
	}
	return x.buf
}

func (e TL_stories_editStory) encode() []byte {
	var flags int32
	if e.Media != nil {
		flags |= (1 << 0)
	}
	if e.MediaAreas != nil {
		flags |= (1 << 3)
	}
	if e.Caption.IsSet {
		flags |= (1 << 1)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.PrivacyRules != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_editStory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.MediaAreas != nil {
		x.Vector(e.MediaAreas)
	}
	if e.Caption.IsSet {
		x.String(e.Caption.Value)
	}
	if e.Entities != nil {
		x.Vector(e.Entities)
	}
	if e.PrivacyRules != nil {
		x.Vector(e.PrivacyRules)
	}
	return x.buf
}

func (e TL_stories_deleteStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_deleteStories)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_stories_togglePinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_togglePinned)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	x.Bool(e.Pinned)
	return x.buf
}

func (e TL_stories_getAllStories) encode() []byte {
	var flags int32
	if e.Next {
		flags |= (1 << 1)
	}
	if e.Hidden {
		flags |= (1 << 2)
	}
	if e.State.IsSet {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getAllStories)
	x.Int(flags)
	if e.State.IsSet {
		x.String(e.State.Value)
	}
	return x.buf
}

func (e TL_stories_getPinnedStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getPinnedStories)
	x.Object(e.Peer)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stories_getStoriesArchive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getStoriesArchive)
	x.Object(e.Peer)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stories_getStoriesByID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getStoriesByID)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_stories_toggleAllStoriesHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_toggleAllStoriesHidden)
	x.Bool(e.Hidden)
	return x.buf
}

func (e TL_stories_readStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_readStories)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_stories_incrementStoryViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_incrementStoryViews)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_stories_getStoryViewsList) encode() []byte {
	var flags int32
	if e.JustContacts {
		flags |= (1 << 0)
	}
	if e.ReactionsFirst {
		flags |= (1 << 2)
	}
	if e.Q.IsSet {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getStoryViewsList)
	x.Int(flags)
	x.Object(e.Peer)
	if e.Q.IsSet {
		x.String(e.Q.Value)
	}
	x.Int(e.ID)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stories_getStoriesViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getStoriesViews)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_stories_exportStoryLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_exportStoryLink)
	x.Object(e.Peer)
	x.Int(e.ID)
	return x.buf
}

func (e TL_stories_report) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_report)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	x.Object(e.Reason)
	x.String(e.Message)
	return x.buf
}

func (e TL_stories_activateStealthMode) encode() []byte {
	var flags int32
	if e.Past {
		flags |= (1 << 0)
	}
	if e.Future {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_activateStealthMode)
	x.Int(flags)
	return x.buf
}

func (e TL_stories_sendReaction) encode() []byte {
	var flags int32
	if e.AddToRecent {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_sendReaction)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.StoryID)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_stories_getPeerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getPeerStories)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_stories_getAllReadPeerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getAllReadPeerStories)
	return x.buf
}

func (e TL_stories_getPeerMaxIDs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getPeerMaxIDs)
	x.Vector(e.ID)
	return x.buf
}

func (e TL_stories_getChatsToSend) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getChatsToSend)
	return x.buf
}

func (e TL_stories_togglePeerStoriesHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_togglePeerStoriesHidden)
	x.Object(e.Peer)
	x.Bool(e.Hidden)
	return x.buf
}

func (e TL_premium_getBoostsList) encode() []byte {
	var flags int32
	if e.Gifts {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_getBoostsList)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_premium_getMyBoosts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_getMyBoosts)
	return x.buf
}

func (e TL_premium_applyBoost) encode() []byte {
	var flags int32
	if e.Slots != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_applyBoost)
	x.Int(flags)
	if e.Slots != nil {
		x.VectorInt(e.Slots)
	}
	x.Object(e.Peer)
	return x.buf
}

func (e TL_premium_getBoostsStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_getBoostsStatus)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_req_pq) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_req_pq_multi) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_req_DH_params) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_set_client_DH_params) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_destroy_auth_key) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_rpc_drop_answer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_get_future_salts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_ping) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_ping_delay_disconnect) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_destroy_session) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_invokeAfterMsg) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_invokeAfterMsgs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_initConnection) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_invokeWithLayer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_invokeWithoutUpdates) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_invokeWithMessagesRange) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_invokeWithTakeout) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_sendCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_signUp) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_signIn) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_logOut) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_resetAuthorizations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_exportAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_importAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_bindTempAuthKey) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_importBotAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_checkPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_requestPasswordRecovery) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_recoverPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_resendCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_cancelCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_dropTempAuthKeys) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_exportLoginToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_importLoginToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_acceptLoginToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_checkRecoveryPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_importWebTokenAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_requestFirebaseSms) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_resetLoginEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_registerDevice) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_unregisterDevice) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateNotifySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getNotifySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetNotifySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateProfile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getWallPapers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_reportPeer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_checkUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getPrivacy) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setPrivacy) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_deleteAccount) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAccountTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setAccountTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_sendChangePhoneCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_changePhone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateDeviceLocked) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAuthorizations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getPasswordSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updatePasswordSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_sendConfirmPhoneCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_confirmPhone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getTmpPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getWebAuthorizations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetWebAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetWebAuthorizations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAllSecureValues) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_account_getSecureValue) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_account_saveSecureValue) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_deleteSecureValue) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAuthorizationForm) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_acceptAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_sendVerifyPhoneCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_verifyPhone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_sendVerifyEmailCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_verifyEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_initTakeoutSession) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_finishTakeoutSession) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_confirmPasswordEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resendPasswordEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_cancelPasswordEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getContactSignUpNotification) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setContactSignUpNotification) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getNotifyExceptions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_uploadWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_installWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetWallPapers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAutoDownloadSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveAutoDownloadSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_uploadTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_createTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_installTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getThemes) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setContentSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getContentSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getMultiWallPapers) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_account_getGlobalPrivacySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setGlobalPrivacySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_reportProfilePhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_declinePasswordReset) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getChatThemes) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setAuthorizationTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_changeAuthorizationSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getSavedRingtones) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveRingtone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_uploadRingtone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateEmojiStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getDefaultEmojiStatuses) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getRecentEmojiStatuses) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_clearRecentEmojiStatuses) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_reorderUsernames) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_toggleUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getDefaultProfilePhotoEmojis) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getDefaultGroupPhotoEmojis) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAutoSaveSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveAutoSaveSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_deleteAutoSaveExceptions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_invalidateSignInCodes) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateColor) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getDefaultBackgroundEmojis) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_users_getUsers) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_users_getFullUser) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_users_setSecureValueErrors) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getContactIDs) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_contacts_getStatuses) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_contacts_getContacts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_importContacts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_deleteContacts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_deleteByPhones) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_block) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_unblock) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getBlocked) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_search) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_resolveUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getTopPeers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_resetTopPeerRating) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_resetSaved) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getSaved) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_contacts_toggleTopPeers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_addContact) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_acceptContact) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getLocated) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_blockFromReplies) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_resolvePhone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_exportContactToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_importContactToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_editCloseFriends) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_setBlocked) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_search) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_receivedMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_setTyping) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_forwardMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reportSpam) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPeerSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_report) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getChats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getFullChat) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatTitle) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatPhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_addChatUser) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteChatUser) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_createChat) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDhConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_requestEncryption) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_acceptEncryption) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_discardEncryption) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setEncryptedTyping) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readEncryptedHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendEncrypted) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendEncryptedFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendEncryptedService) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_receivedQueue) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorLong(dbuf.VectorLong())
}

func (e TL_messages_reportEncryptedSpam) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readMessageContents) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAllStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getWebPagePreview) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_exportChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_checkChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_importChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_installStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_uninstallStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_startBot) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessagesViews) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatAdmin) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_migrateChat) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_searchGlobal) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reorderStickerSets) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDocumentByHash) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSavedGifs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_saveGif) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getInlineBotResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setInlineBotResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendInlineBotResult) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessageEditData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editInlineBotMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getBotCallbackAnswer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setBotCallbackAnswer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPeerDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_saveDraft) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAllDrafts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getFeaturedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readFeaturedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getRecentStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_saveRecentSticker) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_clearRecentStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getArchivedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMaskStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAttachedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_setGameScore) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setInlineGameScore) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getGameHighScores) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getInlineGameHighScores) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getCommonChats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getWebPage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleDialogPin) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reorderPinnedDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPinnedDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setBotShippingResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setBotPrecheckoutResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_uploadMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendScreenshotNotification) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getFavedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_faveSticker) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getUnreadMentions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readMentions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getRecentLocations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendMultiMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_uploadEncryptedFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_searchStickerSets) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSplitRanges) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_markDialogUnread) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDialogUnreadMarks) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_clearAllDrafts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_updatePinnedMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendVote) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPollResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getOnlines) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatAbout) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatDefaultBannedRights) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiKeywords) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiKeywordsDifference) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiKeywordsLanguages) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_getEmojiURL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSearchCounters) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_requestUrlAuth) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_acceptUrlAuth) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_hidePeerSettingsBar) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getScheduledHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getScheduledMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendScheduledMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteScheduledMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPollVotes) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleStickerSets) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDialogFilters) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_getSuggestedDialogFilters) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_updateDialogFilter) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_updateDialogFiltersOrder) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getOldFeaturedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getReplies) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDiscussionMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readDiscussion) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_unpinAllMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteChat) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deletePhoneCallHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_checkHistoryImport) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_initHistoryImport) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_uploadImportedMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_startHistoryImport) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getExportedChatInvites) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getExportedChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editExportedChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteRevokedExportedChatInvites) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteExportedChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAdminsWithInvites) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getChatInviteImporters) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setHistoryTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_checkHistoryImportPeer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setChatTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessageReadParticipants) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_getSearchResultsCalendar) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSearchResultsPositions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_hideChatJoinRequest) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_hideAllChatJoinRequests) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleNoForwards) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_saveDefaultSendAs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendReaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessagesReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessageReactionsList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setChatAvailableReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAvailableReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setDefaultReaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_translateText) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getUnreadReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_searchSentMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAttachMenuBots) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAttachMenuBot) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleBotInAttachMenu) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_requestWebView) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_prolongWebView) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_requestSimpleWebView) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendWebViewResultMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendWebViewData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_transcribeAudio) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_rateTranscribedAudio) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getCustomEmojiDocuments) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_getEmojiStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getFeaturedEmojiStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reportReaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getTopReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getRecentReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_clearRecentReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getExtendedMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setDefaultHistoryTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDefaultHistoryTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendBotRequestedPeer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiGroups) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiStatusGroups) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiProfilePhotoGroups) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_searchCustomEmoji) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_togglePeerTranslations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getBotApp) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_requestAppWebView) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setChatWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_updates_getState) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_updates_getDifference) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_updates_getChannelDifference) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_photos_updateProfilePhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_photos_uploadProfilePhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_photos_deletePhotos) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorLong(dbuf.VectorLong())
}

func (e TL_photos_getUserPhotos) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_photos_uploadContactProfilePhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_saveFilePart) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_getFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_saveBigFilePart) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_getWebFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_getCdnFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_reuploadCdnFile) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_upload_getCdnFileHashes) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_upload_getFileHashes) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_help_getConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getNearestDc) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getAppUpdate) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getInviteText) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getSupport) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getAppChangelog) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_setBotUpdatesStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getCdnConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getRecentMeUrls) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getTermsOfServiceUpdate) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_acceptTermsOfService) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getDeepLinkInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getAppConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_saveAppLog) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getPassportConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getSupportName) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getUserInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_editUserInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getPromoData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_hidePromoData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_dismissSuggestion) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getCountriesList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getPremiumPromo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_readHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_reportSpam) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getParticipants) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getParticipant) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getFullChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_createChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editAdmin) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editTitle) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editPhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_checkUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_updateUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_joinChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_leaveChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_inviteToChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_exportMessageLink) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleSignatures) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getAdminedPublicChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editBanned) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getAdminLog) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_setStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_readMessageContents) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_togglePreHistoryHidden) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getLeftChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getGroupsForDiscussion) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_setDiscussionGroup) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editCreator) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editLocation) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleSlowMode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getInactiveChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_convertToGigagroup) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_viewSponsoredMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getSponsoredMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getSendAs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteParticipantHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleJoinToSend) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleJoinRequest) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_reorderUsernames) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deactivateAllUsernames) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleForum) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_createForumTopic) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getForumTopics) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getForumTopicsByID) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editForumTopic) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_updatePinnedForumTopic) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteTopicHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_reorderPinnedForumTopics) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleAntiSpam) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_reportAntiSpamFalsePositive) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleParticipantsHidden) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_clickSponsoredMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_updateColor) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_sendCustomRequest) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_answerWebhookJSONQuery) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_setBotCommands) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_resetBotCommands) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_getBotCommands) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_bots_setBotMenuButton) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_getBotMenuButton) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_setBotBroadcastDefaultAdminRights) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_setBotGroupDefaultAdminRights) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_setBotInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_getBotInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_reorderUsernames) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_toggleUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_canSendMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_allowSendMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_invokeWebViewCustomMethod) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getPaymentForm) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getPaymentReceipt) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_validateRequestedInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_sendPaymentForm) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getSavedInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_clearSavedInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getBankCardData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_exportInvoice) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_assignAppStoreTransaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_assignPlayMarketTransaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_canPurchasePremium) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getPremiumGiftCodeOptions) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_payments_checkGiftCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_applyGiftCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getGiveawayInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_launchPrepaidGiveaway) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_createStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_removeStickerFromSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_changeStickerPosition) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_addStickerToSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_setStickerSetThumb) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_checkShortName) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_suggestShortName) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_changeSticker) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_renameStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_deleteStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getCallConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_requestCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_acceptCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_confirmCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_receivedCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_discardCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_setCallRating) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_saveCallDebug) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_sendSignalingData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_createGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_joinGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_leaveGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_inviteToGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_discardGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_toggleGroupCallSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupParticipants) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_checkGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_phone_toggleGroupCallRecord) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_editGroupCallParticipant) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_editGroupCallTitle) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupCallJoinAs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_exportGroupCallInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_toggleGroupCallStartSubscription) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_startScheduledGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_saveDefaultGroupCallJoinAs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_joinGroupCallPresentation) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_leaveGroupCallPresentation) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupCallStreamChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupCallStreamRtmpUrl) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_saveCallLog) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_langpack_getLangPack) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_langpack_getStrings) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_langpack_getDifference) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_langpack_getLanguages) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_langpack_getLanguage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_folders_editPeerFolders) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getBroadcastStats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_loadAsyncGraph) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getMegagroupStats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getMessagePublicForwards) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getMessageStats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_exportChatlistInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_deleteExportedInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_editExportedInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_getExportedInvites) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_checkChatlistInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_joinChatlistInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_getChatlistUpdates) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_joinChatlistUpdates) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_hideChatlistUpdates) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_getLeaveChatlistSuggestions) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_chatlists_leaveChatlist) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_canSendStory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_sendStory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_editStory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_deleteStories) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_stories_togglePinned) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_stories_getAllStories) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getPinnedStories) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getStoriesArchive) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getStoriesByID) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_toggleAllStoriesHidden) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_readStories) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_stories_incrementStoryViews) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getStoryViewsList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getStoriesViews) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_exportStoryLink) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_report) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_activateStealthMode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_sendReaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getPeerStories) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getAllReadPeerStories) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getPeerMaxIDs) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_stories_getChatsToSend) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_togglePeerStoriesHidden) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_premium_getBoostsList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_premium_getMyBoosts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_premium_applyBoost) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_premium_getBoostsStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (m *DecodeBuf) ObjectGenerated(constructor uint32) (r TL) {
	objStartOffset := m.off - 4 //4 bytes of constructor name have been already read
	switch constructor {
	case CRC_resPQ:
		tl := TL_resPQ{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.Pq = m.String()
		tl.ServerPublicKeyFingerprints = m.VectorLong()
		r = tl
	case CRC_p_q_inner_data:
		tl := TL_p_q_inner_data{}
		tl.Pq = m.String()
		tl.P = m.String()
		tl.Q = m.String()
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.NewNonce = m.Bytes32()
		r = tl
	case CRC_p_q_inner_data_dc:
		tl := TL_p_q_inner_data_dc{}
		tl.Pq = m.String()
		tl.P = m.String()
		tl.Q = m.String()
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.NewNonce = m.Bytes32()
		tl.Dc = m.Int()
		r = tl
	case CRC_p_q_inner_data_temp:
		tl := TL_p_q_inner_data_temp{}
		tl.Pq = m.String()
		tl.P = m.String()
		tl.Q = m.String()
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.NewNonce = m.Bytes32()
		tl.ExpiresIn = m.Int()
		r = tl
	case CRC_p_q_inner_data_temp_dc:
		tl := TL_p_q_inner_data_temp_dc{}
		tl.Pq = m.String()
		tl.P = m.String()
		tl.Q = m.String()
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.NewNonce = m.Bytes32()
		tl.Dc = m.Int()
		tl.ExpiresIn = m.Int()
		r = tl
	case CRC_bind_auth_key_inner:
		tl := TL_bind_auth_key_inner{}
		tl.Nonce = m.Long()
		tl.TempAuthKeyID = m.Long()
		tl.PermAuthKeyID = m.Long()
		tl.TempSessionID = m.Long()
		tl.ExpiresAt = m.Int()
		r = tl
	case CRC_server_DH_params_fail:
		tl := TL_server_DH_params_fail{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.NewNonceHash = m.Bytes16()
		r = tl
	case CRC_server_DH_params_ok:
		tl := TL_server_DH_params_ok{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.EncryptedAnswer = m.String()
		r = tl
	case CRC_server_DH_inner_data:
		tl := TL_server_DH_inner_data{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.G = m.Int()
		tl.DhPrime = m.String()
		tl.GA = m.String()
		tl.ServerTime = m.Int()
		r = tl
	case CRC_client_DH_inner_data:
		tl := TL_client_DH_inner_data{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.RetryID = m.Long()
		tl.GB = m.String()
		r = tl
	case CRC_dh_gen_ok:
		tl := TL_dh_gen_ok{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.NewNonceHash1 = m.Bytes16()
		r = tl
	case CRC_dh_gen_retry:
		tl := TL_dh_gen_retry{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.NewNonceHash2 = m.Bytes16()
		r = tl
	case CRC_dh_gen_fail:
		tl := TL_dh_gen_fail{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.NewNonceHash3 = m.Bytes16()
		r = tl
	case CRC_destroy_auth_key_ok:
		tl := TL_destroy_auth_key_ok{}
		r = tl
	case CRC_destroy_auth_key_none:
		tl := TL_destroy_auth_key_none{}
		r = tl
	case CRC_destroy_auth_key_fail:
		tl := TL_destroy_auth_key_fail{}
		r = tl
	case CRC_req_pq:
		tl := TL_req_pq{}
		tl.Nonce = m.Bytes16()
		r = tl
	case CRC_req_pq_multi:
		tl := TL_req_pq_multi{}
		tl.Nonce = m.Bytes16()
		r = tl
	case CRC_req_DH_params:
		tl := TL_req_DH_params{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.P = m.String()
		tl.Q = m.String()
		tl.PublicKeyFingerprint = m.Long()
		tl.EncryptedData = m.String()
		r = tl
	case CRC_set_client_DH_params:
		tl := TL_set_client_DH_params{}
		tl.Nonce = m.Bytes16()
		tl.ServerNonce = m.Bytes16()
		tl.EncryptedData = m.String()
		r = tl
	case CRC_destroy_auth_key:
		tl := TL_destroy_auth_key{}
		r = tl
	case CRC_msgs_ack:
		tl := TL_msgs_ack{}
		tl.MsgIds = m.VectorLong()
		r = tl
	case CRC_bad_msg_notification:
		tl := TL_bad_msg_notification{}
		tl.BadMsgID = m.Long()
		tl.BadMsgSeqno = m.Int()
		tl.ErrorCode = m.Int()
		r = tl
	case CRC_bad_server_salt:
		tl := TL_bad_server_salt{}
		tl.BadMsgID = m.Long()
		tl.BadMsgSeqno = m.Int()
		tl.ErrorCode = m.Int()
		tl.NewServerSalt = m.Long()
		r = tl
	case CRC_msgs_state_req:
		tl := TL_msgs_state_req{}
		tl.MsgIds = m.VectorLong()
		r = tl
	case CRC_msgs_state_info:
		tl := TL_msgs_state_info{}
		tl.ReqMsgID = m.Long()
		tl.Info = m.String()
		r = tl
	case CRC_msgs_all_info:
		tl := TL_msgs_all_info{}
		tl.MsgIds = m.VectorLong()
		tl.Info = m.String()
		r = tl
	case CRC_msg_detailed_info:
		tl := TL_msg_detailed_info{}
		tl.MsgID = m.Long()
		tl.AnswerMsgID = m.Long()
		tl.Bytes = m.Int()
		tl.Status = m.Int()
		r = tl
	case CRC_msg_new_detailed_info:
		tl := TL_msg_new_detailed_info{}
		tl.AnswerMsgID = m.Long()
		tl.Bytes = m.Int()
		tl.Status = m.Int()
		r = tl
	case CRC_msg_resend_req:
		tl := TL_msg_resend_req{}
		tl.MsgIds = m.VectorLong()
		r = tl
	case CRC_rpc_error:
		tl := TL_rpc_error{}
		tl.ErrorCode = m.Int()
		tl.ErrorMessage = m.String()
		r = tl
	case CRC_rpc_answer_unknown:
		tl := TL_rpc_answer_unknown{}
		r = tl
	case CRC_rpc_answer_dropped_running:
		tl := TL_rpc_answer_dropped_running{}
		r = tl
	case CRC_rpc_answer_dropped:
		tl := TL_rpc_answer_dropped{}
		tl.MsgID = m.Long()
		tl.SeqNo = m.Int()
		tl.Bytes = m.Int()
		r = tl
	case CRC_future_salt:
		tl := TL_future_salt{}
		tl.ValidSince = m.Int()
		tl.ValidUntil = m.Int()
		tl.Salt = m.Long()
		r = tl
	case CRC_future_salts:
		tl := TL_future_salts{}
		tl.ReqMsgID = m.Long()
		tl.Now = m.Int()
		tl.Salts = m.Vector()
		r = tl
	case CRC_pong:
		tl := TL_pong{}
		tl.MsgID = m.Long()
		tl.PingID = m.Long()
		r = tl
	case CRC_destroy_session_ok:
		tl := TL_destroy_session_ok{}
		tl.SessionID = m.Long()
		r = tl
	case CRC_destroy_session_none:
		tl := TL_destroy_session_none{}
		tl.SessionID = m.Long()
		r = tl
	case CRC_new_session_created:
		tl := TL_new_session_created{}
		tl.FirstMsgID = m.Long()
		tl.UniqueID = m.Long()
		tl.ServerSalt = m.Long()
		r = tl
	case CRC_http_wait:
		tl := TL_http_wait{}
		tl.MaxDelay = m.Int()
		tl.WaitAfter = m.Int()
		tl.MaxWait = m.Int()
		r = tl
	case CRC_ipPort:
		tl := TL_ipPort{}
		tl.Ipv4 = m.Int()
		tl.Port = m.Int()
		r = tl
	case CRC_ipPortSecret:
		tl := TL_ipPortSecret{}
		tl.Ipv4 = m.Int()
		tl.Port = m.Int()
		tl.Secret = m.StringBytes()
		r = tl
	case CRC_accessPointRule:
		tl := TL_accessPointRule{}
		tl.PhonePrefixRules = m.String()
		tl.DcID = m.Int()
		tl.Ips = m.Vector()
		r = tl
	case CRC_help_configSimple:
		tl := TL_help_configSimple{}
		tl.Date = m.Int()
		tl.Expires = m.Int()
		tl.Rules = m.Vector()
		r = tl
	case CRC_tlsClientHello:
		tl := TL_tlsClientHello{}
		tl.Blocks = m.Vector()
		r = tl
	case CRC_tlsBlockString:
		tl := TL_tlsBlockString{}
		tl.Data = m.String()
		r = tl
	case CRC_tlsBlockRandom:
		tl := TL_tlsBlockRandom{}
		tl.Length = m.Int()
		r = tl
	case CRC_tlsBlockZero:
		tl := TL_tlsBlockZero{}
		tl.Length = m.Int()
		r = tl
	case CRC_tlsBlockDomain:
		tl := TL_tlsBlockDomain{}
		r = tl
	case CRC_tlsBlockGrease:
		tl := TL_tlsBlockGrease{}
		tl.Seed = m.Int()
		r = tl
	case CRC_tlsBlockPublicKey:
		tl := TL_tlsBlockPublicKey{}
		r = tl
	case CRC_tlsBlockScope:
		tl := TL_tlsBlockScope{}
		tl.Entries = m.Vector()
		r = tl
	case CRC_tlsBlockPermutation:
		tl := TL_tlsBlockPermutation{}
		tl.Entries = m.Vector2d()
		r = tl
	case CRC_rpc_drop_answer:
		tl := TL_rpc_drop_answer{}
		tl.ReqMsgID = m.Long()
		r = tl
	case CRC_get_future_salts:
		tl := TL_get_future_salts{}
		tl.Num = m.Int()
		r = tl
	case CRC_ping:
		tl := TL_ping{}
		tl.PingID = m.Long()
		r = tl
	case CRC_ping_delay_disconnect:
		tl := TL_ping_delay_disconnect{}
		tl.PingID = m.Long()
		tl.DisconnectDelay = m.Int()
		r = tl
	case CRC_destroy_session:
		tl := TL_destroy_session{}
		tl.SessionID = m.Long()
		r = tl
	case CRC_boolFalse:
		tl := TL_boolFalse{}
		r = tl
	case CRC_boolTrue:
		tl := TL_boolTrue{}
		r = tl
	case CRC_true:
		tl := TL_true{}
		r = tl
	case CRC_error:
		tl := TL_error{}
		tl.Code = m.Int()
		tl.Text = m.String()
		r = tl
	case CRC_null:
		tl := TL_null{}
		r = tl
	case CRC_inputPeerEmpty:
		tl := TL_inputPeerEmpty{}
		r = tl
	case CRC_inputPeerSelf:
		tl := TL_inputPeerSelf{}
		r = tl
	case CRC_inputPeerChat:
		tl := TL_inputPeerChat{}
		tl.ChatID = m.Long()
		r = tl
	case CRC_inputPeerUser:
		tl := TL_inputPeerUser{}
		tl.UserID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputPeerChannel:
		tl := TL_inputPeerChannel{}
		tl.ChannelID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputPeerUserFromMessage:
		tl := TL_inputPeerUserFromMessage{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.UserID = m.Long()
		r = tl
	case CRC_inputPeerChannelFromMessage:
		tl := TL_inputPeerChannelFromMessage{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.ChannelID = m.Long()
		r = tl
	case CRC_inputUserEmpty:
		tl := TL_inputUserEmpty{}
		r = tl
	case CRC_inputUserSelf:
		tl := TL_inputUserSelf{}
		r = tl
	case CRC_inputUser:
		tl := TL_inputUser{}
		tl.UserID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputUserFromMessage:
		tl := TL_inputUserFromMessage{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.UserID = m.Long()
		r = tl
	case CRC_inputPhoneContact:
		tl := TL_inputPhoneContact{}
		tl.ClientID = m.Long()
		tl.Phone = m.String()
		tl.FirstName = m.String()
		tl.LastName = m.String()
		r = tl
	case CRC_inputFile:
		tl := TL_inputFile{}
		tl.ID = m.Long()
		tl.Parts = m.Int()
		tl.Name = m.String()
		tl.Md5Checksum = m.String()
		r = tl
	case CRC_inputFileBig:
		tl := TL_inputFileBig{}
		tl.ID = m.Long()
		tl.Parts = m.Int()
		tl.Name = m.String()
		r = tl
	case CRC_inputMediaEmpty:
		tl := TL_inputMediaEmpty{}
		r = tl
	case CRC_inputMediaUploadedPhoto:
		tl := TL_inputMediaUploadedPhoto{}
		flags := m.Int()
		tl.Spoiler = flags&(1<<2) != 0
		tl.File = m.Object()
		if flags&(1<<0) != 0 {
			tl.Stickers = m.Vector()
		}
		if flags&(1<<1) != 0 {
			tl.TtlSeconds = Some(m.Int())
		}
		r = tl
	case CRC_inputMediaPhoto:
		tl := TL_inputMediaPhoto{}
		flags := m.Int()
		tl.Spoiler = flags&(1<<1) != 0
		tl.ID = m.Object()
		if flags&(1<<0) != 0 {
			tl.TtlSeconds = Some(m.Int())
		}
		r = tl
	case CRC_inputMediaGeoPoint:
		tl := TL_inputMediaGeoPoint{}
		tl.GeoPoint = m.Object()
		r = tl
	case CRC_inputMediaContact:
		tl := TL_inputMediaContact{}
		tl.PhoneNumber = m.String()
		tl.FirstName = m.String()
		tl.LastName = m.String()
		tl.Vcard = m.String()
		r = tl
	case CRC_inputMediaUploadedDocument:
		tl := TL_inputMediaUploadedDocument{}
		flags := m.Int()
		tl.NosoundVideo = flags&(1<<3) != 0
		tl.ForceFile = flags&(1<<4) != 0
		tl.Spoiler = flags&(1<<5) != 0
		tl.File = m.Object()
		if flags&(1<<2) != 0 {
			tl.Thumb = m.Object()
		}
		tl.MimeType = m.String()
		tl.Attributes = m.Vector()
		if flags&(1<<0) != 0 {
			tl.Stickers = m.Vector()
		}
		if flags&(1<<1) != 0 {
			tl.TtlSeconds = Some(m.Int())
		}
		r = tl
	case CRC_inputMediaDocument:
		tl := TL_inputMediaDocument{}
		flags := m.Int()
		tl.Spoiler = flags&(1<<2) != 0
		tl.ID = m.Object()
		if flags&(1<<0) != 0 {
			tl.TtlSeconds = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.Query = Some(m.String())
		}
		r = tl
	case CRC_inputMediaVenue:
		tl := TL_inputMediaVenue{}
		tl.GeoPoint = m.Object()
		tl.Title = m.String()
		tl.Address = m.String()
		tl.Provider = m.String()
		tl.VenueID = m.String()
		tl.VenueType = m.String()
		r = tl
	case CRC_inputMediaPhotoExternal:
		tl := TL_inputMediaPhotoExternal{}
		flags := m.Int()
		tl.Spoiler = flags&(1<<1) != 0
		tl.Url = m.String()
		if flags&(1<<0) != 0 {
			tl.TtlSeconds = Some(m.Int())
		}
		r = tl
	case CRC_inputMediaDocumentExternal:
		tl := TL_inputMediaDocumentExternal{}
		flags := m.Int()
		tl.Spoiler = flags&(1<<1) != 0
		tl.Url = m.String()
		if flags&(1<<0) != 0 {
			tl.TtlSeconds = Some(m.Int())
		}
		r = tl
	case CRC_inputMediaGame:
		tl := TL_inputMediaGame{}
		tl.ID = m.Object()
		r = tl
	case CRC_inputMediaInvoice:
		tl := TL_inputMediaInvoice{}
		flags := m.Int()
		tl.Title = m.String()
		tl.Description = m.String()
		if flags&(1<<0) != 0 {
			tl.Photo = m.Object()
		}
		tl.Invoice = m.Object()
		tl.Payload = m.StringBytes()
		tl.Provider = m.String()
		tl.ProviderData = m.Object()
		if flags&(1<<1) != 0 {
			tl.StartParam = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.ExtendedMedia = m.Object()
		}
		r = tl
	case CRC_inputMediaGeoLive:
		tl := TL_inputMediaGeoLive{}
		flags := m.Int()
		tl.Stopped = flags&(1<<0) != 0
		tl.GeoPoint = m.Object()
		if flags&(1<<2) != 0 {
			tl.Heading = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.Period = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.ProximityNotificationRadius = Some(m.Int())
		}
		r = tl
	case CRC_inputMediaPoll:
		tl := TL_inputMediaPoll{}
		flags := m.Int()
		tl.Poll = m.Object()
		if flags&(1<<0) != 0 {
			tl.CorrectAnswers = m.VectorBytes()
		}
		if flags&(1<<1) != 0 {
			tl.Solution = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.SolutionEntities = m.Vector()
		}
		r = tl
	case CRC_inputMediaDice:
		tl := TL_inputMediaDice{}
		tl.Emoticon = m.String()
		r = tl
	case CRC_inputMediaStory:
		tl := TL_inputMediaStory{}
		tl.Peer = m.Object()
		tl.ID = m.Int()
		r = tl
	case CRC_inputMediaWebPage:
		tl := TL_inputMediaWebPage{}
		flags := m.Int()
		tl.ForceLargeMedia = flags&(1<<0) != 0
		tl.ForceSmallMedia = flags&(1<<1) != 0
		tl.Optional = flags&(1<<2) != 0
		tl.Url = m.String()
		r = tl
	case CRC_inputChatPhotoEmpty:
		tl := TL_inputChatPhotoEmpty{}
		r = tl
	case CRC_inputChatUploadedPhoto:
		tl := TL_inputChatUploadedPhoto{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.File = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Video = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.VideoStartTs = Some(m.Double())
		}
		if flags&(1<<3) != 0 {
			tl.VideoEmojiMarkup = m.Object()
		}
		r = tl
	case CRC_inputChatPhoto:
		tl := TL_inputChatPhoto{}
		tl.ID = m.Object()
		r = tl
	case CRC_inputGeoPointEmpty:
		tl := TL_inputGeoPointEmpty{}
		r = tl
	case CRC_inputGeoPoint:
		tl := TL_inputGeoPoint{}
		flags := m.Int()
		tl.Lat = m.Double()
		tl.Long = m.Double()
		if flags&(1<<0) != 0 {
			tl.AccuracyRadius = Some(m.Int())
		}
		r = tl
	case CRC_inputPhotoEmpty:
		tl := TL_inputPhotoEmpty{}
		r = tl
	case CRC_inputPhoto:
		tl := TL_inputPhoto{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.FileReference = m.StringBytes()
		r = tl
	case CRC_inputFileLocation:
		tl := TL_inputFileLocation{}
		tl.VolumeID = m.Long()
		tl.LocalID = m.Int()
		tl.Secret = m.Long()
		tl.FileReference = m.StringBytes()
		r = tl
	case CRC_inputEncryptedFileLocation:
		tl := TL_inputEncryptedFileLocation{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputDocumentFileLocation:
		tl := TL_inputDocumentFileLocation{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.FileReference = m.StringBytes()
		tl.ThumbSize = m.String()
		r = tl
	case CRC_inputSecureFileLocation:
		tl := TL_inputSecureFileLocation{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputTakeoutFileLocation:
		tl := TL_inputTakeoutFileLocation{}
		r = tl
	case CRC_inputPhotoFileLocation:
		tl := TL_inputPhotoFileLocation{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.FileReference = m.StringBytes()
		tl.ThumbSize = m.String()
		r = tl
	case CRC_inputPhotoLegacyFileLocation:
		tl := TL_inputPhotoLegacyFileLocation{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.FileReference = m.StringBytes()
		tl.VolumeID = m.Long()
		tl.LocalID = m.Int()
		tl.Secret = m.Long()
		r = tl
	case CRC_inputPeerPhotoFileLocation:
		tl := TL_inputPeerPhotoFileLocation{}
		flags := m.Int()
		tl.Big = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.PhotoID = m.Long()
		r = tl
	case CRC_inputStickerSetThumb:
		tl := TL_inputStickerSetThumb{}
		tl.Stickerset = m.Object()
		tl.ThumbVersion = m.Int()
		r = tl
	case CRC_inputGroupCallStream:
		tl := TL_inputGroupCallStream{}
		flags := m.Int()
		tl.Call = m.Object()
		tl.TimeMs = m.Long()
		tl.Scale = m.Int()
		if flags&(1<<0) != 0 {
			tl.VideoChannel = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.VideoQuality = Some(m.Int())
		}
		r = tl
	case CRC_peerUser:
		tl := TL_peerUser{}
		tl.UserID = m.Long()
		r = tl
	case CRC_peerChat:
		tl := TL_peerChat{}
		tl.ChatID = m.Long()
		r = tl
	case CRC_peerChannel:
		tl := TL_peerChannel{}
		tl.ChannelID = m.Long()
		r = tl
	case CRC_storage_fileUnknown:
		tl := TL_storage_fileUnknown{}
		r = tl
	case CRC_storage_filePartial:
		tl := TL_storage_filePartial{}
		r = tl
	case CRC_storage_fileJpeg:
		tl := TL_storage_fileJpeg{}
		r = tl
	case CRC_storage_fileGif:
		tl := TL_storage_fileGif{}
		r = tl
	case CRC_storage_filePng:
		tl := TL_storage_filePng{}
		r = tl
	case CRC_storage_filePdf:
		tl := TL_storage_filePdf{}
		r = tl
	case CRC_storage_fileMp3:
		tl := TL_storage_fileMp3{}
		r = tl
	case CRC_storage_fileMov:
		tl := TL_storage_fileMov{}
		r = tl
	case CRC_storage_fileMp4:
		tl := TL_storage_fileMp4{}
		r = tl
	case CRC_storage_fileWebp:
		tl := TL_storage_fileWebp{}
		r = tl
	case CRC_userEmpty:
		tl := TL_userEmpty{}
		tl.ID = m.Long()
		r = tl
	case CRC_user:
		tl := TL_user{}
		flags := m.Int()
		tl.Self = flags&(1<<10) != 0
		tl.Contact = flags&(1<<11) != 0
		tl.MutualContact = flags&(1<<12) != 0
		tl.Deleted = flags&(1<<13) != 0
		tl.Bot = flags&(1<<14) != 0
		tl.BotChatHistory = flags&(1<<15) != 0
		tl.BotNochats = flags&(1<<16) != 0
		tl.Verified = flags&(1<<17) != 0
		tl.Restricted = flags&(1<<18) != 0
		tl.Min = flags&(1<<20) != 0
		tl.BotInlineGeo = flags&(1<<21) != 0
		tl.Support = flags&(1<<23) != 0
		tl.Scam = flags&(1<<24) != 0
		tl.ApplyMinPhoto = flags&(1<<25) != 0
		tl.Fake = flags&(1<<26) != 0
		tl.BotAttachMenu = flags&(1<<27) != 0
		tl.Premium = flags&(1<<28) != 0
		tl.AttachMenuEnabled = flags&(1<<29) != 0
		flags2 := m.Int()
		tl.BotCanEdit = flags2&(1<<1) != 0
		tl.CloseFriend = flags2&(1<<2) != 0
		tl.StoriesHidden = flags2&(1<<3) != 0
		tl.StoriesUnavailable = flags2&(1<<4) != 0
		tl.ID = m.Long()
		if flags&(1<<0) != 0 {
			tl.AccessHash = Some(m.Long())
		}
		if flags&(1<<1) != 0 {
			tl.FirstName = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.LastName = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.Username = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.Phone = Some(m.String())
		}
		if flags&(1<<5) != 0 {
			tl.Photo = m.Object()
		}
		if flags&(1<<6) != 0 {
			tl.Status = m.Object()
		}
		if flags&(1<<14) != 0 {
			tl.BotInfoVersion = Some(m.Int())
		}
		if flags&(1<<18) != 0 {
			tl.RestrictionReason = m.Vector()
		}
		if flags&(1<<19) != 0 {
			tl.BotInlinePlaceholder = Some(m.String())
		}
		if flags&(1<<22) != 0 {
			tl.LangCode = Some(m.String())
		}
		if flags&(1<<30) != 0 {
			tl.EmojiStatus = m.Object()
		}
		if flags2&(1<<0) != 0 {
			tl.Usernames = m.Vector()
		}
		if flags2&(1<<5) != 0 {
			tl.StoriesMaxID = Some(m.Int())
		}
		if flags2&(1<<7) != 0 {
			tl.Color = Some(m.Int())
		}
		if flags2&(1<<6) != 0 {
			tl.BackgroundEmojiID = Some(m.Long())
		}
		r = tl
	case CRC_userProfilePhotoEmpty:
		tl := TL_userProfilePhotoEmpty{}
		r = tl
	case CRC_userProfilePhoto:
		tl := TL_userProfilePhoto{}
		flags := m.Int()
		tl.HasVideo = flags&(1<<0) != 0
		tl.Personal = flags&(1<<2) != 0
		tl.PhotoID = m.Long()
		if flags&(1<<1) != 0 {
			tl.StrippedThumb = m.StringBytes()
		}
		tl.DcID = m.Int()
		r = tl
	case CRC_userStatusEmpty:
		tl := TL_userStatusEmpty{}
		r = tl
	case CRC_userStatusOnline:
		tl := TL_userStatusOnline{}
		tl.Expires = m.Int()
		r = tl
	case CRC_userStatusOffline:
		tl := TL_userStatusOffline{}
		tl.WasOnline = m.Int()
		r = tl
	case CRC_userStatusRecently:
		tl := TL_userStatusRecently{}
		r = tl
	case CRC_userStatusLastWeek:
		tl := TL_userStatusLastWeek{}
		r = tl
	case CRC_userStatusLastMonth:
		tl := TL_userStatusLastMonth{}
		r = tl
	case CRC_chatEmpty:
		tl := TL_chatEmpty{}
		tl.ID = m.Long()
		r = tl
	case CRC_chat:
		tl := TL_chat{}
		flags := m.Int()
		tl.Creator = flags&(1<<0) != 0
		tl.Left = flags&(1<<2) != 0
		tl.Deactivated = flags&(1<<5) != 0
		tl.CallActive = flags&(1<<23) != 0
		tl.CallNotEmpty = flags&(1<<24) != 0
		tl.Noforwards = flags&(1<<25) != 0
		tl.ID = m.Long()
		tl.Title = m.String()
		tl.Photo = m.Object()
		tl.ParticipantsCount = m.Int()
		tl.Date = m.Int()
		tl.Version = m.Int()
		if flags&(1<<6) != 0 {
			tl.MigratedTo = m.Object()
		}
		if flags&(1<<14) != 0 {
			tl.AdminRights = m.Object()
		}
		if flags&(1<<18) != 0 {
			tl.DefaultBannedRights = m.Object()
		}
		r = tl
	case CRC_chatForbidden:
		tl := TL_chatForbidden{}
		tl.ID = m.Long()
		tl.Title = m.String()
		r = tl
	case CRC_channel:
		tl := TL_channel{}
		flags := m.Int()
		tl.Creator = flags&(1<<0) != 0
		tl.Left = flags&(1<<2) != 0
		tl.Broadcast = flags&(1<<5) != 0
		tl.Verified = flags&(1<<7) != 0
		tl.Megagroup = flags&(1<<8) != 0
		tl.Restricted = flags&(1<<9) != 0
		tl.Signatures = flags&(1<<11) != 0
		tl.Min = flags&(1<<12) != 0
		tl.Scam = flags&(1<<19) != 0
		tl.HasLink = flags&(1<<20) != 0
		tl.HasGeo = flags&(1<<21) != 0
		tl.SlowmodeEnabled = flags&(1<<22) != 0
		tl.CallActive = flags&(1<<23) != 0
		tl.CallNotEmpty = flags&(1<<24) != 0
		tl.Fake = flags&(1<<25) != 0
		tl.Gigagroup = flags&(1<<26) != 0
		tl.Noforwards = flags&(1<<27) != 0
		tl.JoinToSend = flags&(1<<28) != 0
		tl.JoinRequest = flags&(1<<29) != 0
		tl.Forum = flags&(1<<30) != 0
		flags2 := m.Int()
		tl.StoriesHidden = flags2&(1<<1) != 0
		tl.StoriesHiddenMin = flags2&(1<<2) != 0
		tl.StoriesUnavailable = flags2&(1<<3) != 0
		tl.ID = m.Long()
		if flags&(1<<13) != 0 {
			tl.AccessHash = Some(m.Long())
		}
		tl.Title = m.String()
		if flags&(1<<6) != 0 {
			tl.Username = Some(m.String())
		}
		tl.Photo = m.Object()
		tl.Date = m.Int()
		if flags&(1<<9) != 0 {
			tl.RestrictionReason = m.Vector()
		}
		if flags&(1<<14) != 0 {
			tl.AdminRights = m.Object()
		}
		if flags&(1<<15) != 0 {
			tl.BannedRights = m.Object()
		}
		if flags&(1<<18) != 0 {
			tl.DefaultBannedRights = m.Object()
		}
		if flags&(1<<17) != 0 {
			tl.ParticipantsCount = Some(m.Int())
		}
		if flags2&(1<<0) != 0 {
			tl.Usernames = m.Vector()
		}
		if flags2&(1<<4) != 0 {
			tl.StoriesMaxID = Some(m.Int())
		}
		if flags2&(1<<6) != 0 {
			tl.Color = Some(m.Int())
		}
		if flags2&(1<<5) != 0 {
			tl.BackgroundEmojiID = Some(m.Long())
		}
		r = tl
	case CRC_channelForbidden:
		tl := TL_channelForbidden{}
		flags := m.Int()
		tl.Broadcast = flags&(1<<5) != 0
		tl.Megagroup = flags&(1<<8) != 0
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Title = m.String()
		if flags&(1<<16) != 0 {
			tl.UntilDate = Some(m.Int())
		}
		r = tl
	case CRC_chatFull:
		tl := TL_chatFull{}
		flags := m.Int()
		tl.CanSetUsername = flags&(1<<7) != 0
		tl.HasScheduled = flags&(1<<8) != 0
		tl.TranslationsDisabled = flags&(1<<19) != 0
		tl.ID = m.Long()
		tl.About = m.String()
		tl.Participants = m.Object()
		if flags&(1<<2) != 0 {
			tl.ChatPhoto = m.Object()
		}
		tl.NotifySettings = m.Object()
		if flags&(1<<13) != 0 {
			tl.ExportedInvite = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.BotInfo = m.Vector()
		}
		if flags&(1<<6) != 0 {
			tl.PinnedMsgID = Some(m.Int())
		}
		if flags&(1<<11) != 0 {
			tl.FolderID = Some(m.Int())
		}
		if flags&(1<<12) != 0 {
			tl.Call = m.Object()
		}
		if flags&(1<<14) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		if flags&(1<<15) != 0 {
			tl.GroupcallDefaultJoinAs = m.Object()
		}
		if flags&(1<<16) != 0 {
			tl.ThemeEmoticon = Some(m.String())
		}
		if flags&(1<<17) != 0 {
			tl.RequestsPending = Some(m.Int())
		}
		if flags&(1<<17) != 0 {
			tl.RecentRequesters = m.VectorLong()
		}
		if flags&(1<<18) != 0 {
			tl.AvailableReactions = m.Object()
		}
		r = tl
	case CRC_channelFull:
		tl := TL_channelFull{}
		flags := m.Int()
		tl.CanViewParticipants = flags&(1<<3) != 0
		tl.CanSetUsername = flags&(1<<6) != 0
		tl.CanSetStickers = flags&(1<<7) != 0
		tl.HiddenPrehistory = flags&(1<<10) != 0
		tl.CanSetLocation = flags&(1<<16) != 0
		tl.HasScheduled = flags&(1<<19) != 0
		tl.CanViewStats = flags&(1<<20) != 0
		tl.Blocked = flags&(1<<22) != 0
		flags2 := m.Int()
		tl.CanDeleteChannel = flags2&(1<<0) != 0
		tl.Antispam = flags2&(1<<1) != 0
		tl.ParticipantsHidden = flags2&(1<<2) != 0
		tl.TranslationsDisabled = flags2&(1<<3) != 0
		tl.StoriesPinnedAvailable = flags2&(1<<5) != 0
		tl.ID = m.Long()
		tl.About = m.String()
		if flags&(1<<0) != 0 {
			tl.ParticipantsCount = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.AdminsCount = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.KickedCount = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.BannedCount = Some(m.Int())
		}
		if flags&(1<<13) != 0 {
			tl.OnlineCount = Some(m.Int())
		}
		tl.ReadInboxMaxID = m.Int()
		tl.ReadOutboxMaxID = m.Int()
		tl.UnreadCount = m.Int()
		tl.ChatPhoto = m.Object()
		tl.NotifySettings = m.Object()
		if flags&(1<<23) != 0 {
			tl.ExportedInvite = m.Object()
		}
		tl.BotInfo = m.Vector()
		if flags&(1<<4) != 0 {
			tl.MigratedFromChatID = Some(m.Long())
		}
		if flags&(1<<4) != 0 {
			tl.MigratedFromMaxID = Some(m.Int())
		}
		if flags&(1<<5) != 0 {
			tl.PinnedMsgID = Some(m.Int())
		}
		if flags&(1<<8) != 0 {
			tl.Stickerset = m.Object()
		}
		if flags&(1<<9) != 0 {
			tl.AvailableMinID = Some(m.Int())
		}
		if flags&(1<<11) != 0 {
			tl.FolderID = Some(m.Int())
		}
		if flags&(1<<14) != 0 {
			tl.LinkedChatID = Some(m.Long())
		}
		if flags&(1<<15) != 0 {
			tl.Location = m.Object()
		}
		if flags&(1<<17) != 0 {
			tl.SlowmodeSeconds = Some(m.Int())
		}
		if flags&(1<<18) != 0 {
			tl.SlowmodeNextSendDate = Some(m.Int())
		}
		if flags&(1<<12) != 0 {
			tl.StatsDc = Some(m.Int())
		}
		tl.Pts = m.Int()
		if flags&(1<<21) != 0 {
			tl.Call = m.Object()
		}
		if flags&(1<<24) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		if flags&(1<<25) != 0 {
			tl.PendingSuggestions = m.VectorString()
		}
		if flags&(1<<26) != 0 {
			tl.GroupcallDefaultJoinAs = m.Object()
		}
		if flags&(1<<27) != 0 {
			tl.ThemeEmoticon = Some(m.String())
		}
		if flags&(1<<28) != 0 {
			tl.RequestsPending = Some(m.Int())
		}
		if flags&(1<<28) != 0 {
			tl.RecentRequesters = m.VectorLong()
		}
		if flags&(1<<29) != 0 {
			tl.DefaultSendAs = m.Object()
		}
		if flags&(1<<30) != 0 {
			tl.AvailableReactions = m.Object()
		}
		if flags2&(1<<4) != 0 {
			tl.Stories = m.Object()
		}
		r = tl
	case CRC_chatParticipant:
		tl := TL_chatParticipant{}
		tl.UserID = m.Long()
		tl.InviterID = m.Long()
		tl.Date = m.Int()
		r = tl
	case CRC_chatParticipantCreator:
		tl := TL_chatParticipantCreator{}
		tl.UserID = m.Long()
		r = tl
	case CRC_chatParticipantAdmin:
		tl := TL_chatParticipantAdmin{}
		tl.UserID = m.Long()
		tl.InviterID = m.Long()
		tl.Date = m.Int()
		r = tl
	case CRC_chatParticipantsForbidden:
		tl := TL_chatParticipantsForbidden{}
		flags := m.Int()
		tl.ChatID = m.Long()
		if flags&(1<<0) != 0 {
			tl.SelfParticipant = m.Object()
		}
		r = tl
	case CRC_chatParticipants:
		tl := TL_chatParticipants{}
		tl.ChatID = m.Long()
		tl.Participants = m.Vector()
		tl.Version = m.Int()
		r = tl
	case CRC_chatPhotoEmpty:
		tl := TL_chatPhotoEmpty{}
		r = tl
	case CRC_chatPhoto:
		tl := TL_chatPhoto{}
		flags := m.Int()
		tl.HasVideo = flags&(1<<0) != 0
		tl.PhotoID = m.Long()
		if flags&(1<<1) != 0 {
			tl.StrippedThumb = m.StringBytes()
		}
		tl.DcID = m.Int()
		r = tl
	case CRC_messageEmpty:
		tl := TL_messageEmpty{}
		flags := m.Int()
		tl.ID = m.Int()
		if flags&(1<<0) != 0 {
			tl.PeerID = m.Object()
		}
		r = tl
	case CRC_message:
		tl := TL_message{}
		flags := m.Int()
		tl.Out = flags&(1<<1) != 0
		tl.Mentioned = flags&(1<<4) != 0
		tl.MediaUnread = flags&(1<<5) != 0
		tl.Silent = flags&(1<<13) != 0
		tl.Post = flags&(1<<14) != 0
		tl.FromScheduled = flags&(1<<18) != 0
		tl.Legacy = flags&(1<<19) != 0
		tl.EditHide = flags&(1<<21) != 0
		tl.Pinned = flags&(1<<24) != 0
		tl.Noforwards = flags&(1<<26) != 0
		tl.InvertMedia = flags&(1<<27) != 0
		tl.ID = m.Int()
		if flags&(1<<8) != 0 {
			tl.FromID = m.Object()
		}
		tl.PeerID = m.Object()
		if flags&(1<<2) != 0 {
			tl.FwdFrom = m.Object()
		}
		if flags&(1<<11) != 0 {
			tl.ViaBotID = Some(m.Long())
		}
		if flags&(1<<3) != 0 {
			tl.ReplyTo = m.Object()
		}
		tl.Date = m.Int()
		tl.Message = m.String()
		if flags&(1<<9) != 0 {
			tl.Media = m.Object()
		}
		if flags&(1<<6) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		if flags&(1<<7) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<10) != 0 {
			tl.Views = Some(m.Int())
		}
		if flags&(1<<10) != 0 {
			tl.Forwards = Some(m.Int())
		}
		if flags&(1<<23) != 0 {
			tl.Replies = m.Object()
		}
		if flags&(1<<15) != 0 {
			tl.EditDate = Some(m.Int())
		}
		if flags&(1<<16) != 0 {
			tl.PostAuthor = Some(m.String())
		}
		if flags&(1<<17) != 0 {
			tl.GroupedID = Some(m.Long())
		}
		if flags&(1<<20) != 0 {
			tl.Reactions = m.Object()
		}
		if flags&(1<<22) != 0 {
			tl.RestrictionReason = m.Vector()
		}
		if flags&(1<<25) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		r = tl
	case CRC_messageService:
		tl := TL_messageService{}
		flags := m.Int()
		tl.Out = flags&(1<<1) != 0
		tl.Mentioned = flags&(1<<4) != 0
		tl.MediaUnread = flags&(1<<5) != 0
		tl.Silent = flags&(1<<13) != 0
		tl.Post = flags&(1<<14) != 0
		tl.Legacy = flags&(1<<19) != 0
		tl.ID = m.Int()
		if flags&(1<<8) != 0 {
			tl.FromID = m.Object()
		}
		tl.PeerID = m.Object()
		if flags&(1<<3) != 0 {
			tl.ReplyTo = m.Object()
		}
		tl.Date = m.Int()
		tl.Action = m.Object()
		if flags&(1<<25) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		r = tl
	case CRC_messageMediaEmpty:
		tl := TL_messageMediaEmpty{}
		r = tl
	case CRC_messageMediaPhoto:
		tl := TL_messageMediaPhoto{}
		flags := m.Int()
		tl.Spoiler = flags&(1<<3) != 0
		if flags&(1<<0) != 0 {
			tl.Photo = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.TtlSeconds = Some(m.Int())
		}
		r = tl
	case CRC_messageMediaGeo:
		tl := TL_messageMediaGeo{}
		tl.Geo = m.Object()
		r = tl
	case CRC_messageMediaContact:
		tl := TL_messageMediaContact{}
		tl.PhoneNumber = m.String()
		tl.FirstName = m.String()
		tl.LastName = m.String()
		tl.Vcard = m.String()
		tl.UserID = m.Long()
		r = tl
	case CRC_messageMediaUnsupported:
		tl := TL_messageMediaUnsupported{}
		r = tl
	case CRC_messageMediaDocument:
		tl := TL_messageMediaDocument{}
		flags := m.Int()
		tl.Nopremium = flags&(1<<3) != 0
		tl.Spoiler = flags&(1<<4) != 0
		if flags&(1<<0) != 0 {
			tl.Document = m.Object()
		}
		if flags&(1<<5) != 0 {
			tl.AltDocument = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.TtlSeconds = Some(m.Int())
		}
		r = tl
	case CRC_messageMediaWebPage:
		tl := TL_messageMediaWebPage{}
		flags := m.Int()
		tl.ForceLargeMedia = flags&(1<<0) != 0
		tl.ForceSmallMedia = flags&(1<<1) != 0
		tl.Manual = flags&(1<<3) != 0
		tl.Safe = flags&(1<<4) != 0
		tl.Webpage = m.Object()
		r = tl
	case CRC_messageMediaVenue:
		tl := TL_messageMediaVenue{}
		tl.Geo = m.Object()
		tl.Title = m.String()
		tl.Address = m.String()
		tl.Provider = m.String()
		tl.VenueID = m.String()
		tl.VenueType = m.String()
		r = tl
	case CRC_messageMediaGame:
		tl := TL_messageMediaGame{}
		tl.Game = m.Object()
		r = tl
	case CRC_messageMediaInvoice:
		tl := TL_messageMediaInvoice{}
		flags := m.Int()
		tl.ShippingAddressRequested = flags&(1<<1) != 0
		tl.Test = flags&(1<<3) != 0
		tl.Title = m.String()
		tl.Description = m.String()
		if flags&(1<<0) != 0 {
			tl.Photo = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.ReceiptMsgID = Some(m.Int())
		}
		tl.Currency = m.String()
		tl.TotalAmount = m.Long()
		tl.StartParam = m.String()
		if flags&(1<<4) != 0 {
			tl.ExtendedMedia = m.Object()
		}
		r = tl
	case CRC_messageMediaGeoLive:
		tl := TL_messageMediaGeoLive{}
		flags := m.Int()
		tl.Geo = m.Object()
		if flags&(1<<0) != 0 {
			tl.Heading = Some(m.Int())
		}
		tl.Period = m.Int()
		if flags&(1<<1) != 0 {
			tl.ProximityNotificationRadius = Some(m.Int())
		}
		r = tl
	case CRC_messageMediaPoll:
		tl := TL_messageMediaPoll{}
		tl.Poll = m.Object()
		tl.Results = m.Object()
		r = tl
	case CRC_messageMediaDice:
		tl := TL_messageMediaDice{}
		tl.Value = m.Int()
		tl.Emoticon = m.String()
		r = tl
	case CRC_messageMediaStory:
		tl := TL_messageMediaStory{}
		flags := m.Int()
		tl.ViaMention = flags&(1<<1) != 0
		tl.Peer = m.Object()
		tl.ID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Story = m.Object()
		}
		r = tl
	case CRC_messageMediaGiveaway:
		tl := TL_messageMediaGiveaway{}
		flags := m.Int()
		tl.OnlyNewSubscribers = flags&(1<<0) != 0
		tl.Channels = m.VectorLong()
		if flags&(1<<1) != 0 {
			tl.CountriesIso2 = m.VectorString()
		}
		tl.Quantity = m.Int()
		tl.Months = m.Int()
		tl.UntilDate = m.Int()
		r = tl
	case CRC_messageActionEmpty:
		tl := TL_messageActionEmpty{}
		r = tl
	case CRC_messageActionChatCreate:
		tl := TL_messageActionChatCreate{}
		tl.Title = m.String()
		tl.Users = m.VectorLong()
		r = tl
	case CRC_messageActionChatEditTitle:
		tl := TL_messageActionChatEditTitle{}
		tl.Title = m.String()
		r = tl
	case CRC_messageActionChatEditPhoto:
		tl := TL_messageActionChatEditPhoto{}
		tl.Photo = m.Object()
		r = tl
	case CRC_messageActionChatDeletePhoto:
		tl := TL_messageActionChatDeletePhoto{}
		r = tl
	case CRC_messageActionChatAddUser:
		tl := TL_messageActionChatAddUser{}
		tl.Users = m.VectorLong()
		r = tl
	case CRC_messageActionChatDeleteUser:
		tl := TL_messageActionChatDeleteUser{}
		tl.UserID = m.Long()
		r = tl
	case CRC_messageActionChatJoinedByLink:
		tl := TL_messageActionChatJoinedByLink{}
		tl.InviterID = m.Long()
		r = tl
	case CRC_messageActionChannelCreate:
		tl := TL_messageActionChannelCreate{}
		tl.Title = m.String()
		r = tl
	case CRC_messageActionChatMigrateTo:
		tl := TL_messageActionChatMigrateTo{}
		tl.ChannelID = m.Long()
		r = tl
	case CRC_messageActionChannelMigrateFrom:
		tl := TL_messageActionChannelMigrateFrom{}
		tl.Title = m.String()
		tl.ChatID = m.Long()
		r = tl
	case CRC_messageActionPinMessage:
		tl := TL_messageActionPinMessage{}
		r = tl
	case CRC_messageActionHistoryClear:
		tl := TL_messageActionHistoryClear{}
		r = tl
	case CRC_messageActionGameScore:
		tl := TL_messageActionGameScore{}
		tl.GameID = m.Long()
		tl.Score = m.Int()
		r = tl
	case CRC_messageActionPaymentSentMe:
		tl := TL_messageActionPaymentSentMe{}
		flags := m.Int()
		tl.RecurringInit = flags&(1<<2) != 0
		tl.RecurringUsed = flags&(1<<3) != 0
		tl.Currency = m.String()
		tl.TotalAmount = m.Long()
		tl.Payload = m.StringBytes()
		if flags&(1<<0) != 0 {
			tl.Info = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.ShippingOptionID = Some(m.String())
		}
		tl.Charge = m.Object()
		r = tl
	case CRC_messageActionPaymentSent:
		tl := TL_messageActionPaymentSent{}
		flags := m.Int()
		tl.RecurringInit = flags&(1<<2) != 0
		tl.RecurringUsed = flags&(1<<3) != 0
		tl.Currency = m.String()
		tl.TotalAmount = m.Long()
		if flags&(1<<0) != 0 {
			tl.InvoiceSlug = Some(m.String())
		}
		r = tl
	case CRC_messageActionPhoneCall:
		tl := TL_messageActionPhoneCall{}
		flags := m.Int()
		tl.Video = flags&(1<<2) != 0
		tl.CallID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Reason = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Duration = Some(m.Int())
		}
		r = tl
	case CRC_messageActionScreenshotTaken:
		tl := TL_messageActionScreenshotTaken{}
		r = tl
	case CRC_messageActionCustomAction:
		tl := TL_messageActionCustomAction{}
		tl.Message = m.String()
		r = tl
	case CRC_messageActionBotAllowed:
		tl := TL_messageActionBotAllowed{}
		flags := m.Int()
		tl.AttachMenu = flags&(1<<1) != 0
		tl.FromRequest = flags&(1<<3) != 0
		if flags&(1<<0) != 0 {
			tl.Domain = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.App = m.Object()
		}
		r = tl
	case CRC_messageActionSecureValuesSentMe:
		tl := TL_messageActionSecureValuesSentMe{}
		tl.Values = m.Vector()
		tl.Credentials = m.Object()
		r = tl
	case CRC_messageActionSecureValuesSent:
		tl := TL_messageActionSecureValuesSent{}
		tl.Types = m.Vector()
		r = tl
	case CRC_messageActionContactSignUp:
		tl := TL_messageActionContactSignUp{}
		r = tl
	case CRC_messageActionGeoProximityReached:
		tl := TL_messageActionGeoProximityReached{}
		tl.FromID = m.Object()
		tl.ToID = m.Object()
		tl.Distance = m.Int()
		r = tl
	case CRC_messageActionGroupCall:
		tl := TL_messageActionGroupCall{}
		flags := m.Int()
		tl.Call = m.Object()
		if flags&(1<<0) != 0 {
			tl.Duration = Some(m.Int())
		}
		r = tl
	case CRC_messageActionInviteToGroupCall:
		tl := TL_messageActionInviteToGroupCall{}
		tl.Call = m.Object()
		tl.Users = m.VectorLong()
		r = tl
	case CRC_messageActionSetMessagesTTL:
		tl := TL_messageActionSetMessagesTTL{}
		flags := m.Int()
		tl.Period = m.Int()
		if flags&(1<<0) != 0 {
			tl.AutoSettingFrom = Some(m.Long())
		}
		r = tl
	case CRC_messageActionGroupCallScheduled:
		tl := TL_messageActionGroupCallScheduled{}
		tl.Call = m.Object()
		tl.ScheduleDate = m.Int()
		r = tl
	case CRC_messageActionSetChatTheme:
		tl := TL_messageActionSetChatTheme{}
		tl.Emoticon = m.String()
		r = tl
	case CRC_messageActionChatJoinedByRequest:
		tl := TL_messageActionChatJoinedByRequest{}
		r = tl
	case CRC_messageActionWebViewDataSentMe:
		tl := TL_messageActionWebViewDataSentMe{}
		tl.Text = m.String()
		tl.Data = m.String()
		r = tl
	case CRC_messageActionWebViewDataSent:
		tl := TL_messageActionWebViewDataSent{}
		tl.Text = m.String()
		r = tl
	case CRC_messageActionGiftPremium:
		tl := TL_messageActionGiftPremium{}
		flags := m.Int()
		tl.Currency = m.String()
		tl.Amount = m.Long()
		tl.Months = m.Int()
		if flags&(1<<0) != 0 {
			tl.CryptoCurrency = Some(m.String())
		}
		if flags&(1<<0) != 0 {
			tl.CryptoAmount = Some(m.Long())
		}
		r = tl
	case CRC_messageActionTopicCreate:
		tl := TL_messageActionTopicCreate{}
		flags := m.Int()
		tl.Title = m.String()
		tl.IconColor = m.Int()
		if flags&(1<<0) != 0 {
			tl.IconEmojiID = Some(m.Long())
		}
		r = tl
	case CRC_messageActionTopicEdit:
		tl := TL_messageActionTopicEdit{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.IconEmojiID = Some(m.Long())
		}
		if flags&(1<<2) != 0 {
			tl.Closed = Some(m.Bool())
		}
		if flags&(1<<3) != 0 {
			tl.Hidden = Some(m.Bool())
		}
		r = tl
	case CRC_messageActionSuggestProfilePhoto:
		tl := TL_messageActionSuggestProfilePhoto{}
		tl.Photo = m.Object()
		r = tl
	case CRC_messageActionRequestedPeer:
		tl := TL_messageActionRequestedPeer{}
		tl.ButtonID = m.Int()
		tl.Peer = m.Object()
		r = tl
	case CRC_messageActionSetChatWallPaper:
		tl := TL_messageActionSetChatWallPaper{}
		tl.Wallpaper = m.Object()
		r = tl
	case CRC_messageActionSetSameChatWallPaper:
		tl := TL_messageActionSetSameChatWallPaper{}
		tl.Wallpaper = m.Object()
		r = tl
	case CRC_messageActionGiftCode:
		tl := TL_messageActionGiftCode{}
		flags := m.Int()
		tl.ViaGiveaway = flags&(1<<0) != 0
		tl.Unclaimed = flags&(1<<2) != 0
		if flags&(1<<1) != 0 {
			tl.BoostPeer = m.Object()
		}
		tl.Months = m.Int()
		tl.Slug = m.String()
		r = tl
	case CRC_messageActionGiveawayLaunch:
		tl := TL_messageActionGiveawayLaunch{}
		r = tl
	case CRC_dialog:
		tl := TL_dialog{}
		flags := m.Int()
		tl.Pinned = flags&(1<<2) != 0
		tl.UnreadMark = flags&(1<<3) != 0
		tl.Peer = m.Object()
		tl.TopMessage = m.Int()
		tl.ReadInboxMaxID = m.Int()
		tl.ReadOutboxMaxID = m.Int()
		tl.UnreadCount = m.Int()
		tl.UnreadMentionsCount = m.Int()
		tl.UnreadReactionsCount = m.Int()
		tl.NotifySettings = m.Object()
		if flags&(1<<0) != 0 {
			tl.Pts = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.Draft = m.Object()
		}
		if flags&(1<<4) != 0 {
			tl.FolderID = Some(m.Int())
		}
		if flags&(1<<5) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		r = tl
	case CRC_dialogFolder:
		tl := TL_dialogFolder{}
		flags := m.Int()
		tl.Pinned = flags&(1<<2) != 0
		tl.Folder = m.Object()
		tl.Peer = m.Object()
		tl.TopMessage = m.Int()
		tl.UnreadMutedPeersCount = m.Int()
		tl.UnreadUnmutedPeersCount = m.Int()
		tl.UnreadMutedMessagesCount = m.Int()
		tl.UnreadUnmutedMessagesCount = m.Int()
		r = tl
	case CRC_photoEmpty:
		tl := TL_photoEmpty{}
		tl.ID = m.Long()
		r = tl
	case CRC_photo:
		tl := TL_photo{}
		flags := m.Int()
		tl.HasStickers = flags&(1<<0) != 0
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.FileReference = m.StringBytes()
		tl.Date = m.Int()
		tl.Sizes = m.Vector()
		if flags&(1<<1) != 0 {
			tl.VideoSizes = m.Vector()
		}
		tl.DcID = m.Int()
		r = tl
	case CRC_photoSizeEmpty:
		tl := TL_photoSizeEmpty{}
		tl.Type = m.String()
		r = tl
	case CRC_photoSize:
		tl := TL_photoSize{}
		tl.Type = m.String()
		tl.W = m.Int()
		tl.H = m.Int()
		tl.Size = m.Int()
		r = tl
	case CRC_photoCachedSize:
		tl := TL_photoCachedSize{}
		tl.Type = m.String()
		tl.W = m.Int()
		tl.H = m.Int()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_photoStrippedSize:
		tl := TL_photoStrippedSize{}
		tl.Type = m.String()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_photoSizeProgressive:
		tl := TL_photoSizeProgressive{}
		tl.Type = m.String()
		tl.W = m.Int()
		tl.H = m.Int()
		tl.Sizes = m.VectorInt()
		r = tl
	case CRC_photoPathSize:
		tl := TL_photoPathSize{}
		tl.Type = m.String()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_geoPointEmpty:
		tl := TL_geoPointEmpty{}
		r = tl
	case CRC_geoPoint:
		tl := TL_geoPoint{}
		flags := m.Int()
		tl.Long = m.Double()
		tl.Lat = m.Double()
		tl.AccessHash = m.Long()
		if flags&(1<<0) != 0 {
			tl.AccuracyRadius = Some(m.Int())
		}
		r = tl
	case CRC_auth_sentCode:
		tl := TL_auth_sentCode{}
		flags := m.Int()
		tl.Type = m.Object()
		tl.PhoneCodeHash = m.String()
		if flags&(1<<1) != 0 {
			tl.NextType = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Timeout = Some(m.Int())
		}
		r = tl
	case CRC_auth_sentCodeSuccess:
		tl := TL_auth_sentCodeSuccess{}
		tl.Authorization = m.Object()
		r = tl
	case CRC_auth_authorization:
		tl := TL_auth_authorization{}
		flags := m.Int()
		tl.SetupPasswordRequired = flags&(1<<1) != 0
		if flags&(1<<1) != 0 {
			tl.OtherwiseReloginDays = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.TmpSessions = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.FutureAuthToken = m.StringBytes()
		}
		tl.User = m.Object()
		r = tl
	case CRC_auth_authorizationSignUpRequired:
		tl := TL_auth_authorizationSignUpRequired{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.TermsOfService = m.Object()
		}
		r = tl
	case CRC_auth_exportedAuthorization:
		tl := TL_auth_exportedAuthorization{}
		tl.ID = m.Long()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_inputNotifyPeer:
		tl := TL_inputNotifyPeer{}
		tl.Peer = m.Object()
		r = tl
	case CRC_inputNotifyUsers:
		tl := TL_inputNotifyUsers{}
		r = tl
	case CRC_inputNotifyChats:
		tl := TL_inputNotifyChats{}
		r = tl
	case CRC_inputNotifyBroadcasts:
		tl := TL_inputNotifyBroadcasts{}
		r = tl
	case CRC_inputNotifyForumTopic:
		tl := TL_inputNotifyForumTopic{}
		tl.Peer = m.Object()
		tl.TopMsgID = m.Int()
		r = tl
	case CRC_inputPeerNotifySettings:
		tl := TL_inputPeerNotifySettings{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.ShowPreviews = Some(m.Bool())
		}
		if flags&(1<<1) != 0 {
			tl.Silent = Some(m.Bool())
		}
		if flags&(1<<2) != 0 {
			tl.MuteUntil = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.Sound = m.Object()
		}
		if flags&(1<<6) != 0 {
			tl.StoriesMuted = Some(m.Bool())
		}
		if flags&(1<<7) != 0 {
			tl.StoriesHideSender = Some(m.Bool())
		}
		if flags&(1<<8) != 0 {
			tl.StoriesSound = m.Object()
		}
		r = tl
	case CRC_peerNotifySettings:
		tl := TL_peerNotifySettings{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.ShowPreviews = Some(m.Bool())
		}
		if flags&(1<<1) != 0 {
			tl.Silent = Some(m.Bool())
		}
		if flags&(1<<2) != 0 {
			tl.MuteUntil = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.IosSound = m.Object()
		}
		if flags&(1<<4) != 0 {
			tl.AndroidSound = m.Object()
		}
		if flags&(1<<5) != 0 {
			tl.OtherSound = m.Object()
		}
		if flags&(1<<6) != 0 {
			tl.StoriesMuted = Some(m.Bool())
		}
		if flags&(1<<7) != 0 {
			tl.StoriesHideSender = Some(m.Bool())
		}
		if flags&(1<<8) != 0 {
			tl.StoriesIosSound = m.Object()
		}
		if flags&(1<<9) != 0 {
			tl.StoriesAndroidSound = m.Object()
		}
		if flags&(1<<10) != 0 {
			tl.StoriesOtherSound = m.Object()
		}
		r = tl
	case CRC_peerSettings:
		tl := TL_peerSettings{}
		flags := m.Int()
		tl.ReportSpam = flags&(1<<0) != 0
		tl.AddContact = flags&(1<<1) != 0
		tl.BlockContact = flags&(1<<2) != 0
		tl.ShareContact = flags&(1<<3) != 0
		tl.NeedContactsException = flags&(1<<4) != 0
		tl.ReportGeo = flags&(1<<5) != 0
		tl.Autoarchived = flags&(1<<7) != 0
		tl.InviteMembers = flags&(1<<8) != 0
		tl.RequestChatBroadcast = flags&(1<<10) != 0
		if flags&(1<<6) != 0 {
			tl.GeoDistance = Some(m.Int())
		}
		if flags&(1<<9) != 0 {
			tl.RequestChatTitle = Some(m.String())
		}
		if flags&(1<<9) != 0 {
			tl.RequestChatDate = Some(m.Int())
		}
		r = tl
	case CRC_wallPaper:
		tl := TL_wallPaper{}
		tl.ID = m.Long()
		flags := m.Int()
		tl.Creator = flags&(1<<0) != 0
		tl.Default = flags&(1<<1) != 0
		tl.Pattern = flags&(1<<3) != 0
		tl.Dark = flags&(1<<4) != 0
		tl.AccessHash = m.Long()
		tl.Slug = m.String()
		tl.Document = m.Object()
		if flags&(1<<2) != 0 {
			tl.Settings = m.Object()
		}
		r = tl
	case CRC_wallPaperNoFile:
		tl := TL_wallPaperNoFile{}
		tl.ID = m.Long()
		flags := m.Int()
		tl.Default = flags&(1<<1) != 0
		tl.Dark = flags&(1<<4) != 0
		if flags&(1<<2) != 0 {
			tl.Settings = m.Object()
		}
		r = tl
	case CRC_inputReportReasonSpam:
		tl := TL_inputReportReasonSpam{}
		r = tl
	case CRC_inputReportReasonViolence:
		tl := TL_inputReportReasonViolence{}
		r = tl
	case CRC_inputReportReasonPornography:
		tl := TL_inputReportReasonPornography{}
		r = tl
	case CRC_inputReportReasonChildAbuse:
		tl := TL_inputReportReasonChildAbuse{}
		r = tl
	case CRC_inputReportReasonOther:
		tl := TL_inputReportReasonOther{}
		r = tl
	case CRC_inputReportReasonCopyright:
		tl := TL_inputReportReasonCopyright{}
		r = tl
	case CRC_inputReportReasonGeoIrrelevant:
		tl := TL_inputReportReasonGeoIrrelevant{}
		r = tl
	case CRC_inputReportReasonFake:
		tl := TL_inputReportReasonFake{}
		r = tl
	case CRC_inputReportReasonIllegalDrugs:
		tl := TL_inputReportReasonIllegalDrugs{}
		r = tl
	case CRC_inputReportReasonPersonalDetails:
		tl := TL_inputReportReasonPersonalDetails{}
		r = tl
	case CRC_userFull:
		tl := TL_userFull{}
		flags := m.Int()
		tl.Blocked = flags&(1<<0) != 0
		tl.PhoneCallsAvailable = flags&(1<<4) != 0
		tl.PhoneCallsPrivate = flags&(1<<5) != 0
		tl.CanPinMessage = flags&(1<<7) != 0
		tl.HasScheduled = flags&(1<<12) != 0
		tl.VideoCallsAvailable = flags&(1<<13) != 0
		tl.VoiceMessagesForbidden = flags&(1<<20) != 0
		tl.TranslationsDisabled = flags&(1<<23) != 0
		tl.StoriesPinnedAvailable = flags&(1<<26) != 0
		tl.BlockedMyStoriesFrom = flags&(1<<27) != 0
		tl.ID = m.Long()
		if flags&(1<<1) != 0 {
			tl.About = Some(m.String())
		}
		tl.Settings = m.Object()
		if flags&(1<<21) != 0 {
			tl.PersonalPhoto = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.ProfilePhoto = m.Object()
		}
		if flags&(1<<22) != 0 {
			tl.FallbackPhoto = m.Object()
		}
		tl.NotifySettings = m.Object()
		if flags&(1<<3) != 0 {
			tl.BotInfo = m.Object()
		}
		if flags&(1<<6) != 0 {
			tl.PinnedMsgID = Some(m.Int())
		}
		tl.CommonChatsCount = m.Int()
		if flags&(1<<11) != 0 {
			tl.FolderID = Some(m.Int())
		}
		if flags&(1<<14) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		if flags&(1<<15) != 0 {
			tl.ThemeEmoticon = Some(m.String())
		}
		if flags&(1<<16) != 0 {
			tl.PrivateForwardName = Some(m.String())
		}
		if flags&(1<<17) != 0 {
			tl.BotGroupAdminRights = m.Object()
		}
		if flags&(1<<18) != 0 {
			tl.BotBroadcastAdminRights = m.Object()
		}
		if flags&(1<<19) != 0 {
			tl.PremiumGifts = m.Vector()
		}
		if flags&(1<<24) != 0 {
			tl.Wallpaper = m.Object()
		}
		if flags&(1<<25) != 0 {
			tl.Stories = m.Object()
		}
		r = tl
	case CRC_contact:
		tl := TL_contact{}
		tl.UserID = m.Long()
		tl.Mutual = m.Bool()
		r = tl
	case CRC_importedContact:
		tl := TL_importedContact{}
		tl.UserID = m.Long()
		tl.ClientID = m.Long()
		r = tl
	case CRC_contactStatus:
		tl := TL_contactStatus{}
		tl.UserID = m.Long()
		tl.Status = m.Object()
		r = tl
	case CRC_contacts_contactsNotModified:
		tl := TL_contacts_contactsNotModified{}
		r = tl
	case CRC_contacts_contacts:
		tl := TL_contacts_contacts{}
		tl.Contacts = m.Vector()
		tl.SavedCount = m.Int()
		tl.Users = m.Vector()
		r = tl
	case CRC_contacts_importedContacts:
		tl := TL_contacts_importedContacts{}
		tl.Imported = m.Vector()
		tl.PopularInvites = m.Vector()
		tl.RetryContacts = m.VectorLong()
		tl.Users = m.Vector()
		r = tl
	case CRC_contacts_blocked:
		tl := TL_contacts_blocked{}
		tl.Blocked = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_contacts_blockedSlice:
		tl := TL_contacts_blockedSlice{}
		tl.Count = m.Int()
		tl.Blocked = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_dialogs:
		tl := TL_messages_dialogs{}
		tl.Dialogs = m.Vector()
		tl.Messages = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_dialogsSlice:
		tl := TL_messages_dialogsSlice{}
		tl.Count = m.Int()
		tl.Dialogs = m.Vector()
		tl.Messages = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_dialogsNotModified:
		tl := TL_messages_dialogsNotModified{}
		tl.Count = m.Int()
		r = tl
	case CRC_messages_messages:
		tl := TL_messages_messages{}
		tl.Messages = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_messagesSlice:
		tl := TL_messages_messagesSlice{}
		flags := m.Int()
		tl.Inexact = flags&(1<<1) != 0
		tl.Count = m.Int()
		if flags&(1<<0) != 0 {
			tl.NextRate = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.OffsetIdOffset = Some(m.Int())
		}
		tl.Messages = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_channelMessages:
		tl := TL_messages_channelMessages{}
		flags := m.Int()
		tl.Inexact = flags&(1<<1) != 0
		tl.Pts = m.Int()
		tl.Count = m.Int()
		if flags&(1<<2) != 0 {
			tl.OffsetIdOffset = Some(m.Int())
		}
		tl.Messages = m.Vector()
		tl.Topics = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_messagesNotModified:
		tl := TL_messages_messagesNotModified{}
		tl.Count = m.Int()
		r = tl
	case CRC_messages_chats:
		tl := TL_messages_chats{}
		tl.Chats = m.Vector()
		r = tl
	case CRC_messages_chatsSlice:
		tl := TL_messages_chatsSlice{}
		tl.Count = m.Int()
		tl.Chats = m.Vector()
		r = tl
	case CRC_messages_chatFull:
		tl := TL_messages_chatFull{}
		tl.FullChat = m.Object()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_affectedHistory:
		tl := TL_messages_affectedHistory{}
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		tl.Offset = m.Int()
		r = tl
	case CRC_inputMessagesFilterEmpty:
		tl := TL_inputMessagesFilterEmpty{}
		r = tl
	case CRC_inputMessagesFilterPhotos:
		tl := TL_inputMessagesFilterPhotos{}
		r = tl
	case CRC_inputMessagesFilterVideo:
		tl := TL_inputMessagesFilterVideo{}
		r = tl
	case CRC_inputMessagesFilterPhotoVideo:
		tl := TL_inputMessagesFilterPhotoVideo{}
		r = tl
	case CRC_inputMessagesFilterDocument:
		tl := TL_inputMessagesFilterDocument{}
		r = tl
	case CRC_inputMessagesFilterUrl:
		tl := TL_inputMessagesFilterUrl{}
		r = tl
	case CRC_inputMessagesFilterGif:
		tl := TL_inputMessagesFilterGif{}
		r = tl
	case CRC_inputMessagesFilterVoice:
		tl := TL_inputMessagesFilterVoice{}
		r = tl
	case CRC_inputMessagesFilterMusic:
		tl := TL_inputMessagesFilterMusic{}
		r = tl
	case CRC_inputMessagesFilterChatPhotos:
		tl := TL_inputMessagesFilterChatPhotos{}
		r = tl
	case CRC_inputMessagesFilterPhoneCalls:
		tl := TL_inputMessagesFilterPhoneCalls{}
		flags := m.Int()
		tl.Missed = flags&(1<<0) != 0
		r = tl
	case CRC_inputMessagesFilterRoundVoice:
		tl := TL_inputMessagesFilterRoundVoice{}
		r = tl
	case CRC_inputMessagesFilterRoundVideo:
		tl := TL_inputMessagesFilterRoundVideo{}
		r = tl
	case CRC_inputMessagesFilterMyMentions:
		tl := TL_inputMessagesFilterMyMentions{}
		r = tl
	case CRC_inputMessagesFilterGeo:
		tl := TL_inputMessagesFilterGeo{}
		r = tl
	case CRC_inputMessagesFilterContacts:
		tl := TL_inputMessagesFilterContacts{}
		r = tl
	case CRC_inputMessagesFilterPinned:
		tl := TL_inputMessagesFilterPinned{}
		r = tl
	case CRC_updateNewMessage:
		tl := TL_updateNewMessage{}
		tl.Message = m.Object()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateMessageID:
		tl := TL_updateMessageID{}
		tl.ID = m.Int()
		tl.RandomID = m.Long()
		r = tl
	case CRC_updateDeleteMessages:
		tl := TL_updateDeleteMessages{}
		tl.Messages = m.VectorInt()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateUserTyping:
		tl := TL_updateUserTyping{}
		tl.UserID = m.Long()
		tl.Action = m.Object()
		r = tl
	case CRC_updateChatUserTyping:
		tl := TL_updateChatUserTyping{}
		tl.ChatID = m.Long()
		tl.FromID = m.Object()
		tl.Action = m.Object()
		r = tl
	case CRC_updateChatParticipants:
		tl := TL_updateChatParticipants{}
		tl.Participants = m.Object()
		r = tl
	case CRC_updateUserStatus:
		tl := TL_updateUserStatus{}
		tl.UserID = m.Long()
		tl.Status = m.Object()
		r = tl
	case CRC_updateUserName:
		tl := TL_updateUserName{}
		tl.UserID = m.Long()
		tl.FirstName = m.String()
		tl.LastName = m.String()
		tl.Usernames = m.Vector()
		r = tl
	case CRC_updateNewAuthorization:
		tl := TL_updateNewAuthorization{}
		flags := m.Int()
		tl.Unconfirmed = flags&(1<<0) != 0
		tl.Hash = m.Long()
		if flags&(1<<0) != 0 {
			tl.Date = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.Device = Some(m.String())
		}
		if flags&(1<<0) != 0 {
			tl.Location = Some(m.String())
		}
		r = tl
	case CRC_updateNewEncryptedMessage:
		tl := TL_updateNewEncryptedMessage{}
		tl.Message = m.Object()
		tl.Qts = m.Int()
		r = tl
	case CRC_updateEncryptedChatTyping:
		tl := TL_updateEncryptedChatTyping{}
		tl.ChatID = m.Int()
		r = tl
	case CRC_updateEncryption:
		tl := TL_updateEncryption{}
		tl.Chat = m.Object()
		tl.Date = m.Int()
		r = tl
	case CRC_updateEncryptedMessagesRead:
		tl := TL_updateEncryptedMessagesRead{}
		tl.ChatID = m.Int()
		tl.MaxDate = m.Int()
		tl.Date = m.Int()
		r = tl
	case CRC_updateChatParticipantAdd:
		tl := TL_updateChatParticipantAdd{}
		tl.ChatID = m.Long()
		tl.UserID = m.Long()
		tl.InviterID = m.Long()
		tl.Date = m.Int()
		tl.Version = m.Int()
		r = tl
	case CRC_updateChatParticipantDelete:
		tl := TL_updateChatParticipantDelete{}
		tl.ChatID = m.Long()
		tl.UserID = m.Long()
		tl.Version = m.Int()
		r = tl
	case CRC_updateDcOptions:
		tl := TL_updateDcOptions{}
		tl.DcOptions = m.Vector()
		r = tl
	case CRC_updateNotifySettings:
		tl := TL_updateNotifySettings{}
		tl.Peer = m.Object()
		tl.NotifySettings = m.Object()
		r = tl
	case CRC_updateServiceNotification:
		tl := TL_updateServiceNotification{}
		flags := m.Int()
		tl.Popup = flags&(1<<0) != 0
		tl.InvertMedia = flags&(1<<2) != 0
		if flags&(1<<1) != 0 {
			tl.InboxDate = Some(m.Int())
		}
		tl.Type = m.String()
		tl.Message = m.String()
		tl.Media = m.Object()
		tl.Entities = m.Vector()
		r = tl
	case CRC_updatePrivacy:
		tl := TL_updatePrivacy{}
		tl.Key = m.Object()
		tl.Rules = m.Vector()
		r = tl
	case CRC_updateUserPhone:
		tl := TL_updateUserPhone{}
		tl.UserID = m.Long()
		tl.Phone = m.String()
		r = tl
	case CRC_updateReadHistoryInbox:
		tl := TL_updateReadHistoryInbox{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.FolderID = Some(m.Int())
		}
		tl.Peer = m.Object()
		tl.MaxID = m.Int()
		tl.StillUnreadCount = m.Int()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateReadHistoryOutbox:
		tl := TL_updateReadHistoryOutbox{}
		tl.Peer = m.Object()
		tl.MaxID = m.Int()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateWebPage:
		tl := TL_updateWebPage{}
		tl.Webpage = m.Object()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateReadMessagesContents:
		tl := TL_updateReadMessagesContents{}
		flags := m.Int()
		tl.Messages = m.VectorInt()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		if flags&(1<<0) != 0 {
			tl.Date = Some(m.Int())
		}
		r = tl
	case CRC_updateChannelTooLong:
		tl := TL_updateChannelTooLong{}
		flags := m.Int()
		tl.ChannelID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Pts = Some(m.Int())
		}
		r = tl
	case CRC_updateChannel:
		tl := TL_updateChannel{}
		tl.ChannelID = m.Long()
		r = tl
	case CRC_updateNewChannelMessage:
		tl := TL_updateNewChannelMessage{}
		tl.Message = m.Object()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateReadChannelInbox:
		tl := TL_updateReadChannelInbox{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.FolderID = Some(m.Int())
		}
		tl.ChannelID = m.Long()
		tl.MaxID = m.Int()
		tl.StillUnreadCount = m.Int()
		tl.Pts = m.Int()
		r = tl
	case CRC_updateDeleteChannelMessages:
		tl := TL_updateDeleteChannelMessages{}
		tl.ChannelID = m.Long()
		tl.Messages = m.VectorInt()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateChannelMessageViews:
		tl := TL_updateChannelMessageViews{}
		tl.ChannelID = m.Long()
		tl.ID = m.Int()
		tl.Views = m.Int()
		r = tl
	case CRC_updateChatParticipantAdmin:
		tl := TL_updateChatParticipantAdmin{}
		tl.ChatID = m.Long()
		tl.UserID = m.Long()
		tl.IsAdmin = m.Bool()
		tl.Version = m.Int()
		r = tl
	case CRC_updateNewStickerSet:
		tl := TL_updateNewStickerSet{}
		tl.Stickerset = m.Object()
		r = tl
	case CRC_updateStickerSetsOrder:
		tl := TL_updateStickerSetsOrder{}
		flags := m.Int()
		tl.Masks = flags&(1<<0) != 0
		tl.Emojis = flags&(1<<1) != 0
		tl.Order = m.VectorLong()
		r = tl
	case CRC_updateStickerSets:
		tl := TL_updateStickerSets{}
		flags := m.Int()
		tl.Masks = flags&(1<<0) != 0
		tl.Emojis = flags&(1<<1) != 0
		r = tl
	case CRC_updateSavedGifs:
		tl := TL_updateSavedGifs{}
		r = tl
	case CRC_updateBotInlineQuery:
		tl := TL_updateBotInlineQuery{}
		flags := m.Int()
		tl.QueryID = m.Long()
		tl.UserID = m.Long()
		tl.Query = m.String()
		if flags&(1<<0) != 0 {
			tl.Geo = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.PeerType = m.Object()
		}
		tl.Offset = m.String()
		r = tl
	case CRC_updateBotInlineSend:
		tl := TL_updateBotInlineSend{}
		flags := m.Int()
		tl.UserID = m.Long()
		tl.Query = m.String()
		if flags&(1<<0) != 0 {
			tl.Geo = m.Object()
		}
		tl.ID = m.String()
		if flags&(1<<1) != 0 {
			tl.MsgID = m.Object()
		}
		r = tl
	case CRC_updateEditChannelMessage:
		tl := TL_updateEditChannelMessage{}
		tl.Message = m.Object()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateBotCallbackQuery:
		tl := TL_updateBotCallbackQuery{}
		flags := m.Int()
		tl.QueryID = m.Long()
		tl.UserID = m.Long()
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.ChatInstance = m.Long()
		if flags&(1<<0) != 0 {
			tl.Data = m.StringBytes()
		}
		if flags&(1<<1) != 0 {
			tl.GameShortName = Some(m.String())
		}
		r = tl
	case CRC_updateEditMessage:
		tl := TL_updateEditMessage{}
		tl.Message = m.Object()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateInlineBotCallbackQuery:
		tl := TL_updateInlineBotCallbackQuery{}
		flags := m.Int()
		tl.QueryID = m.Long()
		tl.UserID = m.Long()
		tl.MsgID = m.Object()
		tl.ChatInstance = m.Long()
		if flags&(1<<0) != 0 {
			tl.Data = m.StringBytes()
		}
		if flags&(1<<1) != 0 {
			tl.GameShortName = Some(m.String())
		}
		r = tl
	case CRC_updateReadChannelOutbox:
		tl := TL_updateReadChannelOutbox{}
		tl.ChannelID = m.Long()
		tl.MaxID = m.Int()
		r = tl
	case CRC_updateDraftMessage:
		tl := TL_updateDraftMessage{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		tl.Draft = m.Object()
		r = tl
	case CRC_updateReadFeaturedStickers:
		tl := TL_updateReadFeaturedStickers{}
		r = tl
	case CRC_updateRecentStickers:
		tl := TL_updateRecentStickers{}
		r = tl
	case CRC_updateConfig:
		tl := TL_updateConfig{}
		r = tl
	case CRC_updatePtsChanged:
		tl := TL_updatePtsChanged{}
		r = tl
	case CRC_updateChannelWebPage:
		tl := TL_updateChannelWebPage{}
		tl.ChannelID = m.Long()
		tl.Webpage = m.Object()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateDialogPinned:
		tl := TL_updateDialogPinned{}
		flags := m.Int()
		tl.Pinned = flags&(1<<0) != 0
		if flags&(1<<1) != 0 {
			tl.FolderID = Some(m.Int())
		}
		tl.Peer = m.Object()
		r = tl
	case CRC_updatePinnedDialogs:
		tl := TL_updatePinnedDialogs{}
		flags := m.Int()
		if flags&(1<<1) != 0 {
			tl.FolderID = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.Order = m.Vector()
		}
		r = tl
	case CRC_updateBotWebhookJSON:
		tl := TL_updateBotWebhookJSON{}
		tl.Data = m.Object()
		r = tl
	case CRC_updateBotWebhookJSONQuery:
		tl := TL_updateBotWebhookJSONQuery{}
		tl.QueryID = m.Long()
		tl.Data = m.Object()
		tl.Timeout = m.Int()
		r = tl
	case CRC_updateBotShippingQuery:
		tl := TL_updateBotShippingQuery{}
		tl.QueryID = m.Long()
		tl.UserID = m.Long()
		tl.Payload = m.StringBytes()
		tl.ShippingAddress = m.Object()
		r = tl
	case CRC_updateBotPrecheckoutQuery:
		tl := TL_updateBotPrecheckoutQuery{}
		flags := m.Int()
		tl.QueryID = m.Long()
		tl.UserID = m.Long()
		tl.Payload = m.StringBytes()
		if flags&(1<<0) != 0 {
			tl.Info = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.ShippingOptionID = Some(m.String())
		}
		tl.Currency = m.String()
		tl.TotalAmount = m.Long()
		r = tl
	case CRC_updatePhoneCall:
		tl := TL_updatePhoneCall{}
		tl.PhoneCall = m.Object()
		r = tl
	case CRC_updateLangPackTooLong:
		tl := TL_updateLangPackTooLong{}
		tl.LangCode = m.String()
		r = tl
	case CRC_updateLangPack:
		tl := TL_updateLangPack{}
		tl.Difference = m.Object()
		r = tl
	case CRC_updateFavedStickers:
		tl := TL_updateFavedStickers{}
		r = tl
	case CRC_updateChannelReadMessagesContents:
		tl := TL_updateChannelReadMessagesContents{}
		flags := m.Int()
		tl.ChannelID = m.Long()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		tl.Messages = m.VectorInt()
		r = tl
	case CRC_updateContactsReset:
		tl := TL_updateContactsReset{}
		r = tl
	case CRC_updateChannelAvailableMessages:
		tl := TL_updateChannelAvailableMessages{}
		tl.ChannelID = m.Long()
		tl.AvailableMinID = m.Int()
		r = tl
	case CRC_updateDialogUnreadMark:
		tl := TL_updateDialogUnreadMark{}
		flags := m.Int()
		tl.Unread = flags&(1<<0) != 0
		tl.Peer = m.Object()
		r = tl
	case CRC_updateMessagePoll:
		tl := TL_updateMessagePoll{}
		flags := m.Int()
		tl.PollID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Poll = m.Object()
		}
		tl.Results = m.Object()
		r = tl
	case CRC_updateChatDefaultBannedRights:
		tl := TL_updateChatDefaultBannedRights{}
		tl.Peer = m.Object()
		tl.DefaultBannedRights = m.Object()
		tl.Version = m.Int()
		r = tl
	case CRC_updateFolderPeers:
		tl := TL_updateFolderPeers{}
		tl.FolderPeers = m.Vector()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updatePeerSettings:
		tl := TL_updatePeerSettings{}
		tl.Peer = m.Object()
		tl.Settings = m.Object()
		r = tl
	case CRC_updatePeerLocated:
		tl := TL_updatePeerLocated{}
		tl.Peers = m.Vector()
		r = tl
	case CRC_updateNewScheduledMessage:
		tl := TL_updateNewScheduledMessage{}
		tl.Message = m.Object()
		r = tl
	case CRC_updateDeleteScheduledMessages:
		tl := TL_updateDeleteScheduledMessages{}
		tl.Peer = m.Object()
		tl.Messages = m.VectorInt()
		r = tl
	case CRC_updateTheme:
		tl := TL_updateTheme{}
		tl.Theme = m.Object()
		r = tl
	case CRC_updateGeoLiveViewed:
		tl := TL_updateGeoLiveViewed{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_updateLoginToken:
		tl := TL_updateLoginToken{}
		r = tl
	case CRC_updateMessagePollVote:
		tl := TL_updateMessagePollVote{}
		tl.PollID = m.Long()
		tl.Peer = m.Object()
		tl.Options = m.VectorBytes()
		tl.Qts = m.Int()
		r = tl
	case CRC_updateDialogFilter:
		tl := TL_updateDialogFilter{}
		flags := m.Int()
		tl.ID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Filter = m.Object()
		}
		r = tl
	case CRC_updateDialogFilterOrder:
		tl := TL_updateDialogFilterOrder{}
		tl.Order = m.VectorInt()
		r = tl
	case CRC_updateDialogFilters:
		tl := TL_updateDialogFilters{}
		r = tl
	case CRC_updatePhoneCallSignalingData:
		tl := TL_updatePhoneCallSignalingData{}
		tl.PhoneCallID = m.Long()
		tl.Data = m.StringBytes()
		r = tl
	case CRC_updateChannelMessageForwards:
		tl := TL_updateChannelMessageForwards{}
		tl.ChannelID = m.Long()
		tl.ID = m.Int()
		tl.Forwards = m.Int()
		r = tl
	case CRC_updateReadChannelDiscussionInbox:
		tl := TL_updateReadChannelDiscussionInbox{}
		flags := m.Int()
		tl.ChannelID = m.Long()
		tl.TopMsgID = m.Int()
		tl.ReadMaxID = m.Int()
		if flags&(1<<0) != 0 {
			tl.BroadcastID = Some(m.Long())
		}
		if flags&(1<<0) != 0 {
			tl.BroadcastPost = Some(m.Int())
		}
		r = tl
	case CRC_updateReadChannelDiscussionOutbox:
		tl := TL_updateReadChannelDiscussionOutbox{}
		tl.ChannelID = m.Long()
		tl.TopMsgID = m.Int()
		tl.ReadMaxID = m.Int()
		r = tl
	case CRC_updatePeerBlocked:
		tl := TL_updatePeerBlocked{}
		flags := m.Int()
		tl.Blocked = flags&(1<<0) != 0
		tl.BlockedMyStoriesFrom = flags&(1<<1) != 0
		tl.PeerID = m.Object()
		r = tl
	case CRC_updateChannelUserTyping:
		tl := TL_updateChannelUserTyping{}
		flags := m.Int()
		tl.ChannelID = m.Long()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		tl.FromID = m.Object()
		tl.Action = m.Object()
		r = tl
	case CRC_updatePinnedMessages:
		tl := TL_updatePinnedMessages{}
		flags := m.Int()
		tl.Pinned = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.Messages = m.VectorInt()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updatePinnedChannelMessages:
		tl := TL_updatePinnedChannelMessages{}
		flags := m.Int()
		tl.Pinned = flags&(1<<0) != 0
		tl.ChannelID = m.Long()
		tl.Messages = m.VectorInt()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_updateChat:
		tl := TL_updateChat{}
		tl.ChatID = m.Long()
		r = tl
	case CRC_updateGroupCallParticipants:
		tl := TL_updateGroupCallParticipants{}
		tl.Call = m.Object()
		tl.Participants = m.Vector()
		tl.Version = m.Int()
		r = tl
	case CRC_updateGroupCall:
		tl := TL_updateGroupCall{}
		tl.ChatID = m.Long()
		tl.Call = m.Object()
		r = tl
	case CRC_updatePeerHistoryTTL:
		tl := TL_updatePeerHistoryTTL{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		r = tl
	case CRC_updateChatParticipant:
		tl := TL_updateChatParticipant{}
		flags := m.Int()
		tl.ChatID = m.Long()
		tl.Date = m.Int()
		tl.ActorID = m.Long()
		tl.UserID = m.Long()
		if flags&(1<<0) != 0 {
			tl.PrevParticipant = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.NewParticipant = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Invite = m.Object()
		}
		tl.Qts = m.Int()
		r = tl
	case CRC_updateChannelParticipant:
		tl := TL_updateChannelParticipant{}
		flags := m.Int()
		tl.ViaChatlist = flags&(1<<3) != 0
		tl.ChannelID = m.Long()
		tl.Date = m.Int()
		tl.ActorID = m.Long()
		tl.UserID = m.Long()
		if flags&(1<<0) != 0 {
			tl.PrevParticipant = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.NewParticipant = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Invite = m.Object()
		}
		tl.Qts = m.Int()
		r = tl
	case CRC_updateBotStopped:
		tl := TL_updateBotStopped{}
		tl.UserID = m.Long()
		tl.Date = m.Int()
		tl.Stopped = m.Bool()
		tl.Qts = m.Int()
		r = tl
	case CRC_updateGroupCallConnection:
		tl := TL_updateGroupCallConnection{}
		flags := m.Int()
		tl.Presentation = flags&(1<<0) != 0
		tl.Params = m.Object()
		r = tl
	case CRC_updateBotCommands:
		tl := TL_updateBotCommands{}
		tl.Peer = m.Object()
		tl.BotID = m.Long()
		tl.Commands = m.Vector()
		r = tl
	case CRC_updatePendingJoinRequests:
		tl := TL_updatePendingJoinRequests{}
		tl.Peer = m.Object()
		tl.RequestsPending = m.Int()
		tl.RecentRequesters = m.VectorLong()
		r = tl
	case CRC_updateBotChatInviteRequester:
		tl := TL_updateBotChatInviteRequester{}
		tl.Peer = m.Object()
		tl.Date = m.Int()
		tl.UserID = m.Long()
		tl.About = m.String()
		tl.Invite = m.Object()
		tl.Qts = m.Int()
		r = tl
	case CRC_updateMessageReactions:
		tl := TL_updateMessageReactions{}
		flags := m.Int()
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		tl.Reactions = m.Object()
		r = tl
	case CRC_updateAttachMenuBots:
		tl := TL_updateAttachMenuBots{}
		r = tl
	case CRC_updateWebViewResultSent:
		tl := TL_updateWebViewResultSent{}
		tl.QueryID = m.Long()
		r = tl
	case CRC_updateBotMenuButton:
		tl := TL_updateBotMenuButton{}
		tl.BotID = m.Long()
		tl.Button = m.Object()
		r = tl
	case CRC_updateSavedRingtones:
		tl := TL_updateSavedRingtones{}
		r = tl
	case CRC_updateTranscribedAudio:
		tl := TL_updateTranscribedAudio{}
		flags := m.Int()
		tl.Pending = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.TranscriptionID = m.Long()
		tl.Text = m.String()
		r = tl
	case CRC_updateReadFeaturedEmojiStickers:
		tl := TL_updateReadFeaturedEmojiStickers{}
		r = tl
	case CRC_updateUserEmojiStatus:
		tl := TL_updateUserEmojiStatus{}
		tl.UserID = m.Long()
		tl.EmojiStatus = m.Object()
		r = tl
	case CRC_updateRecentEmojiStatuses:
		tl := TL_updateRecentEmojiStatuses{}
		r = tl
	case CRC_updateRecentReactions:
		tl := TL_updateRecentReactions{}
		r = tl
	case CRC_updateMoveStickerSetToTop:
		tl := TL_updateMoveStickerSetToTop{}
		flags := m.Int()
		tl.Masks = flags&(1<<0) != 0
		tl.Emojis = flags&(1<<1) != 0
		tl.Stickerset = m.Long()
		r = tl
	case CRC_updateMessageExtendedMedia:
		tl := TL_updateMessageExtendedMedia{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.ExtendedMedia = m.Object()
		r = tl
	case CRC_updateChannelPinnedTopic:
		tl := TL_updateChannelPinnedTopic{}
		flags := m.Int()
		tl.Pinned = flags&(1<<0) != 0
		tl.ChannelID = m.Long()
		tl.TopicID = m.Int()
		r = tl
	case CRC_updateChannelPinnedTopics:
		tl := TL_updateChannelPinnedTopics{}
		flags := m.Int()
		tl.ChannelID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Order = m.VectorInt()
		}
		r = tl
	case CRC_updateUser:
		tl := TL_updateUser{}
		tl.UserID = m.Long()
		r = tl
	case CRC_updateAutoSaveSettings:
		tl := TL_updateAutoSaveSettings{}
		r = tl
	case CRC_updateGroupInvitePrivacyForbidden:
		tl := TL_updateGroupInvitePrivacyForbidden{}
		tl.UserID = m.Long()
		r = tl
	case CRC_updateStory:
		tl := TL_updateStory{}
		tl.Peer = m.Object()
		tl.Story = m.Object()
		r = tl
	case CRC_updateReadStories:
		tl := TL_updateReadStories{}
		tl.Peer = m.Object()
		tl.MaxID = m.Int()
		r = tl
	case CRC_updateStoryID:
		tl := TL_updateStoryID{}
		tl.ID = m.Int()
		tl.RandomID = m.Long()
		r = tl
	case CRC_updateStoriesStealthMode:
		tl := TL_updateStoriesStealthMode{}
		tl.StealthMode = m.Object()
		r = tl
	case CRC_updateSentStoryReaction:
		tl := TL_updateSentStoryReaction{}
		tl.Peer = m.Object()
		tl.StoryID = m.Int()
		tl.Reaction = m.Object()
		r = tl
	case CRC_updates_state:
		tl := TL_updates_state{}
		tl.Pts = m.Int()
		tl.Qts = m.Int()
		tl.Date = m.Int()
		tl.Seq = m.Int()
		tl.UnreadCount = m.Int()
		r = tl
	case CRC_updates_differenceEmpty:
		tl := TL_updates_differenceEmpty{}
		tl.Date = m.Int()
		tl.Seq = m.Int()
		r = tl
	case CRC_updates_difference:
		tl := TL_updates_difference{}
		tl.NewMessages = m.Vector()
		tl.NewEncryptedMessages = m.Vector()
		tl.OtherUpdates = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		tl.State = m.Object()
		r = tl
	case CRC_updates_differenceSlice:
		tl := TL_updates_differenceSlice{}
		tl.NewMessages = m.Vector()
		tl.NewEncryptedMessages = m.Vector()
		tl.OtherUpdates = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		tl.IntermediateState = m.Object()
		r = tl
	case CRC_updates_differenceTooLong:
		tl := TL_updates_differenceTooLong{}
		tl.Pts = m.Int()
		r = tl
	case CRC_updatesTooLong:
		tl := TL_updatesTooLong{}
		r = tl
	case CRC_updateShortMessage:
		tl := TL_updateShortMessage{}
		flags := m.Int()
		tl.Out = flags&(1<<1) != 0
		tl.Mentioned = flags&(1<<4) != 0
		tl.MediaUnread = flags&(1<<5) != 0
		tl.Silent = flags&(1<<13) != 0
		tl.ID = m.Int()
		tl.UserID = m.Long()
		tl.Message = m.String()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		tl.Date = m.Int()
		if flags&(1<<2) != 0 {
			tl.FwdFrom = m.Object()
		}
		if flags&(1<<11) != 0 {
			tl.ViaBotID = Some(m.Long())
		}
		if flags&(1<<3) != 0 {
			tl.ReplyTo = m.Object()
		}
		if flags&(1<<7) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<25) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		r = tl
	case CRC_updateShortChatMessage:
		tl := TL_updateShortChatMessage{}
		flags := m.Int()
		tl.Out = flags&(1<<1) != 0
		tl.Mentioned = flags&(1<<4) != 0
		tl.MediaUnread = flags&(1<<5) != 0
		tl.Silent = flags&(1<<13) != 0
		tl.ID = m.Int()
		tl.FromID = m.Long()
		tl.ChatID = m.Long()
		tl.Message = m.String()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		tl.Date = m.Int()
		if flags&(1<<2) != 0 {
			tl.FwdFrom = m.Object()
		}
		if flags&(1<<11) != 0 {
			tl.ViaBotID = Some(m.Long())
		}
		if flags&(1<<3) != 0 {
			tl.ReplyTo = m.Object()
		}
		if flags&(1<<7) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<25) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		r = tl
	case CRC_updateShort:
		tl := TL_updateShort{}
		tl.Update = m.Object()
		tl.Date = m.Int()
		r = tl
	case CRC_updatesCombined:
		tl := TL_updatesCombined{}
		tl.Updates = m.Vector()
		tl.Users = m.Vector()
		tl.Chats = m.Vector()
		tl.Date = m.Int()
		tl.SeqStart = m.Int()
		tl.Seq = m.Int()
		r = tl
	case CRC_updates:
		tl := TL_updates{}
		tl.Updates = m.Vector()
		tl.Users = m.Vector()
		tl.Chats = m.Vector()
		tl.Date = m.Int()
		tl.Seq = m.Int()
		r = tl
	case CRC_updateShortSentMessage:
		tl := TL_updateShortSentMessage{}
		flags := m.Int()
		tl.Out = flags&(1<<1) != 0
		tl.ID = m.Int()
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		tl.Date = m.Int()
		if flags&(1<<9) != 0 {
			tl.Media = m.Object()
		}
		if flags&(1<<7) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<25) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		r = tl
	case CRC_photos_photos:
		tl := TL_photos_photos{}
		tl.Photos = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_photos_photosSlice:
		tl := TL_photos_photosSlice{}
		tl.Count = m.Int()
		tl.Photos = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_photos_photo:
		tl := TL_photos_photo{}
		tl.Photo = m.Object()
		tl.Users = m.Vector()
		r = tl
	case CRC_upload_file:
		tl := TL_upload_file{}
		tl.Type = m.Object()
		tl.Mtime = m.Int()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_upload_fileCdnRedirect:
		tl := TL_upload_fileCdnRedirect{}
		tl.DcID = m.Int()
		tl.FileToken = m.StringBytes()
		tl.EncryptionKey = m.StringBytes()
		tl.EncryptionIv = m.StringBytes()
		tl.FileHashes = m.Vector()
		r = tl
	case CRC_dcOption:
		tl := TL_dcOption{}
		flags := m.Int()
		tl.Ipv6 = flags&(1<<0) != 0
		tl.MediaOnly = flags&(1<<1) != 0
		tl.TcpoOnly = flags&(1<<2) != 0
		tl.Cdn = flags&(1<<3) != 0
		tl.Static = flags&(1<<4) != 0
		tl.ThisPortOnly = flags&(1<<5) != 0
		tl.ID = m.Int()
		tl.IpAddress = m.String()
		tl.Port = m.Int()
		if flags&(1<<10) != 0 {
			tl.Secret = m.StringBytes()
		}
		r = tl
	case CRC_config:
		tl := TL_config{}
		flags := m.Int()
		tl.DefaultP2pContacts = flags&(1<<3) != 0
		tl.PreloadFeaturedStickers = flags&(1<<4) != 0
		tl.RevokePmInbox = flags&(1<<6) != 0
		tl.BlockedMode = flags&(1<<8) != 0
		tl.ForceTryIpv6 = flags&(1<<14) != 0
		tl.Date = m.Int()
		tl.Expires = m.Int()
		tl.TestMode = m.Bool()
		tl.ThisDc = m.Int()
		tl.DcOptions = m.Vector()
		tl.DcTxtDomainName = m.String()
		tl.ChatSizeMax = m.Int()
		tl.MegagroupSizeMax = m.Int()
		tl.ForwardedCountMax = m.Int()
		tl.OnlineUpdatePeriodMs = m.Int()
		tl.OfflineBlurTimeoutMs = m.Int()
		tl.OfflineIdleTimeoutMs = m.Int()
		tl.OnlineCloudTimeoutMs = m.Int()
		tl.NotifyCloudDelayMs = m.Int()
		tl.NotifyDefaultDelayMs = m.Int()
		tl.PushChatPeriodMs = m.Int()
		tl.PushChatLimit = m.Int()
		tl.EditTimeLimit = m.Int()
		tl.RevokeTimeLimit = m.Int()
		tl.RevokePmTimeLimit = m.Int()
		tl.RatingEDecay = m.Int()
		tl.StickersRecentLimit = m.Int()
		tl.ChannelsReadMediaPeriod = m.Int()
		if flags&(1<<0) != 0 {
			tl.TmpSessions = Some(m.Int())
		}
		tl.CallReceiveTimeoutMs = m.Int()
		tl.CallRingTimeoutMs = m.Int()
		tl.CallConnectTimeoutMs = m.Int()
		tl.CallPacketTimeoutMs = m.Int()
		tl.MeUrlPrefix = m.String()
		if flags&(1<<7) != 0 {
			tl.AutoupdateUrlPrefix = Some(m.String())
		}
		if flags&(1<<9) != 0 {
			tl.GifSearchUsername = Some(m.String())
		}
		if flags&(1<<10) != 0 {
			tl.VenueSearchUsername = Some(m.String())
		}
		if flags&(1<<11) != 0 {
			tl.ImgSearchUsername = Some(m.String())
		}
		if flags&(1<<12) != 0 {
			tl.StaticMapsProvider = Some(m.String())
		}
		tl.CaptionLengthMax = m.Int()
		tl.MessageLengthMax = m.Int()
		tl.WebfileDcID = m.Int()
		if flags&(1<<2) != 0 {
			tl.SuggestedLangCode = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.LangPackVersion = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.BaseLangPackVersion = Some(m.Int())
		}
		if flags&(1<<15) != 0 {
			tl.ReactionsDefault = m.Object()
		}
		if flags&(1<<16) != 0 {
			tl.AutologinToken = Some(m.String())
		}
		r = tl
	case CRC_nearestDc:
		tl := TL_nearestDc{}
		tl.Country = m.String()
		tl.ThisDc = m.Int()
		tl.NearestDc = m.Int()
		r = tl
	case CRC_help_appUpdate:
		tl := TL_help_appUpdate{}
		flags := m.Int()
		tl.CanNotSkip = flags&(1<<0) != 0
		tl.ID = m.Int()
		tl.Version = m.String()
		tl.Text = m.String()
		tl.Entities = m.Vector()
		if flags&(1<<1) != 0 {
			tl.Document = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Url = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.Sticker = m.Object()
		}
		r = tl
	case CRC_help_noAppUpdate:
		tl := TL_help_noAppUpdate{}
		r = tl
	case CRC_help_inviteText:
		tl := TL_help_inviteText{}
		tl.Message = m.String()
		r = tl
	case CRC_encryptedChatEmpty:
		tl := TL_encryptedChatEmpty{}
		tl.ID = m.Int()
		r = tl
	case CRC_encryptedChatWaiting:
		tl := TL_encryptedChatWaiting{}
		tl.ID = m.Int()
		tl.AccessHash = m.Long()
		tl.Date = m.Int()
		tl.AdminID = m.Long()
		tl.ParticipantID = m.Long()
		r = tl
	case CRC_encryptedChatRequested:
		tl := TL_encryptedChatRequested{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.FolderID = Some(m.Int())
		}
		tl.ID = m.Int()
		tl.AccessHash = m.Long()
		tl.Date = m.Int()
		tl.AdminID = m.Long()
		tl.ParticipantID = m.Long()
		tl.GA = m.StringBytes()
		r = tl
	case CRC_encryptedChat:
		tl := TL_encryptedChat{}
		tl.ID = m.Int()
		tl.AccessHash = m.Long()
		tl.Date = m.Int()
		tl.AdminID = m.Long()
		tl.ParticipantID = m.Long()
		tl.GAOrB = m.StringBytes()
		tl.KeyFingerprint = m.Long()
		r = tl
	case CRC_encryptedChatDiscarded:
		tl := TL_encryptedChatDiscarded{}
		flags := m.Int()
		tl.HistoryDeleted = flags&(1<<0) != 0
		tl.ID = m.Int()
		r = tl
	case CRC_inputEncryptedChat:
		tl := TL_inputEncryptedChat{}
		tl.ChatID = m.Int()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_encryptedFileEmpty:
		tl := TL_encryptedFileEmpty{}
		r = tl
	case CRC_encryptedFile:
		tl := TL_encryptedFile{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Size = m.Long()
		tl.DcID = m.Int()
		tl.KeyFingerprint = m.Int()
		r = tl
	case CRC_inputEncryptedFileEmpty:
		tl := TL_inputEncryptedFileEmpty{}
		r = tl
	case CRC_inputEncryptedFileUploaded:
		tl := TL_inputEncryptedFileUploaded{}
		tl.ID = m.Long()
		tl.Parts = m.Int()
		tl.Md5Checksum = m.String()
		tl.KeyFingerprint = m.Int()
		r = tl
	case CRC_inputEncryptedFile:
		tl := TL_inputEncryptedFile{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputEncryptedFileBigUploaded:
		tl := TL_inputEncryptedFileBigUploaded{}
		tl.ID = m.Long()
		tl.Parts = m.Int()
		tl.KeyFingerprint = m.Int()
		r = tl
	case CRC_encryptedMessage:
		tl := TL_encryptedMessage{}
		tl.RandomID = m.Long()
		tl.ChatID = m.Int()
		tl.Date = m.Int()
		tl.Bytes = m.StringBytes()
		tl.File = m.Object()
		r = tl
	case CRC_encryptedMessageService:
		tl := TL_encryptedMessageService{}
		tl.RandomID = m.Long()
		tl.ChatID = m.Int()
		tl.Date = m.Int()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_messages_dhConfigNotModified:
		tl := TL_messages_dhConfigNotModified{}
		tl.Random = m.StringBytes()
		r = tl
	case CRC_messages_dhConfig:
		tl := TL_messages_dhConfig{}
		tl.G = m.Int()
		tl.P = m.StringBytes()
		tl.Version = m.Int()
		tl.Random = m.StringBytes()
		r = tl
	case CRC_messages_sentEncryptedMessage:
		tl := TL_messages_sentEncryptedMessage{}
		tl.Date = m.Int()
		r = tl
	case CRC_messages_sentEncryptedFile:
		tl := TL_messages_sentEncryptedFile{}
		tl.Date = m.Int()
		tl.File = m.Object()
		r = tl
	case CRC_inputDocumentEmpty:
		tl := TL_inputDocumentEmpty{}
		r = tl
	case CRC_inputDocument:
		tl := TL_inputDocument{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.FileReference = m.StringBytes()
		r = tl
	case CRC_documentEmpty:
		tl := TL_documentEmpty{}
		tl.ID = m.Long()
		r = tl
	case CRC_document:
		tl := TL_document{}
		flags := m.Int()
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.FileReference = m.StringBytes()
		tl.Date = m.Int()
		tl.MimeType = m.String()
		tl.Size = m.Long()
		if flags&(1<<0) != 0 {
			tl.Thumbs = m.Vector()
		}
		if flags&(1<<1) != 0 {
			tl.VideoThumbs = m.Vector()
		}
		tl.DcID = m.Int()
		tl.Attributes = m.Vector()
		r = tl
	case CRC_help_support:
		tl := TL_help_support{}
		tl.PhoneNumber = m.String()
		tl.User = m.Object()
		r = tl
	case CRC_notifyPeer:
		tl := TL_notifyPeer{}
		tl.Peer = m.Object()
		r = tl
	case CRC_notifyUsers:
		tl := TL_notifyUsers{}
		r = tl
	case CRC_notifyChats:
		tl := TL_notifyChats{}
		r = tl
	case CRC_notifyBroadcasts:
		tl := TL_notifyBroadcasts{}
		r = tl
	case CRC_notifyForumTopic:
		tl := TL_notifyForumTopic{}
		tl.Peer = m.Object()
		tl.TopMsgID = m.Int()
		r = tl
	case CRC_sendMessageTypingAction:
		tl := TL_sendMessageTypingAction{}
		r = tl
	case CRC_sendMessageCancelAction:
		tl := TL_sendMessageCancelAction{}
		r = tl
	case CRC_sendMessageRecordVideoAction:
		tl := TL_sendMessageRecordVideoAction{}
		r = tl
	case CRC_sendMessageUploadVideoAction:
		tl := TL_sendMessageUploadVideoAction{}
		tl.Progress = m.Int()
		r = tl
	case CRC_sendMessageRecordAudioAction:
		tl := TL_sendMessageRecordAudioAction{}
		r = tl
	case CRC_sendMessageUploadAudioAction:
		tl := TL_sendMessageUploadAudioAction{}
		tl.Progress = m.Int()
		r = tl
	case CRC_sendMessageUploadPhotoAction:
		tl := TL_sendMessageUploadPhotoAction{}
		tl.Progress = m.Int()
		r = tl
	case CRC_sendMessageUploadDocumentAction:
		tl := TL_sendMessageUploadDocumentAction{}
		tl.Progress = m.Int()
		r = tl
	case CRC_sendMessageGeoLocationAction:
		tl := TL_sendMessageGeoLocationAction{}
		r = tl
	case CRC_sendMessageChooseContactAction:
		tl := TL_sendMessageChooseContactAction{}
		r = tl
	case CRC_sendMessageGamePlayAction:
		tl := TL_sendMessageGamePlayAction{}
		r = tl
	case CRC_sendMessageRecordRoundAction:
		tl := TL_sendMessageRecordRoundAction{}
		r = tl
	case CRC_sendMessageUploadRoundAction:
		tl := TL_sendMessageUploadRoundAction{}
		tl.Progress = m.Int()
		r = tl
	case CRC_speakingInGroupCallAction:
		tl := TL_speakingInGroupCallAction{}
		r = tl
	case CRC_sendMessageHistoryImportAction:
		tl := TL_sendMessageHistoryImportAction{}
		tl.Progress = m.Int()
		r = tl
	case CRC_sendMessageChooseStickerAction:
		tl := TL_sendMessageChooseStickerAction{}
		r = tl
	case CRC_sendMessageEmojiInteraction:
		tl := TL_sendMessageEmojiInteraction{}
		tl.Emoticon = m.String()
		tl.MsgID = m.Int()
		tl.Interaction = m.Object()
		r = tl
	case CRC_sendMessageEmojiInteractionSeen:
		tl := TL_sendMessageEmojiInteractionSeen{}
		tl.Emoticon = m.String()
		r = tl
	case CRC_contacts_found:
		tl := TL_contacts_found{}
		tl.MyResults = m.Vector()
		tl.Results = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_inputPrivacyKeyStatusTimestamp:
		tl := TL_inputPrivacyKeyStatusTimestamp{}
		r = tl
	case CRC_inputPrivacyKeyChatInvite:
		tl := TL_inputPrivacyKeyChatInvite{}
		r = tl
	case CRC_inputPrivacyKeyPhoneCall:
		tl := TL_inputPrivacyKeyPhoneCall{}
		r = tl
	case CRC_inputPrivacyKeyPhoneP2P:
		tl := TL_inputPrivacyKeyPhoneP2P{}
		r = tl
	case CRC_inputPrivacyKeyForwards:
		tl := TL_inputPrivacyKeyForwards{}
		r = tl
	case CRC_inputPrivacyKeyProfilePhoto:
		tl := TL_inputPrivacyKeyProfilePhoto{}
		r = tl
	case CRC_inputPrivacyKeyPhoneNumber:
		tl := TL_inputPrivacyKeyPhoneNumber{}
		r = tl
	case CRC_inputPrivacyKeyAddedByPhone:
		tl := TL_inputPrivacyKeyAddedByPhone{}
		r = tl
	case CRC_inputPrivacyKeyVoiceMessages:
		tl := TL_inputPrivacyKeyVoiceMessages{}
		r = tl
	case CRC_inputPrivacyKeyAbout:
		tl := TL_inputPrivacyKeyAbout{}
		r = tl
	case CRC_privacyKeyStatusTimestamp:
		tl := TL_privacyKeyStatusTimestamp{}
		r = tl
	case CRC_privacyKeyChatInvite:
		tl := TL_privacyKeyChatInvite{}
		r = tl
	case CRC_privacyKeyPhoneCall:
		tl := TL_privacyKeyPhoneCall{}
		r = tl
	case CRC_privacyKeyPhoneP2P:
		tl := TL_privacyKeyPhoneP2P{}
		r = tl
	case CRC_privacyKeyForwards:
		tl := TL_privacyKeyForwards{}
		r = tl
	case CRC_privacyKeyProfilePhoto:
		tl := TL_privacyKeyProfilePhoto{}
		r = tl
	case CRC_privacyKeyPhoneNumber:
		tl := TL_privacyKeyPhoneNumber{}
		r = tl
	case CRC_privacyKeyAddedByPhone:
		tl := TL_privacyKeyAddedByPhone{}
		r = tl
	case CRC_privacyKeyVoiceMessages:
		tl := TL_privacyKeyVoiceMessages{}
		r = tl
	case CRC_privacyKeyAbout:
		tl := TL_privacyKeyAbout{}
		r = tl
	case CRC_inputPrivacyValueAllowContacts:
		tl := TL_inputPrivacyValueAllowContacts{}
		r = tl
	case CRC_inputPrivacyValueAllowAll:
		tl := TL_inputPrivacyValueAllowAll{}
		r = tl
	case CRC_inputPrivacyValueAllowUsers:
		tl := TL_inputPrivacyValueAllowUsers{}
		tl.Users = m.Vector()
		r = tl
	case CRC_inputPrivacyValueDisallowContacts:
		tl := TL_inputPrivacyValueDisallowContacts{}
		r = tl
	case CRC_inputPrivacyValueDisallowAll:
		tl := TL_inputPrivacyValueDisallowAll{}
		r = tl
	case CRC_inputPrivacyValueDisallowUsers:
		tl := TL_inputPrivacyValueDisallowUsers{}
		tl.Users = m.Vector()
		r = tl
	case CRC_inputPrivacyValueAllowChatParticipants:
		tl := TL_inputPrivacyValueAllowChatParticipants{}
		tl.Chats = m.VectorLong()
		r = tl
	case CRC_inputPrivacyValueDisallowChatParticipants:
		tl := TL_inputPrivacyValueDisallowChatParticipants{}
		tl.Chats = m.VectorLong()
		r = tl
	case CRC_inputPrivacyValueAllowCloseFriends:
		tl := TL_inputPrivacyValueAllowCloseFriends{}
		r = tl
	case CRC_privacyValueAllowContacts:
		tl := TL_privacyValueAllowContacts{}
		r = tl
	case CRC_privacyValueAllowAll:
		tl := TL_privacyValueAllowAll{}
		r = tl
	case CRC_privacyValueAllowUsers:
		tl := TL_privacyValueAllowUsers{}
		tl.Users = m.VectorLong()
		r = tl
	case CRC_privacyValueDisallowContacts:
		tl := TL_privacyValueDisallowContacts{}
		r = tl
	case CRC_privacyValueDisallowAll:
		tl := TL_privacyValueDisallowAll{}
		r = tl
	case CRC_privacyValueDisallowUsers:
		tl := TL_privacyValueDisallowUsers{}
		tl.Users = m.VectorLong()
		r = tl
	case CRC_privacyValueAllowChatParticipants:
		tl := TL_privacyValueAllowChatParticipants{}
		tl.Chats = m.VectorLong()
		r = tl
	case CRC_privacyValueDisallowChatParticipants:
		tl := TL_privacyValueDisallowChatParticipants{}
		tl.Chats = m.VectorLong()
		r = tl
	case CRC_privacyValueAllowCloseFriends:
		tl := TL_privacyValueAllowCloseFriends{}
		r = tl
	case CRC_account_privacyRules:
		tl := TL_account_privacyRules{}
		tl.Rules = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_accountDaysTTL:
		tl := TL_accountDaysTTL{}
		tl.Days = m.Int()
		r = tl
	case CRC_documentAttributeImageSize:
		tl := TL_documentAttributeImageSize{}
		tl.W = m.Int()
		tl.H = m.Int()
		r = tl
	case CRC_documentAttributeAnimated:
		tl := TL_documentAttributeAnimated{}
		r = tl
	case CRC_documentAttributeSticker:
		tl := TL_documentAttributeSticker{}
		flags := m.Int()
		tl.Mask = flags&(1<<1) != 0
		tl.Alt = m.String()
		tl.Stickerset = m.Object()
		if flags&(1<<0) != 0 {
			tl.MaskCoords = m.Object()
		}
		r = tl
	case CRC_documentAttributeVideo:
		tl := TL_documentAttributeVideo{}
		flags := m.Int()
		tl.RoundMessage = flags&(1<<0) != 0
		tl.SupportsStreaming = flags&(1<<1) != 0
		tl.Nosound = flags&(1<<3) != 0
		tl.Duration = m.Double()
		tl.W = m.Int()
		tl.H = m.Int()
		if flags&(1<<2) != 0 {
			tl.PreloadPrefixSize = Some(m.Int())
		}
		r = tl
	case CRC_documentAttributeAudio:
		tl := TL_documentAttributeAudio{}
		flags := m.Int()
		tl.Voice = flags&(1<<10) != 0
		tl.Duration = m.Int()
		if flags&(1<<0) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Performer = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Waveform = m.StringBytes()
		}
		r = tl
	case CRC_documentAttributeFilename:
		tl := TL_documentAttributeFilename{}
		tl.FileName = m.String()
		r = tl
	case CRC_documentAttributeHasStickers:
		tl := TL_documentAttributeHasStickers{}
		r = tl
	case CRC_documentAttributeCustomEmoji:
		tl := TL_documentAttributeCustomEmoji{}
		flags := m.Int()
		tl.Free = flags&(1<<0) != 0
		tl.TextColor = flags&(1<<1) != 0
		tl.Alt = m.String()
		tl.Stickerset = m.Object()
		r = tl
	case CRC_messages_stickersNotModified:
		tl := TL_messages_stickersNotModified{}
		r = tl
	case CRC_messages_stickers:
		tl := TL_messages_stickers{}
		tl.Hash = m.Long()
		tl.Stickers = m.Vector()
		r = tl
	case CRC_stickerPack:
		tl := TL_stickerPack{}
		tl.Emoticon = m.String()
		tl.Documents = m.VectorLong()
		r = tl
	case CRC_messages_allStickersNotModified:
		tl := TL_messages_allStickersNotModified{}
		r = tl
	case CRC_messages_allStickers:
		tl := TL_messages_allStickers{}
		tl.Hash = m.Long()
		tl.Sets = m.Vector()
		r = tl
	case CRC_messages_affectedMessages:
		tl := TL_messages_affectedMessages{}
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		r = tl
	case CRC_webPageEmpty:
		tl := TL_webPageEmpty{}
		flags := m.Int()
		tl.ID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Url = Some(m.String())
		}
		r = tl
	case CRC_webPagePending:
		tl := TL_webPagePending{}
		flags := m.Int()
		tl.ID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Url = Some(m.String())
		}
		tl.Date = m.Int()
		r = tl
	case CRC_webPage:
		tl := TL_webPage{}
		flags := m.Int()
		tl.HasLargeMedia = flags&(1<<13) != 0
		tl.ID = m.Long()
		tl.Url = m.String()
		tl.DisplayUrl = m.String()
		tl.Hash = m.Int()
		if flags&(1<<0) != 0 {
			tl.Type = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.SiteName = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.Description = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.Photo = m.Object()
		}
		if flags&(1<<5) != 0 {
			tl.EmbedUrl = Some(m.String())
		}
		if flags&(1<<5) != 0 {
			tl.EmbedType = Some(m.String())
		}
		if flags&(1<<6) != 0 {
			tl.EmbedWidth = Some(m.Int())
		}
		if flags&(1<<6) != 0 {
			tl.EmbedHeight = Some(m.Int())
		}
		if flags&(1<<7) != 0 {
			tl.Duration = Some(m.Int())
		}
		if flags&(1<<8) != 0 {
			tl.Author = Some(m.String())
		}
		if flags&(1<<9) != 0 {
			tl.Document = m.Object()
		}
		if flags&(1<<10) != 0 {
			tl.CachedPage = m.Object()
		}
		if flags&(1<<12) != 0 {
			tl.Attributes = m.Vector()
		}
		r = tl
	case CRC_webPageNotModified:
		tl := TL_webPageNotModified{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.CachedPageViews = Some(m.Int())
		}
		r = tl
	case CRC_authorization:
		tl := TL_authorization{}
		flags := m.Int()
		tl.Current = flags&(1<<0) != 0
		tl.OfficialApp = flags&(1<<1) != 0
		tl.PasswordPending = flags&(1<<2) != 0
		tl.EncryptedRequestsDisabled = flags&(1<<3) != 0
		tl.CallRequestsDisabled = flags&(1<<4) != 0
		tl.Unconfirmed = flags&(1<<5) != 0
		tl.Hash = m.Long()
		tl.DeviceModel = m.String()
		tl.Platform = m.String()
		tl.SystemVersion = m.String()
		tl.ApiID = m.Int()
		tl.AppName = m.String()
		tl.AppVersion = m.String()
		tl.DateCreated = m.Int()
		tl.DateActive = m.Int()
		tl.Ip = m.String()
		tl.Country = m.String()
		tl.Region = m.String()
		r = tl
	case CRC_account_authorizations:
		tl := TL_account_authorizations{}
		tl.AuthorizationTtlDays = m.Int()
		tl.Authorizations = m.Vector()
		r = tl
	case CRC_account_password:
		tl := TL_account_password{}
		flags := m.Int()
		tl.HasRecovery = flags&(1<<0) != 0
		tl.HasSecureValues = flags&(1<<1) != 0
		tl.HasPassword = flags&(1<<2) != 0
		if flags&(1<<2) != 0 {
			tl.CurrentAlgo = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.SrpB = m.StringBytes()
		}
		if flags&(1<<2) != 0 {
			tl.SrpID = Some(m.Long())
		}
		if flags&(1<<3) != 0 {
			tl.Hint = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.EmailUnconfirmedPattern = Some(m.String())
		}
		tl.NewAlgo = m.Object()
		tl.NewSecureAlgo = m.Object()
		tl.SecureRandom = m.StringBytes()
		if flags&(1<<5) != 0 {
			tl.PendingResetDate = Some(m.Int())
		}
		if flags&(1<<6) != 0 {
			tl.LoginEmailPattern = Some(m.String())
		}
		r = tl
	case CRC_account_passwordSettings:
		tl := TL_account_passwordSettings{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Email = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.SecureSettings = m.Object()
		}
		r = tl
	case CRC_account_passwordInputSettings:
		tl := TL_account_passwordInputSettings{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.NewAlgo = m.Object()
		}
		if flags&(1<<0) != 0 {
			tl.NewPasswordHash = m.StringBytes()
		}
		if flags&(1<<0) != 0 {
			tl.Hint = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Email = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.NewSecureSettings = m.Object()
		}
		r = tl
	case CRC_auth_passwordRecovery:
		tl := TL_auth_passwordRecovery{}
		tl.EmailPattern = m.String()
		r = tl
	case CRC_receivedNotifyMessage:
		tl := TL_receivedNotifyMessage{}
		tl.ID = m.Int()
		tl.Flags = m.Int()
		r = tl
	case CRC_chatInviteExported:
		tl := TL_chatInviteExported{}
		flags := m.Int()
		tl.Revoked = flags&(1<<0) != 0
		tl.Permanent = flags&(1<<5) != 0
		tl.RequestNeeded = flags&(1<<6) != 0
		tl.Link = m.String()
		tl.AdminID = m.Long()
		tl.Date = m.Int()
		if flags&(1<<4) != 0 {
			tl.StartDate = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.ExpireDate = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.UsageLimit = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.Usage = Some(m.Int())
		}
		if flags&(1<<7) != 0 {
			tl.Requested = Some(m.Int())
		}
		if flags&(1<<8) != 0 {
			tl.Title = Some(m.String())
		}
		r = tl
	case CRC_chatInvitePublicJoinRequests:
		tl := TL_chatInvitePublicJoinRequests{}
		r = tl
	case CRC_chatInviteAlready:
		tl := TL_chatInviteAlready{}
		tl.Chat = m.Object()
		r = tl
	case CRC_chatInvite:
		tl := TL_chatInvite{}
		flags := m.Int()
		tl.Channel = flags&(1<<0) != 0
		tl.Broadcast = flags&(1<<1) != 0
		tl.Public = flags&(1<<2) != 0
		tl.Megagroup = flags&(1<<3) != 0
		tl.RequestNeeded = flags&(1<<6) != 0
		tl.Verified = flags&(1<<7) != 0
		tl.Scam = flags&(1<<8) != 0
		tl.Fake = flags&(1<<9) != 0
		tl.Title = m.String()
		if flags&(1<<5) != 0 {
			tl.About = Some(m.String())
		}
		tl.Photo = m.Object()
		tl.ParticipantsCount = m.Int()
		if flags&(1<<4) != 0 {
			tl.Participants = m.Vector()
		}
		tl.Color = m.Int()
		r = tl
	case CRC_chatInvitePeek:
		tl := TL_chatInvitePeek{}
		tl.Chat = m.Object()
		tl.Expires = m.Int()
		r = tl
	case CRC_inputStickerSetEmpty:
		tl := TL_inputStickerSetEmpty{}
		r = tl
	case CRC_inputStickerSetID:
		tl := TL_inputStickerSetID{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputStickerSetShortName:
		tl := TL_inputStickerSetShortName{}
		tl.ShortName = m.String()
		r = tl
	case CRC_inputStickerSetAnimatedEmoji:
		tl := TL_inputStickerSetAnimatedEmoji{}
		r = tl
	case CRC_inputStickerSetDice:
		tl := TL_inputStickerSetDice{}
		tl.Emoticon = m.String()
		r = tl
	case CRC_inputStickerSetAnimatedEmojiAnimations:
		tl := TL_inputStickerSetAnimatedEmojiAnimations{}
		r = tl
	case CRC_inputStickerSetPremiumGifts:
		tl := TL_inputStickerSetPremiumGifts{}
		r = tl
	case CRC_inputStickerSetEmojiGenericAnimations:
		tl := TL_inputStickerSetEmojiGenericAnimations{}
		r = tl
	case CRC_inputStickerSetEmojiDefaultStatuses:
		tl := TL_inputStickerSetEmojiDefaultStatuses{}
		r = tl
	case CRC_inputStickerSetEmojiDefaultTopicIcons:
		tl := TL_inputStickerSetEmojiDefaultTopicIcons{}
		r = tl
	case CRC_stickerSet:
		tl := TL_stickerSet{}
		flags := m.Int()
		tl.Archived = flags&(1<<1) != 0
		tl.Official = flags&(1<<2) != 0
		tl.Masks = flags&(1<<3) != 0
		tl.Animated = flags&(1<<5) != 0
		tl.Videos = flags&(1<<6) != 0
		tl.Emojis = flags&(1<<7) != 0
		tl.TextColor = flags&(1<<9) != 0
		if flags&(1<<0) != 0 {
			tl.InstalledDate = Some(m.Int())
		}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Title = m.String()
		tl.ShortName = m.String()
		if flags&(1<<4) != 0 {
			tl.Thumbs = m.Vector()
		}
		if flags&(1<<4) != 0 {
			tl.ThumbDcID = Some(m.Int())
		}
		if flags&(1<<4) != 0 {
			tl.ThumbVersion = Some(m.Int())
		}
		if flags&(1<<8) != 0 {
			tl.ThumbDocumentID = Some(m.Long())
		}
		tl.Count = m.Int()
		tl.Hash = m.Int()
		r = tl
	case CRC_messages_stickerSet:
		tl := TL_messages_stickerSet{}
		tl.Set = m.Object()
		tl.Packs = m.Vector()
		tl.Keywords = m.Vector()
		tl.Documents = m.Vector()
		r = tl
	case CRC_messages_stickerSetNotModified:
		tl := TL_messages_stickerSetNotModified{}
		r = tl
	case CRC_botCommand:
		tl := TL_botCommand{}
		tl.Command = m.String()
		tl.Description = m.String()
		r = tl
	case CRC_botInfo:
		tl := TL_botInfo{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.UserID = Some(m.Long())
		}
		if flags&(1<<1) != 0 {
			tl.Description = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.DescriptionPhoto = m.Object()
		}
		if flags&(1<<5) != 0 {
			tl.DescriptionDocument = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Commands = m.Vector()
		}
		if flags&(1<<3) != 0 {
			tl.MenuButton = m.Object()
		}
		r = tl
	case CRC_keyboardButton:
		tl := TL_keyboardButton{}
		tl.Text = m.String()
		r = tl
	case CRC_keyboardButtonUrl:
		tl := TL_keyboardButtonUrl{}
		tl.Text = m.String()
		tl.Url = m.String()
		r = tl
	case CRC_keyboardButtonCallback:
		tl := TL_keyboardButtonCallback{}
		flags := m.Int()
		tl.RequiresPassword = flags&(1<<0) != 0
		tl.Text = m.String()
		tl.Data = m.StringBytes()
		r = tl
	case CRC_keyboardButtonRequestPhone:
		tl := TL_keyboardButtonRequestPhone{}
		tl.Text = m.String()
		r = tl
	case CRC_keyboardButtonRequestGeoLocation:
		tl := TL_keyboardButtonRequestGeoLocation{}
		tl.Text = m.String()
		r = tl
	case CRC_keyboardButtonSwitchInline:
		tl := TL_keyboardButtonSwitchInline{}
		flags := m.Int()
		tl.SamePeer = flags&(1<<0) != 0
		tl.Text = m.String()
		tl.Query = m.String()
		if flags&(1<<1) != 0 {
			tl.PeerTypes = m.Vector()
		}
		r = tl
	case CRC_keyboardButtonGame:
		tl := TL_keyboardButtonGame{}
		tl.Text = m.String()
		r = tl
	case CRC_keyboardButtonBuy:
		tl := TL_keyboardButtonBuy{}
		tl.Text = m.String()
		r = tl
	case CRC_keyboardButtonUrlAuth:
		tl := TL_keyboardButtonUrlAuth{}
		flags := m.Int()
		tl.Text = m.String()
		if flags&(1<<0) != 0 {
			tl.FwdText = Some(m.String())
		}
		tl.Url = m.String()
		tl.ButtonID = m.Int()
		r = tl
	case CRC_inputKeyboardButtonUrlAuth:
		tl := TL_inputKeyboardButtonUrlAuth{}
		flags := m.Int()
		tl.RequestWriteAccess = flags&(1<<0) != 0
		tl.Text = m.String()
		if flags&(1<<1) != 0 {
			tl.FwdText = Some(m.String())
		}
		tl.Url = m.String()
		tl.Bot = m.Object()
		r = tl
	case CRC_keyboardButtonRequestPoll:
		tl := TL_keyboardButtonRequestPoll{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Quiz = Some(m.Bool())
		}
		tl.Text = m.String()
		r = tl
	case CRC_inputKeyboardButtonUserProfile:
		tl := TL_inputKeyboardButtonUserProfile{}
		tl.Text = m.String()
		tl.UserID = m.Object()
		r = tl
	case CRC_keyboardButtonUserProfile:
		tl := TL_keyboardButtonUserProfile{}
		tl.Text = m.String()
		tl.UserID = m.Long()
		r = tl
	case CRC_keyboardButtonWebView:
		tl := TL_keyboardButtonWebView{}
		tl.Text = m.String()
		tl.Url = m.String()
		r = tl
	case CRC_keyboardButtonSimpleWebView:
		tl := TL_keyboardButtonSimpleWebView{}
		tl.Text = m.String()
		tl.Url = m.String()
		r = tl
	case CRC_keyboardButtonRequestPeer:
		tl := TL_keyboardButtonRequestPeer{}
		tl.Text = m.String()
		tl.ButtonID = m.Int()
		tl.PeerType = m.Object()
		r = tl
	case CRC_keyboardButtonRow:
		tl := TL_keyboardButtonRow{}
		tl.Buttons = m.Vector()
		r = tl
	case CRC_replyKeyboardHide:
		tl := TL_replyKeyboardHide{}
		flags := m.Int()
		tl.Selective = flags&(1<<2) != 0
		r = tl
	case CRC_replyKeyboardForceReply:
		tl := TL_replyKeyboardForceReply{}
		flags := m.Int()
		tl.SingleUse = flags&(1<<1) != 0
		tl.Selective = flags&(1<<2) != 0
		if flags&(1<<3) != 0 {
			tl.Placeholder = Some(m.String())
		}
		r = tl
	case CRC_replyKeyboardMarkup:
		tl := TL_replyKeyboardMarkup{}
		flags := m.Int()
		tl.Resize = flags&(1<<0) != 0
		tl.SingleUse = flags&(1<<1) != 0
		tl.Selective = flags&(1<<2) != 0
		tl.Persistent = flags&(1<<4) != 0
		tl.Rows = m.Vector()
		if flags&(1<<3) != 0 {
			tl.Placeholder = Some(m.String())
		}
		r = tl
	case CRC_replyInlineMarkup:
		tl := TL_replyInlineMarkup{}
		tl.Rows = m.Vector()
		r = tl
	case CRC_messageEntityUnknown:
		tl := TL_messageEntityUnknown{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityMention:
		tl := TL_messageEntityMention{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityHashtag:
		tl := TL_messageEntityHashtag{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityBotCommand:
		tl := TL_messageEntityBotCommand{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityUrl:
		tl := TL_messageEntityUrl{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityEmail:
		tl := TL_messageEntityEmail{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityBold:
		tl := TL_messageEntityBold{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityItalic:
		tl := TL_messageEntityItalic{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityCode:
		tl := TL_messageEntityCode{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityPre:
		tl := TL_messageEntityPre{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		tl.Language = m.String()
		r = tl
	case CRC_messageEntityTextUrl:
		tl := TL_messageEntityTextUrl{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		tl.Url = m.String()
		r = tl
	case CRC_messageEntityMentionName:
		tl := TL_messageEntityMentionName{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		tl.UserID = m.Long()
		r = tl
	case CRC_inputMessageEntityMentionName:
		tl := TL_inputMessageEntityMentionName{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		tl.UserID = m.Object()
		r = tl
	case CRC_messageEntityPhone:
		tl := TL_messageEntityPhone{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityCashtag:
		tl := TL_messageEntityCashtag{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityUnderline:
		tl := TL_messageEntityUnderline{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityStrike:
		tl := TL_messageEntityStrike{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityBankCard:
		tl := TL_messageEntityBankCard{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntitySpoiler:
		tl := TL_messageEntitySpoiler{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_messageEntityCustomEmoji:
		tl := TL_messageEntityCustomEmoji{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		tl.DocumentID = m.Long()
		r = tl
	case CRC_messageEntityBlockquote:
		tl := TL_messageEntityBlockquote{}
		tl.Offset = m.Int()
		tl.Length = m.Int()
		r = tl
	case CRC_inputChannelEmpty:
		tl := TL_inputChannelEmpty{}
		r = tl
	case CRC_inputChannel:
		tl := TL_inputChannel{}
		tl.ChannelID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputChannelFromMessage:
		tl := TL_inputChannelFromMessage{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.ChannelID = m.Long()
		r = tl
	case CRC_contacts_resolvedPeer:
		tl := TL_contacts_resolvedPeer{}
		tl.Peer = m.Object()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messageRange:
		tl := TL_messageRange{}
		tl.MinID = m.Int()
		tl.MaxID = m.Int()
		r = tl
	case CRC_updates_channelDifferenceEmpty:
		tl := TL_updates_channelDifferenceEmpty{}
		flags := m.Int()
		tl.Final = flags&(1<<0) != 0
		tl.Pts = m.Int()
		if flags&(1<<1) != 0 {
			tl.Timeout = Some(m.Int())
		}
		r = tl
	case CRC_updates_channelDifferenceTooLong:
		tl := TL_updates_channelDifferenceTooLong{}
		flags := m.Int()
		tl.Final = flags&(1<<0) != 0
		if flags&(1<<1) != 0 {
			tl.Timeout = Some(m.Int())
		}
		tl.Dialog = m.Object()
		tl.Messages = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_updates_channelDifference:
		tl := TL_updates_channelDifference{}
		flags := m.Int()
		tl.Final = flags&(1<<0) != 0
		tl.Pts = m.Int()
		if flags&(1<<1) != 0 {
			tl.Timeout = Some(m.Int())
		}
		tl.NewMessages = m.Vector()
		tl.OtherUpdates = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_channelMessagesFilterEmpty:
		tl := TL_channelMessagesFilterEmpty{}
		r = tl
	case CRC_channelMessagesFilter:
		tl := TL_channelMessagesFilter{}
		flags := m.Int()
		tl.ExcludeNewMessages = flags&(1<<1) != 0
		tl.Ranges = m.Vector()
		r = tl
	case CRC_channelParticipant:
		tl := TL_channelParticipant{}
		tl.UserID = m.Long()
		tl.Date = m.Int()
		r = tl
	case CRC_channelParticipantSelf:
		tl := TL_channelParticipantSelf{}
		flags := m.Int()
		tl.ViaRequest = flags&(1<<0) != 0
		tl.UserID = m.Long()
		tl.InviterID = m.Long()
		tl.Date = m.Int()
		r = tl
	case CRC_channelParticipantCreator:
		tl := TL_channelParticipantCreator{}
		flags := m.Int()
		tl.UserID = m.Long()
		tl.AdminRights = m.Object()
		if flags&(1<<0) != 0 {
			tl.Rank = Some(m.String())
		}
		r = tl
	case CRC_channelParticipantAdmin:
		tl := TL_channelParticipantAdmin{}
		flags := m.Int()
		tl.CanEdit = flags&(1<<0) != 0
		tl.Self = flags&(1<<1) != 0
		tl.UserID = m.Long()
		if flags&(1<<1) != 0 {
			tl.InviterID = Some(m.Long())
		}
		tl.PromotedBy = m.Long()
		tl.Date = m.Int()
		tl.AdminRights = m.Object()
		if flags&(1<<2) != 0 {
			tl.Rank = Some(m.String())
		}
		r = tl
	case CRC_channelParticipantBanned:
		tl := TL_channelParticipantBanned{}
		flags := m.Int()
		tl.Left = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.KickedBy = m.Long()
		tl.Date = m.Int()
		tl.BannedRights = m.Object()
		r = tl
	case CRC_channelParticipantLeft:
		tl := TL_channelParticipantLeft{}
		tl.Peer = m.Object()
		r = tl
	case CRC_channelParticipantsRecent:
		tl := TL_channelParticipantsRecent{}
		r = tl
	case CRC_channelParticipantsAdmins:
		tl := TL_channelParticipantsAdmins{}
		r = tl
	case CRC_channelParticipantsKicked:
		tl := TL_channelParticipantsKicked{}
		tl.Q = m.String()
		r = tl
	case CRC_channelParticipantsBots:
		tl := TL_channelParticipantsBots{}
		r = tl
	case CRC_channelParticipantsBanned:
		tl := TL_channelParticipantsBanned{}
		tl.Q = m.String()
		r = tl
	case CRC_channelParticipantsSearch:
		tl := TL_channelParticipantsSearch{}
		tl.Q = m.String()
		r = tl
	case CRC_channelParticipantsContacts:
		tl := TL_channelParticipantsContacts{}
		tl.Q = m.String()
		r = tl
	case CRC_channelParticipantsMentions:
		tl := TL_channelParticipantsMentions{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Q = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		r = tl
	case CRC_channels_channelParticipants:
		tl := TL_channels_channelParticipants{}
		tl.Count = m.Int()
		tl.Participants = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_channels_channelParticipantsNotModified:
		tl := TL_channels_channelParticipantsNotModified{}
		r = tl
	case CRC_channels_channelParticipant:
		tl := TL_channels_channelParticipant{}
		tl.Participant = m.Object()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_help_termsOfService:
		tl := TL_help_termsOfService{}
		flags := m.Int()
		tl.Popup = flags&(1<<0) != 0
		tl.ID = m.Object()
		tl.Text = m.String()
		tl.Entities = m.Vector()
		if flags&(1<<1) != 0 {
			tl.MinAgeConfirm = Some(m.Int())
		}
		r = tl
	case CRC_messages_savedGifsNotModified:
		tl := TL_messages_savedGifsNotModified{}
		r = tl
	case CRC_messages_savedGifs:
		tl := TL_messages_savedGifs{}
		tl.Hash = m.Long()
		tl.Gifs = m.Vector()
		r = tl
	case CRC_inputBotInlineMessageMediaAuto:
		tl := TL_inputBotInlineMessageMediaAuto{}
		flags := m.Int()
		tl.InvertMedia = flags&(1<<3) != 0
		tl.Message = m.String()
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_inputBotInlineMessageText:
		tl := TL_inputBotInlineMessageText{}
		flags := m.Int()
		tl.NoWebpage = flags&(1<<0) != 0
		tl.InvertMedia = flags&(1<<3) != 0
		tl.Message = m.String()
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_inputBotInlineMessageMediaGeo:
		tl := TL_inputBotInlineMessageMediaGeo{}
		flags := m.Int()
		tl.GeoPoint = m.Object()
		if flags&(1<<0) != 0 {
			tl.Heading = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.Period = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.ProximityNotificationRadius = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_inputBotInlineMessageMediaVenue:
		tl := TL_inputBotInlineMessageMediaVenue{}
		flags := m.Int()
		tl.GeoPoint = m.Object()
		tl.Title = m.String()
		tl.Address = m.String()
		tl.Provider = m.String()
		tl.VenueID = m.String()
		tl.VenueType = m.String()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_inputBotInlineMessageMediaContact:
		tl := TL_inputBotInlineMessageMediaContact{}
		flags := m.Int()
		tl.PhoneNumber = m.String()
		tl.FirstName = m.String()
		tl.LastName = m.String()
		tl.Vcard = m.String()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_inputBotInlineMessageGame:
		tl := TL_inputBotInlineMessageGame{}
		flags := m.Int()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_inputBotInlineMessageMediaInvoice:
		tl := TL_inputBotInlineMessageMediaInvoice{}
		flags := m.Int()
		tl.Title = m.String()
		tl.Description = m.String()
		if flags&(1<<0) != 0 {
			tl.Photo = m.Object()
		}
		tl.Invoice = m.Object()
		tl.Payload = m.StringBytes()
		tl.Provider = m.String()
		tl.ProviderData = m.Object()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_inputBotInlineMessageMediaWebPage:
		tl := TL_inputBotInlineMessageMediaWebPage{}
		flags := m.Int()
		tl.InvertMedia = flags&(1<<3) != 0
		tl.ForceLargeMedia = flags&(1<<4) != 0
		tl.ForceSmallMedia = flags&(1<<5) != 0
		tl.Optional = flags&(1<<6) != 0
		tl.Message = m.String()
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		tl.Url = m.String()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_inputBotInlineResult:
		tl := TL_inputBotInlineResult{}
		flags := m.Int()
		tl.ID = m.String()
		tl.Type = m.String()
		if flags&(1<<1) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Description = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.Url = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.Thumb = m.Object()
		}
		if flags&(1<<5) != 0 {
			tl.Content = m.Object()
		}
		tl.SendMessage = m.Object()
		r = tl
	case CRC_inputBotInlineResultPhoto:
		tl := TL_inputBotInlineResultPhoto{}
		tl.ID = m.String()
		tl.Type = m.String()
		tl.Photo = m.Object()
		tl.SendMessage = m.Object()
		r = tl
	case CRC_inputBotInlineResultDocument:
		tl := TL_inputBotInlineResultDocument{}
		flags := m.Int()
		tl.ID = m.String()
		tl.Type = m.String()
		if flags&(1<<1) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Description = Some(m.String())
		}
		tl.Document = m.Object()
		tl.SendMessage = m.Object()
		r = tl
	case CRC_inputBotInlineResultGame:
		tl := TL_inputBotInlineResultGame{}
		tl.ID = m.String()
		tl.ShortName = m.String()
		tl.SendMessage = m.Object()
		r = tl
	case CRC_botInlineMessageMediaAuto:
		tl := TL_botInlineMessageMediaAuto{}
		flags := m.Int()
		tl.InvertMedia = flags&(1<<3) != 0
		tl.Message = m.String()
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_botInlineMessageText:
		tl := TL_botInlineMessageText{}
		flags := m.Int()
		tl.NoWebpage = flags&(1<<0) != 0
		tl.InvertMedia = flags&(1<<3) != 0
		tl.Message = m.String()
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_botInlineMessageMediaGeo:
		tl := TL_botInlineMessageMediaGeo{}
		flags := m.Int()
		tl.Geo = m.Object()
		if flags&(1<<0) != 0 {
			tl.Heading = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.Period = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.ProximityNotificationRadius = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_botInlineMessageMediaVenue:
		tl := TL_botInlineMessageMediaVenue{}
		flags := m.Int()
		tl.Geo = m.Object()
		tl.Title = m.String()
		tl.Address = m.String()
		tl.Provider = m.String()
		tl.VenueID = m.String()
		tl.VenueType = m.String()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_botInlineMessageMediaContact:
		tl := TL_botInlineMessageMediaContact{}
		flags := m.Int()
		tl.PhoneNumber = m.String()
		tl.FirstName = m.String()
		tl.LastName = m.String()
		tl.Vcard = m.String()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_botInlineMessageMediaInvoice:
		tl := TL_botInlineMessageMediaInvoice{}
		flags := m.Int()
		tl.ShippingAddressRequested = flags&(1<<1) != 0
		tl.Test = flags&(1<<3) != 0
		tl.Title = m.String()
		tl.Description = m.String()
		if flags&(1<<0) != 0 {
			tl.Photo = m.Object()
		}
		tl.Currency = m.String()
		tl.TotalAmount = m.Long()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_botInlineMessageMediaWebPage:
		tl := TL_botInlineMessageMediaWebPage{}
		flags := m.Int()
		tl.InvertMedia = flags&(1<<3) != 0
		tl.ForceLargeMedia = flags&(1<<4) != 0
		tl.ForceSmallMedia = flags&(1<<5) != 0
		tl.Manual = flags&(1<<7) != 0
		tl.Safe = flags&(1<<8) != 0
		tl.Message = m.String()
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		tl.Url = m.String()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		r = tl
	case CRC_botInlineResult:
		tl := TL_botInlineResult{}
		flags := m.Int()
		tl.ID = m.String()
		tl.Type = m.String()
		if flags&(1<<1) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Description = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.Url = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.Thumb = m.Object()
		}
		if flags&(1<<5) != 0 {
			tl.Content = m.Object()
		}
		tl.SendMessage = m.Object()
		r = tl
	case CRC_botInlineMediaResult:
		tl := TL_botInlineMediaResult{}
		flags := m.Int()
		tl.ID = m.String()
		tl.Type = m.String()
		if flags&(1<<0) != 0 {
			tl.Photo = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Document = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.Description = Some(m.String())
		}
		tl.SendMessage = m.Object()
		r = tl
	case CRC_messages_botResults:
		tl := TL_messages_botResults{}
		flags := m.Int()
		tl.Gallery = flags&(1<<0) != 0
		tl.QueryID = m.Long()
		if flags&(1<<1) != 0 {
			tl.NextOffset = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.SwitchPm = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.SwitchWebview = m.Object()
		}
		tl.Results = m.Vector()
		tl.CacheTime = m.Int()
		tl.Users = m.Vector()
		r = tl
	case CRC_exportedMessageLink:
		tl := TL_exportedMessageLink{}
		tl.Link = m.String()
		tl.Html = m.String()
		r = tl
	case CRC_messageFwdHeader:
		tl := TL_messageFwdHeader{}
		flags := m.Int()
		tl.Imported = flags&(1<<7) != 0
		if flags&(1<<0) != 0 {
			tl.FromID = m.Object()
		}
		if flags&(1<<5) != 0 {
			tl.FromName = Some(m.String())
		}
		tl.Date = m.Int()
		if flags&(1<<2) != 0 {
			tl.ChannelPost = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.PostAuthor = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.SavedFromPeer = m.Object()
		}
		if flags&(1<<4) != 0 {
			tl.SavedFromMsgID = Some(m.Int())
		}
		if flags&(1<<6) != 0 {
			tl.PsaType = Some(m.String())
		}
		r = tl
	case CRC_auth_codeTypeSms:
		tl := TL_auth_codeTypeSms{}
		r = tl
	case CRC_auth_codeTypeCall:
		tl := TL_auth_codeTypeCall{}
		r = tl
	case CRC_auth_codeTypeFlashCall:
		tl := TL_auth_codeTypeFlashCall{}
		r = tl
	case CRC_auth_codeTypeMissedCall:
		tl := TL_auth_codeTypeMissedCall{}
		r = tl
	case CRC_auth_codeTypeFragmentSms:
		tl := TL_auth_codeTypeFragmentSms{}
		r = tl
	case CRC_auth_sentCodeTypeApp:
		tl := TL_auth_sentCodeTypeApp{}
		tl.Length = m.Int()
		r = tl
	case CRC_auth_sentCodeTypeSms:
		tl := TL_auth_sentCodeTypeSms{}
		tl.Length = m.Int()
		r = tl
	case CRC_auth_sentCodeTypeCall:
		tl := TL_auth_sentCodeTypeCall{}
		tl.Length = m.Int()
		r = tl
	case CRC_auth_sentCodeTypeFlashCall:
		tl := TL_auth_sentCodeTypeFlashCall{}
		tl.Pattern = m.String()
		r = tl
	case CRC_auth_sentCodeTypeMissedCall:
		tl := TL_auth_sentCodeTypeMissedCall{}
		tl.Prefix = m.String()
		tl.Length = m.Int()
		r = tl
	case CRC_auth_sentCodeTypeEmailCode:
		tl := TL_auth_sentCodeTypeEmailCode{}
		flags := m.Int()
		tl.AppleSigninAllowed = flags&(1<<0) != 0
		tl.GoogleSigninAllowed = flags&(1<<1) != 0
		tl.EmailPattern = m.String()
		tl.Length = m.Int()
		if flags&(1<<3) != 0 {
			tl.ResetAvailablePeriod = Some(m.Int())
		}
		if flags&(1<<4) != 0 {
			tl.ResetPendingDate = Some(m.Int())
		}
		r = tl
	case CRC_auth_sentCodeTypeSetUpEmailRequired:
		tl := TL_auth_sentCodeTypeSetUpEmailRequired{}
		flags := m.Int()
		tl.AppleSigninAllowed = flags&(1<<0) != 0
		tl.GoogleSigninAllowed = flags&(1<<1) != 0
		r = tl
	case CRC_auth_sentCodeTypeFragmentSms:
		tl := TL_auth_sentCodeTypeFragmentSms{}
		tl.Url = m.String()
		tl.Length = m.Int()
		r = tl
	case CRC_auth_sentCodeTypeFirebaseSms:
		tl := TL_auth_sentCodeTypeFirebaseSms{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Nonce = m.StringBytes()
		}
		if flags&(1<<1) != 0 {
			tl.Receipt = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.PushTimeout = Some(m.Int())
		}
		tl.Length = m.Int()
		r = tl
	case CRC_messages_botCallbackAnswer:
		tl := TL_messages_botCallbackAnswer{}
		flags := m.Int()
		tl.Alert = flags&(1<<1) != 0
		tl.HasUrl = flags&(1<<3) != 0
		tl.NativeUi = flags&(1<<4) != 0
		if flags&(1<<0) != 0 {
			tl.Message = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Url = Some(m.String())
		}
		tl.CacheTime = m.Int()
		r = tl
	case CRC_messages_messageEditData:
		tl := TL_messages_messageEditData{}
		flags := m.Int()
		tl.Caption = flags&(1<<0) != 0
		r = tl
	case CRC_inputBotInlineMessageID:
		tl := TL_inputBotInlineMessageID{}
		tl.DcID = m.Int()
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputBotInlineMessageID64:
		tl := TL_inputBotInlineMessageID64{}
		tl.DcID = m.Int()
		tl.OwnerID = m.Long()
		tl.ID = m.Int()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inlineBotSwitchPM:
		tl := TL_inlineBotSwitchPM{}
		tl.Text = m.String()
		tl.StartParam = m.String()
		r = tl
	case CRC_messages_peerDialogs:
		tl := TL_messages_peerDialogs{}
		tl.Dialogs = m.Vector()
		tl.Messages = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		tl.State = m.Object()
		r = tl
	case CRC_topPeer:
		tl := TL_topPeer{}
		tl.Peer = m.Object()
		tl.Rating = m.Double()
		r = tl
	case CRC_topPeerCategoryBotsPM:
		tl := TL_topPeerCategoryBotsPM{}
		r = tl
	case CRC_topPeerCategoryBotsInline:
		tl := TL_topPeerCategoryBotsInline{}
		r = tl
	case CRC_topPeerCategoryCorrespondents:
		tl := TL_topPeerCategoryCorrespondents{}
		r = tl
	case CRC_topPeerCategoryGroups:
		tl := TL_topPeerCategoryGroups{}
		r = tl
	case CRC_topPeerCategoryChannels:
		tl := TL_topPeerCategoryChannels{}
		r = tl
	case CRC_topPeerCategoryPhoneCalls:
		tl := TL_topPeerCategoryPhoneCalls{}
		r = tl
	case CRC_topPeerCategoryForwardUsers:
		tl := TL_topPeerCategoryForwardUsers{}
		r = tl
	case CRC_topPeerCategoryForwardChats:
		tl := TL_topPeerCategoryForwardChats{}
		r = tl
	case CRC_topPeerCategoryPeers:
		tl := TL_topPeerCategoryPeers{}
		tl.Category = m.Object()
		tl.Count = m.Int()
		tl.Peers = m.Vector()
		r = tl
	case CRC_contacts_topPeersNotModified:
		tl := TL_contacts_topPeersNotModified{}
		r = tl
	case CRC_contacts_topPeers:
		tl := TL_contacts_topPeers{}
		tl.Categories = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_contacts_topPeersDisabled:
		tl := TL_contacts_topPeersDisabled{}
		r = tl
	case CRC_draftMessageEmpty:
		tl := TL_draftMessageEmpty{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Date = Some(m.Int())
		}
		r = tl
	case CRC_draftMessage:
		tl := TL_draftMessage{}
		flags := m.Int()
		tl.NoWebpage = flags&(1<<1) != 0
		tl.InvertMedia = flags&(1<<6) != 0
		if flags&(1<<4) != 0 {
			tl.ReplyTo = m.Object()
		}
		tl.Message = m.String()
		if flags&(1<<3) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<5) != 0 {
			tl.Media = m.Object()
		}
		tl.Date = m.Int()
		r = tl
	case CRC_messages_featuredStickersNotModified:
		tl := TL_messages_featuredStickersNotModified{}
		tl.Count = m.Int()
		r = tl
	case CRC_messages_featuredStickers:
		tl := TL_messages_featuredStickers{}
		flags := m.Int()
		tl.Premium = flags&(1<<0) != 0
		tl.Hash = m.Long()
		tl.Count = m.Int()
		tl.Sets = m.Vector()
		tl.Unread = m.VectorLong()
		r = tl
	case CRC_messages_recentStickersNotModified:
		tl := TL_messages_recentStickersNotModified{}
		r = tl
	case CRC_messages_recentStickers:
		tl := TL_messages_recentStickers{}
		tl.Hash = m.Long()
		tl.Packs = m.Vector()
		tl.Stickers = m.Vector()
		tl.Dates = m.VectorInt()
		r = tl
	case CRC_messages_archivedStickers:
		tl := TL_messages_archivedStickers{}
		tl.Count = m.Int()
		tl.Sets = m.Vector()
		r = tl
	case CRC_messages_stickerSetInstallResultSuccess:
		tl := TL_messages_stickerSetInstallResultSuccess{}
		r = tl
	case CRC_messages_stickerSetInstallResultArchive:
		tl := TL_messages_stickerSetInstallResultArchive{}
		tl.Sets = m.Vector()
		r = tl
	case CRC_stickerSetCovered:
		tl := TL_stickerSetCovered{}
		tl.Set = m.Object()
		tl.Cover = m.Object()
		r = tl
	case CRC_stickerSetMultiCovered:
		tl := TL_stickerSetMultiCovered{}
		tl.Set = m.Object()
		tl.Covers = m.Vector()
		r = tl
	case CRC_stickerSetFullCovered:
		tl := TL_stickerSetFullCovered{}
		tl.Set = m.Object()
		tl.Packs = m.Vector()
		tl.Keywords = m.Vector()
		tl.Documents = m.Vector()
		r = tl
	case CRC_stickerSetNoCovered:
		tl := TL_stickerSetNoCovered{}
		tl.Set = m.Object()
		r = tl
	case CRC_maskCoords:
		tl := TL_maskCoords{}
		tl.N = m.Int()
		tl.X = m.Double()
		tl.Y = m.Double()
		tl.Zoom = m.Double()
		r = tl
	case CRC_inputStickeredMediaPhoto:
		tl := TL_inputStickeredMediaPhoto{}
		tl.ID = m.Object()
		r = tl
	case CRC_inputStickeredMediaDocument:
		tl := TL_inputStickeredMediaDocument{}
		tl.ID = m.Object()
		r = tl
	case CRC_game:
		tl := TL_game{}
		flags := m.Int()
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.ShortName = m.String()
		tl.Title = m.String()
		tl.Description = m.String()
		tl.Photo = m.Object()
		if flags&(1<<0) != 0 {
			tl.Document = m.Object()
		}
		r = tl
	case CRC_inputGameID:
		tl := TL_inputGameID{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputGameShortName:
		tl := TL_inputGameShortName{}
		tl.BotID = m.Object()
		tl.ShortName = m.String()
		r = tl
	case CRC_highScore:
		tl := TL_highScore{}
		tl.Pos = m.Int()
		tl.UserID = m.Long()
		tl.Score = m.Int()
		r = tl
	case CRC_messages_highScores:
		tl := TL_messages_highScores{}
		tl.Scores = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_textEmpty:
		tl := TL_textEmpty{}
		r = tl
	case CRC_textPlain:
		tl := TL_textPlain{}
		tl.Text = m.String()
		r = tl
	case CRC_textBold:
		tl := TL_textBold{}
		tl.Text = m.Object()
		r = tl
	case CRC_textItalic:
		tl := TL_textItalic{}
		tl.Text = m.Object()
		r = tl
	case CRC_textUnderline:
		tl := TL_textUnderline{}
		tl.Text = m.Object()
		r = tl
	case CRC_textStrike:
		tl := TL_textStrike{}
		tl.Text = m.Object()
		r = tl
	case CRC_textFixed:
		tl := TL_textFixed{}
		tl.Text = m.Object()
		r = tl
	case CRC_textUrl:
		tl := TL_textUrl{}
		tl.Text = m.Object()
		tl.Url = m.String()
		tl.WebpageID = m.Long()
		r = tl
	case CRC_textEmail:
		tl := TL_textEmail{}
		tl.Text = m.Object()
		tl.Email = m.String()
		r = tl
	case CRC_textConcat:
		tl := TL_textConcat{}
		tl.Texts = m.Vector()
		r = tl
	case CRC_textSubscript:
		tl := TL_textSubscript{}
		tl.Text = m.Object()
		r = tl
	case CRC_textSuperscript:
		tl := TL_textSuperscript{}
		tl.Text = m.Object()
		r = tl
	case CRC_textMarked:
		tl := TL_textMarked{}
		tl.Text = m.Object()
		r = tl
	case CRC_textPhone:
		tl := TL_textPhone{}
		tl.Text = m.Object()
		tl.Phone = m.String()
		r = tl
	case CRC_textImage:
		tl := TL_textImage{}
		tl.DocumentID = m.Long()
		tl.W = m.Int()
		tl.H = m.Int()
		r = tl
	case CRC_textAnchor:
		tl := TL_textAnchor{}
		tl.Text = m.Object()
		tl.Name = m.String()
		r = tl
	case CRC_pageBlockUnsupported:
		tl := TL_pageBlockUnsupported{}
		r = tl
	case CRC_pageBlockTitle:
		tl := TL_pageBlockTitle{}
		tl.Text = m.Object()
		r = tl
	case CRC_pageBlockSubtitle:
		tl := TL_pageBlockSubtitle{}
		tl.Text = m.Object()
		r = tl
	case CRC_pageBlockAuthorDate:
		tl := TL_pageBlockAuthorDate{}
		tl.Author = m.Object()
		tl.PublishedDate = m.Int()
		r = tl
	case CRC_pageBlockHeader:
		tl := TL_pageBlockHeader{}
		tl.Text = m.Object()
		r = tl
	case CRC_pageBlockSubheader:
		tl := TL_pageBlockSubheader{}
		tl.Text = m.Object()
		r = tl
	case CRC_pageBlockParagraph:
		tl := TL_pageBlockParagraph{}
		tl.Text = m.Object()
		r = tl
	case CRC_pageBlockPreformatted:
		tl := TL_pageBlockPreformatted{}
		tl.Text = m.Object()
		tl.Language = m.String()
		r = tl
	case CRC_pageBlockFooter:
		tl := TL_pageBlockFooter{}
		tl.Text = m.Object()
		r = tl
	case CRC_pageBlockDivider:
		tl := TL_pageBlockDivider{}
		r = tl
	case CRC_pageBlockAnchor:
		tl := TL_pageBlockAnchor{}
		tl.Name = m.String()
		r = tl
	case CRC_pageBlockList:
		tl := TL_pageBlockList{}
		tl.Items = m.Vector()
		r = tl
	case CRC_pageBlockBlockquote:
		tl := TL_pageBlockBlockquote{}
		tl.Text = m.Object()
		tl.Caption = m.Object()
		r = tl
	case CRC_pageBlockPullquote:
		tl := TL_pageBlockPullquote{}
		tl.Text = m.Object()
		tl.Caption = m.Object()
		r = tl
	case CRC_pageBlockPhoto:
		tl := TL_pageBlockPhoto{}
		flags := m.Int()
		tl.PhotoID = m.Long()
		tl.Caption = m.Object()
		if flags&(1<<0) != 0 {
			tl.Url = Some(m.String())
		}
		if flags&(1<<0) != 0 {
			tl.WebpageID = Some(m.Long())
		}
		r = tl
	case CRC_pageBlockVideo:
		tl := TL_pageBlockVideo{}
		flags := m.Int()
		tl.Autoplay = flags&(1<<0) != 0
		tl.Loop = flags&(1<<1) != 0
		tl.VideoID = m.Long()
		tl.Caption = m.Object()
		r = tl
	case CRC_pageBlockCover:
		tl := TL_pageBlockCover{}
		tl.Cover = m.Object()
		r = tl
	case CRC_pageBlockEmbed:
		tl := TL_pageBlockEmbed{}
		flags := m.Int()
		tl.FullWidth = flags&(1<<0) != 0
		tl.AllowScrolling = flags&(1<<3) != 0
		if flags&(1<<1) != 0 {
			tl.Url = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Html = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.PosterPhotoID = Some(m.Long())
		}
		if flags&(1<<5) != 0 {
			tl.W = Some(m.Int())
		}
		if flags&(1<<5) != 0 {
			tl.H = Some(m.Int())
		}
		tl.Caption = m.Object()
		r = tl
	case CRC_pageBlockEmbedPost:
		tl := TL_pageBlockEmbedPost{}
		tl.Url = m.String()
		tl.WebpageID = m.Long()
		tl.AuthorPhotoID = m.Long()
		tl.Author = m.String()
		tl.Date = m.Int()
		tl.Blocks = m.Vector()
		tl.Caption = m.Object()
		r = tl
	case CRC_pageBlockCollage:
		tl := TL_pageBlockCollage{}
		tl.Items = m.Vector()
		tl.Caption = m.Object()
		r = tl
	case CRC_pageBlockSlideshow:
		tl := TL_pageBlockSlideshow{}
		tl.Items = m.Vector()
		tl.Caption = m.Object()
		r = tl
	case CRC_pageBlockChannel:
		tl := TL_pageBlockChannel{}
		tl.Channel = m.Object()
		r = tl
	case CRC_pageBlockAudio:
		tl := TL_pageBlockAudio{}
		tl.AudioID = m.Long()
		tl.Caption = m.Object()
		r = tl
	case CRC_pageBlockKicker:
		tl := TL_pageBlockKicker{}
		tl.Text = m.Object()
		r = tl
	case CRC_pageBlockTable:
		tl := TL_pageBlockTable{}
		flags := m.Int()
		tl.Bordered = flags&(1<<0) != 0
		tl.Striped = flags&(1<<1) != 0
		tl.Title = m.Object()
		tl.Rows = m.Vector()
		r = tl
	case CRC_pageBlockOrderedList:
		tl := TL_pageBlockOrderedList{}
		tl.Items = m.Vector()
		r = tl
	case CRC_pageBlockDetails:
		tl := TL_pageBlockDetails{}
		flags := m.Int()
		tl.Open = flags&(1<<0) != 0
		tl.Blocks = m.Vector()
		tl.Title = m.Object()
		r = tl
	case CRC_pageBlockRelatedArticles:
		tl := TL_pageBlockRelatedArticles{}
		tl.Title = m.Object()
		tl.Articles = m.Vector()
		r = tl
	case CRC_pageBlockMap:
		tl := TL_pageBlockMap{}
		tl.Geo = m.Object()
		tl.Zoom = m.Int()
		tl.W = m.Int()
		tl.H = m.Int()
		tl.Caption = m.Object()
		r = tl
	case CRC_phoneCallDiscardReasonMissed:
		tl := TL_phoneCallDiscardReasonMissed{}
		r = tl
	case CRC_phoneCallDiscardReasonDisconnect:
		tl := TL_phoneCallDiscardReasonDisconnect{}
		r = tl
	case CRC_phoneCallDiscardReasonHangup:
		tl := TL_phoneCallDiscardReasonHangup{}
		r = tl
	case CRC_phoneCallDiscardReasonBusy:
		tl := TL_phoneCallDiscardReasonBusy{}
		r = tl
	case CRC_dataJSON:
		tl := TL_dataJSON{}
		tl.Data = m.String()
		r = tl
	case CRC_labeledPrice:
		tl := TL_labeledPrice{}
		tl.Label = m.String()
		tl.Amount = m.Long()
		r = tl
	case CRC_invoice:
		tl := TL_invoice{}
		flags := m.Int()
		tl.Test = flags&(1<<0) != 0
		tl.NameRequested = flags&(1<<1) != 0
		tl.PhoneRequested = flags&(1<<2) != 0
		tl.EmailRequested = flags&(1<<3) != 0
		tl.ShippingAddressRequested = flags&(1<<4) != 0
		tl.Flexible = flags&(1<<5) != 0
		tl.PhoneToProvider = flags&(1<<6) != 0
		tl.EmailToProvider = flags&(1<<7) != 0
		tl.Recurring = flags&(1<<9) != 0
		tl.Currency = m.String()
		tl.Prices = m.Vector()
		if flags&(1<<8) != 0 {
			tl.MaxTipAmount = Some(m.Long())
		}
		if flags&(1<<8) != 0 {
			tl.SuggestedTipAmounts = m.VectorLong()
		}
		if flags&(1<<10) != 0 {
			tl.TermsUrl = Some(m.String())
		}
		r = tl
	case CRC_paymentCharge:
		tl := TL_paymentCharge{}
		tl.ID = m.String()
		tl.ProviderChargeID = m.String()
		r = tl
	case CRC_postAddress:
		tl := TL_postAddress{}
		tl.StreetLine1 = m.String()
		tl.StreetLine2 = m.String()
		tl.City = m.String()
		tl.State = m.String()
		tl.CountryIso2 = m.String()
		tl.PostCode = m.String()
		r = tl
	case CRC_paymentRequestedInfo:
		tl := TL_paymentRequestedInfo{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Name = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Phone = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Email = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.ShippingAddress = m.Object()
		}
		r = tl
	case CRC_paymentSavedCredentialsCard:
		tl := TL_paymentSavedCredentialsCard{}
		tl.ID = m.String()
		tl.Title = m.String()
		r = tl
	case CRC_webDocument:
		tl := TL_webDocument{}
		tl.Url = m.String()
		tl.AccessHash = m.Long()
		tl.Size = m.Int()
		tl.MimeType = m.String()
		tl.Attributes = m.Vector()
		r = tl
	case CRC_webDocumentNoProxy:
		tl := TL_webDocumentNoProxy{}
		tl.Url = m.String()
		tl.Size = m.Int()
		tl.MimeType = m.String()
		tl.Attributes = m.Vector()
		r = tl
	case CRC_inputWebDocument:
		tl := TL_inputWebDocument{}
		tl.Url = m.String()
		tl.Size = m.Int()
		tl.MimeType = m.String()
		tl.Attributes = m.Vector()
		r = tl
	case CRC_inputWebFileLocation:
		tl := TL_inputWebFileLocation{}
		tl.Url = m.String()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputWebFileGeoPointLocation:
		tl := TL_inputWebFileGeoPointLocation{}
		tl.GeoPoint = m.Object()
		tl.AccessHash = m.Long()
		tl.W = m.Int()
		tl.H = m.Int()
		tl.Zoom = m.Int()
		tl.Scale = m.Int()
		r = tl
	case CRC_inputWebFileAudioAlbumThumbLocation:
		tl := TL_inputWebFileAudioAlbumThumbLocation{}
		flags := m.Int()
		tl.Small = flags&(1<<2) != 0
		if flags&(1<<0) != 0 {
			tl.Document = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Performer = Some(m.String())
		}
		r = tl
	case CRC_upload_webFile:
		tl := TL_upload_webFile{}
		tl.Size = m.Int()
		tl.MimeType = m.String()
		tl.FileType = m.Object()
		tl.Mtime = m.Int()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_payments_paymentForm:
		tl := TL_payments_paymentForm{}
		flags := m.Int()
		tl.CanSaveCredentials = flags&(1<<2) != 0
		tl.PasswordMissing = flags&(1<<3) != 0
		tl.FormID = m.Long()
		tl.BotID = m.Long()
		tl.Title = m.String()
		tl.Description = m.String()
		if flags&(1<<5) != 0 {
			tl.Photo = m.Object()
		}
		tl.Invoice = m.Object()
		tl.ProviderID = m.Long()
		tl.Url = m.String()
		if flags&(1<<4) != 0 {
			tl.NativeProvider = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.NativeParams = m.Object()
		}
		if flags&(1<<6) != 0 {
			tl.AdditionalMethods = m.Vector()
		}
		if flags&(1<<0) != 0 {
			tl.SavedInfo = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.SavedCredentials = m.Vector()
		}
		tl.Users = m.Vector()
		r = tl
	case CRC_payments_validatedRequestedInfo:
		tl := TL_payments_validatedRequestedInfo{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.ID = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.ShippingOptions = m.Vector()
		}
		r = tl
	case CRC_payments_paymentResult:
		tl := TL_payments_paymentResult{}
		tl.Updates = m.Object()
		r = tl
	case CRC_payments_paymentVerificationNeeded:
		tl := TL_payments_paymentVerificationNeeded{}
		tl.Url = m.String()
		r = tl
	case CRC_payments_paymentReceipt:
		tl := TL_payments_paymentReceipt{}
		flags := m.Int()
		tl.Date = m.Int()
		tl.BotID = m.Long()
		tl.ProviderID = m.Long()
		tl.Title = m.String()
		tl.Description = m.String()
		if flags&(1<<2) != 0 {
			tl.Photo = m.Object()
		}
		tl.Invoice = m.Object()
		if flags&(1<<0) != 0 {
			tl.Info = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Shipping = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.TipAmount = Some(m.Long())
		}
		tl.Currency = m.String()
		tl.TotalAmount = m.Long()
		tl.CredentialsTitle = m.String()
		tl.Users = m.Vector()
		r = tl
	case CRC_payments_savedInfo:
		tl := TL_payments_savedInfo{}
		flags := m.Int()
		tl.HasSavedCredentials = flags&(1<<1) != 0
		if flags&(1<<0) != 0 {
			tl.SavedInfo = m.Object()
		}
		r = tl
	case CRC_inputPaymentCredentialsSaved:
		tl := TL_inputPaymentCredentialsSaved{}
		tl.ID = m.String()
		tl.TmpPassword = m.StringBytes()
		r = tl
	case CRC_inputPaymentCredentials:
		tl := TL_inputPaymentCredentials{}
		flags := m.Int()
		tl.Save = flags&(1<<0) != 0
		tl.Data = m.Object()
		r = tl
	case CRC_inputPaymentCredentialsApplePay:
		tl := TL_inputPaymentCredentialsApplePay{}
		tl.PaymentData = m.Object()
		r = tl
	case CRC_inputPaymentCredentialsGooglePay:
		tl := TL_inputPaymentCredentialsGooglePay{}
		tl.PaymentToken = m.Object()
		r = tl
	case CRC_account_tmpPassword:
		tl := TL_account_tmpPassword{}
		tl.TmpPassword = m.StringBytes()
		tl.ValidUntil = m.Int()
		r = tl
	case CRC_shippingOption:
		tl := TL_shippingOption{}
		tl.ID = m.String()
		tl.Title = m.String()
		tl.Prices = m.Vector()
		r = tl
	case CRC_inputStickerSetItem:
		tl := TL_inputStickerSetItem{}
		flags := m.Int()
		tl.Document = m.Object()
		tl.Emoji = m.String()
		if flags&(1<<0) != 0 {
			tl.MaskCoords = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Keywords = Some(m.String())
		}
		r = tl
	case CRC_inputPhoneCall:
		tl := TL_inputPhoneCall{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_phoneCallEmpty:
		tl := TL_phoneCallEmpty{}
		tl.ID = m.Long()
		r = tl
	case CRC_phoneCallWaiting:
		tl := TL_phoneCallWaiting{}
		flags := m.Int()
		tl.Video = flags&(1<<6) != 0
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Date = m.Int()
		tl.AdminID = m.Long()
		tl.ParticipantID = m.Long()
		tl.Protocol = m.Object()
		if flags&(1<<0) != 0 {
			tl.ReceiveDate = Some(m.Int())
		}
		r = tl
	case CRC_phoneCallRequested:
		tl := TL_phoneCallRequested{}
		flags := m.Int()
		tl.Video = flags&(1<<6) != 0
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Date = m.Int()
		tl.AdminID = m.Long()
		tl.ParticipantID = m.Long()
		tl.GAHash = m.StringBytes()
		tl.Protocol = m.Object()
		r = tl
	case CRC_phoneCallAccepted:
		tl := TL_phoneCallAccepted{}
		flags := m.Int()
		tl.Video = flags&(1<<6) != 0
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Date = m.Int()
		tl.AdminID = m.Long()
		tl.ParticipantID = m.Long()
		tl.GB = m.StringBytes()
		tl.Protocol = m.Object()
		r = tl
	case CRC_phoneCall:
		tl := TL_phoneCall{}
		flags := m.Int()
		tl.P2pAllowed = flags&(1<<5) != 0
		tl.Video = flags&(1<<6) != 0
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Date = m.Int()
		tl.AdminID = m.Long()
		tl.ParticipantID = m.Long()
		tl.GAOrB = m.StringBytes()
		tl.KeyFingerprint = m.Long()
		tl.Protocol = m.Object()
		tl.Connections = m.Vector()
		tl.StartDate = m.Int()
		r = tl
	case CRC_phoneCallDiscarded:
		tl := TL_phoneCallDiscarded{}
		flags := m.Int()
		tl.NeedRating = flags&(1<<2) != 0
		tl.NeedDebug = flags&(1<<3) != 0
		tl.Video = flags&(1<<6) != 0
		tl.ID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Reason = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Duration = Some(m.Int())
		}
		r = tl
	case CRC_phoneConnection:
		tl := TL_phoneConnection{}
		flags := m.Int()
		tl.Tcp = flags&(1<<0) != 0
		tl.ID = m.Long()
		tl.Ip = m.String()
		tl.Ipv6 = m.String()
		tl.Port = m.Int()
		tl.PeerTag = m.StringBytes()
		r = tl
	case CRC_phoneConnectionWebrtc:
		tl := TL_phoneConnectionWebrtc{}
		flags := m.Int()
		tl.Turn = flags&(1<<0) != 0
		tl.Stun = flags&(1<<1) != 0
		tl.ID = m.Long()
		tl.Ip = m.String()
		tl.Ipv6 = m.String()
		tl.Port = m.Int()
		tl.Username = m.String()
		tl.Password = m.String()
		r = tl
	case CRC_phoneCallProtocol:
		tl := TL_phoneCallProtocol{}
		flags := m.Int()
		tl.UdpP2p = flags&(1<<0) != 0
		tl.UdpReflector = flags&(1<<1) != 0
		tl.MinLayer = m.Int()
		tl.MaxLayer = m.Int()
		tl.LibraryVersions = m.VectorString()
		r = tl
	case CRC_phone_phoneCall:
		tl := TL_phone_phoneCall{}
		tl.PhoneCall = m.Object()
		tl.Users = m.Vector()
		r = tl
	case CRC_upload_cdnFileReuploadNeeded:
		tl := TL_upload_cdnFileReuploadNeeded{}
		tl.RequestToken = m.StringBytes()
		r = tl
	case CRC_upload_cdnFile:
		tl := TL_upload_cdnFile{}
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_cdnPublicKey:
		tl := TL_cdnPublicKey{}
		tl.DcID = m.Int()
		tl.PublicKey = m.String()
		r = tl
	case CRC_cdnConfig:
		tl := TL_cdnConfig{}
		tl.PublicKeys = m.Vector()
		r = tl
	case CRC_langPackString:
		tl := TL_langPackString{}
		tl.Key = m.String()
		tl.Value = m.String()
		r = tl
	case CRC_langPackStringPluralized:
		tl := TL_langPackStringPluralized{}
		flags := m.Int()
		tl.Key = m.String()
		if flags&(1<<0) != 0 {
			tl.ZeroValue = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.OneValue = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.TwoValue = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.FewValue = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.ManyValue = Some(m.String())
		}
		tl.OtherValue = m.String()
		r = tl
	case CRC_langPackStringDeleted:
		tl := TL_langPackStringDeleted{}
		tl.Key = m.String()
		r = tl
	case CRC_langPackDifference:
		tl := TL_langPackDifference{}
		tl.LangCode = m.String()
		tl.FromVersion = m.Int()
		tl.Version = m.Int()
		tl.Strings = m.Vector()
		r = tl
	case CRC_langPackLanguage:
		tl := TL_langPackLanguage{}
		flags := m.Int()
		tl.Official = flags&(1<<0) != 0
		tl.Rtl = flags&(1<<2) != 0
		tl.Beta = flags&(1<<3) != 0
		tl.Name = m.String()
		tl.NativeName = m.String()
		tl.LangCode = m.String()
		if flags&(1<<1) != 0 {
			tl.BaseLangCode = Some(m.String())
		}
		tl.PluralCode = m.String()
		tl.StringsCount = m.Int()
		tl.TranslatedCount = m.Int()
		tl.TranslationsUrl = m.String()
		r = tl
	case CRC_channelAdminLogEventActionChangeTitle:
		tl := TL_channelAdminLogEventActionChangeTitle{}
		tl.PrevValue = m.String()
		tl.NewValue = m.String()
		r = tl
	case CRC_channelAdminLogEventActionChangeAbout:
		tl := TL_channelAdminLogEventActionChangeAbout{}
		tl.PrevValue = m.String()
		tl.NewValue = m.String()
		r = tl
	case CRC_channelAdminLogEventActionChangeUsername:
		tl := TL_channelAdminLogEventActionChangeUsername{}
		tl.PrevValue = m.String()
		tl.NewValue = m.String()
		r = tl
	case CRC_channelAdminLogEventActionChangePhoto:
		tl := TL_channelAdminLogEventActionChangePhoto{}
		tl.PrevPhoto = m.Object()
		tl.NewPhoto = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionToggleInvites:
		tl := TL_channelAdminLogEventActionToggleInvites{}
		tl.NewValue = m.Bool()
		r = tl
	case CRC_channelAdminLogEventActionToggleSignatures:
		tl := TL_channelAdminLogEventActionToggleSignatures{}
		tl.NewValue = m.Bool()
		r = tl
	case CRC_channelAdminLogEventActionUpdatePinned:
		tl := TL_channelAdminLogEventActionUpdatePinned{}
		tl.Message = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionEditMessage:
		tl := TL_channelAdminLogEventActionEditMessage{}
		tl.PrevMessage = m.Object()
		tl.NewMessage = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionDeleteMessage:
		tl := TL_channelAdminLogEventActionDeleteMessage{}
		tl.Message = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionParticipantJoin:
		tl := TL_channelAdminLogEventActionParticipantJoin{}
		r = tl
	case CRC_channelAdminLogEventActionParticipantLeave:
		tl := TL_channelAdminLogEventActionParticipantLeave{}
		r = tl
	case CRC_channelAdminLogEventActionParticipantInvite:
		tl := TL_channelAdminLogEventActionParticipantInvite{}
		tl.Participant = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionParticipantToggleBan:
		tl := TL_channelAdminLogEventActionParticipantToggleBan{}
		tl.PrevParticipant = m.Object()
		tl.NewParticipant = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionParticipantToggleAdmin:
		tl := TL_channelAdminLogEventActionParticipantToggleAdmin{}
		tl.PrevParticipant = m.Object()
		tl.NewParticipant = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionChangeStickerSet:
		tl := TL_channelAdminLogEventActionChangeStickerSet{}
		tl.PrevStickerset = m.Object()
		tl.NewStickerset = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionTogglePreHistoryHidden:
		tl := TL_channelAdminLogEventActionTogglePreHistoryHidden{}
		tl.NewValue = m.Bool()
		r = tl
	case CRC_channelAdminLogEventActionDefaultBannedRights:
		tl := TL_channelAdminLogEventActionDefaultBannedRights{}
		tl.PrevBannedRights = m.Object()
		tl.NewBannedRights = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionStopPoll:
		tl := TL_channelAdminLogEventActionStopPoll{}
		tl.Message = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionChangeLinkedChat:
		tl := TL_channelAdminLogEventActionChangeLinkedChat{}
		tl.PrevValue = m.Long()
		tl.NewValue = m.Long()
		r = tl
	case CRC_channelAdminLogEventActionChangeLocation:
		tl := TL_channelAdminLogEventActionChangeLocation{}
		tl.PrevValue = m.Object()
		tl.NewValue = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionToggleSlowMode:
		tl := TL_channelAdminLogEventActionToggleSlowMode{}
		tl.PrevValue = m.Int()
		tl.NewValue = m.Int()
		r = tl
	case CRC_channelAdminLogEventActionStartGroupCall:
		tl := TL_channelAdminLogEventActionStartGroupCall{}
		tl.Call = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionDiscardGroupCall:
		tl := TL_channelAdminLogEventActionDiscardGroupCall{}
		tl.Call = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionParticipantMute:
		tl := TL_channelAdminLogEventActionParticipantMute{}
		tl.Participant = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionParticipantUnmute:
		tl := TL_channelAdminLogEventActionParticipantUnmute{}
		tl.Participant = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionToggleGroupCallSetting:
		tl := TL_channelAdminLogEventActionToggleGroupCallSetting{}
		tl.JoinMuted = m.Bool()
		r = tl
	case CRC_channelAdminLogEventActionParticipantJoinByInvite:
		tl := TL_channelAdminLogEventActionParticipantJoinByInvite{}
		flags := m.Int()
		tl.ViaChatlist = flags&(1<<0) != 0
		tl.Invite = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionExportedInviteDelete:
		tl := TL_channelAdminLogEventActionExportedInviteDelete{}
		tl.Invite = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionExportedInviteRevoke:
		tl := TL_channelAdminLogEventActionExportedInviteRevoke{}
		tl.Invite = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionExportedInviteEdit:
		tl := TL_channelAdminLogEventActionExportedInviteEdit{}
		tl.PrevInvite = m.Object()
		tl.NewInvite = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionParticipantVolume:
		tl := TL_channelAdminLogEventActionParticipantVolume{}
		tl.Participant = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionChangeHistoryTTL:
		tl := TL_channelAdminLogEventActionChangeHistoryTTL{}
		tl.PrevValue = m.Int()
		tl.NewValue = m.Int()
		r = tl
	case CRC_channelAdminLogEventActionParticipantJoinByRequest:
		tl := TL_channelAdminLogEventActionParticipantJoinByRequest{}
		tl.Invite = m.Object()
		tl.ApprovedBy = m.Long()
		r = tl
	case CRC_channelAdminLogEventActionToggleNoForwards:
		tl := TL_channelAdminLogEventActionToggleNoForwards{}
		tl.NewValue = m.Bool()
		r = tl
	case CRC_channelAdminLogEventActionSendMessage:
		tl := TL_channelAdminLogEventActionSendMessage{}
		tl.Message = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionChangeAvailableReactions:
		tl := TL_channelAdminLogEventActionChangeAvailableReactions{}
		tl.PrevValue = m.Object()
		tl.NewValue = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionChangeUsernames:
		tl := TL_channelAdminLogEventActionChangeUsernames{}
		tl.PrevValue = m.VectorString()
		tl.NewValue = m.VectorString()
		r = tl
	case CRC_channelAdminLogEventActionToggleForum:
		tl := TL_channelAdminLogEventActionToggleForum{}
		tl.NewValue = m.Bool()
		r = tl
	case CRC_channelAdminLogEventActionCreateTopic:
		tl := TL_channelAdminLogEventActionCreateTopic{}
		tl.Topic = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionEditTopic:
		tl := TL_channelAdminLogEventActionEditTopic{}
		tl.PrevTopic = m.Object()
		tl.NewTopic = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionDeleteTopic:
		tl := TL_channelAdminLogEventActionDeleteTopic{}
		tl.Topic = m.Object()
		r = tl
	case CRC_channelAdminLogEventActionPinTopic:
		tl := TL_channelAdminLogEventActionPinTopic{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.PrevTopic = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.NewTopic = m.Object()
		}
		r = tl
	case CRC_channelAdminLogEventActionToggleAntiSpam:
		tl := TL_channelAdminLogEventActionToggleAntiSpam{}
		tl.NewValue = m.Bool()
		r = tl
	case CRC_channelAdminLogEventActionChangeColor:
		tl := TL_channelAdminLogEventActionChangeColor{}
		tl.PrevValue = m.Int()
		tl.NewValue = m.Int()
		r = tl
	case CRC_channelAdminLogEventActionChangeBackgroundEmoji:
		tl := TL_channelAdminLogEventActionChangeBackgroundEmoji{}
		tl.PrevValue = m.Long()
		tl.NewValue = m.Long()
		r = tl
	case CRC_channelAdminLogEvent:
		tl := TL_channelAdminLogEvent{}
		tl.ID = m.Long()
		tl.Date = m.Int()
		tl.UserID = m.Long()
		tl.Action = m.Object()
		r = tl
	case CRC_channels_adminLogResults:
		tl := TL_channels_adminLogResults{}
		tl.Events = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_channelAdminLogEventsFilter:
		tl := TL_channelAdminLogEventsFilter{}
		flags := m.Int()
		tl.Join = flags&(1<<0) != 0
		tl.Leave = flags&(1<<1) != 0
		tl.Invite = flags&(1<<2) != 0
		tl.Ban = flags&(1<<3) != 0
		tl.Unban = flags&(1<<4) != 0
		tl.Kick = flags&(1<<5) != 0
		tl.Unkick = flags&(1<<6) != 0
		tl.Promote = flags&(1<<7) != 0
		tl.Demote = flags&(1<<8) != 0
		tl.Info = flags&(1<<9) != 0
		tl.Settings = flags&(1<<10) != 0
		tl.Pinned = flags&(1<<11) != 0
		tl.Edit = flags&(1<<12) != 0
		tl.Delete = flags&(1<<13) != 0
		tl.GroupCall = flags&(1<<14) != 0
		tl.Invites = flags&(1<<15) != 0
		tl.Send = flags&(1<<16) != 0
		tl.Forums = flags&(1<<17) != 0
		r = tl
	case CRC_popularContact:
		tl := TL_popularContact{}
		tl.ClientID = m.Long()
		tl.Importers = m.Int()
		r = tl
	case CRC_messages_favedStickersNotModified:
		tl := TL_messages_favedStickersNotModified{}
		r = tl
	case CRC_messages_favedStickers:
		tl := TL_messages_favedStickers{}
		tl.Hash = m.Long()
		tl.Packs = m.Vector()
		tl.Stickers = m.Vector()
		r = tl
	case CRC_recentMeUrlUnknown:
		tl := TL_recentMeUrlUnknown{}
		tl.Url = m.String()
		r = tl
	case CRC_recentMeUrlUser:
		tl := TL_recentMeUrlUser{}
		tl.Url = m.String()
		tl.UserID = m.Long()
		r = tl
	case CRC_recentMeUrlChat:
		tl := TL_recentMeUrlChat{}
		tl.Url = m.String()
		tl.ChatID = m.Long()
		r = tl
	case CRC_recentMeUrlChatInvite:
		tl := TL_recentMeUrlChatInvite{}
		tl.Url = m.String()
		tl.ChatInvite = m.Object()
		r = tl
	case CRC_recentMeUrlStickerSet:
		tl := TL_recentMeUrlStickerSet{}
		tl.Url = m.String()
		tl.Set = m.Object()
		r = tl
	case CRC_help_recentMeUrls:
		tl := TL_help_recentMeUrls{}
		tl.Urls = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_inputSingleMedia:
		tl := TL_inputSingleMedia{}
		flags := m.Int()
		tl.Media = m.Object()
		tl.RandomID = m.Long()
		tl.Message = m.String()
		if flags&(1<<0) != 0 {
			tl.Entities = m.Vector()
		}
		r = tl
	case CRC_webAuthorization:
		tl := TL_webAuthorization{}
		tl.Hash = m.Long()
		tl.BotID = m.Long()
		tl.Domain = m.String()
		tl.Browser = m.String()
		tl.Platform = m.String()
		tl.DateCreated = m.Int()
		tl.DateActive = m.Int()
		tl.Ip = m.String()
		tl.Region = m.String()
		r = tl
	case CRC_account_webAuthorizations:
		tl := TL_account_webAuthorizations{}
		tl.Authorizations = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_inputMessageID:
		tl := TL_inputMessageID{}
		tl.ID = m.Int()
		r = tl
	case CRC_inputMessageReplyTo:
		tl := TL_inputMessageReplyTo{}
		tl.ID = m.Int()
		r = tl
	case CRC_inputMessagePinned:
		tl := TL_inputMessagePinned{}
		r = tl
	case CRC_inputMessageCallbackQuery:
		tl := TL_inputMessageCallbackQuery{}
		tl.ID = m.Int()
		tl.QueryID = m.Long()
		r = tl
	case CRC_inputDialogPeer:
		tl := TL_inputDialogPeer{}
		tl.Peer = m.Object()
		r = tl
	case CRC_inputDialogPeerFolder:
		tl := TL_inputDialogPeerFolder{}
		tl.FolderID = m.Int()
		r = tl
	case CRC_dialogPeer:
		tl := TL_dialogPeer{}
		tl.Peer = m.Object()
		r = tl
	case CRC_dialogPeerFolder:
		tl := TL_dialogPeerFolder{}
		tl.FolderID = m.Int()
		r = tl
	case CRC_messages_foundStickerSetsNotModified:
		tl := TL_messages_foundStickerSetsNotModified{}
		r = tl
	case CRC_messages_foundStickerSets:
		tl := TL_messages_foundStickerSets{}
		tl.Hash = m.Long()
		tl.Sets = m.Vector()
		r = tl
	case CRC_fileHash:
		tl := TL_fileHash{}
		tl.Offset = m.Long()
		tl.Limit = m.Int()
		tl.Hash = m.StringBytes()
		r = tl
	case CRC_inputClientProxy:
		tl := TL_inputClientProxy{}
		tl.Address = m.String()
		tl.Port = m.Int()
		r = tl
	case CRC_help_termsOfServiceUpdateEmpty:
		tl := TL_help_termsOfServiceUpdateEmpty{}
		tl.Expires = m.Int()
		r = tl
	case CRC_help_termsOfServiceUpdate:
		tl := TL_help_termsOfServiceUpdate{}
		tl.Expires = m.Int()
		tl.TermsOfService = m.Object()
		r = tl
	case CRC_inputSecureFileUploaded:
		tl := TL_inputSecureFileUploaded{}
		tl.ID = m.Long()
		tl.Parts = m.Int()
		tl.Md5Checksum = m.String()
		tl.FileHash = m.StringBytes()
		tl.Secret = m.StringBytes()
		r = tl
	case CRC_inputSecureFile:
		tl := TL_inputSecureFile{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_secureFileEmpty:
		tl := TL_secureFileEmpty{}
		r = tl
	case CRC_secureFile:
		tl := TL_secureFile{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Size = m.Long()
		tl.DcID = m.Int()
		tl.Date = m.Int()
		tl.FileHash = m.StringBytes()
		tl.Secret = m.StringBytes()
		r = tl
	case CRC_secureData:
		tl := TL_secureData{}
		tl.Data = m.StringBytes()
		tl.DataHash = m.StringBytes()
		tl.Secret = m.StringBytes()
		r = tl
	case CRC_securePlainPhone:
		tl := TL_securePlainPhone{}
		tl.Phone = m.String()
		r = tl
	case CRC_securePlainEmail:
		tl := TL_securePlainEmail{}
		tl.Email = m.String()
		r = tl
	case CRC_secureValueTypePersonalDetails:
		tl := TL_secureValueTypePersonalDetails{}
		r = tl
	case CRC_secureValueTypePassport:
		tl := TL_secureValueTypePassport{}
		r = tl
	case CRC_secureValueTypeDriverLicense:
		tl := TL_secureValueTypeDriverLicense{}
		r = tl
	case CRC_secureValueTypeIdentityCard:
		tl := TL_secureValueTypeIdentityCard{}
		r = tl
	case CRC_secureValueTypeInternalPassport:
		tl := TL_secureValueTypeInternalPassport{}
		r = tl
	case CRC_secureValueTypeAddress:
		tl := TL_secureValueTypeAddress{}
		r = tl
	case CRC_secureValueTypeUtilityBill:
		tl := TL_secureValueTypeUtilityBill{}
		r = tl
	case CRC_secureValueTypeBankStatement:
		tl := TL_secureValueTypeBankStatement{}
		r = tl
	case CRC_secureValueTypeRentalAgreement:
		tl := TL_secureValueTypeRentalAgreement{}
		r = tl
	case CRC_secureValueTypePassportRegistration:
		tl := TL_secureValueTypePassportRegistration{}
		r = tl
	case CRC_secureValueTypeTemporaryRegistration:
		tl := TL_secureValueTypeTemporaryRegistration{}
		r = tl
	case CRC_secureValueTypePhone:
		tl := TL_secureValueTypePhone{}
		r = tl
	case CRC_secureValueTypeEmail:
		tl := TL_secureValueTypeEmail{}
		r = tl
	case CRC_secureValue:
		tl := TL_secureValue{}
		flags := m.Int()
		tl.Type = m.Object()
		if flags&(1<<0) != 0 {
			tl.Data = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.FrontSide = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.ReverseSide = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.Selfie = m.Object()
		}
		if flags&(1<<6) != 0 {
			tl.Translation = m.Vector()
		}
		if flags&(1<<4) != 0 {
			tl.Files = m.Vector()
		}
		if flags&(1<<5) != 0 {
			tl.PlainData = m.Object()
		}
		tl.Hash = m.StringBytes()
		r = tl
	case CRC_inputSecureValue:
		tl := TL_inputSecureValue{}
		flags := m.Int()
		tl.Type = m.Object()
		if flags&(1<<0) != 0 {
			tl.Data = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.FrontSide = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.ReverseSide = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.Selfie = m.Object()
		}
		if flags&(1<<6) != 0 {
			tl.Translation = m.Vector()
		}
		if flags&(1<<4) != 0 {
			tl.Files = m.Vector()
		}
		if flags&(1<<5) != 0 {
			tl.PlainData = m.Object()
		}
		r = tl
	case CRC_secureValueHash:
		tl := TL_secureValueHash{}
		tl.Type = m.Object()
		tl.Hash = m.StringBytes()
		r = tl
	case CRC_secureValueErrorData:
		tl := TL_secureValueErrorData{}
		tl.Type = m.Object()
		tl.DataHash = m.StringBytes()
		tl.Field = m.String()
		tl.Text = m.String()
		r = tl
	case CRC_secureValueErrorFrontSide:
		tl := TL_secureValueErrorFrontSide{}
		tl.Type = m.Object()
		tl.FileHash = m.StringBytes()
		tl.Text = m.String()
		r = tl
	case CRC_secureValueErrorReverseSide:
		tl := TL_secureValueErrorReverseSide{}
		tl.Type = m.Object()
		tl.FileHash = m.StringBytes()
		tl.Text = m.String()
		r = tl
	case CRC_secureValueErrorSelfie:
		tl := TL_secureValueErrorSelfie{}
		tl.Type = m.Object()
		tl.FileHash = m.StringBytes()
		tl.Text = m.String()
		r = tl
	case CRC_secureValueErrorFile:
		tl := TL_secureValueErrorFile{}
		tl.Type = m.Object()
		tl.FileHash = m.StringBytes()
		tl.Text = m.String()
		r = tl
	case CRC_secureValueErrorFiles:
		tl := TL_secureValueErrorFiles{}
		tl.Type = m.Object()
		tl.FileHash = m.VectorBytes()
		tl.Text = m.String()
		r = tl
	case CRC_secureValueError:
		tl := TL_secureValueError{}
		tl.Type = m.Object()
		tl.Hash = m.StringBytes()
		tl.Text = m.String()
		r = tl
	case CRC_secureValueErrorTranslationFile:
		tl := TL_secureValueErrorTranslationFile{}
		tl.Type = m.Object()
		tl.FileHash = m.StringBytes()
		tl.Text = m.String()
		r = tl
	case CRC_secureValueErrorTranslationFiles:
		tl := TL_secureValueErrorTranslationFiles{}
		tl.Type = m.Object()
		tl.FileHash = m.VectorBytes()
		tl.Text = m.String()
		r = tl
	case CRC_secureCredentialsEncrypted:
		tl := TL_secureCredentialsEncrypted{}
		tl.Data = m.StringBytes()
		tl.Hash = m.StringBytes()
		tl.Secret = m.StringBytes()
		r = tl
	case CRC_account_authorizationForm:
		tl := TL_account_authorizationForm{}
		flags := m.Int()
		tl.RequiredTypes = m.Vector()
		tl.Values = m.Vector()
		tl.Errors = m.Vector()
		tl.Users = m.Vector()
		if flags&(1<<0) != 0 {
			tl.PrivacyPolicyUrl = Some(m.String())
		}
		r = tl
	case CRC_account_sentEmailCode:
		tl := TL_account_sentEmailCode{}
		tl.EmailPattern = m.String()
		tl.Length = m.Int()
		r = tl
	case CRC_help_deepLinkInfoEmpty:
		tl := TL_help_deepLinkInfoEmpty{}
		r = tl
	case CRC_help_deepLinkInfo:
		tl := TL_help_deepLinkInfo{}
		flags := m.Int()
		tl.UpdateApp = flags&(1<<0) != 0
		tl.Message = m.String()
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		r = tl
	case CRC_savedPhoneContact:
		tl := TL_savedPhoneContact{}
		tl.Phone = m.String()
		tl.FirstName = m.String()
		tl.LastName = m.String()
		tl.Date = m.Int()
		r = tl
	case CRC_account_takeout:
		tl := TL_account_takeout{}
		tl.ID = m.Long()
		r = tl
	case CRC_passwordKdfAlgoUnknown:
		tl := TL_passwordKdfAlgoUnknown{}
		r = tl
	case CRC_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow:
		tl := TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow{}
		tl.Salt1 = m.StringBytes()
		tl.Salt2 = m.StringBytes()
		tl.G = m.Int()
		tl.P = m.StringBytes()
		r = tl
	case CRC_securePasswordKdfAlgoUnknown:
		tl := TL_securePasswordKdfAlgoUnknown{}
		r = tl
	case CRC_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000:
		tl := TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000{}
		tl.Salt = m.StringBytes()
		r = tl
	case CRC_securePasswordKdfAlgoSHA512:
		tl := TL_securePasswordKdfAlgoSHA512{}
		tl.Salt = m.StringBytes()
		r = tl
	case CRC_secureSecretSettings:
		tl := TL_secureSecretSettings{}
		tl.SecureAlgo = m.Object()
		tl.SecureSecret = m.StringBytes()
		tl.SecureSecretID = m.Long()
		r = tl
	case CRC_inputCheckPasswordEmpty:
		tl := TL_inputCheckPasswordEmpty{}
		r = tl
	case CRC_inputCheckPasswordSRP:
		tl := TL_inputCheckPasswordSRP{}
		tl.SrpID = m.Long()
		tl.A = m.StringBytes()
		tl.M1 = m.StringBytes()
		r = tl
	case CRC_secureRequiredType:
		tl := TL_secureRequiredType{}
		flags := m.Int()
		tl.NativeNames = flags&(1<<0) != 0
		tl.SelfieRequired = flags&(1<<1) != 0
		tl.TranslationRequired = flags&(1<<2) != 0
		tl.Type = m.Object()
		r = tl
	case CRC_secureRequiredTypeOneOf:
		tl := TL_secureRequiredTypeOneOf{}
		tl.Types = m.Vector()
		r = tl
	case CRC_help_passportConfigNotModified:
		tl := TL_help_passportConfigNotModified{}
		r = tl
	case CRC_help_passportConfig:
		tl := TL_help_passportConfig{}
		tl.Hash = m.Int()
		tl.CountriesLangs = m.Object()
		r = tl
	case CRC_inputAppEvent:
		tl := TL_inputAppEvent{}
		tl.Time = m.Double()
		tl.Type = m.String()
		tl.Peer = m.Long()
		tl.Data = m.Object()
		r = tl
	case CRC_jsonObjectValue:
		tl := TL_jsonObjectValue{}
		tl.Key = m.String()
		tl.Value = m.Object()
		r = tl
	case CRC_jsonNull:
		tl := TL_jsonNull{}
		r = tl
	case CRC_jsonBool:
		tl := TL_jsonBool{}
		tl.Value = m.Bool()
		r = tl
	case CRC_jsonNumber:
		tl := TL_jsonNumber{}
		tl.Value = m.Double()
		r = tl
	case CRC_jsonString:
		tl := TL_jsonString{}
		tl.Value = m.String()
		r = tl
	case CRC_jsonArray:
		tl := TL_jsonArray{}
		tl.Value = m.Vector()
		r = tl
	case CRC_jsonObject:
		tl := TL_jsonObject{}
		tl.Value = m.Vector()
		r = tl
	case CRC_pageTableCell:
		tl := TL_pageTableCell{}
		flags := m.Int()
		tl.Header = flags&(1<<0) != 0
		tl.AlignCenter = flags&(1<<3) != 0
		tl.AlignRight = flags&(1<<4) != 0
		tl.ValignMiddle = flags&(1<<5) != 0
		tl.ValignBottom = flags&(1<<6) != 0
		if flags&(1<<7) != 0 {
			tl.Text = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Colspan = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.Rowspan = Some(m.Int())
		}
		r = tl
	case CRC_pageTableRow:
		tl := TL_pageTableRow{}
		tl.Cells = m.Vector()
		r = tl
	case CRC_pageCaption:
		tl := TL_pageCaption{}
		tl.Text = m.Object()
		tl.Credit = m.Object()
		r = tl
	case CRC_pageListItemText:
		tl := TL_pageListItemText{}
		tl.Text = m.Object()
		r = tl
	case CRC_pageListItemBlocks:
		tl := TL_pageListItemBlocks{}
		tl.Blocks = m.Vector()
		r = tl
	case CRC_pageListOrderedItemText:
		tl := TL_pageListOrderedItemText{}
		tl.Num = m.String()
		tl.Text = m.Object()
		r = tl
	case CRC_pageListOrderedItemBlocks:
		tl := TL_pageListOrderedItemBlocks{}
		tl.Num = m.String()
		tl.Blocks = m.Vector()
		r = tl
	case CRC_pageRelatedArticle:
		tl := TL_pageRelatedArticle{}
		flags := m.Int()
		tl.Url = m.String()
		tl.WebpageID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Description = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.PhotoID = Some(m.Long())
		}
		if flags&(1<<3) != 0 {
			tl.Author = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.PublishedDate = Some(m.Int())
		}
		r = tl
	case CRC_page:
		tl := TL_page{}
		flags := m.Int()
		tl.Part = flags&(1<<0) != 0
		tl.Rtl = flags&(1<<1) != 0
		tl.V2 = flags&(1<<2) != 0
		tl.Url = m.String()
		tl.Blocks = m.Vector()
		tl.Photos = m.Vector()
		tl.Documents = m.Vector()
		if flags&(1<<3) != 0 {
			tl.Views = Some(m.Int())
		}
		r = tl
	case CRC_help_supportName:
		tl := TL_help_supportName{}
		tl.Name = m.String()
		r = tl
	case CRC_help_userInfoEmpty:
		tl := TL_help_userInfoEmpty{}
		r = tl
	case CRC_help_userInfo:
		tl := TL_help_userInfo{}
		tl.Message = m.String()
		tl.Entities = m.Vector()
		tl.Author = m.String()
		tl.Date = m.Int()
		r = tl
	case CRC_pollAnswer:
		tl := TL_pollAnswer{}
		tl.Text = m.String()
		tl.Option = m.StringBytes()
		r = tl
	case CRC_poll:
		tl := TL_poll{}
		tl.ID = m.Long()
		flags := m.Int()
		tl.Closed = flags&(1<<0) != 0
		tl.PublicVoters = flags&(1<<1) != 0
		tl.MultipleChoice = flags&(1<<2) != 0
		tl.Quiz = flags&(1<<3) != 0
		tl.Question = m.String()
		tl.Answers = m.Vector()
		if flags&(1<<4) != 0 {
			tl.ClosePeriod = Some(m.Int())
		}
		if flags&(1<<5) != 0 {
			tl.CloseDate = Some(m.Int())
		}
		r = tl
	case CRC_pollAnswerVoters:
		tl := TL_pollAnswerVoters{}
		flags := m.Int()
		tl.Chosen = flags&(1<<0) != 0
		tl.Correct = flags&(1<<1) != 0
		tl.Option = m.StringBytes()
		tl.Voters = m.Int()
		r = tl
	case CRC_pollResults:
		tl := TL_pollResults{}
		flags := m.Int()
		tl.Min = flags&(1<<0) != 0
		if flags&(1<<1) != 0 {
			tl.Results = m.Vector()
		}
		if flags&(1<<2) != 0 {
			tl.TotalVoters = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.RecentVoters = m.Vector()
		}
		if flags&(1<<4) != 0 {
			tl.Solution = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.SolutionEntities = m.Vector()
		}
		r = tl
	case CRC_chatOnlines:
		tl := TL_chatOnlines{}
		tl.Onlines = m.Int()
		r = tl
	case CRC_statsURL:
		tl := TL_statsURL{}
		tl.Url = m.String()
		r = tl
	case CRC_chatAdminRights:
		tl := TL_chatAdminRights{}
		flags := m.Int()
		tl.ChangeInfo = flags&(1<<0) != 0
		tl.PostMessages = flags&(1<<1) != 0
		tl.EditMessages = flags&(1<<2) != 0
		tl.DeleteMessages = flags&(1<<3) != 0
		tl.BanUsers = flags&(1<<4) != 0
		tl.InviteUsers = flags&(1<<5) != 0
		tl.PinMessages = flags&(1<<7) != 0
		tl.AddAdmins = flags&(1<<9) != 0
		tl.Anonymous = flags&(1<<10) != 0
		tl.ManageCall = flags&(1<<11) != 0
		tl.Other = flags&(1<<12) != 0
		tl.ManageTopics = flags&(1<<13) != 0
		tl.PostStories = flags&(1<<14) != 0
		tl.EditStories = flags&(1<<15) != 0
		tl.DeleteStories = flags&(1<<16) != 0
		r = tl
	case CRC_chatBannedRights:
		tl := TL_chatBannedRights{}
		flags := m.Int()
		tl.ViewMessages = flags&(1<<0) != 0
		tl.SendMessages = flags&(1<<1) != 0
		tl.SendMedia = flags&(1<<2) != 0
		tl.SendStickers = flags&(1<<3) != 0
		tl.SendGifs = flags&(1<<4) != 0
		tl.SendGames = flags&(1<<5) != 0
		tl.SendInline = flags&(1<<6) != 0
		tl.EmbedLinks = flags&(1<<7) != 0
		tl.SendPolls = flags&(1<<8) != 0
		tl.ChangeInfo = flags&(1<<10) != 0
		tl.InviteUsers = flags&(1<<15) != 0
		tl.PinMessages = flags&(1<<17) != 0
		tl.ManageTopics = flags&(1<<18) != 0
		tl.SendPhotos = flags&(1<<19) != 0
		tl.SendVideos = flags&(1<<20) != 0
		tl.SendRoundvideos = flags&(1<<21) != 0
		tl.SendAudios = flags&(1<<22) != 0
		tl.SendVoices = flags&(1<<23) != 0
		tl.SendDocs = flags&(1<<24) != 0
		tl.SendPlain = flags&(1<<25) != 0
		tl.UntilDate = m.Int()
		r = tl
	case CRC_inputWallPaper:
		tl := TL_inputWallPaper{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputWallPaperSlug:
		tl := TL_inputWallPaperSlug{}
		tl.Slug = m.String()
		r = tl
	case CRC_inputWallPaperNoFile:
		tl := TL_inputWallPaperNoFile{}
		tl.ID = m.Long()
		r = tl
	case CRC_account_wallPapersNotModified:
		tl := TL_account_wallPapersNotModified{}
		r = tl
	case CRC_account_wallPapers:
		tl := TL_account_wallPapers{}
		tl.Hash = m.Long()
		tl.Wallpapers = m.Vector()
		r = tl
	case CRC_codeSettings:
		tl := TL_codeSettings{}
		flags := m.Int()
		tl.AllowFlashcall = flags&(1<<0) != 0
		tl.CurrentNumber = flags&(1<<1) != 0
		tl.AllowAppHash = flags&(1<<4) != 0
		tl.AllowMissedCall = flags&(1<<5) != 0
		tl.AllowFirebase = flags&(1<<7) != 0
		if flags&(1<<6) != 0 {
			tl.LogoutTokens = m.VectorBytes()
		}
		if flags&(1<<8) != 0 {
			tl.Token = Some(m.String())
		}
		if flags&(1<<8) != 0 {
			tl.AppSandbox = Some(m.Bool())
		}
		r = tl
	case CRC_wallPaperSettings:
		tl := TL_wallPaperSettings{}
		flags := m.Int()
		tl.Blur = flags&(1<<1) != 0
		tl.Motion = flags&(1<<2) != 0
		if flags&(1<<0) != 0 {
			tl.BackgroundColor = Some(m.Int())
		}
		if flags&(1<<4) != 0 {
			tl.SecondBackgroundColor = Some(m.Int())
		}
		if flags&(1<<5) != 0 {
			tl.ThirdBackgroundColor = Some(m.Int())
		}
		if flags&(1<<6) != 0 {
			tl.FourthBackgroundColor = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.Intensity = Some(m.Int())
		}
		if flags&(1<<4) != 0 {
			tl.Rotation = Some(m.Int())
		}
		r = tl
	case CRC_autoDownloadSettings:
		tl := TL_autoDownloadSettings{}
		flags := m.Int()
		tl.Disabled = flags&(1<<0) != 0
		tl.VideoPreloadLarge = flags&(1<<1) != 0
		tl.AudioPreloadNext = flags&(1<<2) != 0
		tl.PhonecallsLessData = flags&(1<<3) != 0
		tl.StoriesPreload = flags&(1<<4) != 0
		tl.PhotoSizeMax = m.Int()
		tl.VideoSizeMax = m.Long()
		tl.FileSizeMax = m.Long()
		tl.VideoUploadMaxbitrate = m.Int()
		tl.SmallQueueActiveOperationsMax = m.Int()
		tl.LargeQueueActiveOperationsMax = m.Int()
		r = tl
	case CRC_account_autoDownloadSettings:
		tl := TL_account_autoDownloadSettings{}
		tl.Low = m.Object()
		tl.Medium = m.Object()
		tl.High = m.Object()
		r = tl
	case CRC_emojiKeyword:
		tl := TL_emojiKeyword{}
		tl.Keyword = m.String()
		tl.Emoticons = m.VectorString()
		r = tl
	case CRC_emojiKeywordDeleted:
		tl := TL_emojiKeywordDeleted{}
		tl.Keyword = m.String()
		tl.Emoticons = m.VectorString()
		r = tl
	case CRC_emojiKeywordsDifference:
		tl := TL_emojiKeywordsDifference{}
		tl.LangCode = m.String()
		tl.FromVersion = m.Int()
		tl.Version = m.Int()
		tl.Keywords = m.Vector()
		r = tl
	case CRC_emojiURL:
		tl := TL_emojiURL{}
		tl.Url = m.String()
		r = tl
	case CRC_emojiLanguage:
		tl := TL_emojiLanguage{}
		tl.LangCode = m.String()
		r = tl
	case CRC_folder:
		tl := TL_folder{}
		flags := m.Int()
		tl.AutofillNewBroadcasts = flags&(1<<0) != 0
		tl.AutofillPublicGroups = flags&(1<<1) != 0
		tl.AutofillNewCorrespondents = flags&(1<<2) != 0
		tl.ID = m.Int()
		tl.Title = m.String()
		if flags&(1<<3) != 0 {
			tl.Photo = m.Object()
		}
		r = tl
	case CRC_inputFolderPeer:
		tl := TL_inputFolderPeer{}
		tl.Peer = m.Object()
		tl.FolderID = m.Int()
		r = tl
	case CRC_folderPeer:
		tl := TL_folderPeer{}
		tl.Peer = m.Object()
		tl.FolderID = m.Int()
		r = tl
	case CRC_messages_searchCounter:
		tl := TL_messages_searchCounter{}
		flags := m.Int()
		tl.Inexact = flags&(1<<1) != 0
		tl.Filter = m.Object()
		tl.Count = m.Int()
		r = tl
	case CRC_urlAuthResultRequest:
		tl := TL_urlAuthResultRequest{}
		flags := m.Int()
		tl.RequestWriteAccess = flags&(1<<0) != 0
		tl.Bot = m.Object()
		tl.Domain = m.String()
		r = tl
	case CRC_urlAuthResultAccepted:
		tl := TL_urlAuthResultAccepted{}
		tl.Url = m.String()
		r = tl
	case CRC_urlAuthResultDefault:
		tl := TL_urlAuthResultDefault{}
		r = tl
	case CRC_channelLocationEmpty:
		tl := TL_channelLocationEmpty{}
		r = tl
	case CRC_channelLocation:
		tl := TL_channelLocation{}
		tl.GeoPoint = m.Object()
		tl.Address = m.String()
		r = tl
	case CRC_peerLocated:
		tl := TL_peerLocated{}
		tl.Peer = m.Object()
		tl.Expires = m.Int()
		tl.Distance = m.Int()
		r = tl
	case CRC_peerSelfLocated:
		tl := TL_peerSelfLocated{}
		tl.Expires = m.Int()
		r = tl
	case CRC_restrictionReason:
		tl := TL_restrictionReason{}
		tl.Platform = m.String()
		tl.Reason = m.String()
		tl.Text = m.String()
		r = tl
	case CRC_inputTheme:
		tl := TL_inputTheme{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputThemeSlug:
		tl := TL_inputThemeSlug{}
		tl.Slug = m.String()
		r = tl
	case CRC_theme:
		tl := TL_theme{}
		flags := m.Int()
		tl.Creator = flags&(1<<0) != 0
		tl.Default = flags&(1<<1) != 0
		tl.ForChat = flags&(1<<5) != 0
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Slug = m.String()
		tl.Title = m.String()
		if flags&(1<<2) != 0 {
			tl.Document = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.Settings = m.Vector()
		}
		if flags&(1<<6) != 0 {
			tl.Emoticon = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.InstallsCount = Some(m.Int())
		}
		r = tl
	case CRC_account_themesNotModified:
		tl := TL_account_themesNotModified{}
		r = tl
	case CRC_account_themes:
		tl := TL_account_themes{}
		tl.Hash = m.Long()
		tl.Themes = m.Vector()
		r = tl
	case CRC_auth_loginToken:
		tl := TL_auth_loginToken{}
		tl.Expires = m.Int()
		tl.Token = m.StringBytes()
		r = tl
	case CRC_auth_loginTokenMigrateTo:
		tl := TL_auth_loginTokenMigrateTo{}
		tl.DcID = m.Int()
		tl.Token = m.StringBytes()
		r = tl
	case CRC_auth_loginTokenSuccess:
		tl := TL_auth_loginTokenSuccess{}
		tl.Authorization = m.Object()
		r = tl
	case CRC_account_contentSettings:
		tl := TL_account_contentSettings{}
		flags := m.Int()
		tl.SensitiveEnabled = flags&(1<<0) != 0
		tl.SensitiveCanChange = flags&(1<<1) != 0
		r = tl
	case CRC_messages_inactiveChats:
		tl := TL_messages_inactiveChats{}
		tl.Dates = m.VectorInt()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_baseThemeClassic:
		tl := TL_baseThemeClassic{}
		r = tl
	case CRC_baseThemeDay:
		tl := TL_baseThemeDay{}
		r = tl
	case CRC_baseThemeNight:
		tl := TL_baseThemeNight{}
		r = tl
	case CRC_baseThemeTinted:
		tl := TL_baseThemeTinted{}
		r = tl
	case CRC_baseThemeArctic:
		tl := TL_baseThemeArctic{}
		r = tl
	case CRC_inputThemeSettings:
		tl := TL_inputThemeSettings{}
		flags := m.Int()
		tl.MessageColorsAnimated = flags&(1<<2) != 0
		tl.BaseTheme = m.Object()
		tl.AccentColor = m.Int()
		if flags&(1<<3) != 0 {
			tl.OutboxAccentColor = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.MessageColors = m.VectorInt()
		}
		if flags&(1<<1) != 0 {
			tl.Wallpaper = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.WallpaperSettings = m.Object()
		}
		r = tl
	case CRC_themeSettings:
		tl := TL_themeSettings{}
		flags := m.Int()
		tl.MessageColorsAnimated = flags&(1<<2) != 0
		tl.BaseTheme = m.Object()
		tl.AccentColor = m.Int()
		if flags&(1<<3) != 0 {
			tl.OutboxAccentColor = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.MessageColors = m.VectorInt()
		}
		if flags&(1<<1) != 0 {
			tl.Wallpaper = m.Object()
		}
		r = tl
	case CRC_webPageAttributeTheme:
		tl := TL_webPageAttributeTheme{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Documents = m.Vector()
		}
		if flags&(1<<1) != 0 {
			tl.Settings = m.Object()
		}
		r = tl
	case CRC_webPageAttributeStory:
		tl := TL_webPageAttributeStory{}
		flags := m.Int()
		tl.Peer = m.Object()
		tl.ID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Story = m.Object()
		}
		r = tl
	case CRC_messages_votesList:
		tl := TL_messages_votesList{}
		flags := m.Int()
		tl.Count = m.Int()
		tl.Votes = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		if flags&(1<<0) != 0 {
			tl.NextOffset = Some(m.String())
		}
		r = tl
	case CRC_bankCardOpenUrl:
		tl := TL_bankCardOpenUrl{}
		tl.Url = m.String()
		tl.Name = m.String()
		r = tl
	case CRC_payments_bankCardData:
		tl := TL_payments_bankCardData{}
		tl.Title = m.String()
		tl.OpenUrls = m.Vector()
		r = tl
	case CRC_dialogFilter:
		tl := TL_dialogFilter{}
		flags := m.Int()
		tl.Contacts = flags&(1<<0) != 0
		tl.NonContacts = flags&(1<<1) != 0
		tl.Groups = flags&(1<<2) != 0
		tl.Broadcasts = flags&(1<<3) != 0
		tl.Bots = flags&(1<<4) != 0
		tl.ExcludeMuted = flags&(1<<11) != 0
		tl.ExcludeRead = flags&(1<<12) != 0
		tl.ExcludeArchived = flags&(1<<13) != 0
		tl.ID = m.Int()
		tl.Title = m.String()
		if flags&(1<<25) != 0 {
			tl.Emoticon = Some(m.String())
		}
		tl.PinnedPeers = m.Vector()
		tl.IncludePeers = m.Vector()
		tl.ExcludePeers = m.Vector()
		r = tl
	case CRC_dialogFilterDefault:
		tl := TL_dialogFilterDefault{}
		r = tl
	case CRC_dialogFilterChatlist:
		tl := TL_dialogFilterChatlist{}
		flags := m.Int()
		tl.HasMyInvites = flags&(1<<26) != 0
		tl.ID = m.Int()
		tl.Title = m.String()
		if flags&(1<<25) != 0 {
			tl.Emoticon = Some(m.String())
		}
		tl.PinnedPeers = m.Vector()
		tl.IncludePeers = m.Vector()
		r = tl
	case CRC_dialogFilterSuggested:
		tl := TL_dialogFilterSuggested{}
		tl.Filter = m.Object()
		tl.Description = m.String()
		r = tl
	case CRC_statsDateRangeDays:
		tl := TL_statsDateRangeDays{}
		tl.MinDate = m.Int()
		tl.MaxDate = m.Int()
		r = tl
	case CRC_statsAbsValueAndPrev:
		tl := TL_statsAbsValueAndPrev{}
		tl.Current = m.Double()
		tl.Previous = m.Double()
		r = tl
	case CRC_statsPercentValue:
		tl := TL_statsPercentValue{}
		tl.Part = m.Double()
		tl.Total = m.Double()
		r = tl
	case CRC_statsGraphAsync:
		tl := TL_statsGraphAsync{}
		tl.Token = m.String()
		r = tl
	case CRC_statsGraphError:
		tl := TL_statsGraphError{}
		tl.Error = m.String()
		r = tl
	case CRC_statsGraph:
		tl := TL_statsGraph{}
		flags := m.Int()
		tl.Json = m.Object()
		if flags&(1<<0) != 0 {
			tl.ZoomToken = Some(m.String())
		}
		r = tl
	case CRC_messageInteractionCounters:
		tl := TL_messageInteractionCounters{}
		tl.MsgID = m.Int()
		tl.Views = m.Int()
		tl.Forwards = m.Int()
		r = tl
	case CRC_stats_broadcastStats:
		tl := TL_stats_broadcastStats{}
		tl.Period = m.Object()
		tl.Followers = m.Object()
		tl.ViewsPerPost = m.Object()
		tl.SharesPerPost = m.Object()
		tl.EnabledNotifications = m.Object()
		tl.GrowthGraph = m.Object()
		tl.FollowersGraph = m.Object()
		tl.MuteGraph = m.Object()
		tl.TopHoursGraph = m.Object()
		tl.InteractionsGraph = m.Object()
		tl.IvInteractionsGraph = m.Object()
		tl.ViewsBySourceGraph = m.Object()
		tl.NewFollowersBySourceGraph = m.Object()
		tl.LanguagesGraph = m.Object()
		tl.RecentMessageInteractions = m.Vector()
		r = tl
	case CRC_help_promoDataEmpty:
		tl := TL_help_promoDataEmpty{}
		tl.Expires = m.Int()
		r = tl
	case CRC_help_promoData:
		tl := TL_help_promoData{}
		flags := m.Int()
		tl.Proxy = flags&(1<<0) != 0
		tl.Expires = m.Int()
		tl.Peer = m.Object()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		if flags&(1<<1) != 0 {
			tl.PsaType = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.PsaMessage = Some(m.String())
		}
		r = tl
	case CRC_videoSize:
		tl := TL_videoSize{}
		flags := m.Int()
		tl.Type = m.String()
		tl.W = m.Int()
		tl.H = m.Int()
		tl.Size = m.Int()
		if flags&(1<<0) != 0 {
			tl.VideoStartTs = Some(m.Double())
		}
		r = tl
	case CRC_videoSizeEmojiMarkup:
		tl := TL_videoSizeEmojiMarkup{}
		tl.EmojiID = m.Long()
		tl.BackgroundColors = m.VectorInt()
		r = tl
	case CRC_videoSizeStickerMarkup:
		tl := TL_videoSizeStickerMarkup{}
		tl.Stickerset = m.Object()
		tl.StickerID = m.Long()
		tl.BackgroundColors = m.VectorInt()
		r = tl
	case CRC_statsGroupTopPoster:
		tl := TL_statsGroupTopPoster{}
		tl.UserID = m.Long()
		tl.Messages = m.Int()
		tl.AvgChars = m.Int()
		r = tl
	case CRC_statsGroupTopAdmin:
		tl := TL_statsGroupTopAdmin{}
		tl.UserID = m.Long()
		tl.Deleted = m.Int()
		tl.Kicked = m.Int()
		tl.Banned = m.Int()
		r = tl
	case CRC_statsGroupTopInviter:
		tl := TL_statsGroupTopInviter{}
		tl.UserID = m.Long()
		tl.Invitations = m.Int()
		r = tl
	case CRC_stats_megagroupStats:
		tl := TL_stats_megagroupStats{}
		tl.Period = m.Object()
		tl.Members = m.Object()
		tl.Messages = m.Object()
		tl.Viewers = m.Object()
		tl.Posters = m.Object()
		tl.GrowthGraph = m.Object()
		tl.MembersGraph = m.Object()
		tl.NewMembersBySourceGraph = m.Object()
		tl.LanguagesGraph = m.Object()
		tl.MessagesGraph = m.Object()
		tl.ActionsGraph = m.Object()
		tl.TopHoursGraph = m.Object()
		tl.WeekdaysGraph = m.Object()
		tl.TopPosters = m.Vector()
		tl.TopAdmins = m.Vector()
		tl.TopInviters = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_globalPrivacySettings:
		tl := TL_globalPrivacySettings{}
		flags := m.Int()
		tl.ArchiveAndMuteNewNoncontactPeers = flags&(1<<0) != 0
		tl.KeepArchivedUnmuted = flags&(1<<1) != 0
		tl.KeepArchivedFolders = flags&(1<<2) != 0
		r = tl
	case CRC_help_countryCode:
		tl := TL_help_countryCode{}
		flags := m.Int()
		tl.CountryCode = m.String()
		if flags&(1<<0) != 0 {
			tl.Prefixes = m.VectorString()
		}
		if flags&(1<<1) != 0 {
			tl.Patterns = m.VectorString()
		}
		r = tl
	case CRC_help_country:
		tl := TL_help_country{}
		flags := m.Int()
		tl.Hidden = flags&(1<<0) != 0
		tl.Iso2 = m.String()
		tl.DefaultName = m.String()
		if flags&(1<<1) != 0 {
			tl.Name = Some(m.String())
		}
		tl.CountryCodes = m.Vector()
		r = tl
	case CRC_help_countriesListNotModified:
		tl := TL_help_countriesListNotModified{}
		r = tl
	case CRC_help_countriesList:
		tl := TL_help_countriesList{}
		tl.Countries = m.Vector()
		tl.Hash = m.Int()
		r = tl
	case CRC_messageViews:
		tl := TL_messageViews{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Views = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.Forwards = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.Replies = m.Object()
		}
		r = tl
	case CRC_messages_messageViews:
		tl := TL_messages_messageViews{}
		tl.Views = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_discussionMessage:
		tl := TL_messages_discussionMessage{}
		flags := m.Int()
		tl.Messages = m.Vector()
		if flags&(1<<0) != 0 {
			tl.MaxID = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.ReadInboxMaxID = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.ReadOutboxMaxID = Some(m.Int())
		}
		tl.UnreadCount = m.Int()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messageReplyHeader:
		tl := TL_messageReplyHeader{}
		flags := m.Int()
		tl.ReplyToScheduled = flags&(1<<2) != 0
		tl.ForumTopic = flags&(1<<3) != 0
		tl.Quote = flags&(1<<9) != 0
		if flags&(1<<4) != 0 {
			tl.ReplyToMsgID = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.ReplyToPeerID = m.Object()
		}
		if flags&(1<<5) != 0 {
			tl.ReplyFrom = m.Object()
		}
		if flags&(1<<8) != 0 {
			tl.ReplyMedia = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.ReplyToTopID = Some(m.Int())
		}
		if flags&(1<<6) != 0 {
			tl.QuoteText = Some(m.String())
		}
		if flags&(1<<7) != 0 {
			tl.QuoteEntities = m.Vector()
		}
		r = tl
	case CRC_messageReplyStoryHeader:
		tl := TL_messageReplyStoryHeader{}
		tl.UserID = m.Long()
		tl.StoryID = m.Int()
		r = tl
	case CRC_messageReplies:
		tl := TL_messageReplies{}
		flags := m.Int()
		tl.Comments = flags&(1<<0) != 0
		tl.Replies = m.Int()
		tl.RepliesPts = m.Int()
		if flags&(1<<1) != 0 {
			tl.RecentRepliers = m.Vector()
		}
		if flags&(1<<0) != 0 {
			tl.ChannelID = Some(m.Long())
		}
		if flags&(1<<2) != 0 {
			tl.MaxID = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.ReadMaxID = Some(m.Int())
		}
		r = tl
	case CRC_peerBlocked:
		tl := TL_peerBlocked{}
		tl.PeerID = m.Object()
		tl.Date = m.Int()
		r = tl
	case CRC_stats_messageStats:
		tl := TL_stats_messageStats{}
		tl.ViewsGraph = m.Object()
		r = tl
	case CRC_groupCallDiscarded:
		tl := TL_groupCallDiscarded{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.Duration = m.Int()
		r = tl
	case CRC_groupCall:
		tl := TL_groupCall{}
		flags := m.Int()
		tl.JoinMuted = flags&(1<<1) != 0
		tl.CanChangeJoinMuted = flags&(1<<2) != 0
		tl.JoinDateAsc = flags&(1<<6) != 0
		tl.ScheduleStartSubscribed = flags&(1<<8) != 0
		tl.CanStartVideo = flags&(1<<9) != 0
		tl.RecordVideoActive = flags&(1<<11) != 0
		tl.RtmpStream = flags&(1<<12) != 0
		tl.ListenersHidden = flags&(1<<13) != 0
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.ParticipantsCount = m.Int()
		if flags&(1<<3) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.StreamDcID = Some(m.Int())
		}
		if flags&(1<<5) != 0 {
			tl.RecordStartDate = Some(m.Int())
		}
		if flags&(1<<7) != 0 {
			tl.ScheduleDate = Some(m.Int())
		}
		if flags&(1<<10) != 0 {
			tl.UnmutedVideoCount = Some(m.Int())
		}
		tl.UnmutedVideoLimit = m.Int()
		tl.Version = m.Int()
		r = tl
	case CRC_inputGroupCall:
		tl := TL_inputGroupCall{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_groupCallParticipant:
		tl := TL_groupCallParticipant{}
		flags := m.Int()
		tl.Muted = flags&(1<<0) != 0
		tl.Left = flags&(1<<1) != 0
		tl.CanSelfUnmute = flags&(1<<2) != 0
		tl.JustJoined = flags&(1<<4) != 0
		tl.Versioned = flags&(1<<5) != 0
		tl.Min = flags&(1<<8) != 0
		tl.MutedByYou = flags&(1<<9) != 0
		tl.VolumeByAdmin = flags&(1<<10) != 0
		tl.Self = flags&(1<<12) != 0
		tl.VideoJoined = flags&(1<<15) != 0
		tl.Peer = m.Object()
		tl.Date = m.Int()
		if flags&(1<<3) != 0 {
			tl.ActiveDate = Some(m.Int())
		}
		tl.Source = m.Int()
		if flags&(1<<7) != 0 {
			tl.Volume = Some(m.Int())
		}
		if flags&(1<<11) != 0 {
			tl.About = Some(m.String())
		}
		if flags&(1<<13) != 0 {
			tl.RaiseHandRating = Some(m.Long())
		}
		if flags&(1<<6) != 0 {
			tl.Video = m.Object()
		}
		if flags&(1<<14) != 0 {
			tl.Presentation = m.Object()
		}
		r = tl
	case CRC_phone_groupCall:
		tl := TL_phone_groupCall{}
		tl.Call = m.Object()
		tl.Participants = m.Vector()
		tl.ParticipantsNextOffset = m.String()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_phone_groupParticipants:
		tl := TL_phone_groupParticipants{}
		tl.Count = m.Int()
		tl.Participants = m.Vector()
		tl.NextOffset = m.String()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		tl.Version = m.Int()
		r = tl
	case CRC_inlineQueryPeerTypeSameBotPM:
		tl := TL_inlineQueryPeerTypeSameBotPM{}
		r = tl
	case CRC_inlineQueryPeerTypePM:
		tl := TL_inlineQueryPeerTypePM{}
		r = tl
	case CRC_inlineQueryPeerTypeChat:
		tl := TL_inlineQueryPeerTypeChat{}
		r = tl
	case CRC_inlineQueryPeerTypeMegagroup:
		tl := TL_inlineQueryPeerTypeMegagroup{}
		r = tl
	case CRC_inlineQueryPeerTypeBroadcast:
		tl := TL_inlineQueryPeerTypeBroadcast{}
		r = tl
	case CRC_inlineQueryPeerTypeBotPM:
		tl := TL_inlineQueryPeerTypeBotPM{}
		r = tl
	case CRC_messages_historyImport:
		tl := TL_messages_historyImport{}
		tl.ID = m.Long()
		r = tl
	case CRC_messages_historyImportParsed:
		tl := TL_messages_historyImportParsed{}
		flags := m.Int()
		tl.Pm = flags&(1<<0) != 0
		tl.Group = flags&(1<<1) != 0
		if flags&(1<<2) != 0 {
			tl.Title = Some(m.String())
		}
		r = tl
	case CRC_messages_affectedFoundMessages:
		tl := TL_messages_affectedFoundMessages{}
		tl.Pts = m.Int()
		tl.PtsCount = m.Int()
		tl.Offset = m.Int()
		tl.Messages = m.VectorInt()
		r = tl
	case CRC_chatInviteImporter:
		tl := TL_chatInviteImporter{}
		flags := m.Int()
		tl.Requested = flags&(1<<0) != 0
		tl.ViaChatlist = flags&(1<<3) != 0
		tl.UserID = m.Long()
		tl.Date = m.Int()
		if flags&(1<<2) != 0 {
			tl.About = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.ApprovedBy = Some(m.Long())
		}
		r = tl
	case CRC_messages_exportedChatInvites:
		tl := TL_messages_exportedChatInvites{}
		tl.Count = m.Int()
		tl.Invites = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_exportedChatInvite:
		tl := TL_messages_exportedChatInvite{}
		tl.Invite = m.Object()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_exportedChatInviteReplaced:
		tl := TL_messages_exportedChatInviteReplaced{}
		tl.Invite = m.Object()
		tl.NewInvite = m.Object()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_chatInviteImporters:
		tl := TL_messages_chatInviteImporters{}
		tl.Count = m.Int()
		tl.Importers = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_chatAdminWithInvites:
		tl := TL_chatAdminWithInvites{}
		tl.AdminID = m.Long()
		tl.InvitesCount = m.Int()
		tl.RevokedInvitesCount = m.Int()
		r = tl
	case CRC_messages_chatAdminsWithInvites:
		tl := TL_messages_chatAdminsWithInvites{}
		tl.Admins = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_checkedHistoryImportPeer:
		tl := TL_messages_checkedHistoryImportPeer{}
		tl.ConfirmText = m.String()
		r = tl
	case CRC_phone_joinAsPeers:
		tl := TL_phone_joinAsPeers{}
		tl.Peers = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_phone_exportedGroupCallInvite:
		tl := TL_phone_exportedGroupCallInvite{}
		tl.Link = m.String()
		r = tl
	case CRC_groupCallParticipantVideoSourceGroup:
		tl := TL_groupCallParticipantVideoSourceGroup{}
		tl.Semantics = m.String()
		tl.Sources = m.VectorInt()
		r = tl
	case CRC_groupCallParticipantVideo:
		tl := TL_groupCallParticipantVideo{}
		flags := m.Int()
		tl.Paused = flags&(1<<0) != 0
		tl.Endpoint = m.String()
		tl.SourceGroups = m.Vector()
		if flags&(1<<1) != 0 {
			tl.AudioSource = Some(m.Int())
		}
		r = tl
	case CRC_stickers_suggestedShortName:
		tl := TL_stickers_suggestedShortName{}
		tl.ShortName = m.String()
		r = tl
	case CRC_botCommandScopeDefault:
		tl := TL_botCommandScopeDefault{}
		r = tl
	case CRC_botCommandScopeUsers:
		tl := TL_botCommandScopeUsers{}
		r = tl
	case CRC_botCommandScopeChats:
		tl := TL_botCommandScopeChats{}
		r = tl
	case CRC_botCommandScopeChatAdmins:
		tl := TL_botCommandScopeChatAdmins{}
		r = tl
	case CRC_botCommandScopePeer:
		tl := TL_botCommandScopePeer{}
		tl.Peer = m.Object()
		r = tl
	case CRC_botCommandScopePeerAdmins:
		tl := TL_botCommandScopePeerAdmins{}
		tl.Peer = m.Object()
		r = tl
	case CRC_botCommandScopePeerUser:
		tl := TL_botCommandScopePeerUser{}
		tl.Peer = m.Object()
		tl.UserID = m.Object()
		r = tl
	case CRC_account_resetPasswordFailedWait:
		tl := TL_account_resetPasswordFailedWait{}
		tl.RetryDate = m.Int()
		r = tl
	case CRC_account_resetPasswordRequestedWait:
		tl := TL_account_resetPasswordRequestedWait{}
		tl.UntilDate = m.Int()
		r = tl
	case CRC_account_resetPasswordOk:
		tl := TL_account_resetPasswordOk{}
		r = tl
	case CRC_sponsoredMessage:
		tl := TL_sponsoredMessage{}
		flags := m.Int()
		tl.Recommended = flags&(1<<5) != 0
		tl.ShowPeerPhoto = flags&(1<<6) != 0
		tl.RandomID = m.StringBytes()
		if flags&(1<<3) != 0 {
			tl.FromID = m.Object()
		}
		if flags&(1<<4) != 0 {
			tl.ChatInvite = m.Object()
		}
		if flags&(1<<4) != 0 {
			tl.ChatInviteHash = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.ChannelPost = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.StartParam = Some(m.String())
		}
		if flags&(1<<9) != 0 {
			tl.Webpage = m.Object()
		}
		tl.Message = m.String()
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<7) != 0 {
			tl.SponsorInfo = Some(m.String())
		}
		if flags&(1<<8) != 0 {
			tl.AdditionalInfo = Some(m.String())
		}
		r = tl
	case CRC_messages_sponsoredMessages:
		tl := TL_messages_sponsoredMessages{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.PostsBetween = Some(m.Int())
		}
		tl.Messages = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_sponsoredMessagesEmpty:
		tl := TL_messages_sponsoredMessagesEmpty{}
		r = tl
	case CRC_searchResultsCalendarPeriod:
		tl := TL_searchResultsCalendarPeriod{}
		tl.Date = m.Int()
		tl.MinMsgID = m.Int()
		tl.MaxMsgID = m.Int()
		tl.Count = m.Int()
		r = tl
	case CRC_messages_searchResultsCalendar:
		tl := TL_messages_searchResultsCalendar{}
		flags := m.Int()
		tl.Inexact = flags&(1<<0) != 0
		tl.Count = m.Int()
		tl.MinDate = m.Int()
		tl.MinMsgID = m.Int()
		if flags&(1<<1) != 0 {
			tl.OffsetIdOffset = Some(m.Int())
		}
		tl.Periods = m.Vector()
		tl.Messages = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_searchResultPosition:
		tl := TL_searchResultPosition{}
		tl.MsgID = m.Int()
		tl.Date = m.Int()
		tl.Offset = m.Int()
		r = tl
	case CRC_messages_searchResultsPositions:
		tl := TL_messages_searchResultsPositions{}
		tl.Count = m.Int()
		tl.Positions = m.Vector()
		r = tl
	case CRC_channels_sendAsPeers:
		tl := TL_channels_sendAsPeers{}
		tl.Peers = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_users_userFull:
		tl := TL_users_userFull{}
		tl.FullUser = m.Object()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_peerSettings:
		tl := TL_messages_peerSettings{}
		tl.Settings = m.Object()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_auth_loggedOut:
		tl := TL_auth_loggedOut{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.FutureAuthToken = m.StringBytes()
		}
		r = tl
	case CRC_reactionCount:
		tl := TL_reactionCount{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.ChosenOrder = Some(m.Int())
		}
		tl.Reaction = m.Object()
		tl.Count = m.Int()
		r = tl
	case CRC_messageReactions:
		tl := TL_messageReactions{}
		flags := m.Int()
		tl.Min = flags&(1<<0) != 0
		tl.CanSeeList = flags&(1<<2) != 0
		tl.Results = m.Vector()
		if flags&(1<<1) != 0 {
			tl.RecentReactions = m.Vector()
		}
		r = tl
	case CRC_messages_messageReactionsList:
		tl := TL_messages_messageReactionsList{}
		flags := m.Int()
		tl.Count = m.Int()
		tl.Reactions = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		if flags&(1<<0) != 0 {
			tl.NextOffset = Some(m.String())
		}
		r = tl
	case CRC_availableReaction:
		tl := TL_availableReaction{}
		flags := m.Int()
		tl.Inactive = flags&(1<<0) != 0
		tl.Premium = flags&(1<<2) != 0
		tl.Reaction = m.String()
		tl.Title = m.String()
		tl.StaticIcon = m.Object()
		tl.AppearAnimation = m.Object()
		tl.SelectAnimation = m.Object()
		tl.ActivateAnimation = m.Object()
		tl.EffectAnimation = m.Object()
		if flags&(1<<1) != 0 {
			tl.AroundAnimation = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.CenterIcon = m.Object()
		}
		r = tl
	case CRC_messages_availableReactionsNotModified:
		tl := TL_messages_availableReactionsNotModified{}
		r = tl
	case CRC_messages_availableReactions:
		tl := TL_messages_availableReactions{}
		tl.Hash = m.Int()
		tl.Reactions = m.Vector()
		r = tl
	case CRC_messagePeerReaction:
		tl := TL_messagePeerReaction{}
		flags := m.Int()
		tl.Big = flags&(1<<0) != 0
		tl.Unread = flags&(1<<1) != 0
		tl.My = flags&(1<<2) != 0
		tl.PeerID = m.Object()
		tl.Date = m.Int()
		tl.Reaction = m.Object()
		r = tl
	case CRC_groupCallStreamChannel:
		tl := TL_groupCallStreamChannel{}
		tl.Channel = m.Int()
		tl.Scale = m.Int()
		tl.LastTimestampMs = m.Long()
		r = tl
	case CRC_phone_groupCallStreamChannels:
		tl := TL_phone_groupCallStreamChannels{}
		tl.Channels = m.Vector()
		r = tl
	case CRC_phone_groupCallStreamRtmpUrl:
		tl := TL_phone_groupCallStreamRtmpUrl{}
		tl.Url = m.String()
		tl.Key = m.String()
		r = tl
	case CRC_attachMenuBotIconColor:
		tl := TL_attachMenuBotIconColor{}
		tl.Name = m.String()
		tl.Color = m.Int()
		r = tl
	case CRC_attachMenuBotIcon:
		tl := TL_attachMenuBotIcon{}
		flags := m.Int()
		tl.Name = m.String()
		tl.Icon = m.Object()
		if flags&(1<<0) != 0 {
			tl.Colors = m.Vector()
		}
		r = tl
	case CRC_attachMenuBot:
		tl := TL_attachMenuBot{}
		flags := m.Int()
		tl.Inactive = flags&(1<<0) != 0
		tl.HasSettings = flags&(1<<1) != 0
		tl.RequestWriteAccess = flags&(1<<2) != 0
		tl.ShowInAttachMenu = flags&(1<<3) != 0
		tl.ShowInSideMenu = flags&(1<<4) != 0
		tl.SideMenuDisclaimerNeeded = flags&(1<<5) != 0
		tl.BotID = m.Long()
		tl.ShortName = m.String()
		if flags&(1<<3) != 0 {
			tl.PeerTypes = m.Vector()
		}
		tl.Icons = m.Vector()
		r = tl
	case CRC_attachMenuBotsNotModified:
		tl := TL_attachMenuBotsNotModified{}
		r = tl
	case CRC_attachMenuBots:
		tl := TL_attachMenuBots{}
		tl.Hash = m.Long()
		tl.Bots = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_attachMenuBotsBot:
		tl := TL_attachMenuBotsBot{}
		tl.Bot = m.Object()
		tl.Users = m.Vector()
		r = tl
	case CRC_webViewResultUrl:
		tl := TL_webViewResultUrl{}
		tl.QueryID = m.Long()
		tl.Url = m.String()
		r = tl
	case CRC_simpleWebViewResultUrl:
		tl := TL_simpleWebViewResultUrl{}
		tl.Url = m.String()
		r = tl
	case CRC_webViewMessageSent:
		tl := TL_webViewMessageSent{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.MsgID = m.Object()
		}
		r = tl
	case CRC_botMenuButtonDefault:
		tl := TL_botMenuButtonDefault{}
		r = tl
	case CRC_botMenuButtonCommands:
		tl := TL_botMenuButtonCommands{}
		r = tl
	case CRC_botMenuButton:
		tl := TL_botMenuButton{}
		tl.Text = m.String()
		tl.Url = m.String()
		r = tl
	case CRC_account_savedRingtonesNotModified:
		tl := TL_account_savedRingtonesNotModified{}
		r = tl
	case CRC_account_savedRingtones:
		tl := TL_account_savedRingtones{}
		tl.Hash = m.Long()
		tl.Ringtones = m.Vector()
		r = tl
	case CRC_notificationSoundDefault:
		tl := TL_notificationSoundDefault{}
		r = tl
	case CRC_notificationSoundNone:
		tl := TL_notificationSoundNone{}
		r = tl
	case CRC_notificationSoundLocal:
		tl := TL_notificationSoundLocal{}
		tl.Title = m.String()
		tl.Data = m.String()
		r = tl
	case CRC_notificationSoundRingtone:
		tl := TL_notificationSoundRingtone{}
		tl.ID = m.Long()
		r = tl
	case CRC_account_savedRingtone:
		tl := TL_account_savedRingtone{}
		r = tl
	case CRC_account_savedRingtoneConverted:
		tl := TL_account_savedRingtoneConverted{}
		tl.Document = m.Object()
		r = tl
	case CRC_attachMenuPeerTypeSameBotPM:
		tl := TL_attachMenuPeerTypeSameBotPM{}
		r = tl
	case CRC_attachMenuPeerTypeBotPM:
		tl := TL_attachMenuPeerTypeBotPM{}
		r = tl
	case CRC_attachMenuPeerTypePM:
		tl := TL_attachMenuPeerTypePM{}
		r = tl
	case CRC_attachMenuPeerTypeChat:
		tl := TL_attachMenuPeerTypeChat{}
		r = tl
	case CRC_attachMenuPeerTypeBroadcast:
		tl := TL_attachMenuPeerTypeBroadcast{}
		r = tl
	case CRC_inputInvoiceMessage:
		tl := TL_inputInvoiceMessage{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_inputInvoiceSlug:
		tl := TL_inputInvoiceSlug{}
		tl.Slug = m.String()
		r = tl
	case CRC_inputInvoicePremiumGiftCode:
		tl := TL_inputInvoicePremiumGiftCode{}
		tl.Purpose = m.Object()
		tl.Option = m.Object()
		r = tl
	case CRC_payments_exportedInvoice:
		tl := TL_payments_exportedInvoice{}
		tl.Url = m.String()
		r = tl
	case CRC_messages_transcribedAudio:
		tl := TL_messages_transcribedAudio{}
		flags := m.Int()
		tl.Pending = flags&(1<<0) != 0
		tl.TranscriptionID = m.Long()
		tl.Text = m.String()
		r = tl
	case CRC_help_premiumPromo:
		tl := TL_help_premiumPromo{}
		tl.StatusText = m.String()
		tl.StatusEntities = m.Vector()
		tl.VideoSections = m.VectorString()
		tl.Videos = m.Vector()
		tl.PeriodOptions = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_inputStorePaymentPremiumSubscription:
		tl := TL_inputStorePaymentPremiumSubscription{}
		flags := m.Int()
		tl.Restore = flags&(1<<0) != 0
		tl.Upgrade = flags&(1<<1) != 0
		r = tl
	case CRC_inputStorePaymentGiftPremium:
		tl := TL_inputStorePaymentGiftPremium{}
		tl.UserID = m.Object()
		tl.Currency = m.String()
		tl.Amount = m.Long()
		r = tl
	case CRC_inputStorePaymentPremiumGiftCode:
		tl := TL_inputStorePaymentPremiumGiftCode{}
		flags := m.Int()
		tl.Users = m.Vector()
		if flags&(1<<0) != 0 {
			tl.BoostPeer = m.Object()
		}
		tl.Currency = m.String()
		tl.Amount = m.Long()
		r = tl
	case CRC_inputStorePaymentPremiumGiveaway:
		tl := TL_inputStorePaymentPremiumGiveaway{}
		flags := m.Int()
		tl.OnlyNewSubscribers = flags&(1<<0) != 0
		tl.BoostPeer = m.Object()
		if flags&(1<<1) != 0 {
			tl.AdditionalPeers = m.Vector()
		}
		if flags&(1<<2) != 0 {
			tl.CountriesIso2 = m.VectorString()
		}
		tl.RandomID = m.Long()
		tl.UntilDate = m.Int()
		tl.Currency = m.String()
		tl.Amount = m.Long()
		r = tl
	case CRC_premiumGiftOption:
		tl := TL_premiumGiftOption{}
		flags := m.Int()
		tl.Months = m.Int()
		tl.Currency = m.String()
		tl.Amount = m.Long()
		tl.BotUrl = m.String()
		if flags&(1<<0) != 0 {
			tl.StoreProduct = Some(m.String())
		}
		r = tl
	case CRC_paymentFormMethod:
		tl := TL_paymentFormMethod{}
		tl.Url = m.String()
		tl.Title = m.String()
		r = tl
	case CRC_emojiStatusEmpty:
		tl := TL_emojiStatusEmpty{}
		r = tl
	case CRC_emojiStatus:
		tl := TL_emojiStatus{}
		tl.DocumentID = m.Long()
		r = tl
	case CRC_emojiStatusUntil:
		tl := TL_emojiStatusUntil{}
		tl.DocumentID = m.Long()
		tl.Until = m.Int()
		r = tl
	case CRC_account_emojiStatusesNotModified:
		tl := TL_account_emojiStatusesNotModified{}
		r = tl
	case CRC_account_emojiStatuses:
		tl := TL_account_emojiStatuses{}
		tl.Hash = m.Long()
		tl.Statuses = m.Vector()
		r = tl
	case CRC_reactionEmpty:
		tl := TL_reactionEmpty{}
		r = tl
	case CRC_reactionEmoji:
		tl := TL_reactionEmoji{}
		tl.Emoticon = m.String()
		r = tl
	case CRC_reactionCustomEmoji:
		tl := TL_reactionCustomEmoji{}
		tl.DocumentID = m.Long()
		r = tl
	case CRC_chatReactionsNone:
		tl := TL_chatReactionsNone{}
		r = tl
	case CRC_chatReactionsAll:
		tl := TL_chatReactionsAll{}
		flags := m.Int()
		tl.AllowCustom = flags&(1<<0) != 0
		r = tl
	case CRC_chatReactionsSome:
		tl := TL_chatReactionsSome{}
		tl.Reactions = m.Vector()
		r = tl
	case CRC_messages_reactionsNotModified:
		tl := TL_messages_reactionsNotModified{}
		r = tl
	case CRC_messages_reactions:
		tl := TL_messages_reactions{}
		tl.Hash = m.Long()
		tl.Reactions = m.Vector()
		r = tl
	case CRC_emailVerifyPurposeLoginSetup:
		tl := TL_emailVerifyPurposeLoginSetup{}
		tl.PhoneNumber = m.String()
		tl.PhoneCodeHash = m.String()
		r = tl
	case CRC_emailVerifyPurposeLoginChange:
		tl := TL_emailVerifyPurposeLoginChange{}
		r = tl
	case CRC_emailVerifyPurposePassport:
		tl := TL_emailVerifyPurposePassport{}
		r = tl
	case CRC_emailVerificationCode:
		tl := TL_emailVerificationCode{}
		tl.Code = m.String()
		r = tl
	case CRC_emailVerificationGoogle:
		tl := TL_emailVerificationGoogle{}
		tl.Token = m.String()
		r = tl
	case CRC_emailVerificationApple:
		tl := TL_emailVerificationApple{}
		tl.Token = m.String()
		r = tl
	case CRC_account_emailVerified:
		tl := TL_account_emailVerified{}
		tl.Email = m.String()
		r = tl
	case CRC_account_emailVerifiedLogin:
		tl := TL_account_emailVerifiedLogin{}
		tl.Email = m.String()
		tl.SentCode = m.Object()
		r = tl
	case CRC_premiumSubscriptionOption:
		tl := TL_premiumSubscriptionOption{}
		flags := m.Int()
		tl.Current = flags&(1<<1) != 0
		tl.CanPurchaseUpgrade = flags&(1<<2) != 0
		if flags&(1<<3) != 0 {
			tl.Transaction = Some(m.String())
		}
		tl.Months = m.Int()
		tl.Currency = m.String()
		tl.Amount = m.Long()
		tl.BotUrl = m.String()
		if flags&(1<<0) != 0 {
			tl.StoreProduct = Some(m.String())
		}
		r = tl
	case CRC_sendAsPeer:
		tl := TL_sendAsPeer{}
		flags := m.Int()
		tl.PremiumRequired = flags&(1<<0) != 0
		tl.Peer = m.Object()
		r = tl
	case CRC_messageExtendedMediaPreview:
		tl := TL_messageExtendedMediaPreview{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.W = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.H = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.Thumb = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.VideoDuration = Some(m.Int())
		}
		r = tl
	case CRC_messageExtendedMedia:
		tl := TL_messageExtendedMedia{}
		tl.Media = m.Object()
		r = tl
	case CRC_stickerKeyword:
		tl := TL_stickerKeyword{}
		tl.DocumentID = m.Long()
		tl.Keyword = m.VectorString()
		r = tl
	case CRC_username:
		tl := TL_username{}
		flags := m.Int()
		tl.Editable = flags&(1<<0) != 0
		tl.Active = flags&(1<<1) != 0
		tl.Username = m.String()
		r = tl
	case CRC_forumTopicDeleted:
		tl := TL_forumTopicDeleted{}
		tl.ID = m.Int()
		r = tl
	case CRC_forumTopic:
		tl := TL_forumTopic{}
		flags := m.Int()
		tl.My = flags&(1<<1) != 0
		tl.Closed = flags&(1<<2) != 0
		tl.Pinned = flags&(1<<3) != 0
		tl.Short = flags&(1<<5) != 0
		tl.Hidden = flags&(1<<6) != 0
		tl.ID = m.Int()
		tl.Date = m.Int()
		tl.Title = m.String()
		tl.IconColor = m.Int()
		if flags&(1<<0) != 0 {
			tl.IconEmojiID = Some(m.Long())
		}
		tl.TopMessage = m.Int()
		tl.ReadInboxMaxID = m.Int()
		tl.ReadOutboxMaxID = m.Int()
		tl.UnreadCount = m.Int()
		tl.UnreadMentionsCount = m.Int()
		tl.UnreadReactionsCount = m.Int()
		tl.FromID = m.Object()
		tl.NotifySettings = m.Object()
		if flags&(1<<4) != 0 {
			tl.Draft = m.Object()
		}
		r = tl
	case CRC_messages_forumTopics:
		tl := TL_messages_forumTopics{}
		flags := m.Int()
		tl.OrderByCreateDate = flags&(1<<0) != 0
		tl.Count = m.Int()
		tl.Topics = m.Vector()
		tl.Messages = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		tl.Pts = m.Int()
		r = tl
	case CRC_defaultHistoryTTL:
		tl := TL_defaultHistoryTTL{}
		tl.Period = m.Int()
		r = tl
	case CRC_exportedContactToken:
		tl := TL_exportedContactToken{}
		tl.Url = m.String()
		tl.Expires = m.Int()
		r = tl
	case CRC_requestPeerTypeUser:
		tl := TL_requestPeerTypeUser{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Bot = Some(m.Bool())
		}
		if flags&(1<<1) != 0 {
			tl.Premium = Some(m.Bool())
		}
		r = tl
	case CRC_requestPeerTypeChat:
		tl := TL_requestPeerTypeChat{}
		flags := m.Int()
		tl.Creator = flags&(1<<0) != 0
		tl.BotParticipant = flags&(1<<5) != 0
		if flags&(1<<3) != 0 {
			tl.HasUsername = Some(m.Bool())
		}
		if flags&(1<<4) != 0 {
			tl.Forum = Some(m.Bool())
		}
		if flags&(1<<1) != 0 {
			tl.UserAdminRights = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.BotAdminRights = m.Object()
		}
		r = tl
	case CRC_requestPeerTypeBroadcast:
		tl := TL_requestPeerTypeBroadcast{}
		flags := m.Int()
		tl.Creator = flags&(1<<0) != 0
		if flags&(1<<3) != 0 {
			tl.HasUsername = Some(m.Bool())
		}
		if flags&(1<<1) != 0 {
			tl.UserAdminRights = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.BotAdminRights = m.Object()
		}
		r = tl
	case CRC_emojiListNotModified:
		tl := TL_emojiListNotModified{}
		r = tl
	case CRC_emojiList:
		tl := TL_emojiList{}
		tl.Hash = m.Long()
		tl.DocumentID = m.VectorLong()
		r = tl
	case CRC_emojiGroup:
		tl := TL_emojiGroup{}
		tl.Title = m.String()
		tl.IconEmojiID = m.Long()
		tl.Emoticons = m.VectorString()
		r = tl
	case CRC_messages_emojiGroupsNotModified:
		tl := TL_messages_emojiGroupsNotModified{}
		r = tl
	case CRC_messages_emojiGroups:
		tl := TL_messages_emojiGroups{}
		tl.Hash = m.Int()
		tl.Groups = m.Vector()
		r = tl
	case CRC_textWithEntities:
		tl := TL_textWithEntities{}
		tl.Text = m.String()
		tl.Entities = m.Vector()
		r = tl
	case CRC_messages_translateResult:
		tl := TL_messages_translateResult{}
		tl.Result = m.Vector()
		r = tl
	case CRC_autoSaveSettings:
		tl := TL_autoSaveSettings{}
		flags := m.Int()
		tl.Photos = flags&(1<<0) != 0
		tl.Videos = flags&(1<<1) != 0
		if flags&(1<<2) != 0 {
			tl.VideoMaxSize = Some(m.Long())
		}
		r = tl
	case CRC_autoSaveException:
		tl := TL_autoSaveException{}
		tl.Peer = m.Object()
		tl.Settings = m.Object()
		r = tl
	case CRC_account_autoSaveSettings:
		tl := TL_account_autoSaveSettings{}
		tl.UsersSettings = m.Object()
		tl.ChatsSettings = m.Object()
		tl.BroadcastsSettings = m.Object()
		tl.Exceptions = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_help_appConfigNotModified:
		tl := TL_help_appConfigNotModified{}
		r = tl
	case CRC_help_appConfig:
		tl := TL_help_appConfig{}
		tl.Hash = m.Int()
		tl.Config = m.Object()
		r = tl
	case CRC_inputBotAppID:
		tl := TL_inputBotAppID{}
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		r = tl
	case CRC_inputBotAppShortName:
		tl := TL_inputBotAppShortName{}
		tl.BotID = m.Object()
		tl.ShortName = m.String()
		r = tl
	case CRC_botAppNotModified:
		tl := TL_botAppNotModified{}
		r = tl
	case CRC_botApp:
		tl := TL_botApp{}
		flags := m.Int()
		tl.ID = m.Long()
		tl.AccessHash = m.Long()
		tl.ShortName = m.String()
		tl.Title = m.String()
		tl.Description = m.String()
		tl.Photo = m.Object()
		if flags&(1<<0) != 0 {
			tl.Document = m.Object()
		}
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_botApp:
		tl := TL_messages_botApp{}
		flags := m.Int()
		tl.Inactive = flags&(1<<0) != 0
		tl.RequestWriteAccess = flags&(1<<1) != 0
		tl.HasSettings = flags&(1<<2) != 0
		tl.App = m.Object()
		r = tl
	case CRC_appWebViewResultUrl:
		tl := TL_appWebViewResultUrl{}
		tl.Url = m.String()
		r = tl
	case CRC_inlineBotWebView:
		tl := TL_inlineBotWebView{}
		tl.Text = m.String()
		tl.Url = m.String()
		r = tl
	case CRC_readParticipantDate:
		tl := TL_readParticipantDate{}
		tl.UserID = m.Long()
		tl.Date = m.Int()
		r = tl
	case CRC_inputChatlistDialogFilter:
		tl := TL_inputChatlistDialogFilter{}
		tl.FilterID = m.Int()
		r = tl
	case CRC_exportedChatlistInvite:
		tl := TL_exportedChatlistInvite{}
		m.Int() //unused flags
		tl.Title = m.String()
		tl.Url = m.String()
		tl.Peers = m.Vector()
		r = tl
	case CRC_chatlists_exportedChatlistInvite:
		tl := TL_chatlists_exportedChatlistInvite{}
		tl.Filter = m.Object()
		tl.Invite = m.Object()
		r = tl
	case CRC_chatlists_exportedInvites:
		tl := TL_chatlists_exportedInvites{}
		tl.Invites = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_chatlists_chatlistInviteAlready:
		tl := TL_chatlists_chatlistInviteAlready{}
		tl.FilterID = m.Int()
		tl.MissingPeers = m.Vector()
		tl.AlreadyPeers = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_chatlists_chatlistInvite:
		tl := TL_chatlists_chatlistInvite{}
		flags := m.Int()
		tl.Title = m.String()
		if flags&(1<<0) != 0 {
			tl.Emoticon = Some(m.String())
		}
		tl.Peers = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_chatlists_chatlistUpdates:
		tl := TL_chatlists_chatlistUpdates{}
		tl.MissingPeers = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_bots_botInfo:
		tl := TL_bots_botInfo{}
		tl.Name = m.String()
		tl.About = m.String()
		tl.Description = m.String()
		r = tl
	case CRC_messagePeerVote:
		tl := TL_messagePeerVote{}
		tl.Peer = m.Object()
		tl.Option = m.StringBytes()
		tl.Date = m.Int()
		r = tl
	case CRC_messagePeerVoteInputOption:
		tl := TL_messagePeerVoteInputOption{}
		tl.Peer = m.Object()
		tl.Date = m.Int()
		r = tl
	case CRC_messagePeerVoteMultiple:
		tl := TL_messagePeerVoteMultiple{}
		tl.Peer = m.Object()
		tl.Options = m.VectorBytes()
		tl.Date = m.Int()
		r = tl
	case CRC_sponsoredWebPage:
		tl := TL_sponsoredWebPage{}
		flags := m.Int()
		tl.Url = m.String()
		tl.SiteName = m.String()
		if flags&(1<<0) != 0 {
			tl.Photo = m.Object()
		}
		r = tl
	case CRC_storyViews:
		tl := TL_storyViews{}
		flags := m.Int()
		tl.HasViewers = flags&(1<<1) != 0
		tl.ViewsCount = m.Int()
		if flags&(1<<2) != 0 {
			tl.ForwardsCount = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.Reactions = m.Vector()
		}
		if flags&(1<<4) != 0 {
			tl.ReactionsCount = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.RecentViewers = m.VectorLong()
		}
		r = tl
	case CRC_storyItemDeleted:
		tl := TL_storyItemDeleted{}
		tl.ID = m.Int()
		r = tl
	case CRC_storyItemSkipped:
		tl := TL_storyItemSkipped{}
		flags := m.Int()
		tl.CloseFriends = flags&(1<<8) != 0
		tl.ID = m.Int()
		tl.Date = m.Int()
		tl.ExpireDate = m.Int()
		r = tl
	case CRC_storyItem:
		tl := TL_storyItem{}
		flags := m.Int()
		tl.Pinned = flags&(1<<5) != 0
		tl.Public = flags&(1<<7) != 0
		tl.CloseFriends = flags&(1<<8) != 0
		tl.Min = flags&(1<<9) != 0
		tl.Noforwards = flags&(1<<10) != 0
		tl.Edited = flags&(1<<11) != 0
		tl.Contacts = flags&(1<<12) != 0
		tl.SelectedContacts = flags&(1<<13) != 0
		tl.Out = flags&(1<<16) != 0
		tl.ID = m.Int()
		tl.Date = m.Int()
		tl.ExpireDate = m.Int()
		if flags&(1<<0) != 0 {
			tl.Caption = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		tl.Media = m.Object()
		if flags&(1<<14) != 0 {
			tl.MediaAreas = m.Vector()
		}
		if flags&(1<<2) != 0 {
			tl.Privacy = m.Vector()
		}
		if flags&(1<<3) != 0 {
			tl.Views = m.Object()
		}
		if flags&(1<<15) != 0 {
			tl.SentReaction = m.Object()
		}
		r = tl
	case CRC_stories_allStoriesNotModified:
		tl := TL_stories_allStoriesNotModified{}
		m.Int() //unused flags
		tl.State = m.String()
		tl.StealthMode = m.Object()
		r = tl
	case CRC_stories_allStories:
		tl := TL_stories_allStories{}
		flags := m.Int()
		tl.HasMore = flags&(1<<0) != 0
		tl.Count = m.Int()
		tl.State = m.String()
		tl.PeerStories = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		tl.StealthMode = m.Object()
		r = tl
	case CRC_stories_stories:
		tl := TL_stories_stories{}
		tl.Count = m.Int()
		tl.Stories = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_storyView:
		tl := TL_storyView{}
		flags := m.Int()
		tl.Blocked = flags&(1<<0) != 0
		tl.BlockedMyStoriesFrom = flags&(1<<1) != 0
		tl.UserID = m.Long()
		tl.Date = m.Int()
		if flags&(1<<2) != 0 {
			tl.Reaction = m.Object()
		}
		r = tl
	case CRC_stories_storyViewsList:
		tl := TL_stories_storyViewsList{}
		flags := m.Int()
		tl.Count = m.Int()
		tl.ReactionsCount = m.Int()
		tl.Views = m.Vector()
		tl.Users = m.Vector()
		if flags&(1<<0) != 0 {
			tl.NextOffset = Some(m.String())
		}
		r = tl
	case CRC_stories_storyViews:
		tl := TL_stories_storyViews{}
		tl.Views = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_inputReplyToMessage:
		tl := TL_inputReplyToMessage{}
		flags := m.Int()
		tl.ReplyToMsgID = m.Int()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.ReplyToPeerID = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.QuoteText = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.QuoteEntities = m.Vector()
		}
		r = tl
	case CRC_inputReplyToStory:
		tl := TL_inputReplyToStory{}
		tl.UserID = m.Object()
		tl.StoryID = m.Int()
		r = tl
	case CRC_exportedStoryLink:
		tl := TL_exportedStoryLink{}
		tl.Link = m.String()
		r = tl
	case CRC_storiesStealthMode:
		tl := TL_storiesStealthMode{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.ActiveUntilDate = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.CooldownUntilDate = Some(m.Int())
		}
		r = tl
	case CRC_mediaAreaCoordinates:
		tl := TL_mediaAreaCoordinates{}
		tl.X = m.Double()
		tl.Y = m.Double()
		tl.W = m.Double()
		tl.H = m.Double()
		tl.Rotation = m.Double()
		r = tl
	case CRC_mediaAreaVenue:
		tl := TL_mediaAreaVenue{}
		tl.Coordinates = m.Object()
		tl.Geo = m.Object()
		tl.Title = m.String()
		tl.Address = m.String()
		tl.Provider = m.String()
		tl.VenueID = m.String()
		tl.VenueType = m.String()
		r = tl
	case CRC_inputMediaAreaVenue:
		tl := TL_inputMediaAreaVenue{}
		tl.Coordinates = m.Object()
		tl.QueryID = m.Long()
		tl.ResultID = m.String()
		r = tl
	case CRC_mediaAreaGeoPoint:
		tl := TL_mediaAreaGeoPoint{}
		tl.Coordinates = m.Object()
		tl.Geo = m.Object()
		r = tl
	case CRC_mediaAreaSuggestedReaction:
		tl := TL_mediaAreaSuggestedReaction{}
		flags := m.Int()
		tl.Dark = flags&(1<<0) != 0
		tl.Flipped = flags&(1<<1) != 0
		tl.Coordinates = m.Object()
		tl.Reaction = m.Object()
		r = tl
	case CRC_peerStories:
		tl := TL_peerStories{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.MaxReadID = Some(m.Int())
		}
		tl.Stories = m.Vector()
		r = tl
	case CRC_stories_peerStories:
		tl := TL_stories_peerStories{}
		tl.Stories = m.Object()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_messages_webPage:
		tl := TL_messages_webPage{}
		tl.Webpage = m.Object()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_premiumGiftCodeOption:
		tl := TL_premiumGiftCodeOption{}
		flags := m.Int()
		tl.Users = m.Int()
		tl.Months = m.Int()
		if flags&(1<<0) != 0 {
			tl.StoreProduct = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.StoreQuantity = Some(m.Int())
		}
		tl.Currency = m.String()
		tl.Amount = m.Long()
		r = tl
	case CRC_payments_checkedGiftCode:
		tl := TL_payments_checkedGiftCode{}
		flags := m.Int()
		tl.ViaGiveaway = flags&(1<<2) != 0
		tl.FromID = m.Object()
		if flags&(1<<3) != 0 {
			tl.GiveawayMsgID = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.ToID = Some(m.Long())
		}
		tl.Date = m.Int()
		tl.Months = m.Int()
		if flags&(1<<1) != 0 {
			tl.UsedDate = Some(m.Int())
		}
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_payments_giveawayInfo:
		tl := TL_payments_giveawayInfo{}
		flags := m.Int()
		tl.Participating = flags&(1<<0) != 0
		tl.PreparingResults = flags&(1<<3) != 0
		tl.StartDate = m.Int()
		if flags&(1<<1) != 0 {
			tl.JoinedTooEarlyDate = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.AdminDisallowedChatID = Some(m.Long())
		}
		if flags&(1<<4) != 0 {
			tl.DisallowedCountry = Some(m.String())
		}
		r = tl
	case CRC_payments_giveawayInfoResults:
		tl := TL_payments_giveawayInfoResults{}
		flags := m.Int()
		tl.Winner = flags&(1<<0) != 0
		tl.Refunded = flags&(1<<1) != 0
		tl.StartDate = m.Int()
		if flags&(1<<0) != 0 {
			tl.GiftCodeSlug = Some(m.String())
		}
		tl.FinishDate = m.Int()
		tl.WinnersCount = m.Int()
		tl.ActivatedCount = m.Int()
		r = tl
	case CRC_prepaidGiveaway:
		tl := TL_prepaidGiveaway{}
		tl.ID = m.Long()
		tl.Months = m.Int()
		tl.Quantity = m.Int()
		tl.Date = m.Int()
		r = tl
	case CRC_boost:
		tl := TL_boost{}
		flags := m.Int()
		tl.Gift = flags&(1<<1) != 0
		tl.Giveaway = flags&(1<<2) != 0
		tl.Unclaimed = flags&(1<<3) != 0
		tl.ID = m.String()
		if flags&(1<<0) != 0 {
			tl.UserID = Some(m.Long())
		}
		if flags&(1<<2) != 0 {
			tl.GiveawayMsgID = Some(m.Int())
		}
		tl.Date = m.Int()
		tl.Expires = m.Int()
		if flags&(1<<4) != 0 {
			tl.UsedGiftSlug = Some(m.String())
		}
		if flags&(1<<5) != 0 {
			tl.Multiplier = Some(m.Int())
		}
		r = tl
	case CRC_premium_boostsList:
		tl := TL_premium_boostsList{}
		flags := m.Int()
		tl.Count = m.Int()
		tl.Boosts = m.Vector()
		if flags&(1<<0) != 0 {
			tl.NextOffset = Some(m.String())
		}
		tl.Users = m.Vector()
		r = tl
	case CRC_myBoost:
		tl := TL_myBoost{}
		flags := m.Int()
		tl.Slot = m.Int()
		if flags&(1<<0) != 0 {
			tl.Peer = m.Object()
		}
		tl.Date = m.Int()
		tl.Expires = m.Int()
		if flags&(1<<1) != 0 {
			tl.CooldownUntilDate = Some(m.Int())
		}
		r = tl
	case CRC_premium_myBoosts:
		tl := TL_premium_myBoosts{}
		tl.MyBoosts = m.Vector()
		tl.Chats = m.Vector()
		tl.Users = m.Vector()
		r = tl
	case CRC_premium_boostsStatus:
		tl := TL_premium_boostsStatus{}
		flags := m.Int()
		tl.MyBoost = flags&(1<<2) != 0
		tl.Level = m.Int()
		tl.CurrentLevelBoosts = m.Int()
		tl.Boosts = m.Int()
		if flags&(1<<4) != 0 {
			tl.GiftBoosts = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.NextLevelBoosts = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.PremiumAudience = m.Object()
		}
		tl.BoostUrl = m.String()
		if flags&(1<<3) != 0 {
			tl.PrepaidGiveaways = m.Vector()
		}
		if flags&(1<<2) != 0 {
			tl.MyBoostSlots = m.VectorInt()
		}
		r = tl
	case CRC_invokeAfterMsg:
		tl := TL_invokeAfterMsg{}
		tl.MsgID = m.Long()
		tl.Query = m.Object()
		r = tl
	case CRC_invokeAfterMsgs:
		tl := TL_invokeAfterMsgs{}
		tl.MsgIds = m.VectorLong()
		tl.Query = m.Object()
		r = tl
	case CRC_initConnection:
		tl := TL_initConnection{}
		flags := m.Int()
		tl.ApiID = m.Int()
		tl.DeviceModel = m.String()
		tl.SystemVersion = m.String()
		tl.AppVersion = m.String()
		tl.SystemLangCode = m.String()
		tl.LangPack = m.String()
		tl.LangCode = m.String()
		if flags&(1<<0) != 0 {
			tl.Proxy = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Params = m.Object()
		}
		tl.Query = m.Object()
		r = tl
	case CRC_invokeWithLayer:
		tl := TL_invokeWithLayer{}
		tl.Layer = m.Int()
		tl.Query = m.Object()
		r = tl
	case CRC_invokeWithoutUpdates:
		tl := TL_invokeWithoutUpdates{}
		tl.Query = m.Object()
		r = tl
	case CRC_invokeWithMessagesRange:
		tl := TL_invokeWithMessagesRange{}
		tl.Range = m.Object()
		tl.Query = m.Object()
		r = tl
	case CRC_invokeWithTakeout:
		tl := TL_invokeWithTakeout{}
		tl.TakeoutID = m.Long()
		tl.Query = m.Object()
		r = tl
	case CRC_auth_sendCode:
		tl := TL_auth_sendCode{}
		tl.PhoneNumber = m.String()
		tl.ApiID = m.Int()
		tl.ApiHash = m.String()
		tl.Settings = m.Object()
		r = tl
	case CRC_auth_signUp:
		tl := TL_auth_signUp{}
		tl.PhoneNumber = m.String()
		tl.PhoneCodeHash = m.String()
		tl.FirstName = m.String()
		tl.LastName = m.String()
		r = tl
	case CRC_auth_signIn:
		tl := TL_auth_signIn{}
		flags := m.Int()
		tl.PhoneNumber = m.String()
		tl.PhoneCodeHash = m.String()
		if flags&(1<<0) != 0 {
			tl.PhoneCode = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.EmailVerification = m.Object()
		}
		r = tl
	case CRC_auth_logOut:
		tl := TL_auth_logOut{}
		r = tl
	case CRC_auth_resetAuthorizations:
		tl := TL_auth_resetAuthorizations{}
		r = tl
	case CRC_auth_exportAuthorization:
		tl := TL_auth_exportAuthorization{}
		tl.DcID = m.Int()
		r = tl
	case CRC_auth_importAuthorization:
		tl := TL_auth_importAuthorization{}
		tl.ID = m.Long()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_auth_bindTempAuthKey:
		tl := TL_auth_bindTempAuthKey{}
		tl.PermAuthKeyID = m.Long()
		tl.Nonce = m.Long()
		tl.ExpiresAt = m.Int()
		tl.EncryptedMessage = m.StringBytes()
		r = tl
	case CRC_auth_importBotAuthorization:
		tl := TL_auth_importBotAuthorization{}
		tl.Flags = m.Int()
		tl.ApiID = m.Int()
		tl.ApiHash = m.String()
		tl.BotAuthToken = m.String()
		r = tl
	case CRC_auth_checkPassword:
		tl := TL_auth_checkPassword{}
		tl.Password = m.Object()
		r = tl
	case CRC_auth_requestPasswordRecovery:
		tl := TL_auth_requestPasswordRecovery{}
		r = tl
	case CRC_auth_recoverPassword:
		tl := TL_auth_recoverPassword{}
		flags := m.Int()
		tl.Code = m.String()
		if flags&(1<<0) != 0 {
			tl.NewSettings = m.Object()
		}
		r = tl
	case CRC_auth_resendCode:
		tl := TL_auth_resendCode{}
		tl.PhoneNumber = m.String()
		tl.PhoneCodeHash = m.String()
		r = tl
	case CRC_auth_cancelCode:
		tl := TL_auth_cancelCode{}
		tl.PhoneNumber = m.String()
		tl.PhoneCodeHash = m.String()
		r = tl
	case CRC_auth_dropTempAuthKeys:
		tl := TL_auth_dropTempAuthKeys{}
		tl.ExceptAuthKeys = m.VectorLong()
		r = tl
	case CRC_auth_exportLoginToken:
		tl := TL_auth_exportLoginToken{}
		tl.ApiID = m.Int()
		tl.ApiHash = m.String()
		tl.ExceptIds = m.VectorLong()
		r = tl
	case CRC_auth_importLoginToken:
		tl := TL_auth_importLoginToken{}
		tl.Token = m.StringBytes()
		r = tl
	case CRC_auth_acceptLoginToken:
		tl := TL_auth_acceptLoginToken{}
		tl.Token = m.StringBytes()
		r = tl
	case CRC_auth_checkRecoveryPassword:
		tl := TL_auth_checkRecoveryPassword{}
		tl.Code = m.String()
		r = tl
	case CRC_auth_importWebTokenAuthorization:
		tl := TL_auth_importWebTokenAuthorization{}
		tl.ApiID = m.Int()
		tl.ApiHash = m.String()
		tl.WebAuthToken = m.String()
		r = tl
	case CRC_auth_requestFirebaseSms:
		tl := TL_auth_requestFirebaseSms{}
		flags := m.Int()
		tl.PhoneNumber = m.String()
		tl.PhoneCodeHash = m.String()
		if flags&(1<<0) != 0 {
			tl.SafetyNetToken = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.IosPushSecret = Some(m.String())
		}
		r = tl
	case CRC_auth_resetLoginEmail:
		tl := TL_auth_resetLoginEmail{}
		tl.PhoneNumber = m.String()
		tl.PhoneCodeHash = m.String()
		r = tl
	case CRC_account_registerDevice:
		tl := TL_account_registerDevice{}
		flags := m.Int()
		tl.NoMuted = flags&(1<<0) != 0
		tl.TokenType = m.Int()
		tl.Token = m.String()
		tl.AppSandbox = m.Bool()
		tl.Secret = m.StringBytes()
		tl.OtherUids = m.VectorLong()
		r = tl
	case CRC_account_unregisterDevice:
		tl := TL_account_unregisterDevice{}
		tl.TokenType = m.Int()
		tl.Token = m.String()
		tl.OtherUids = m.VectorLong()
		r = tl
	case CRC_account_updateNotifySettings:
		tl := TL_account_updateNotifySettings{}
		tl.Peer = m.Object()
		tl.Settings = m.Object()
		r = tl
	case CRC_account_getNotifySettings:
		tl := TL_account_getNotifySettings{}
		tl.Peer = m.Object()
		r = tl
	case CRC_account_resetNotifySettings:
		tl := TL_account_resetNotifySettings{}
		r = tl
	case CRC_account_updateProfile:
		tl := TL_account_updateProfile{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.FirstName = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.LastName = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.About = Some(m.String())
		}
		r = tl
	case CRC_account_updateStatus:
		tl := TL_account_updateStatus{}
		tl.Offline = m.Bool()
		r = tl
	case CRC_account_getWallPapers:
		tl := TL_account_getWallPapers{}
		tl.Hash = m.Long()
		r = tl
	case CRC_account_reportPeer:
		tl := TL_account_reportPeer{}
		tl.Peer = m.Object()
		tl.Reason = m.Object()
		tl.Message = m.String()
		r = tl
	case CRC_account_checkUsername:
		tl := TL_account_checkUsername{}
		tl.Username = m.String()
		r = tl
	case CRC_account_updateUsername:
		tl := TL_account_updateUsername{}
		tl.Username = m.String()
		r = tl
	case CRC_account_getPrivacy:
		tl := TL_account_getPrivacy{}
		tl.Key = m.Object()
		r = tl
	case CRC_account_setPrivacy:
		tl := TL_account_setPrivacy{}
		tl.Key = m.Object()
		tl.Rules = m.Vector()
		r = tl
	case CRC_account_deleteAccount:
		tl := TL_account_deleteAccount{}
		flags := m.Int()
		tl.Reason = m.String()
		if flags&(1<<0) != 0 {
			tl.Password = m.Object()
		}
		r = tl
	case CRC_account_getAccountTTL:
		tl := TL_account_getAccountTTL{}
		r = tl
	case CRC_account_setAccountTTL:
		tl := TL_account_setAccountTTL{}
		tl.Ttl = m.Object()
		r = tl
	case CRC_account_sendChangePhoneCode:
		tl := TL_account_sendChangePhoneCode{}
		tl.PhoneNumber = m.String()
		tl.Settings = m.Object()
		r = tl
	case CRC_account_changePhone:
		tl := TL_account_changePhone{}
		tl.PhoneNumber = m.String()
		tl.PhoneCodeHash = m.String()
		tl.PhoneCode = m.String()
		r = tl
	case CRC_account_updateDeviceLocked:
		tl := TL_account_updateDeviceLocked{}
		tl.Period = m.Int()
		r = tl
	case CRC_account_getAuthorizations:
		tl := TL_account_getAuthorizations{}
		r = tl
	case CRC_account_resetAuthorization:
		tl := TL_account_resetAuthorization{}
		tl.Hash = m.Long()
		r = tl
	case CRC_account_getPassword:
		tl := TL_account_getPassword{}
		r = tl
	case CRC_account_getPasswordSettings:
		tl := TL_account_getPasswordSettings{}
		tl.Password = m.Object()
		r = tl
	case CRC_account_updatePasswordSettings:
		tl := TL_account_updatePasswordSettings{}
		tl.Password = m.Object()
		tl.NewSettings = m.Object()
		r = tl
	case CRC_account_sendConfirmPhoneCode:
		tl := TL_account_sendConfirmPhoneCode{}
		tl.Hash = m.String()
		tl.Settings = m.Object()
		r = tl
	case CRC_account_confirmPhone:
		tl := TL_account_confirmPhone{}
		tl.PhoneCodeHash = m.String()
		tl.PhoneCode = m.String()
		r = tl
	case CRC_account_getTmpPassword:
		tl := TL_account_getTmpPassword{}
		tl.Password = m.Object()
		tl.Period = m.Int()
		r = tl
	case CRC_account_getWebAuthorizations:
		tl := TL_account_getWebAuthorizations{}
		r = tl
	case CRC_account_resetWebAuthorization:
		tl := TL_account_resetWebAuthorization{}
		tl.Hash = m.Long()
		r = tl
	case CRC_account_resetWebAuthorizations:
		tl := TL_account_resetWebAuthorizations{}
		r = tl
	case CRC_account_getAllSecureValues:
		tl := TL_account_getAllSecureValues{}
		r = tl
	case CRC_account_getSecureValue:
		tl := TL_account_getSecureValue{}
		tl.Types = m.Vector()
		r = tl
	case CRC_account_saveSecureValue:
		tl := TL_account_saveSecureValue{}
		tl.Value = m.Object()
		tl.SecureSecretID = m.Long()
		r = tl
	case CRC_account_deleteSecureValue:
		tl := TL_account_deleteSecureValue{}
		tl.Types = m.Vector()
		r = tl
	case CRC_account_getAuthorizationForm:
		tl := TL_account_getAuthorizationForm{}
		tl.BotID = m.Long()
		tl.Scope = m.String()
		tl.PublicKey = m.String()
		r = tl
	case CRC_account_acceptAuthorization:
		tl := TL_account_acceptAuthorization{}
		tl.BotID = m.Long()
		tl.Scope = m.String()
		tl.PublicKey = m.String()
		tl.ValueHashes = m.Vector()
		tl.Credentials = m.Object()
		r = tl
	case CRC_account_sendVerifyPhoneCode:
		tl := TL_account_sendVerifyPhoneCode{}
		tl.PhoneNumber = m.String()
		tl.Settings = m.Object()
		r = tl
	case CRC_account_verifyPhone:
		tl := TL_account_verifyPhone{}
		tl.PhoneNumber = m.String()
		tl.PhoneCodeHash = m.String()
		tl.PhoneCode = m.String()
		r = tl
	case CRC_account_sendVerifyEmailCode:
		tl := TL_account_sendVerifyEmailCode{}
		tl.Purpose = m.Object()
		tl.Email = m.String()
		r = tl
	case CRC_account_verifyEmail:
		tl := TL_account_verifyEmail{}
		tl.Purpose = m.Object()
		tl.Verification = m.Object()
		r = tl
	case CRC_account_initTakeoutSession:
		tl := TL_account_initTakeoutSession{}
		flags := m.Int()
		tl.Contacts = flags&(1<<0) != 0
		tl.MessageUsers = flags&(1<<1) != 0
		tl.MessageChats = flags&(1<<2) != 0
		tl.MessageMegagroups = flags&(1<<3) != 0
		tl.MessageChannels = flags&(1<<4) != 0
		tl.Files = flags&(1<<5) != 0
		if flags&(1<<5) != 0 {
			tl.FileMaxSize = Some(m.Long())
		}
		r = tl
	case CRC_account_finishTakeoutSession:
		tl := TL_account_finishTakeoutSession{}
		flags := m.Int()
		tl.Success = flags&(1<<0) != 0
		r = tl
	case CRC_account_confirmPasswordEmail:
		tl := TL_account_confirmPasswordEmail{}
		tl.Code = m.String()
		r = tl
	case CRC_account_resendPasswordEmail:
		tl := TL_account_resendPasswordEmail{}
		r = tl
	case CRC_account_cancelPasswordEmail:
		tl := TL_account_cancelPasswordEmail{}
		r = tl
	case CRC_account_getContactSignUpNotification:
		tl := TL_account_getContactSignUpNotification{}
		r = tl
	case CRC_account_setContactSignUpNotification:
		tl := TL_account_setContactSignUpNotification{}
		tl.Silent = m.Bool()
		r = tl
	case CRC_account_getNotifyExceptions:
		tl := TL_account_getNotifyExceptions{}
		flags := m.Int()
		tl.CompareSound = flags&(1<<1) != 0
		tl.CompareStories = flags&(1<<2) != 0
		if flags&(1<<0) != 0 {
			tl.Peer = m.Object()
		}
		r = tl
	case CRC_account_getWallPaper:
		tl := TL_account_getWallPaper{}
		tl.Wallpaper = m.Object()
		r = tl
	case CRC_account_uploadWallPaper:
		tl := TL_account_uploadWallPaper{}
		flags := m.Int()
		tl.ForChat = flags&(1<<0) != 0
		tl.File = m.Object()
		tl.MimeType = m.String()
		tl.Settings = m.Object()
		r = tl
	case CRC_account_saveWallPaper:
		tl := TL_account_saveWallPaper{}
		tl.Wallpaper = m.Object()
		tl.Unsave = m.Bool()
		tl.Settings = m.Object()
		r = tl
	case CRC_account_installWallPaper:
		tl := TL_account_installWallPaper{}
		tl.Wallpaper = m.Object()
		tl.Settings = m.Object()
		r = tl
	case CRC_account_resetWallPapers:
		tl := TL_account_resetWallPapers{}
		r = tl
	case CRC_account_getAutoDownloadSettings:
		tl := TL_account_getAutoDownloadSettings{}
		r = tl
	case CRC_account_saveAutoDownloadSettings:
		tl := TL_account_saveAutoDownloadSettings{}
		flags := m.Int()
		tl.Low = flags&(1<<0) != 0
		tl.High = flags&(1<<1) != 0
		tl.Settings = m.Object()
		r = tl
	case CRC_account_uploadTheme:
		tl := TL_account_uploadTheme{}
		flags := m.Int()
		tl.File = m.Object()
		if flags&(1<<0) != 0 {
			tl.Thumb = m.Object()
		}
		tl.FileName = m.String()
		tl.MimeType = m.String()
		r = tl
	case CRC_account_createTheme:
		tl := TL_account_createTheme{}
		flags := m.Int()
		tl.Slug = m.String()
		tl.Title = m.String()
		if flags&(1<<2) != 0 {
			tl.Document = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.Settings = m.Vector()
		}
		r = tl
	case CRC_account_updateTheme:
		tl := TL_account_updateTheme{}
		flags := m.Int()
		tl.Format = m.String()
		tl.Theme = m.Object()
		if flags&(1<<0) != 0 {
			tl.Slug = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Document = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.Settings = m.Vector()
		}
		r = tl
	case CRC_account_saveTheme:
		tl := TL_account_saveTheme{}
		tl.Theme = m.Object()
		tl.Unsave = m.Bool()
		r = tl
	case CRC_account_installTheme:
		tl := TL_account_installTheme{}
		flags := m.Int()
		tl.Dark = flags&(1<<0) != 0
		if flags&(1<<1) != 0 {
			tl.Theme = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Format = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.BaseTheme = m.Object()
		}
		r = tl
	case CRC_account_getTheme:
		tl := TL_account_getTheme{}
		tl.Format = m.String()
		tl.Theme = m.Object()
		r = tl
	case CRC_account_getThemes:
		tl := TL_account_getThemes{}
		tl.Format = m.String()
		tl.Hash = m.Long()
		r = tl
	case CRC_account_setContentSettings:
		tl := TL_account_setContentSettings{}
		flags := m.Int()
		tl.SensitiveEnabled = flags&(1<<0) != 0
		r = tl
	case CRC_account_getContentSettings:
		tl := TL_account_getContentSettings{}
		r = tl
	case CRC_account_getMultiWallPapers:
		tl := TL_account_getMultiWallPapers{}
		tl.Wallpapers = m.Vector()
		r = tl
	case CRC_account_getGlobalPrivacySettings:
		tl := TL_account_getGlobalPrivacySettings{}
		r = tl
	case CRC_account_setGlobalPrivacySettings:
		tl := TL_account_setGlobalPrivacySettings{}
		tl.Settings = m.Object()
		r = tl
	case CRC_account_reportProfilePhoto:
		tl := TL_account_reportProfilePhoto{}
		tl.Peer = m.Object()
		tl.PhotoID = m.Object()
		tl.Reason = m.Object()
		tl.Message = m.String()
		r = tl
	case CRC_account_resetPassword:
		tl := TL_account_resetPassword{}
		r = tl
	case CRC_account_declinePasswordReset:
		tl := TL_account_declinePasswordReset{}
		r = tl
	case CRC_account_getChatThemes:
		tl := TL_account_getChatThemes{}
		tl.Hash = m.Long()
		r = tl
	case CRC_account_setAuthorizationTTL:
		tl := TL_account_setAuthorizationTTL{}
		tl.AuthorizationTtlDays = m.Int()
		r = tl
	case CRC_account_changeAuthorizationSettings:
		tl := TL_account_changeAuthorizationSettings{}
		flags := m.Int()
		tl.Confirmed = flags&(1<<3) != 0
		tl.Hash = m.Long()
		if flags&(1<<0) != 0 {
			tl.EncryptedRequestsDisabled = Some(m.Bool())
		}
		if flags&(1<<1) != 0 {
			tl.CallRequestsDisabled = Some(m.Bool())
		}
		r = tl
	case CRC_account_getSavedRingtones:
		tl := TL_account_getSavedRingtones{}
		tl.Hash = m.Long()
		r = tl
	case CRC_account_saveRingtone:
		tl := TL_account_saveRingtone{}
		tl.ID = m.Object()
		tl.Unsave = m.Bool()
		r = tl
	case CRC_account_uploadRingtone:
		tl := TL_account_uploadRingtone{}
		tl.File = m.Object()
		tl.FileName = m.String()
		tl.MimeType = m.String()
		r = tl
	case CRC_account_updateEmojiStatus:
		tl := TL_account_updateEmojiStatus{}
		tl.EmojiStatus = m.Object()
		r = tl
	case CRC_account_getDefaultEmojiStatuses:
		tl := TL_account_getDefaultEmojiStatuses{}
		tl.Hash = m.Long()
		r = tl
	case CRC_account_getRecentEmojiStatuses:
		tl := TL_account_getRecentEmojiStatuses{}
		tl.Hash = m.Long()
		r = tl
	case CRC_account_clearRecentEmojiStatuses:
		tl := TL_account_clearRecentEmojiStatuses{}
		r = tl
	case CRC_account_reorderUsernames:
		tl := TL_account_reorderUsernames{}
		tl.Order = m.VectorString()
		r = tl
	case CRC_account_toggleUsername:
		tl := TL_account_toggleUsername{}
		tl.Username = m.String()
		tl.Active = m.Bool()
		r = tl
	case CRC_account_getDefaultProfilePhotoEmojis:
		tl := TL_account_getDefaultProfilePhotoEmojis{}
		tl.Hash = m.Long()
		r = tl
	case CRC_account_getDefaultGroupPhotoEmojis:
		tl := TL_account_getDefaultGroupPhotoEmojis{}
		tl.Hash = m.Long()
		r = tl
	case CRC_account_getAutoSaveSettings:
		tl := TL_account_getAutoSaveSettings{}
		r = tl
	case CRC_account_saveAutoSaveSettings:
		tl := TL_account_saveAutoSaveSettings{}
		flags := m.Int()
		tl.Users = flags&(1<<0) != 0
		tl.Chats = flags&(1<<1) != 0
		tl.Broadcasts = flags&(1<<2) != 0
		if flags&(1<<3) != 0 {
			tl.Peer = m.Object()
		}
		tl.Settings = m.Object()
		r = tl
	case CRC_account_deleteAutoSaveExceptions:
		tl := TL_account_deleteAutoSaveExceptions{}
		r = tl
	case CRC_account_invalidateSignInCodes:
		tl := TL_account_invalidateSignInCodes{}
		tl.Codes = m.VectorString()
		r = tl
	case CRC_account_updateColor:
		tl := TL_account_updateColor{}
		flags := m.Int()
		tl.Color = m.Int()
		if flags&(1<<0) != 0 {
			tl.BackgroundEmojiID = Some(m.Long())
		}
		r = tl
	case CRC_account_getDefaultBackgroundEmojis:
		tl := TL_account_getDefaultBackgroundEmojis{}
		tl.Hash = m.Long()
		r = tl
	case CRC_users_getUsers:
		tl := TL_users_getUsers{}
		tl.ID = m.Vector()
		r = tl
	case CRC_users_getFullUser:
		tl := TL_users_getFullUser{}
		tl.ID = m.Object()
		r = tl
	case CRC_users_setSecureValueErrors:
		tl := TL_users_setSecureValueErrors{}
		tl.ID = m.Object()
		tl.Errors = m.Vector()
		r = tl
	case CRC_contacts_getContactIDs:
		tl := TL_contacts_getContactIDs{}
		tl.Hash = m.Long()
		r = tl
	case CRC_contacts_getStatuses:
		tl := TL_contacts_getStatuses{}
		r = tl
	case CRC_contacts_getContacts:
		tl := TL_contacts_getContacts{}
		tl.Hash = m.Long()
		r = tl
	case CRC_contacts_importContacts:
		tl := TL_contacts_importContacts{}
		tl.Contacts = m.Vector()
		r = tl
	case CRC_contacts_deleteContacts:
		tl := TL_contacts_deleteContacts{}
		tl.ID = m.Vector()
		r = tl
	case CRC_contacts_deleteByPhones:
		tl := TL_contacts_deleteByPhones{}
		tl.Phones = m.VectorString()
		r = tl
	case CRC_contacts_block:
		tl := TL_contacts_block{}
		flags := m.Int()
		tl.MyStoriesFrom = flags&(1<<0) != 0
		tl.ID = m.Object()
		r = tl
	case CRC_contacts_unblock:
		tl := TL_contacts_unblock{}
		flags := m.Int()
		tl.MyStoriesFrom = flags&(1<<0) != 0
		tl.ID = m.Object()
		r = tl
	case CRC_contacts_getBlocked:
		tl := TL_contacts_getBlocked{}
		flags := m.Int()
		tl.MyStoriesFrom = flags&(1<<0) != 0
		tl.Offset = m.Int()
		tl.Limit = m.Int()
		r = tl
	case CRC_contacts_search:
		tl := TL_contacts_search{}
		tl.Q = m.String()
		tl.Limit = m.Int()
		r = tl
	case CRC_contacts_resolveUsername:
		tl := TL_contacts_resolveUsername{}
		tl.Username = m.String()
		r = tl
	case CRC_contacts_getTopPeers:
		tl := TL_contacts_getTopPeers{}
		flags := m.Int()
		tl.Correspondents = flags&(1<<0) != 0
		tl.BotsPm = flags&(1<<1) != 0
		tl.BotsInline = flags&(1<<2) != 0
		tl.PhoneCalls = flags&(1<<3) != 0
		tl.ForwardUsers = flags&(1<<4) != 0
		tl.ForwardChats = flags&(1<<5) != 0
		tl.Groups = flags&(1<<10) != 0
		tl.Channels = flags&(1<<15) != 0
		tl.Offset = m.Int()
		tl.Limit = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_contacts_resetTopPeerRating:
		tl := TL_contacts_resetTopPeerRating{}
		tl.Category = m.Object()
		tl.Peer = m.Object()
		r = tl
	case CRC_contacts_resetSaved:
		tl := TL_contacts_resetSaved{}
		r = tl
	case CRC_contacts_getSaved:
		tl := TL_contacts_getSaved{}
		r = tl
	case CRC_contacts_toggleTopPeers:
		tl := TL_contacts_toggleTopPeers{}
		tl.Enabled = m.Bool()
		r = tl
	case CRC_contacts_addContact:
		tl := TL_contacts_addContact{}
		flags := m.Int()
		tl.AddPhonePrivacyException = flags&(1<<0) != 0
		tl.ID = m.Object()
		tl.FirstName = m.String()
		tl.LastName = m.String()
		tl.Phone = m.String()
		r = tl
	case CRC_contacts_acceptContact:
		tl := TL_contacts_acceptContact{}
		tl.ID = m.Object()
		r = tl
	case CRC_contacts_getLocated:
		tl := TL_contacts_getLocated{}
		flags := m.Int()
		tl.Background = flags&(1<<1) != 0
		tl.GeoPoint = m.Object()
		if flags&(1<<0) != 0 {
			tl.SelfExpires = Some(m.Int())
		}
		r = tl
	case CRC_contacts_blockFromReplies:
		tl := TL_contacts_blockFromReplies{}
		flags := m.Int()
		tl.DeleteMessage = flags&(1<<0) != 0
		tl.DeleteHistory = flags&(1<<1) != 0
		tl.ReportSpam = flags&(1<<2) != 0
		tl.MsgID = m.Int()
		r = tl
	case CRC_contacts_resolvePhone:
		tl := TL_contacts_resolvePhone{}
		tl.Phone = m.String()
		r = tl
	case CRC_contacts_exportContactToken:
		tl := TL_contacts_exportContactToken{}
		r = tl
	case CRC_contacts_importContactToken:
		tl := TL_contacts_importContactToken{}
		tl.Token = m.String()
		r = tl
	case CRC_contacts_editCloseFriends:
		tl := TL_contacts_editCloseFriends{}
		tl.ID = m.VectorLong()
		r = tl
	case CRC_contacts_setBlocked:
		tl := TL_contacts_setBlocked{}
		flags := m.Int()
		tl.MyStoriesFrom = flags&(1<<0) != 0
		tl.ID = m.Vector()
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_getMessages:
		tl := TL_messages_getMessages{}
		tl.ID = m.Vector()
		r = tl
	case CRC_messages_getDialogs:
		tl := TL_messages_getDialogs{}
		flags := m.Int()
		tl.ExcludePinned = flags&(1<<0) != 0
		if flags&(1<<1) != 0 {
			tl.FolderID = Some(m.Int())
		}
		tl.OffsetDate = m.Int()
		tl.OffsetID = m.Int()
		tl.OffsetPeer = m.Object()
		tl.Limit = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getHistory:
		tl := TL_messages_getHistory{}
		tl.Peer = m.Object()
		tl.OffsetID = m.Int()
		tl.OffsetDate = m.Int()
		tl.AddOffset = m.Int()
		tl.Limit = m.Int()
		tl.MaxID = m.Int()
		tl.MinID = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_search:
		tl := TL_messages_search{}
		flags := m.Int()
		tl.Peer = m.Object()
		tl.Q = m.String()
		if flags&(1<<0) != 0 {
			tl.FromID = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		tl.Filter = m.Object()
		tl.MinDate = m.Int()
		tl.MaxDate = m.Int()
		tl.OffsetID = m.Int()
		tl.AddOffset = m.Int()
		tl.Limit = m.Int()
		tl.MaxID = m.Int()
		tl.MinID = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_readHistory:
		tl := TL_messages_readHistory{}
		tl.Peer = m.Object()
		tl.MaxID = m.Int()
		r = tl
	case CRC_messages_deleteHistory:
		tl := TL_messages_deleteHistory{}
		flags := m.Int()
		tl.JustClear = flags&(1<<0) != 0
		tl.Revoke = flags&(1<<1) != 0
		tl.Peer = m.Object()
		tl.MaxID = m.Int()
		if flags&(1<<2) != 0 {
			tl.MinDate = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.MaxDate = Some(m.Int())
		}
		r = tl
	case CRC_messages_deleteMessages:
		tl := TL_messages_deleteMessages{}
		flags := m.Int()
		tl.Revoke = flags&(1<<0) != 0
		tl.ID = m.VectorInt()
		r = tl
	case CRC_messages_receivedMessages:
		tl := TL_messages_receivedMessages{}
		tl.MaxID = m.Int()
		r = tl
	case CRC_messages_setTyping:
		tl := TL_messages_setTyping{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		tl.Action = m.Object()
		r = tl
	case CRC_messages_sendMessage:
		tl := TL_messages_sendMessage{}
		flags := m.Int()
		tl.NoWebpage = flags&(1<<1) != 0
		tl.Silent = flags&(1<<5) != 0
		tl.Background = flags&(1<<6) != 0
		tl.ClearDraft = flags&(1<<7) != 0
		tl.Noforwards = flags&(1<<14) != 0
		tl.UpdateStickersetsOrder = flags&(1<<15) != 0
		tl.InvertMedia = flags&(1<<16) != 0
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.ReplyTo = m.Object()
		}
		tl.Message = m.String()
		tl.RandomID = m.Long()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<10) != 0 {
			tl.ScheduleDate = Some(m.Int())
		}
		if flags&(1<<13) != 0 {
			tl.SendAs = m.Object()
		}
		r = tl
	case CRC_messages_sendMedia:
		tl := TL_messages_sendMedia{}
		flags := m.Int()
		tl.Silent = flags&(1<<5) != 0
		tl.Background = flags&(1<<6) != 0
		tl.ClearDraft = flags&(1<<7) != 0
		tl.Noforwards = flags&(1<<14) != 0
		tl.UpdateStickersetsOrder = flags&(1<<15) != 0
		tl.InvertMedia = flags&(1<<16) != 0
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.ReplyTo = m.Object()
		}
		tl.Media = m.Object()
		tl.Message = m.String()
		tl.RandomID = m.Long()
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<10) != 0 {
			tl.ScheduleDate = Some(m.Int())
		}
		if flags&(1<<13) != 0 {
			tl.SendAs = m.Object()
		}
		r = tl
	case CRC_messages_forwardMessages:
		tl := TL_messages_forwardMessages{}
		flags := m.Int()
		tl.Silent = flags&(1<<5) != 0
		tl.Background = flags&(1<<6) != 0
		tl.WithMyScore = flags&(1<<8) != 0
		tl.DropAuthor = flags&(1<<11) != 0
		tl.DropMediaCaptions = flags&(1<<12) != 0
		tl.Noforwards = flags&(1<<14) != 0
		tl.FromPeer = m.Object()
		tl.ID = m.VectorInt()
		tl.RandomID = m.VectorLong()
		tl.ToPeer = m.Object()
		if flags&(1<<9) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		if flags&(1<<10) != 0 {
			tl.ScheduleDate = Some(m.Int())
		}
		if flags&(1<<13) != 0 {
			tl.SendAs = m.Object()
		}
		r = tl
	case CRC_messages_reportSpam:
		tl := TL_messages_reportSpam{}
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_getPeerSettings:
		tl := TL_messages_getPeerSettings{}
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_report:
		tl := TL_messages_report{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		tl.Reason = m.Object()
		tl.Message = m.String()
		r = tl
	case CRC_messages_getChats:
		tl := TL_messages_getChats{}
		tl.ID = m.VectorLong()
		r = tl
	case CRC_messages_getFullChat:
		tl := TL_messages_getFullChat{}
		tl.ChatID = m.Long()
		r = tl
	case CRC_messages_editChatTitle:
		tl := TL_messages_editChatTitle{}
		tl.ChatID = m.Long()
		tl.Title = m.String()
		r = tl
	case CRC_messages_editChatPhoto:
		tl := TL_messages_editChatPhoto{}
		tl.ChatID = m.Long()
		tl.Photo = m.Object()
		r = tl
	case CRC_messages_addChatUser:
		tl := TL_messages_addChatUser{}
		tl.ChatID = m.Long()
		tl.UserID = m.Object()
		tl.FwdLimit = m.Int()
		r = tl
	case CRC_messages_deleteChatUser:
		tl := TL_messages_deleteChatUser{}
		flags := m.Int()
		tl.RevokeHistory = flags&(1<<0) != 0
		tl.ChatID = m.Long()
		tl.UserID = m.Object()
		r = tl
	case CRC_messages_createChat:
		tl := TL_messages_createChat{}
		flags := m.Int()
		tl.Users = m.Vector()
		tl.Title = m.String()
		if flags&(1<<0) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		r = tl
	case CRC_messages_getDhConfig:
		tl := TL_messages_getDhConfig{}
		tl.Version = m.Int()
		tl.RandomLength = m.Int()
		r = tl
	case CRC_messages_requestEncryption:
		tl := TL_messages_requestEncryption{}
		tl.UserID = m.Object()
		tl.RandomID = m.Int()
		tl.GA = m.StringBytes()
		r = tl
	case CRC_messages_acceptEncryption:
		tl := TL_messages_acceptEncryption{}
		tl.Peer = m.Object()
		tl.GB = m.StringBytes()
		tl.KeyFingerprint = m.Long()
		r = tl
	case CRC_messages_discardEncryption:
		tl := TL_messages_discardEncryption{}
		flags := m.Int()
		tl.DeleteHistory = flags&(1<<0) != 0
		tl.ChatID = m.Int()
		r = tl
	case CRC_messages_setEncryptedTyping:
		tl := TL_messages_setEncryptedTyping{}
		tl.Peer = m.Object()
		tl.Typing = m.Bool()
		r = tl
	case CRC_messages_readEncryptedHistory:
		tl := TL_messages_readEncryptedHistory{}
		tl.Peer = m.Object()
		tl.MaxDate = m.Int()
		r = tl
	case CRC_messages_sendEncrypted:
		tl := TL_messages_sendEncrypted{}
		flags := m.Int()
		tl.Silent = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.RandomID = m.Long()
		tl.Data = m.StringBytes()
		r = tl
	case CRC_messages_sendEncryptedFile:
		tl := TL_messages_sendEncryptedFile{}
		flags := m.Int()
		tl.Silent = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.RandomID = m.Long()
		tl.Data = m.StringBytes()
		tl.File = m.Object()
		r = tl
	case CRC_messages_sendEncryptedService:
		tl := TL_messages_sendEncryptedService{}
		tl.Peer = m.Object()
		tl.RandomID = m.Long()
		tl.Data = m.StringBytes()
		r = tl
	case CRC_messages_receivedQueue:
		tl := TL_messages_receivedQueue{}
		tl.MaxQts = m.Int()
		r = tl
	case CRC_messages_reportEncryptedSpam:
		tl := TL_messages_reportEncryptedSpam{}
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_readMessageContents:
		tl := TL_messages_readMessageContents{}
		tl.ID = m.VectorInt()
		r = tl
	case CRC_messages_getStickers:
		tl := TL_messages_getStickers{}
		tl.Emoticon = m.String()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getAllStickers:
		tl := TL_messages_getAllStickers{}
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getWebPagePreview:
		tl := TL_messages_getWebPagePreview{}
		flags := m.Int()
		tl.Message = m.String()
		if flags&(1<<3) != 0 {
			tl.Entities = m.Vector()
		}
		r = tl
	case CRC_messages_exportChatInvite:
		tl := TL_messages_exportChatInvite{}
		flags := m.Int()
		tl.LegacyRevokePermanent = flags&(1<<2) != 0
		tl.RequestNeeded = flags&(1<<3) != 0
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.ExpireDate = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.UsageLimit = Some(m.Int())
		}
		if flags&(1<<4) != 0 {
			tl.Title = Some(m.String())
		}
		r = tl
	case CRC_messages_checkChatInvite:
		tl := TL_messages_checkChatInvite{}
		tl.Hash = m.String()
		r = tl
	case CRC_messages_importChatInvite:
		tl := TL_messages_importChatInvite{}
		tl.Hash = m.String()
		r = tl
	case CRC_messages_getStickerSet:
		tl := TL_messages_getStickerSet{}
		tl.Stickerset = m.Object()
		tl.Hash = m.Int()
		r = tl
	case CRC_messages_installStickerSet:
		tl := TL_messages_installStickerSet{}
		tl.Stickerset = m.Object()
		tl.Archived = m.Bool()
		r = tl
	case CRC_messages_uninstallStickerSet:
		tl := TL_messages_uninstallStickerSet{}
		tl.Stickerset = m.Object()
		r = tl
	case CRC_messages_startBot:
		tl := TL_messages_startBot{}
		tl.Bot = m.Object()
		tl.Peer = m.Object()
		tl.RandomID = m.Long()
		tl.StartParam = m.String()
		r = tl
	case CRC_messages_getMessagesViews:
		tl := TL_messages_getMessagesViews{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		tl.Increment = m.Bool()
		r = tl
	case CRC_messages_editChatAdmin:
		tl := TL_messages_editChatAdmin{}
		tl.ChatID = m.Long()
		tl.UserID = m.Object()
		tl.IsAdmin = m.Bool()
		r = tl
	case CRC_messages_migrateChat:
		tl := TL_messages_migrateChat{}
		tl.ChatID = m.Long()
		r = tl
	case CRC_messages_searchGlobal:
		tl := TL_messages_searchGlobal{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.FolderID = Some(m.Int())
		}
		tl.Q = m.String()
		tl.Filter = m.Object()
		tl.MinDate = m.Int()
		tl.MaxDate = m.Int()
		tl.OffsetRate = m.Int()
		tl.OffsetPeer = m.Object()
		tl.OffsetID = m.Int()
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_reorderStickerSets:
		tl := TL_messages_reorderStickerSets{}
		flags := m.Int()
		tl.Masks = flags&(1<<0) != 0
		tl.Emojis = flags&(1<<1) != 0
		tl.Order = m.VectorLong()
		r = tl
	case CRC_messages_getDocumentByHash:
		tl := TL_messages_getDocumentByHash{}
		tl.Sha256 = m.StringBytes()
		tl.Size = m.Long()
		tl.MimeType = m.String()
		r = tl
	case CRC_messages_getSavedGifs:
		tl := TL_messages_getSavedGifs{}
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_saveGif:
		tl := TL_messages_saveGif{}
		tl.ID = m.Object()
		tl.Unsave = m.Bool()
		r = tl
	case CRC_messages_getInlineBotResults:
		tl := TL_messages_getInlineBotResults{}
		flags := m.Int()
		tl.Bot = m.Object()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.GeoPoint = m.Object()
		}
		tl.Query = m.String()
		tl.Offset = m.String()
		r = tl
	case CRC_messages_setInlineBotResults:
		tl := TL_messages_setInlineBotResults{}
		flags := m.Int()
		tl.Gallery = flags&(1<<0) != 0
		tl.Private = flags&(1<<1) != 0
		tl.QueryID = m.Long()
		tl.Results = m.Vector()
		tl.CacheTime = m.Int()
		if flags&(1<<2) != 0 {
			tl.NextOffset = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.SwitchPm = m.Object()
		}
		if flags&(1<<4) != 0 {
			tl.SwitchWebview = m.Object()
		}
		r = tl
	case CRC_messages_sendInlineBotResult:
		tl := TL_messages_sendInlineBotResult{}
		flags := m.Int()
		tl.Silent = flags&(1<<5) != 0
		tl.Background = flags&(1<<6) != 0
		tl.ClearDraft = flags&(1<<7) != 0
		tl.HideVia = flags&(1<<11) != 0
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.ReplyTo = m.Object()
		}
		tl.RandomID = m.Long()
		tl.QueryID = m.Long()
		tl.ID = m.String()
		if flags&(1<<10) != 0 {
			tl.ScheduleDate = Some(m.Int())
		}
		if flags&(1<<13) != 0 {
			tl.SendAs = m.Object()
		}
		r = tl
	case CRC_messages_getMessageEditData:
		tl := TL_messages_getMessageEditData{}
		tl.Peer = m.Object()
		tl.ID = m.Int()
		r = tl
	case CRC_messages_editMessage:
		tl := TL_messages_editMessage{}
		flags := m.Int()
		tl.NoWebpage = flags&(1<<1) != 0
		tl.InvertMedia = flags&(1<<16) != 0
		tl.Peer = m.Object()
		tl.ID = m.Int()
		if flags&(1<<11) != 0 {
			tl.Message = Some(m.String())
		}
		if flags&(1<<14) != 0 {
			tl.Media = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<15) != 0 {
			tl.ScheduleDate = Some(m.Int())
		}
		r = tl
	case CRC_messages_editInlineBotMessage:
		tl := TL_messages_editInlineBotMessage{}
		flags := m.Int()
		tl.NoWebpage = flags&(1<<1) != 0
		tl.InvertMedia = flags&(1<<16) != 0
		tl.ID = m.Object()
		if flags&(1<<11) != 0 {
			tl.Message = Some(m.String())
		}
		if flags&(1<<14) != 0 {
			tl.Media = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.ReplyMarkup = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.Entities = m.Vector()
		}
		r = tl
	case CRC_messages_getBotCallbackAnswer:
		tl := TL_messages_getBotCallbackAnswer{}
		flags := m.Int()
		tl.Game = flags&(1<<1) != 0
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Data = m.StringBytes()
		}
		if flags&(1<<2) != 0 {
			tl.Password = m.Object()
		}
		r = tl
	case CRC_messages_setBotCallbackAnswer:
		tl := TL_messages_setBotCallbackAnswer{}
		flags := m.Int()
		tl.Alert = flags&(1<<1) != 0
		tl.QueryID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Message = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Url = Some(m.String())
		}
		tl.CacheTime = m.Int()
		r = tl
	case CRC_messages_getPeerDialogs:
		tl := TL_messages_getPeerDialogs{}
		tl.Peers = m.Vector()
		r = tl
	case CRC_messages_saveDraft:
		tl := TL_messages_saveDraft{}
		flags := m.Int()
		tl.NoWebpage = flags&(1<<1) != 0
		tl.InvertMedia = flags&(1<<6) != 0
		if flags&(1<<4) != 0 {
			tl.ReplyTo = m.Object()
		}
		tl.Peer = m.Object()
		tl.Message = m.String()
		if flags&(1<<3) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<5) != 0 {
			tl.Media = m.Object()
		}
		r = tl
	case CRC_messages_getAllDrafts:
		tl := TL_messages_getAllDrafts{}
		r = tl
	case CRC_messages_getFeaturedStickers:
		tl := TL_messages_getFeaturedStickers{}
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_readFeaturedStickers:
		tl := TL_messages_readFeaturedStickers{}
		tl.ID = m.VectorLong()
		r = tl
	case CRC_messages_getRecentStickers:
		tl := TL_messages_getRecentStickers{}
		flags := m.Int()
		tl.Attached = flags&(1<<0) != 0
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_saveRecentSticker:
		tl := TL_messages_saveRecentSticker{}
		flags := m.Int()
		tl.Attached = flags&(1<<0) != 0
		tl.ID = m.Object()
		tl.Unsave = m.Bool()
		r = tl
	case CRC_messages_clearRecentStickers:
		tl := TL_messages_clearRecentStickers{}
		flags := m.Int()
		tl.Attached = flags&(1<<0) != 0
		r = tl
	case CRC_messages_getArchivedStickers:
		tl := TL_messages_getArchivedStickers{}
		flags := m.Int()
		tl.Masks = flags&(1<<0) != 0
		tl.Emojis = flags&(1<<1) != 0
		tl.OffsetID = m.Long()
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_getMaskStickers:
		tl := TL_messages_getMaskStickers{}
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getAttachedStickers:
		tl := TL_messages_getAttachedStickers{}
		tl.Media = m.Object()
		r = tl
	case CRC_messages_setGameScore:
		tl := TL_messages_setGameScore{}
		flags := m.Int()
		tl.EditMessage = flags&(1<<0) != 0
		tl.Force = flags&(1<<1) != 0
		tl.Peer = m.Object()
		tl.ID = m.Int()
		tl.UserID = m.Object()
		tl.Score = m.Int()
		r = tl
	case CRC_messages_setInlineGameScore:
		tl := TL_messages_setInlineGameScore{}
		flags := m.Int()
		tl.EditMessage = flags&(1<<0) != 0
		tl.Force = flags&(1<<1) != 0
		tl.ID = m.Object()
		tl.UserID = m.Object()
		tl.Score = m.Int()
		r = tl
	case CRC_messages_getGameHighScores:
		tl := TL_messages_getGameHighScores{}
		tl.Peer = m.Object()
		tl.ID = m.Int()
		tl.UserID = m.Object()
		r = tl
	case CRC_messages_getInlineGameHighScores:
		tl := TL_messages_getInlineGameHighScores{}
		tl.ID = m.Object()
		tl.UserID = m.Object()
		r = tl
	case CRC_messages_getCommonChats:
		tl := TL_messages_getCommonChats{}
		tl.UserID = m.Object()
		tl.MaxID = m.Long()
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_getWebPage:
		tl := TL_messages_getWebPage{}
		tl.Url = m.String()
		tl.Hash = m.Int()
		r = tl
	case CRC_messages_toggleDialogPin:
		tl := TL_messages_toggleDialogPin{}
		flags := m.Int()
		tl.Pinned = flags&(1<<0) != 0
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_reorderPinnedDialogs:
		tl := TL_messages_reorderPinnedDialogs{}
		flags := m.Int()
		tl.Force = flags&(1<<0) != 0
		tl.FolderID = m.Int()
		tl.Order = m.Vector()
		r = tl
	case CRC_messages_getPinnedDialogs:
		tl := TL_messages_getPinnedDialogs{}
		tl.FolderID = m.Int()
		r = tl
	case CRC_messages_setBotShippingResults:
		tl := TL_messages_setBotShippingResults{}
		flags := m.Int()
		tl.QueryID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Error = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.ShippingOptions = m.Vector()
		}
		r = tl
	case CRC_messages_setBotPrecheckoutResults:
		tl := TL_messages_setBotPrecheckoutResults{}
		flags := m.Int()
		tl.Success = flags&(1<<1) != 0
		tl.QueryID = m.Long()
		if flags&(1<<0) != 0 {
			tl.Error = Some(m.String())
		}
		r = tl
	case CRC_messages_uploadMedia:
		tl := TL_messages_uploadMedia{}
		tl.Peer = m.Object()
		tl.Media = m.Object()
		r = tl
	case CRC_messages_sendScreenshotNotification:
		tl := TL_messages_sendScreenshotNotification{}
		tl.Peer = m.Object()
		tl.ReplyTo = m.Object()
		tl.RandomID = m.Long()
		r = tl
	case CRC_messages_getFavedStickers:
		tl := TL_messages_getFavedStickers{}
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_faveSticker:
		tl := TL_messages_faveSticker{}
		tl.ID = m.Object()
		tl.Unfave = m.Bool()
		r = tl
	case CRC_messages_getUnreadMentions:
		tl := TL_messages_getUnreadMentions{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		tl.OffsetID = m.Int()
		tl.AddOffset = m.Int()
		tl.Limit = m.Int()
		tl.MaxID = m.Int()
		tl.MinID = m.Int()
		r = tl
	case CRC_messages_readMentions:
		tl := TL_messages_readMentions{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		r = tl
	case CRC_messages_getRecentLocations:
		tl := TL_messages_getRecentLocations{}
		tl.Peer = m.Object()
		tl.Limit = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_sendMultiMedia:
		tl := TL_messages_sendMultiMedia{}
		flags := m.Int()
		tl.Silent = flags&(1<<5) != 0
		tl.Background = flags&(1<<6) != 0
		tl.ClearDraft = flags&(1<<7) != 0
		tl.Noforwards = flags&(1<<14) != 0
		tl.UpdateStickersetsOrder = flags&(1<<15) != 0
		tl.InvertMedia = flags&(1<<16) != 0
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.ReplyTo = m.Object()
		}
		tl.MultiMedia = m.Vector()
		if flags&(1<<10) != 0 {
			tl.ScheduleDate = Some(m.Int())
		}
		if flags&(1<<13) != 0 {
			tl.SendAs = m.Object()
		}
		r = tl
	case CRC_messages_uploadEncryptedFile:
		tl := TL_messages_uploadEncryptedFile{}
		tl.Peer = m.Object()
		tl.File = m.Object()
		r = tl
	case CRC_messages_searchStickerSets:
		tl := TL_messages_searchStickerSets{}
		flags := m.Int()
		tl.ExcludeFeatured = flags&(1<<0) != 0
		tl.Q = m.String()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getSplitRanges:
		tl := TL_messages_getSplitRanges{}
		r = tl
	case CRC_messages_markDialogUnread:
		tl := TL_messages_markDialogUnread{}
		flags := m.Int()
		tl.Unread = flags&(1<<0) != 0
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_getDialogUnreadMarks:
		tl := TL_messages_getDialogUnreadMarks{}
		r = tl
	case CRC_messages_clearAllDrafts:
		tl := TL_messages_clearAllDrafts{}
		r = tl
	case CRC_messages_updatePinnedMessage:
		tl := TL_messages_updatePinnedMessage{}
		flags := m.Int()
		tl.Silent = flags&(1<<0) != 0
		tl.Unpin = flags&(1<<1) != 0
		tl.PmOneside = flags&(1<<2) != 0
		tl.Peer = m.Object()
		tl.ID = m.Int()
		r = tl
	case CRC_messages_sendVote:
		tl := TL_messages_sendVote{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.Options = m.VectorBytes()
		r = tl
	case CRC_messages_getPollResults:
		tl := TL_messages_getPollResults{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_messages_getOnlines:
		tl := TL_messages_getOnlines{}
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_editChatAbout:
		tl := TL_messages_editChatAbout{}
		tl.Peer = m.Object()
		tl.About = m.String()
		r = tl
	case CRC_messages_editChatDefaultBannedRights:
		tl := TL_messages_editChatDefaultBannedRights{}
		tl.Peer = m.Object()
		tl.BannedRights = m.Object()
		r = tl
	case CRC_messages_getEmojiKeywords:
		tl := TL_messages_getEmojiKeywords{}
		tl.LangCode = m.String()
		r = tl
	case CRC_messages_getEmojiKeywordsDifference:
		tl := TL_messages_getEmojiKeywordsDifference{}
		tl.LangCode = m.String()
		tl.FromVersion = m.Int()
		r = tl
	case CRC_messages_getEmojiKeywordsLanguages:
		tl := TL_messages_getEmojiKeywordsLanguages{}
		tl.LangCodes = m.VectorString()
		r = tl
	case CRC_messages_getEmojiURL:
		tl := TL_messages_getEmojiURL{}
		tl.LangCode = m.String()
		r = tl
	case CRC_messages_getSearchCounters:
		tl := TL_messages_getSearchCounters{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		tl.Filters = m.Vector()
		r = tl
	case CRC_messages_requestUrlAuth:
		tl := TL_messages_requestUrlAuth{}
		flags := m.Int()
		if flags&(1<<1) != 0 {
			tl.Peer = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.MsgID = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.ButtonID = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.Url = Some(m.String())
		}
		r = tl
	case CRC_messages_acceptUrlAuth:
		tl := TL_messages_acceptUrlAuth{}
		flags := m.Int()
		tl.WriteAllowed = flags&(1<<0) != 0
		if flags&(1<<1) != 0 {
			tl.Peer = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.MsgID = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.ButtonID = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.Url = Some(m.String())
		}
		r = tl
	case CRC_messages_hidePeerSettingsBar:
		tl := TL_messages_hidePeerSettingsBar{}
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_getScheduledHistory:
		tl := TL_messages_getScheduledHistory{}
		tl.Peer = m.Object()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getScheduledMessages:
		tl := TL_messages_getScheduledMessages{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_messages_sendScheduledMessages:
		tl := TL_messages_sendScheduledMessages{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_messages_deleteScheduledMessages:
		tl := TL_messages_deleteScheduledMessages{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_messages_getPollVotes:
		tl := TL_messages_getPollVotes{}
		flags := m.Int()
		tl.Peer = m.Object()
		tl.ID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Option = m.StringBytes()
		}
		if flags&(1<<1) != 0 {
			tl.Offset = Some(m.String())
		}
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_toggleStickerSets:
		tl := TL_messages_toggleStickerSets{}
		flags := m.Int()
		tl.Uninstall = flags&(1<<0) != 0
		tl.Archive = flags&(1<<1) != 0
		tl.Unarchive = flags&(1<<2) != 0
		tl.Stickersets = m.Vector()
		r = tl
	case CRC_messages_getDialogFilters:
		tl := TL_messages_getDialogFilters{}
		r = tl
	case CRC_messages_getSuggestedDialogFilters:
		tl := TL_messages_getSuggestedDialogFilters{}
		r = tl
	case CRC_messages_updateDialogFilter:
		tl := TL_messages_updateDialogFilter{}
		flags := m.Int()
		tl.ID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Filter = m.Object()
		}
		r = tl
	case CRC_messages_updateDialogFiltersOrder:
		tl := TL_messages_updateDialogFiltersOrder{}
		tl.Order = m.VectorInt()
		r = tl
	case CRC_messages_getOldFeaturedStickers:
		tl := TL_messages_getOldFeaturedStickers{}
		tl.Offset = m.Int()
		tl.Limit = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getReplies:
		tl := TL_messages_getReplies{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.OffsetID = m.Int()
		tl.OffsetDate = m.Int()
		tl.AddOffset = m.Int()
		tl.Limit = m.Int()
		tl.MaxID = m.Int()
		tl.MinID = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getDiscussionMessage:
		tl := TL_messages_getDiscussionMessage{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_messages_readDiscussion:
		tl := TL_messages_readDiscussion{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.ReadMaxID = m.Int()
		r = tl
	case CRC_messages_unpinAllMessages:
		tl := TL_messages_unpinAllMessages{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		r = tl
	case CRC_messages_deleteChat:
		tl := TL_messages_deleteChat{}
		tl.ChatID = m.Long()
		r = tl
	case CRC_messages_deletePhoneCallHistory:
		tl := TL_messages_deletePhoneCallHistory{}
		flags := m.Int()
		tl.Revoke = flags&(1<<0) != 0
		r = tl
	case CRC_messages_checkHistoryImport:
		tl := TL_messages_checkHistoryImport{}
		tl.ImportHead = m.String()
		r = tl
	case CRC_messages_initHistoryImport:
		tl := TL_messages_initHistoryImport{}
		tl.Peer = m.Object()
		tl.File = m.Object()
		tl.MediaCount = m.Int()
		r = tl
	case CRC_messages_uploadImportedMedia:
		tl := TL_messages_uploadImportedMedia{}
		tl.Peer = m.Object()
		tl.ImportID = m.Long()
		tl.FileName = m.String()
		tl.Media = m.Object()
		r = tl
	case CRC_messages_startHistoryImport:
		tl := TL_messages_startHistoryImport{}
		tl.Peer = m.Object()
		tl.ImportID = m.Long()
		r = tl
	case CRC_messages_getExportedChatInvites:
		tl := TL_messages_getExportedChatInvites{}
		flags := m.Int()
		tl.Revoked = flags&(1<<3) != 0
		tl.Peer = m.Object()
		tl.AdminID = m.Object()
		if flags&(1<<2) != 0 {
			tl.OffsetDate = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.OffsetLink = Some(m.String())
		}
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_getExportedChatInvite:
		tl := TL_messages_getExportedChatInvite{}
		tl.Peer = m.Object()
		tl.Link = m.String()
		r = tl
	case CRC_messages_editExportedChatInvite:
		tl := TL_messages_editExportedChatInvite{}
		flags := m.Int()
		tl.Revoked = flags&(1<<2) != 0
		tl.Peer = m.Object()
		tl.Link = m.String()
		if flags&(1<<0) != 0 {
			tl.ExpireDate = Some(m.Int())
		}
		if flags&(1<<1) != 0 {
			tl.UsageLimit = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.RequestNeeded = Some(m.Bool())
		}
		if flags&(1<<4) != 0 {
			tl.Title = Some(m.String())
		}
		r = tl
	case CRC_messages_deleteRevokedExportedChatInvites:
		tl := TL_messages_deleteRevokedExportedChatInvites{}
		tl.Peer = m.Object()
		tl.AdminID = m.Object()
		r = tl
	case CRC_messages_deleteExportedChatInvite:
		tl := TL_messages_deleteExportedChatInvite{}
		tl.Peer = m.Object()
		tl.Link = m.String()
		r = tl
	case CRC_messages_getAdminsWithInvites:
		tl := TL_messages_getAdminsWithInvites{}
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_getChatInviteImporters:
		tl := TL_messages_getChatInviteImporters{}
		flags := m.Int()
		tl.Requested = flags&(1<<0) != 0
		tl.Peer = m.Object()
		if flags&(1<<1) != 0 {
			tl.Link = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Q = Some(m.String())
		}
		tl.OffsetDate = m.Int()
		tl.OffsetUser = m.Object()
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_setHistoryTTL:
		tl := TL_messages_setHistoryTTL{}
		tl.Peer = m.Object()
		tl.Period = m.Int()
		r = tl
	case CRC_messages_checkHistoryImportPeer:
		tl := TL_messages_checkHistoryImportPeer{}
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_setChatTheme:
		tl := TL_messages_setChatTheme{}
		tl.Peer = m.Object()
		tl.Emoticon = m.String()
		r = tl
	case CRC_messages_getMessageReadParticipants:
		tl := TL_messages_getMessageReadParticipants{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_messages_getSearchResultsCalendar:
		tl := TL_messages_getSearchResultsCalendar{}
		tl.Peer = m.Object()
		tl.Filter = m.Object()
		tl.OffsetID = m.Int()
		tl.OffsetDate = m.Int()
		r = tl
	case CRC_messages_getSearchResultsPositions:
		tl := TL_messages_getSearchResultsPositions{}
		tl.Peer = m.Object()
		tl.Filter = m.Object()
		tl.OffsetID = m.Int()
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_hideChatJoinRequest:
		tl := TL_messages_hideChatJoinRequest{}
		flags := m.Int()
		tl.Approved = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.UserID = m.Object()
		r = tl
	case CRC_messages_hideAllChatJoinRequests:
		tl := TL_messages_hideAllChatJoinRequests{}
		flags := m.Int()
		tl.Approved = flags&(1<<0) != 0
		tl.Peer = m.Object()
		if flags&(1<<1) != 0 {
			tl.Link = Some(m.String())
		}
		r = tl
	case CRC_messages_toggleNoForwards:
		tl := TL_messages_toggleNoForwards{}
		tl.Peer = m.Object()
		tl.Enabled = m.Bool()
		r = tl
	case CRC_messages_saveDefaultSendAs:
		tl := TL_messages_saveDefaultSendAs{}
		tl.Peer = m.Object()
		tl.SendAs = m.Object()
		r = tl
	case CRC_messages_sendReaction:
		tl := TL_messages_sendReaction{}
		flags := m.Int()
		tl.Big = flags&(1<<1) != 0
		tl.AddToRecent = flags&(1<<2) != 0
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Reaction = m.Vector()
		}
		r = tl
	case CRC_messages_getMessagesReactions:
		tl := TL_messages_getMessagesReactions{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_messages_getMessageReactionsList:
		tl := TL_messages_getMessageReactionsList{}
		flags := m.Int()
		tl.Peer = m.Object()
		tl.ID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Reaction = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Offset = Some(m.String())
		}
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_setChatAvailableReactions:
		tl := TL_messages_setChatAvailableReactions{}
		tl.Peer = m.Object()
		tl.AvailableReactions = m.Object()
		r = tl
	case CRC_messages_getAvailableReactions:
		tl := TL_messages_getAvailableReactions{}
		tl.Hash = m.Int()
		r = tl
	case CRC_messages_setDefaultReaction:
		tl := TL_messages_setDefaultReaction{}
		tl.Reaction = m.Object()
		r = tl
	case CRC_messages_translateText:
		tl := TL_messages_translateText{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Peer = m.Object()
		}
		if flags&(1<<0) != 0 {
			tl.ID = m.VectorInt()
		}
		if flags&(1<<1) != 0 {
			tl.Text = m.Vector()
		}
		tl.ToLang = m.String()
		r = tl
	case CRC_messages_getUnreadReactions:
		tl := TL_messages_getUnreadReactions{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		tl.OffsetID = m.Int()
		tl.AddOffset = m.Int()
		tl.Limit = m.Int()
		tl.MaxID = m.Int()
		tl.MinID = m.Int()
		r = tl
	case CRC_messages_readReactions:
		tl := TL_messages_readReactions{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.TopMsgID = Some(m.Int())
		}
		r = tl
	case CRC_messages_searchSentMedia:
		tl := TL_messages_searchSentMedia{}
		tl.Q = m.String()
		tl.Filter = m.Object()
		tl.Limit = m.Int()
		r = tl
	case CRC_messages_getAttachMenuBots:
		tl := TL_messages_getAttachMenuBots{}
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getAttachMenuBot:
		tl := TL_messages_getAttachMenuBot{}
		tl.Bot = m.Object()
		r = tl
	case CRC_messages_toggleBotInAttachMenu:
		tl := TL_messages_toggleBotInAttachMenu{}
		flags := m.Int()
		tl.WriteAllowed = flags&(1<<0) != 0
		tl.Bot = m.Object()
		tl.Enabled = m.Bool()
		r = tl
	case CRC_messages_requestWebView:
		tl := TL_messages_requestWebView{}
		flags := m.Int()
		tl.FromBotMenu = flags&(1<<4) != 0
		tl.Silent = flags&(1<<5) != 0
		tl.Peer = m.Object()
		tl.Bot = m.Object()
		if flags&(1<<1) != 0 {
			tl.Url = Some(m.String())
		}
		if flags&(1<<3) != 0 {
			tl.StartParam = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.ThemeParams = m.Object()
		}
		tl.Platform = m.String()
		if flags&(1<<0) != 0 {
			tl.ReplyTo = m.Object()
		}
		if flags&(1<<13) != 0 {
			tl.SendAs = m.Object()
		}
		r = tl
	case CRC_messages_prolongWebView:
		tl := TL_messages_prolongWebView{}
		flags := m.Int()
		tl.Silent = flags&(1<<5) != 0
		tl.Peer = m.Object()
		tl.Bot = m.Object()
		tl.QueryID = m.Long()
		if flags&(1<<0) != 0 {
			tl.ReplyTo = m.Object()
		}
		if flags&(1<<13) != 0 {
			tl.SendAs = m.Object()
		}
		r = tl
	case CRC_messages_requestSimpleWebView:
		tl := TL_messages_requestSimpleWebView{}
		flags := m.Int()
		tl.FromSwitchWebview = flags&(1<<1) != 0
		tl.FromSideMenu = flags&(1<<2) != 0
		tl.Bot = m.Object()
		if flags&(1<<3) != 0 {
			tl.Url = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.StartParam = Some(m.String())
		}
		if flags&(1<<0) != 0 {
			tl.ThemeParams = m.Object()
		}
		tl.Platform = m.String()
		r = tl
	case CRC_messages_sendWebViewResultMessage:
		tl := TL_messages_sendWebViewResultMessage{}
		tl.BotQueryID = m.String()
		tl.Result = m.Object()
		r = tl
	case CRC_messages_sendWebViewData:
		tl := TL_messages_sendWebViewData{}
		tl.Bot = m.Object()
		tl.RandomID = m.Long()
		tl.ButtonText = m.String()
		tl.Data = m.String()
		r = tl
	case CRC_messages_transcribeAudio:
		tl := TL_messages_transcribeAudio{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_messages_rateTranscribedAudio:
		tl := TL_messages_rateTranscribedAudio{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.TranscriptionID = m.Long()
		tl.Good = m.Bool()
		r = tl
	case CRC_messages_getCustomEmojiDocuments:
		tl := TL_messages_getCustomEmojiDocuments{}
		tl.DocumentID = m.VectorLong()
		r = tl
	case CRC_messages_getEmojiStickers:
		tl := TL_messages_getEmojiStickers{}
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getFeaturedEmojiStickers:
		tl := TL_messages_getFeaturedEmojiStickers{}
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_reportReaction:
		tl := TL_messages_reportReaction{}
		tl.Peer = m.Object()
		tl.ID = m.Int()
		tl.ReactionPeer = m.Object()
		r = tl
	case CRC_messages_getTopReactions:
		tl := TL_messages_getTopReactions{}
		tl.Limit = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_getRecentReactions:
		tl := TL_messages_getRecentReactions{}
		tl.Limit = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_clearRecentReactions:
		tl := TL_messages_clearRecentReactions{}
		r = tl
	case CRC_messages_getExtendedMedia:
		tl := TL_messages_getExtendedMedia{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_messages_setDefaultHistoryTTL:
		tl := TL_messages_setDefaultHistoryTTL{}
		tl.Period = m.Int()
		r = tl
	case CRC_messages_getDefaultHistoryTTL:
		tl := TL_messages_getDefaultHistoryTTL{}
		r = tl
	case CRC_messages_sendBotRequestedPeer:
		tl := TL_messages_sendBotRequestedPeer{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		tl.ButtonID = m.Int()
		tl.RequestedPeer = m.Object()
		r = tl
	case CRC_messages_getEmojiGroups:
		tl := TL_messages_getEmojiGroups{}
		tl.Hash = m.Int()
		r = tl
	case CRC_messages_getEmojiStatusGroups:
		tl := TL_messages_getEmojiStatusGroups{}
		tl.Hash = m.Int()
		r = tl
	case CRC_messages_getEmojiProfilePhotoGroups:
		tl := TL_messages_getEmojiProfilePhotoGroups{}
		tl.Hash = m.Int()
		r = tl
	case CRC_messages_searchCustomEmoji:
		tl := TL_messages_searchCustomEmoji{}
		tl.Emoticon = m.String()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_togglePeerTranslations:
		tl := TL_messages_togglePeerTranslations{}
		flags := m.Int()
		tl.Disabled = flags&(1<<0) != 0
		tl.Peer = m.Object()
		r = tl
	case CRC_messages_getBotApp:
		tl := TL_messages_getBotApp{}
		tl.App = m.Object()
		tl.Hash = m.Long()
		r = tl
	case CRC_messages_requestAppWebView:
		tl := TL_messages_requestAppWebView{}
		flags := m.Int()
		tl.WriteAllowed = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.App = m.Object()
		if flags&(1<<1) != 0 {
			tl.StartParam = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.ThemeParams = m.Object()
		}
		tl.Platform = m.String()
		r = tl
	case CRC_messages_setChatWallPaper:
		tl := TL_messages_setChatWallPaper{}
		flags := m.Int()
		tl.Peer = m.Object()
		if flags&(1<<0) != 0 {
			tl.Wallpaper = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Settings = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.ID = Some(m.Int())
		}
		r = tl
	case CRC_updates_getState:
		tl := TL_updates_getState{}
		r = tl
	case CRC_updates_getDifference:
		tl := TL_updates_getDifference{}
		flags := m.Int()
		tl.Pts = m.Int()
		if flags&(1<<1) != 0 {
			tl.PtsLimit = Some(m.Int())
		}
		if flags&(1<<0) != 0 {
			tl.PtsTotalLimit = Some(m.Int())
		}
		tl.Date = m.Int()
		tl.Qts = m.Int()
		if flags&(1<<2) != 0 {
			tl.QtsLimit = Some(m.Int())
		}
		r = tl
	case CRC_updates_getChannelDifference:
		tl := TL_updates_getChannelDifference{}
		flags := m.Int()
		tl.Force = flags&(1<<0) != 0
		tl.Channel = m.Object()
		tl.Filter = m.Object()
		tl.Pts = m.Int()
		tl.Limit = m.Int()
		r = tl
	case CRC_photos_updateProfilePhoto:
		tl := TL_photos_updateProfilePhoto{}
		flags := m.Int()
		tl.Fallback = flags&(1<<0) != 0
		if flags&(1<<1) != 0 {
			tl.Bot = m.Object()
		}
		tl.ID = m.Object()
		r = tl
	case CRC_photos_uploadProfilePhoto:
		tl := TL_photos_uploadProfilePhoto{}
		flags := m.Int()
		tl.Fallback = flags&(1<<3) != 0
		if flags&(1<<5) != 0 {
			tl.Bot = m.Object()
		}
		if flags&(1<<0) != 0 {
			tl.File = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Video = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.VideoStartTs = Some(m.Double())
		}
		if flags&(1<<4) != 0 {
			tl.VideoEmojiMarkup = m.Object()
		}
		r = tl
	case CRC_photos_deletePhotos:
		tl := TL_photos_deletePhotos{}
		tl.ID = m.Vector()
		r = tl
	case CRC_photos_getUserPhotos:
		tl := TL_photos_getUserPhotos{}
		tl.UserID = m.Object()
		tl.Offset = m.Int()
		tl.MaxID = m.Long()
		tl.Limit = m.Int()
		r = tl
	case CRC_photos_uploadContactProfilePhoto:
		tl := TL_photos_uploadContactProfilePhoto{}
		flags := m.Int()
		tl.Suggest = flags&(1<<3) != 0
		tl.Save = flags&(1<<4) != 0
		tl.UserID = m.Object()
		if flags&(1<<0) != 0 {
			tl.File = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Video = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.VideoStartTs = Some(m.Double())
		}
		if flags&(1<<5) != 0 {
			tl.VideoEmojiMarkup = m.Object()
		}
		r = tl
	case CRC_upload_saveFilePart:
		tl := TL_upload_saveFilePart{}
		tl.FileID = m.Long()
		tl.FilePart = m.Int()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_upload_getFile:
		tl := TL_upload_getFile{}
		flags := m.Int()
		tl.Precise = flags&(1<<0) != 0
		tl.CdnSupported = flags&(1<<1) != 0
		tl.Location = m.Object()
		tl.Offset = m.Long()
		tl.Limit = m.Int()
		r = tl
	case CRC_upload_saveBigFilePart:
		tl := TL_upload_saveBigFilePart{}
		tl.FileID = m.Long()
		tl.FilePart = m.Int()
		tl.FileTotalParts = m.Int()
		tl.Bytes = m.StringBytes()
		r = tl
	case CRC_upload_getWebFile:
		tl := TL_upload_getWebFile{}
		tl.Location = m.Object()
		tl.Offset = m.Int()
		tl.Limit = m.Int()
		r = tl
	case CRC_upload_getCdnFile:
		tl := TL_upload_getCdnFile{}
		tl.FileToken = m.StringBytes()
		tl.Offset = m.Long()
		tl.Limit = m.Int()
		r = tl
	case CRC_upload_reuploadCdnFile:
		tl := TL_upload_reuploadCdnFile{}
		tl.FileToken = m.StringBytes()
		tl.RequestToken = m.StringBytes()
		r = tl
	case CRC_upload_getCdnFileHashes:
		tl := TL_upload_getCdnFileHashes{}
		tl.FileToken = m.StringBytes()
		tl.Offset = m.Long()
		r = tl
	case CRC_upload_getFileHashes:
		tl := TL_upload_getFileHashes{}
		tl.Location = m.Object()
		tl.Offset = m.Long()
		r = tl
	case CRC_help_getConfig:
		tl := TL_help_getConfig{}
		r = tl
	case CRC_help_getNearestDc:
		tl := TL_help_getNearestDc{}
		r = tl
	case CRC_help_getAppUpdate:
		tl := TL_help_getAppUpdate{}
		tl.Source = m.String()
		r = tl
	case CRC_help_getInviteText:
		tl := TL_help_getInviteText{}
		r = tl
	case CRC_help_getSupport:
		tl := TL_help_getSupport{}
		r = tl
	case CRC_help_getAppChangelog:
		tl := TL_help_getAppChangelog{}
		tl.PrevAppVersion = m.String()
		r = tl
	case CRC_help_setBotUpdatesStatus:
		tl := TL_help_setBotUpdatesStatus{}
		tl.PendingUpdatesCount = m.Int()
		tl.Message = m.String()
		r = tl
	case CRC_help_getCdnConfig:
		tl := TL_help_getCdnConfig{}
		r = tl
	case CRC_help_getRecentMeUrls:
		tl := TL_help_getRecentMeUrls{}
		tl.Referer = m.String()
		r = tl
	case CRC_help_getTermsOfServiceUpdate:
		tl := TL_help_getTermsOfServiceUpdate{}
		r = tl
	case CRC_help_acceptTermsOfService:
		tl := TL_help_acceptTermsOfService{}
		tl.ID = m.Object()
		r = tl
	case CRC_help_getDeepLinkInfo:
		tl := TL_help_getDeepLinkInfo{}
		tl.Path = m.String()
		r = tl
	case CRC_help_getAppConfig:
		tl := TL_help_getAppConfig{}
		tl.Hash = m.Int()
		r = tl
	case CRC_help_saveAppLog:
		tl := TL_help_saveAppLog{}
		tl.Events = m.Vector()
		r = tl
	case CRC_help_getPassportConfig:
		tl := TL_help_getPassportConfig{}
		tl.Hash = m.Int()
		r = tl
	case CRC_help_getSupportName:
		tl := TL_help_getSupportName{}
		r = tl
	case CRC_help_getUserInfo:
		tl := TL_help_getUserInfo{}
		tl.UserID = m.Object()
		r = tl
	case CRC_help_editUserInfo:
		tl := TL_help_editUserInfo{}
		tl.UserID = m.Object()
		tl.Message = m.String()
		tl.Entities = m.Vector()
		r = tl
	case CRC_help_getPromoData:
		tl := TL_help_getPromoData{}
		r = tl
	case CRC_help_hidePromoData:
		tl := TL_help_hidePromoData{}
		tl.Peer = m.Object()
		r = tl
	case CRC_help_dismissSuggestion:
		tl := TL_help_dismissSuggestion{}
		tl.Peer = m.Object()
		tl.Suggestion = m.String()
		r = tl
	case CRC_help_getCountriesList:
		tl := TL_help_getCountriesList{}
		tl.LangCode = m.String()
		tl.Hash = m.Int()
		r = tl
	case CRC_help_getPremiumPromo:
		tl := TL_help_getPremiumPromo{}
		r = tl
	case CRC_channels_readHistory:
		tl := TL_channels_readHistory{}
		tl.Channel = m.Object()
		tl.MaxID = m.Int()
		r = tl
	case CRC_channels_deleteMessages:
		tl := TL_channels_deleteMessages{}
		tl.Channel = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_channels_reportSpam:
		tl := TL_channels_reportSpam{}
		tl.Channel = m.Object()
		tl.Participant = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_channels_getMessages:
		tl := TL_channels_getMessages{}
		tl.Channel = m.Object()
		tl.ID = m.Vector()
		r = tl
	case CRC_channels_getParticipants:
		tl := TL_channels_getParticipants{}
		tl.Channel = m.Object()
		tl.Filter = m.Object()
		tl.Offset = m.Int()
		tl.Limit = m.Int()
		tl.Hash = m.Long()
		r = tl
	case CRC_channels_getParticipant:
		tl := TL_channels_getParticipant{}
		tl.Channel = m.Object()
		tl.Participant = m.Object()
		r = tl
	case CRC_channels_getChannels:
		tl := TL_channels_getChannels{}
		tl.ID = m.Vector()
		r = tl
	case CRC_channels_getFullChannel:
		tl := TL_channels_getFullChannel{}
		tl.Channel = m.Object()
		r = tl
	case CRC_channels_createChannel:
		tl := TL_channels_createChannel{}
		flags := m.Int()
		tl.Broadcast = flags&(1<<0) != 0
		tl.Megagroup = flags&(1<<1) != 0
		tl.ForImport = flags&(1<<3) != 0
		tl.Forum = flags&(1<<5) != 0
		tl.Title = m.String()
		tl.About = m.String()
		if flags&(1<<2) != 0 {
			tl.GeoPoint = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Address = Some(m.String())
		}
		if flags&(1<<4) != 0 {
			tl.TtlPeriod = Some(m.Int())
		}
		r = tl
	case CRC_channels_editAdmin:
		tl := TL_channels_editAdmin{}
		tl.Channel = m.Object()
		tl.UserID = m.Object()
		tl.AdminRights = m.Object()
		tl.Rank = m.String()
		r = tl
	case CRC_channels_editTitle:
		tl := TL_channels_editTitle{}
		tl.Channel = m.Object()
		tl.Title = m.String()
		r = tl
	case CRC_channels_editPhoto:
		tl := TL_channels_editPhoto{}
		tl.Channel = m.Object()
		tl.Photo = m.Object()
		r = tl
	case CRC_channels_checkUsername:
		tl := TL_channels_checkUsername{}
		tl.Channel = m.Object()
		tl.Username = m.String()
		r = tl
	case CRC_channels_updateUsername:
		tl := TL_channels_updateUsername{}
		tl.Channel = m.Object()
		tl.Username = m.String()
		r = tl
	case CRC_channels_joinChannel:
		tl := TL_channels_joinChannel{}
		tl.Channel = m.Object()
		r = tl
	case CRC_channels_leaveChannel:
		tl := TL_channels_leaveChannel{}
		tl.Channel = m.Object()
		r = tl
	case CRC_channels_inviteToChannel:
		tl := TL_channels_inviteToChannel{}
		tl.Channel = m.Object()
		tl.Users = m.Vector()
		r = tl
	case CRC_channels_deleteChannel:
		tl := TL_channels_deleteChannel{}
		tl.Channel = m.Object()
		r = tl
	case CRC_channels_exportMessageLink:
		tl := TL_channels_exportMessageLink{}
		flags := m.Int()
		tl.Grouped = flags&(1<<0) != 0
		tl.Thread = flags&(1<<1) != 0
		tl.Channel = m.Object()
		tl.ID = m.Int()
		r = tl
	case CRC_channels_toggleSignatures:
		tl := TL_channels_toggleSignatures{}
		tl.Channel = m.Object()
		tl.Enabled = m.Bool()
		r = tl
	case CRC_channels_getAdminedPublicChannels:
		tl := TL_channels_getAdminedPublicChannels{}
		flags := m.Int()
		tl.ByLocation = flags&(1<<0) != 0
		tl.CheckLimit = flags&(1<<1) != 0
		r = tl
	case CRC_channels_editBanned:
		tl := TL_channels_editBanned{}
		tl.Channel = m.Object()
		tl.Participant = m.Object()
		tl.BannedRights = m.Object()
		r = tl
	case CRC_channels_getAdminLog:
		tl := TL_channels_getAdminLog{}
		flags := m.Int()
		tl.Channel = m.Object()
		tl.Q = m.String()
		if flags&(1<<0) != 0 {
			tl.EventsFilter = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.Admins = m.Vector()
		}
		tl.MaxID = m.Long()
		tl.MinID = m.Long()
		tl.Limit = m.Int()
		r = tl
	case CRC_channels_setStickers:
		tl := TL_channels_setStickers{}
		tl.Channel = m.Object()
		tl.Stickerset = m.Object()
		r = tl
	case CRC_channels_readMessageContents:
		tl := TL_channels_readMessageContents{}
		tl.Channel = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_channels_deleteHistory:
		tl := TL_channels_deleteHistory{}
		flags := m.Int()
		tl.ForEveryone = flags&(1<<0) != 0
		tl.Channel = m.Object()
		tl.MaxID = m.Int()
		r = tl
	case CRC_channels_togglePreHistoryHidden:
		tl := TL_channels_togglePreHistoryHidden{}
		tl.Channel = m.Object()
		tl.Enabled = m.Bool()
		r = tl
	case CRC_channels_getLeftChannels:
		tl := TL_channels_getLeftChannels{}
		tl.Offset = m.Int()
		r = tl
	case CRC_channels_getGroupsForDiscussion:
		tl := TL_channels_getGroupsForDiscussion{}
		r = tl
	case CRC_channels_setDiscussionGroup:
		tl := TL_channels_setDiscussionGroup{}
		tl.Broadcast = m.Object()
		tl.Group = m.Object()
		r = tl
	case CRC_channels_editCreator:
		tl := TL_channels_editCreator{}
		tl.Channel = m.Object()
		tl.UserID = m.Object()
		tl.Password = m.Object()
		r = tl
	case CRC_channels_editLocation:
		tl := TL_channels_editLocation{}
		tl.Channel = m.Object()
		tl.GeoPoint = m.Object()
		tl.Address = m.String()
		r = tl
	case CRC_channels_toggleSlowMode:
		tl := TL_channels_toggleSlowMode{}
		tl.Channel = m.Object()
		tl.Seconds = m.Int()
		r = tl
	case CRC_channels_getInactiveChannels:
		tl := TL_channels_getInactiveChannels{}
		r = tl
	case CRC_channels_convertToGigagroup:
		tl := TL_channels_convertToGigagroup{}
		tl.Channel = m.Object()
		r = tl
	case CRC_channels_viewSponsoredMessage:
		tl := TL_channels_viewSponsoredMessage{}
		tl.Channel = m.Object()
		tl.RandomID = m.StringBytes()
		r = tl
	case CRC_channels_getSponsoredMessages:
		tl := TL_channels_getSponsoredMessages{}
		tl.Channel = m.Object()
		r = tl
	case CRC_channels_getSendAs:
		tl := TL_channels_getSendAs{}
		tl.Peer = m.Object()
		r = tl
	case CRC_channels_deleteParticipantHistory:
		tl := TL_channels_deleteParticipantHistory{}
		tl.Channel = m.Object()
		tl.Participant = m.Object()
		r = tl
	case CRC_channels_toggleJoinToSend:
		tl := TL_channels_toggleJoinToSend{}
		tl.Channel = m.Object()
		tl.Enabled = m.Bool()
		r = tl
	case CRC_channels_toggleJoinRequest:
		tl := TL_channels_toggleJoinRequest{}
		tl.Channel = m.Object()
		tl.Enabled = m.Bool()
		r = tl
	case CRC_channels_reorderUsernames:
		tl := TL_channels_reorderUsernames{}
		tl.Channel = m.Object()
		tl.Order = m.VectorString()
		r = tl
	case CRC_channels_toggleUsername:
		tl := TL_channels_toggleUsername{}
		tl.Channel = m.Object()
		tl.Username = m.String()
		tl.Active = m.Bool()
		r = tl
	case CRC_channels_deactivateAllUsernames:
		tl := TL_channels_deactivateAllUsernames{}
		tl.Channel = m.Object()
		r = tl
	case CRC_channels_toggleForum:
		tl := TL_channels_toggleForum{}
		tl.Channel = m.Object()
		tl.Enabled = m.Bool()
		r = tl
	case CRC_channels_createForumTopic:
		tl := TL_channels_createForumTopic{}
		flags := m.Int()
		tl.Channel = m.Object()
		tl.Title = m.String()
		if flags&(1<<0) != 0 {
			tl.IconColor = Some(m.Int())
		}
		if flags&(1<<3) != 0 {
			tl.IconEmojiID = Some(m.Long())
		}
		tl.RandomID = m.Long()
		if flags&(1<<2) != 0 {
			tl.SendAs = m.Object()
		}
		r = tl
	case CRC_channels_getForumTopics:
		tl := TL_channels_getForumTopics{}
		flags := m.Int()
		tl.Channel = m.Object()
		if flags&(1<<0) != 0 {
			tl.Q = Some(m.String())
		}
		tl.OffsetDate = m.Int()
		tl.OffsetID = m.Int()
		tl.OffsetTopic = m.Int()
		tl.Limit = m.Int()
		r = tl
	case CRC_channels_getForumTopicsByID:
		tl := TL_channels_getForumTopicsByID{}
		tl.Channel = m.Object()
		tl.Topics = m.VectorInt()
		r = tl
	case CRC_channels_editForumTopic:
		tl := TL_channels_editForumTopic{}
		flags := m.Int()
		tl.Channel = m.Object()
		tl.TopicID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.IconEmojiID = Some(m.Long())
		}
		if flags&(1<<2) != 0 {
			tl.Closed = Some(m.Bool())
		}
		if flags&(1<<3) != 0 {
			tl.Hidden = Some(m.Bool())
		}
		r = tl
	case CRC_channels_updatePinnedForumTopic:
		tl := TL_channels_updatePinnedForumTopic{}
		tl.Channel = m.Object()
		tl.TopicID = m.Int()
		tl.Pinned = m.Bool()
		r = tl
	case CRC_channels_deleteTopicHistory:
		tl := TL_channels_deleteTopicHistory{}
		tl.Channel = m.Object()
		tl.TopMsgID = m.Int()
		r = tl
	case CRC_channels_reorderPinnedForumTopics:
		tl := TL_channels_reorderPinnedForumTopics{}
		flags := m.Int()
		tl.Force = flags&(1<<0) != 0
		tl.Channel = m.Object()
		tl.Order = m.VectorInt()
		r = tl
	case CRC_channels_toggleAntiSpam:
		tl := TL_channels_toggleAntiSpam{}
		tl.Channel = m.Object()
		tl.Enabled = m.Bool()
		r = tl
	case CRC_channels_reportAntiSpamFalsePositive:
		tl := TL_channels_reportAntiSpamFalsePositive{}
		tl.Channel = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_channels_toggleParticipantsHidden:
		tl := TL_channels_toggleParticipantsHidden{}
		tl.Channel = m.Object()
		tl.Enabled = m.Bool()
		r = tl
	case CRC_channels_clickSponsoredMessage:
		tl := TL_channels_clickSponsoredMessage{}
		tl.Channel = m.Object()
		tl.RandomID = m.StringBytes()
		r = tl
	case CRC_channels_updateColor:
		tl := TL_channels_updateColor{}
		flags := m.Int()
		tl.Channel = m.Object()
		tl.Color = m.Int()
		if flags&(1<<0) != 0 {
			tl.BackgroundEmojiID = Some(m.Long())
		}
		r = tl
	case CRC_bots_sendCustomRequest:
		tl := TL_bots_sendCustomRequest{}
		tl.CustomMethod = m.String()
		tl.Params = m.Object()
		r = tl
	case CRC_bots_answerWebhookJSONQuery:
		tl := TL_bots_answerWebhookJSONQuery{}
		tl.QueryID = m.Long()
		tl.Data = m.Object()
		r = tl
	case CRC_bots_setBotCommands:
		tl := TL_bots_setBotCommands{}
		tl.Scope = m.Object()
		tl.LangCode = m.String()
		tl.Commands = m.Vector()
		r = tl
	case CRC_bots_resetBotCommands:
		tl := TL_bots_resetBotCommands{}
		tl.Scope = m.Object()
		tl.LangCode = m.String()
		r = tl
	case CRC_bots_getBotCommands:
		tl := TL_bots_getBotCommands{}
		tl.Scope = m.Object()
		tl.LangCode = m.String()
		r = tl
	case CRC_bots_setBotMenuButton:
		tl := TL_bots_setBotMenuButton{}
		tl.UserID = m.Object()
		tl.Button = m.Object()
		r = tl
	case CRC_bots_getBotMenuButton:
		tl := TL_bots_getBotMenuButton{}
		tl.UserID = m.Object()
		r = tl
	case CRC_bots_setBotBroadcastDefaultAdminRights:
		tl := TL_bots_setBotBroadcastDefaultAdminRights{}
		tl.AdminRights = m.Object()
		r = tl
	case CRC_bots_setBotGroupDefaultAdminRights:
		tl := TL_bots_setBotGroupDefaultAdminRights{}
		tl.AdminRights = m.Object()
		r = tl
	case CRC_bots_setBotInfo:
		tl := TL_bots_setBotInfo{}
		flags := m.Int()
		if flags&(1<<2) != 0 {
			tl.Bot = m.Object()
		}
		tl.LangCode = m.String()
		if flags&(1<<3) != 0 {
			tl.Name = Some(m.String())
		}
		if flags&(1<<0) != 0 {
			tl.About = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Description = Some(m.String())
		}
		r = tl
	case CRC_bots_getBotInfo:
		tl := TL_bots_getBotInfo{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Bot = m.Object()
		}
		tl.LangCode = m.String()
		r = tl
	case CRC_bots_reorderUsernames:
		tl := TL_bots_reorderUsernames{}
		tl.Bot = m.Object()
		tl.Order = m.VectorString()
		r = tl
	case CRC_bots_toggleUsername:
		tl := TL_bots_toggleUsername{}
		tl.Bot = m.Object()
		tl.Username = m.String()
		tl.Active = m.Bool()
		r = tl
	case CRC_bots_canSendMessage:
		tl := TL_bots_canSendMessage{}
		tl.Bot = m.Object()
		r = tl
	case CRC_bots_allowSendMessage:
		tl := TL_bots_allowSendMessage{}
		tl.Bot = m.Object()
		r = tl
	case CRC_bots_invokeWebViewCustomMethod:
		tl := TL_bots_invokeWebViewCustomMethod{}
		tl.Bot = m.Object()
		tl.CustomMethod = m.String()
		tl.Params = m.Object()
		r = tl
	case CRC_payments_getPaymentForm:
		tl := TL_payments_getPaymentForm{}
		flags := m.Int()
		tl.Invoice = m.Object()
		if flags&(1<<0) != 0 {
			tl.ThemeParams = m.Object()
		}
		r = tl
	case CRC_payments_getPaymentReceipt:
		tl := TL_payments_getPaymentReceipt{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_payments_validateRequestedInfo:
		tl := TL_payments_validateRequestedInfo{}
		flags := m.Int()
		tl.Save = flags&(1<<0) != 0
		tl.Invoice = m.Object()
		tl.Info = m.Object()
		r = tl
	case CRC_payments_sendPaymentForm:
		tl := TL_payments_sendPaymentForm{}
		flags := m.Int()
		tl.FormID = m.Long()
		tl.Invoice = m.Object()
		if flags&(1<<0) != 0 {
			tl.RequestedInfoID = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.ShippingOptionID = Some(m.String())
		}
		tl.Credentials = m.Object()
		if flags&(1<<2) != 0 {
			tl.TipAmount = Some(m.Long())
		}
		r = tl
	case CRC_payments_getSavedInfo:
		tl := TL_payments_getSavedInfo{}
		r = tl
	case CRC_payments_clearSavedInfo:
		tl := TL_payments_clearSavedInfo{}
		flags := m.Int()
		tl.Credentials = flags&(1<<0) != 0
		tl.Info = flags&(1<<1) != 0
		r = tl
	case CRC_payments_getBankCardData:
		tl := TL_payments_getBankCardData{}
		tl.Number = m.String()
		r = tl
	case CRC_payments_exportInvoice:
		tl := TL_payments_exportInvoice{}
		tl.InvoiceMedia = m.Object()
		r = tl
	case CRC_payments_assignAppStoreTransaction:
		tl := TL_payments_assignAppStoreTransaction{}
		tl.Receipt = m.StringBytes()
		tl.Purpose = m.Object()
		r = tl
	case CRC_payments_assignPlayMarketTransaction:
		tl := TL_payments_assignPlayMarketTransaction{}
		tl.Receipt = m.Object()
		tl.Purpose = m.Object()
		r = tl
	case CRC_payments_canPurchasePremium:
		tl := TL_payments_canPurchasePremium{}
		tl.Purpose = m.Object()
		r = tl
	case CRC_payments_getPremiumGiftCodeOptions:
		tl := TL_payments_getPremiumGiftCodeOptions{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.BoostPeer = m.Object()
		}
		r = tl
	case CRC_payments_checkGiftCode:
		tl := TL_payments_checkGiftCode{}
		tl.Slug = m.String()
		r = tl
	case CRC_payments_applyGiftCode:
		tl := TL_payments_applyGiftCode{}
		tl.Slug = m.String()
		r = tl
	case CRC_payments_getGiveawayInfo:
		tl := TL_payments_getGiveawayInfo{}
		tl.Peer = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_payments_launchPrepaidGiveaway:
		tl := TL_payments_launchPrepaidGiveaway{}
		tl.Peer = m.Object()
		tl.GiveawayID = m.Long()
		tl.Purpose = m.Object()
		r = tl
	case CRC_stickers_createStickerSet:
		tl := TL_stickers_createStickerSet{}
		flags := m.Int()
		tl.Masks = flags&(1<<0) != 0
		tl.Animated = flags&(1<<1) != 0
		tl.Videos = flags&(1<<4) != 0
		tl.Emojis = flags&(1<<5) != 0
		tl.TextColor = flags&(1<<6) != 0
		tl.UserID = m.Object()
		tl.Title = m.String()
		tl.ShortName = m.String()
		if flags&(1<<2) != 0 {
			tl.Thumb = m.Object()
		}
		tl.Stickers = m.Vector()
		if flags&(1<<3) != 0 {
			tl.Software = Some(m.String())
		}
		r = tl
	case CRC_stickers_removeStickerFromSet:
		tl := TL_stickers_removeStickerFromSet{}
		tl.Sticker = m.Object()
		r = tl
	case CRC_stickers_changeStickerPosition:
		tl := TL_stickers_changeStickerPosition{}
		tl.Sticker = m.Object()
		tl.Position = m.Int()
		r = tl
	case CRC_stickers_addStickerToSet:
		tl := TL_stickers_addStickerToSet{}
		tl.Stickerset = m.Object()
		tl.Sticker = m.Object()
		r = tl
	case CRC_stickers_setStickerSetThumb:
		tl := TL_stickers_setStickerSetThumb{}
		flags := m.Int()
		tl.Stickerset = m.Object()
		if flags&(1<<0) != 0 {
			tl.Thumb = m.Object()
		}
		if flags&(1<<1) != 0 {
			tl.ThumbDocumentID = Some(m.Long())
		}
		r = tl
	case CRC_stickers_checkShortName:
		tl := TL_stickers_checkShortName{}
		tl.ShortName = m.String()
		r = tl
	case CRC_stickers_suggestShortName:
		tl := TL_stickers_suggestShortName{}
		tl.Title = m.String()
		r = tl
	case CRC_stickers_changeSticker:
		tl := TL_stickers_changeSticker{}
		flags := m.Int()
		tl.Sticker = m.Object()
		if flags&(1<<0) != 0 {
			tl.Emoji = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.MaskCoords = m.Object()
		}
		if flags&(1<<2) != 0 {
			tl.Keywords = Some(m.String())
		}
		r = tl
	case CRC_stickers_renameStickerSet:
		tl := TL_stickers_renameStickerSet{}
		tl.Stickerset = m.Object()
		tl.Title = m.String()
		r = tl
	case CRC_stickers_deleteStickerSet:
		tl := TL_stickers_deleteStickerSet{}
		tl.Stickerset = m.Object()
		r = tl
	case CRC_phone_getCallConfig:
		tl := TL_phone_getCallConfig{}
		r = tl
	case CRC_phone_requestCall:
		tl := TL_phone_requestCall{}
		flags := m.Int()
		tl.Video = flags&(1<<0) != 0
		tl.UserID = m.Object()
		tl.RandomID = m.Int()
		tl.GAHash = m.StringBytes()
		tl.Protocol = m.Object()
		r = tl
	case CRC_phone_acceptCall:
		tl := TL_phone_acceptCall{}
		tl.Peer = m.Object()
		tl.GB = m.StringBytes()
		tl.Protocol = m.Object()
		r = tl
	case CRC_phone_confirmCall:
		tl := TL_phone_confirmCall{}
		tl.Peer = m.Object()
		tl.GA = m.StringBytes()
		tl.KeyFingerprint = m.Long()
		tl.Protocol = m.Object()
		r = tl
	case CRC_phone_receivedCall:
		tl := TL_phone_receivedCall{}
		tl.Peer = m.Object()
		r = tl
	case CRC_phone_discardCall:
		tl := TL_phone_discardCall{}
		flags := m.Int()
		tl.Video = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.Duration = m.Int()
		tl.Reason = m.Object()
		tl.ConnectionID = m.Long()
		r = tl
	case CRC_phone_setCallRating:
		tl := TL_phone_setCallRating{}
		flags := m.Int()
		tl.UserInitiative = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.Rating = m.Int()
		tl.Comment = m.String()
		r = tl
	case CRC_phone_saveCallDebug:
		tl := TL_phone_saveCallDebug{}
		tl.Peer = m.Object()
		tl.Debug = m.Object()
		r = tl
	case CRC_phone_sendSignalingData:
		tl := TL_phone_sendSignalingData{}
		tl.Peer = m.Object()
		tl.Data = m.StringBytes()
		r = tl
	case CRC_phone_createGroupCall:
		tl := TL_phone_createGroupCall{}
		flags := m.Int()
		tl.RtmpStream = flags&(1<<2) != 0
		tl.Peer = m.Object()
		tl.RandomID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.ScheduleDate = Some(m.Int())
		}
		r = tl
	case CRC_phone_joinGroupCall:
		tl := TL_phone_joinGroupCall{}
		flags := m.Int()
		tl.Muted = flags&(1<<0) != 0
		tl.VideoStopped = flags&(1<<2) != 0
		tl.Call = m.Object()
		tl.JoinAs = m.Object()
		if flags&(1<<1) != 0 {
			tl.InviteHash = Some(m.String())
		}
		tl.Params = m.Object()
		r = tl
	case CRC_phone_leaveGroupCall:
		tl := TL_phone_leaveGroupCall{}
		tl.Call = m.Object()
		tl.Source = m.Int()
		r = tl
	case CRC_phone_inviteToGroupCall:
		tl := TL_phone_inviteToGroupCall{}
		tl.Call = m.Object()
		tl.Users = m.Vector()
		r = tl
	case CRC_phone_discardGroupCall:
		tl := TL_phone_discardGroupCall{}
		tl.Call = m.Object()
		r = tl
	case CRC_phone_toggleGroupCallSettings:
		tl := TL_phone_toggleGroupCallSettings{}
		flags := m.Int()
		tl.ResetInviteHash = flags&(1<<1) != 0
		tl.Call = m.Object()
		if flags&(1<<0) != 0 {
			tl.JoinMuted = Some(m.Bool())
		}
		r = tl
	case CRC_phone_getGroupCall:
		tl := TL_phone_getGroupCall{}
		tl.Call = m.Object()
		tl.Limit = m.Int()
		r = tl
	case CRC_phone_getGroupParticipants:
		tl := TL_phone_getGroupParticipants{}
		tl.Call = m.Object()
		tl.Ids = m.Vector()
		tl.Sources = m.VectorInt()
		tl.Offset = m.String()
		tl.Limit = m.Int()
		r = tl
	case CRC_phone_checkGroupCall:
		tl := TL_phone_checkGroupCall{}
		tl.Call = m.Object()
		tl.Sources = m.VectorInt()
		r = tl
	case CRC_phone_toggleGroupCallRecord:
		tl := TL_phone_toggleGroupCallRecord{}
		flags := m.Int()
		tl.Start = flags&(1<<0) != 0
		tl.Video = flags&(1<<2) != 0
		tl.Call = m.Object()
		if flags&(1<<1) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.VideoPortrait = Some(m.Bool())
		}
		r = tl
	case CRC_phone_editGroupCallParticipant:
		tl := TL_phone_editGroupCallParticipant{}
		flags := m.Int()
		tl.Call = m.Object()
		tl.Participant = m.Object()
		if flags&(1<<0) != 0 {
			tl.Muted = Some(m.Bool())
		}
		if flags&(1<<1) != 0 {
			tl.Volume = Some(m.Int())
		}
		if flags&(1<<2) != 0 {
			tl.RaiseHand = Some(m.Bool())
		}
		if flags&(1<<3) != 0 {
			tl.VideoStopped = Some(m.Bool())
		}
		if flags&(1<<4) != 0 {
			tl.VideoPaused = Some(m.Bool())
		}
		if flags&(1<<5) != 0 {
			tl.PresentationPaused = Some(m.Bool())
		}
		r = tl
	case CRC_phone_editGroupCallTitle:
		tl := TL_phone_editGroupCallTitle{}
		tl.Call = m.Object()
		tl.Title = m.String()
		r = tl
	case CRC_phone_getGroupCallJoinAs:
		tl := TL_phone_getGroupCallJoinAs{}
		tl.Peer = m.Object()
		r = tl
	case CRC_phone_exportGroupCallInvite:
		tl := TL_phone_exportGroupCallInvite{}
		flags := m.Int()
		tl.CanSelfUnmute = flags&(1<<0) != 0
		tl.Call = m.Object()
		r = tl
	case CRC_phone_toggleGroupCallStartSubscription:
		tl := TL_phone_toggleGroupCallStartSubscription{}
		tl.Call = m.Object()
		tl.Subscribed = m.Bool()
		r = tl
	case CRC_phone_startScheduledGroupCall:
		tl := TL_phone_startScheduledGroupCall{}
		tl.Call = m.Object()
		r = tl
	case CRC_phone_saveDefaultGroupCallJoinAs:
		tl := TL_phone_saveDefaultGroupCallJoinAs{}
		tl.Peer = m.Object()
		tl.JoinAs = m.Object()
		r = tl
	case CRC_phone_joinGroupCallPresentation:
		tl := TL_phone_joinGroupCallPresentation{}
		tl.Call = m.Object()
		tl.Params = m.Object()
		r = tl
	case CRC_phone_leaveGroupCallPresentation:
		tl := TL_phone_leaveGroupCallPresentation{}
		tl.Call = m.Object()
		r = tl
	case CRC_phone_getGroupCallStreamChannels:
		tl := TL_phone_getGroupCallStreamChannels{}
		tl.Call = m.Object()
		r = tl
	case CRC_phone_getGroupCallStreamRtmpUrl:
		tl := TL_phone_getGroupCallStreamRtmpUrl{}
		tl.Peer = m.Object()
		tl.Revoke = m.Bool()
		r = tl
	case CRC_phone_saveCallLog:
		tl := TL_phone_saveCallLog{}
		tl.Peer = m.Object()
		tl.File = m.Object()
		r = tl
	case CRC_langpack_getLangPack:
		tl := TL_langpack_getLangPack{}
		tl.LangPack = m.String()
		tl.LangCode = m.String()
		r = tl
	case CRC_langpack_getStrings:
		tl := TL_langpack_getStrings{}
		tl.LangPack = m.String()
		tl.LangCode = m.String()
		tl.Keys = m.VectorString()
		r = tl
	case CRC_langpack_getDifference:
		tl := TL_langpack_getDifference{}
		tl.LangPack = m.String()
		tl.LangCode = m.String()
		tl.FromVersion = m.Int()
		r = tl
	case CRC_langpack_getLanguages:
		tl := TL_langpack_getLanguages{}
		tl.LangPack = m.String()
		r = tl
	case CRC_langpack_getLanguage:
		tl := TL_langpack_getLanguage{}
		tl.LangPack = m.String()
		tl.LangCode = m.String()
		r = tl
	case CRC_folders_editPeerFolders:
		tl := TL_folders_editPeerFolders{}
		tl.FolderPeers = m.Vector()
		r = tl
	case CRC_stats_getBroadcastStats:
		tl := TL_stats_getBroadcastStats{}
		flags := m.Int()
		tl.Dark = flags&(1<<0) != 0
		tl.Channel = m.Object()
		r = tl
	case CRC_stats_loadAsyncGraph:
		tl := TL_stats_loadAsyncGraph{}
		flags := m.Int()
		tl.Token = m.String()
		if flags&(1<<0) != 0 {
			tl.X = Some(m.Long())
		}
		r = tl
	case CRC_stats_getMegagroupStats:
		tl := TL_stats_getMegagroupStats{}
		flags := m.Int()
		tl.Dark = flags&(1<<0) != 0
		tl.Channel = m.Object()
		r = tl
	case CRC_stats_getMessagePublicForwards:
		tl := TL_stats_getMessagePublicForwards{}
		tl.Channel = m.Object()
		tl.MsgID = m.Int()
		tl.OffsetRate = m.Int()
		tl.OffsetPeer = m.Object()
		tl.OffsetID = m.Int()
		tl.Limit = m.Int()
		r = tl
	case CRC_stats_getMessageStats:
		tl := TL_stats_getMessageStats{}
		flags := m.Int()
		tl.Dark = flags&(1<<0) != 0
		tl.Channel = m.Object()
		tl.MsgID = m.Int()
		r = tl
	case CRC_chatlists_exportChatlistInvite:
		tl := TL_chatlists_exportChatlistInvite{}
		tl.Chatlist = m.Object()
		tl.Title = m.String()
		tl.Peers = m.Vector()
		r = tl
	case CRC_chatlists_deleteExportedInvite:
		tl := TL_chatlists_deleteExportedInvite{}
		tl.Chatlist = m.Object()
		tl.Slug = m.String()
		r = tl
	case CRC_chatlists_editExportedInvite:
		tl := TL_chatlists_editExportedInvite{}
		flags := m.Int()
		tl.Chatlist = m.Object()
		tl.Slug = m.String()
		if flags&(1<<1) != 0 {
			tl.Title = Some(m.String())
		}
		if flags&(1<<2) != 0 {
			tl.Peers = m.Vector()
		}
		r = tl
	case CRC_chatlists_getExportedInvites:
		tl := TL_chatlists_getExportedInvites{}
		tl.Chatlist = m.Object()
		r = tl
	case CRC_chatlists_checkChatlistInvite:
		tl := TL_chatlists_checkChatlistInvite{}
		tl.Slug = m.String()
		r = tl
	case CRC_chatlists_joinChatlistInvite:
		tl := TL_chatlists_joinChatlistInvite{}
		tl.Slug = m.String()
		tl.Peers = m.Vector()
		r = tl
	case CRC_chatlists_getChatlistUpdates:
		tl := TL_chatlists_getChatlistUpdates{}
		tl.Chatlist = m.Object()
		r = tl
	case CRC_chatlists_joinChatlistUpdates:
		tl := TL_chatlists_joinChatlistUpdates{}
		tl.Chatlist = m.Object()
		tl.Peers = m.Vector()
		r = tl
	case CRC_chatlists_hideChatlistUpdates:
		tl := TL_chatlists_hideChatlistUpdates{}
		tl.Chatlist = m.Object()
		r = tl
	case CRC_chatlists_getLeaveChatlistSuggestions:
		tl := TL_chatlists_getLeaveChatlistSuggestions{}
		tl.Chatlist = m.Object()
		r = tl
	case CRC_chatlists_leaveChatlist:
		tl := TL_chatlists_leaveChatlist{}
		tl.Chatlist = m.Object()
		tl.Peers = m.Vector()
		r = tl
	case CRC_stories_canSendStory:
		tl := TL_stories_canSendStory{}
		tl.Peer = m.Object()
		r = tl
	case CRC_stories_sendStory:
		tl := TL_stories_sendStory{}
		flags := m.Int()
		tl.Pinned = flags&(1<<2) != 0
		tl.Noforwards = flags&(1<<4) != 0
		tl.Peer = m.Object()
		tl.Media = m.Object()
		if flags&(1<<5) != 0 {
			tl.MediaAreas = m.Vector()
		}
		if flags&(1<<0) != 0 {
			tl.Caption = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		tl.PrivacyRules = m.Vector()
		tl.RandomID = m.Long()
		if flags&(1<<3) != 0 {
			tl.Period = Some(m.Int())
		}
		r = tl
	case CRC_stories_editStory:
		tl := TL_stories_editStory{}
		flags := m.Int()
		tl.Peer = m.Object()
		tl.ID = m.Int()
		if flags&(1<<0) != 0 {
			tl.Media = m.Object()
		}
		if flags&(1<<3) != 0 {
			tl.MediaAreas = m.Vector()
		}
		if flags&(1<<1) != 0 {
			tl.Caption = Some(m.String())
		}
		if flags&(1<<1) != 0 {
			tl.Entities = m.Vector()
		}
		if flags&(1<<2) != 0 {
			tl.PrivacyRules = m.Vector()
		}
		r = tl
	case CRC_stories_deleteStories:
		tl := TL_stories_deleteStories{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_stories_togglePinned:
		tl := TL_stories_togglePinned{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		tl.Pinned = m.Bool()
		r = tl
	case CRC_stories_getAllStories:
		tl := TL_stories_getAllStories{}
		flags := m.Int()
		tl.Next = flags&(1<<1) != 0
		tl.Hidden = flags&(1<<2) != 0
		if flags&(1<<0) != 0 {
			tl.State = Some(m.String())
		}
		r = tl
	case CRC_stories_getPinnedStories:
		tl := TL_stories_getPinnedStories{}
		tl.Peer = m.Object()
		tl.OffsetID = m.Int()
		tl.Limit = m.Int()
		r = tl
	case CRC_stories_getStoriesArchive:
		tl := TL_stories_getStoriesArchive{}
		tl.Peer = m.Object()
		tl.OffsetID = m.Int()
		tl.Limit = m.Int()
		r = tl
	case CRC_stories_getStoriesByID:
		tl := TL_stories_getStoriesByID{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_stories_toggleAllStoriesHidden:
		tl := TL_stories_toggleAllStoriesHidden{}
		tl.Hidden = m.Bool()
		r = tl
	case CRC_stories_readStories:
		tl := TL_stories_readStories{}
		tl.Peer = m.Object()
		tl.MaxID = m.Int()
		r = tl
	case CRC_stories_incrementStoryViews:
		tl := TL_stories_incrementStoryViews{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_stories_getStoryViewsList:
		tl := TL_stories_getStoryViewsList{}
		flags := m.Int()
		tl.JustContacts = flags&(1<<0) != 0
		tl.ReactionsFirst = flags&(1<<2) != 0
		tl.Peer = m.Object()
		if flags&(1<<1) != 0 {
			tl.Q = Some(m.String())
		}
		tl.ID = m.Int()
		tl.Offset = m.String()
		tl.Limit = m.Int()
		r = tl
	case CRC_stories_getStoriesViews:
		tl := TL_stories_getStoriesViews{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		r = tl
	case CRC_stories_exportStoryLink:
		tl := TL_stories_exportStoryLink{}
		tl.Peer = m.Object()
		tl.ID = m.Int()
		r = tl
	case CRC_stories_report:
		tl := TL_stories_report{}
		tl.Peer = m.Object()
		tl.ID = m.VectorInt()
		tl.Reason = m.Object()
		tl.Message = m.String()
		r = tl
	case CRC_stories_activateStealthMode:
		tl := TL_stories_activateStealthMode{}
		flags := m.Int()
		tl.Past = flags&(1<<0) != 0
		tl.Future = flags&(1<<1) != 0
		r = tl
	case CRC_stories_sendReaction:
		tl := TL_stories_sendReaction{}
		flags := m.Int()
		tl.AddToRecent = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.StoryID = m.Int()
		tl.Reaction = m.Object()
		r = tl
	case CRC_stories_getPeerStories:
		tl := TL_stories_getPeerStories{}
		tl.Peer = m.Object()
		r = tl
	case CRC_stories_getAllReadPeerStories:
		tl := TL_stories_getAllReadPeerStories{}
		r = tl
	case CRC_stories_getPeerMaxIDs:
		tl := TL_stories_getPeerMaxIDs{}
		tl.ID = m.Vector()
		r = tl
	case CRC_stories_getChatsToSend:
		tl := TL_stories_getChatsToSend{}
		r = tl
	case CRC_stories_togglePeerStoriesHidden:
		tl := TL_stories_togglePeerStoriesHidden{}
		tl.Peer = m.Object()
		tl.Hidden = m.Bool()
		r = tl
	case CRC_premium_getBoostsList:
		tl := TL_premium_getBoostsList{}
		flags := m.Int()
		tl.Gifts = flags&(1<<0) != 0
		tl.Peer = m.Object()
		tl.Offset = m.String()
		tl.Limit = m.Int()
		r = tl
	case CRC_premium_getMyBoosts:
		tl := TL_premium_getMyBoosts{}
		r = tl
	case CRC_premium_applyBoost:
		tl := TL_premium_applyBoost{}
		flags := m.Int()
		if flags&(1<<0) != 0 {
			tl.Slots = m.VectorInt()
		}
		tl.Peer = m.Object()
		r = tl
	case CRC_premium_getBoostsStatus:
		tl := TL_premium_getBoostsStatus{}
		tl.Peer = m.Object()
		r = tl

	default:
		m.err = merry.Errorf("Unknown constructor: %08x", constructor)
		return nil

	}

	if m.err != nil {
		m.pushToErrBufStack(objStartOffset, constructor)
		return nil
	}

	return
}
