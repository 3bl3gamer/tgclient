package mtproto

import (
	"github.com/ansel1/merry/v2"
)

const (
	TL_Layer                                                              = 187
	CRC_resPQ                                                             = 0x05162463
	CRC_pqInnerData                                                       = 0x83c95aec
	CRC_pqInnerDataDC                                                     = 0xa9f55f95
	CRC_pqInnerDataTemp                                                   = 0x3c6a84d4
	CRC_pqInnerDataTempDC                                                 = 0x56fddf88
	CRC_bindAuthKeyInner                                                  = 0x75a3f765
	CRC_serverDHParamsFail                                                = 0x79cb045d
	CRC_serverDHParamsOK                                                  = 0xd0e8075c
	CRC_serverDHInnerData                                                 = 0xb5890dba
	CRC_clientDHInnerData                                                 = 0x6643b654
	CRC_dhGenOK                                                           = 0x3bcbf734
	CRC_dhGenRetry                                                        = 0x46dc1fb9
	CRC_dhGenFail                                                         = 0xa69dae02
	CRC_destroyAuthKeyOK                                                  = 0xf660e1d4
	CRC_destroyAuthKeyNone                                                = 0x0a9f2259
	CRC_destroyAuthKeyFail                                                = 0xea109b13
	CRC_reqPQ                                                             = 0x60469778
	CRC_reqPQMulti                                                        = 0xbe7e8ef1
	CRC_reqDHParams                                                       = 0xd712e4be
	CRC_setClientDHParams                                                 = 0xf5045f1f
	CRC_destroyAuthKey                                                    = 0xd1435160
	CRC_msgsACK                                                           = 0x62d6b459
	CRC_badMsgNotification                                                = 0xa7eff811
	CRC_badServerSalt                                                     = 0xedab447b
	CRC_msgsStateReq                                                      = 0xda69fb52
	CRC_msgsStateInfo                                                     = 0x04deb57d
	CRC_msgsAllInfo                                                       = 0x8cc0d131
	CRC_msgDetailedInfo                                                   = 0x276d3ec6
	CRC_msgNewDetailedInfo                                                = 0x809db6df
	CRC_msgResendReq                                                      = 0x7d861a08
	CRC_rpcError                                                          = 0x2144ca19
	CRC_rpcAnswerUnknown                                                  = 0x5e2ad36e
	CRC_rpcAnswerDroppedRunning                                           = 0xcd78e586
	CRC_rpcAnswerDropped                                                  = 0xa43ad8b7
	CRC_futureSalt                                                        = 0x0949d9dc
	CRC_futureSalts                                                       = 0xae500895
	CRC_pong                                                              = 0x347773c5
	CRC_destroySessionOK                                                  = 0xe22045fc
	CRC_destroySessionNone                                                = 0x62d350c9
	CRC_newSessionCreated                                                 = 0x9ec20908
	CRC_httpWait                                                          = 0x9299359f
	CRC_ipPort                                                            = 0xd433ad73
	CRC_ipPortSecret                                                      = 0x37982646
	CRC_accessPointRule                                                   = 0x4679b65f
	CRC_help_configSimple                                                 = 0x5a592a6c
	CRC_tlsClientHello                                                    = 0x6c52c484
	CRC_tlsBlockString                                                    = 0x4218a164
	CRC_tlsBlockRandom                                                    = 0x4d4dc41e
	CRC_tlsBlockZero                                                      = 0x09333afb
	CRC_tlsBlockDomain                                                    = 0x10e8636f
	CRC_tlsBlockGrease                                                    = 0xe675a1c1
	CRC_tlsBlockPublicKey                                                 = 0x9eb95b5c
	CRC_tlsBlockScope                                                     = 0xe725d44f
	CRC_tlsBlockPermutation                                               = 0xd51f148e
	CRC_rpcDropAnswer                                                     = 0x58e4a740
	CRC_getFutureSalts                                                    = 0xb921bd04
	CRC_ping                                                              = 0x7abe77ec
	CRC_pingDelayDisconnect                                               = 0xf3427b8c
	CRC_destroySession                                                    = 0xe7512126
	CRC_boolFalse                                                         = 0xbc799737
	CRC_boolTrue                                                          = 0x997275b5
	CRC_true                                                              = 0x3fedd339
	CRC_error                                                             = 0xc4b9f9bb
	CRC_null                                                              = 0x56730bcc
	CRC_inputPeerEmpty                                                    = 0x7f3b18ea
	CRC_inputPeerSelf                                                     = 0x7da07ec9
	CRC_inputPeerChat                                                     = 0x35a95cb9
	CRC_inputPeerUser                                                     = 0xdde8a54c
	CRC_inputPeerChannel                                                  = 0x27bcbbfc
	CRC_inputPeerUserFromMessage                                          = 0xa87b0a1c
	CRC_inputPeerChannelFromMessage                                       = 0xbd2a0840
	CRC_inputUserEmpty                                                    = 0xb98886cf
	CRC_inputUserSelf                                                     = 0xf7c1b13f
	CRC_inputUser                                                         = 0xf21158c6
	CRC_inputUserFromMessage                                              = 0x1da448e2
	CRC_inputPhoneContact                                                 = 0xf392b7f4
	CRC_inputFile                                                         = 0xf52ff27f
	CRC_inputFileBig                                                      = 0xfa4f0bb5
	CRC_inputFileStoryDocument                                            = 0x62dc8b48
	CRC_inputMediaEmpty                                                   = 0x9664f57f
	CRC_inputMediaUploadedPhoto                                           = 0x1e287d04
	CRC_inputMediaPhoto                                                   = 0xb3ba0635
	CRC_inputMediaGeoPoint                                                = 0xf9c44144
	CRC_inputMediaContact                                                 = 0xf8ab7dfb
	CRC_inputMediaUploadedDocument                                        = 0x5b38c6c1
	CRC_inputMediaDocument                                                = 0x33473058
	CRC_inputMediaVenue                                                   = 0xc13d1c11
	CRC_inputMediaPhotoExternal                                           = 0xe5bbfe1a
	CRC_inputMediaDocumentExternal                                        = 0xfb52dc99
	CRC_inputMediaGame                                                    = 0xd33f43f3
	CRC_inputMediaInvoice                                                 = 0x405fef0d
	CRC_inputMediaGeoLive                                                 = 0x971fa843
	CRC_inputMediaPoll                                                    = 0x0f94e5f1
	CRC_inputMediaDice                                                    = 0xe66fbf7b
	CRC_inputMediaStory                                                   = 0x89fdd778
	CRC_inputMediaWebPage                                                 = 0xc21b8849
	CRC_inputMediaPaidMedia                                               = 0xc4103386
	CRC_inputChatPhotoEmpty                                               = 0x1ca48f57
	CRC_inputChatUploadedPhoto                                            = 0xbdcdaec0
	CRC_inputChatPhoto                                                    = 0x8953ad37
	CRC_inputGeoPointEmpty                                                = 0xe4c123d6
	CRC_inputGeoPoint                                                     = 0x48222faf
	CRC_inputPhotoEmpty                                                   = 0x1cd7bf0d
	CRC_inputPhoto                                                        = 0x3bb3b94a
	CRC_inputFileLocation                                                 = 0xdfdaabe1
	CRC_inputEncryptedFileLocation                                        = 0xf5235d55
	CRC_inputDocumentFileLocation                                         = 0xbad07584
	CRC_inputSecureFileLocation                                           = 0xcbc7ee28
	CRC_inputTakeoutFileLocation                                          = 0x29be5899
	CRC_inputPhotoFileLocation                                            = 0x40181ffe
	CRC_inputPhotoLegacyFileLocation                                      = 0xd83466f3
	CRC_inputPeerPhotoFileLocation                                        = 0x37257e99
	CRC_inputStickerSetThumb                                              = 0x9d84f3db
	CRC_inputGroupCallStream                                              = 0x0598a92a
	CRC_peerUser                                                          = 0x59511722
	CRC_peerChat                                                          = 0x36c6019a
	CRC_peerChannel                                                       = 0xa2a5371e
	CRC_storage_fileUnknown                                               = 0xaa963b05
	CRC_storage_filePartial                                               = 0x40bc6f52
	CRC_storage_fileJPEG                                                  = 0x007efe0e
	CRC_storage_fileGIF                                                   = 0xcae1aadf
	CRC_storage_filePNG                                                   = 0x0a4f63c0
	CRC_storage_filePDF                                                   = 0xae1e508d
	CRC_storage_fileMP3                                                   = 0x528a0677
	CRC_storage_fileMOV                                                   = 0x4b09ebbc
	CRC_storage_fileMP4                                                   = 0xb3cea0e4
	CRC_storage_fileWEBP                                                  = 0x1081464c
	CRC_userEmpty                                                         = 0xd3bc4b7a
	CRC_user                                                              = 0x83314fca
	CRC_userProfilePhotoEmpty                                             = 0x4f11bae1
	CRC_userProfilePhoto                                                  = 0x82d1f706
	CRC_userStatusEmpty                                                   = 0x09d05049
	CRC_userStatusOnline                                                  = 0xedb93949
	CRC_userStatusOffline                                                 = 0x008c703f
	CRC_userStatusRecently                                                = 0x7b197dc8
	CRC_userStatusLastWeek                                                = 0x541a1d1a
	CRC_userStatusLastMonth                                               = 0x65899777
	CRC_chatEmpty                                                         = 0x29562865
	CRC_chat                                                              = 0x41cbf256
	CRC_chatForbidden                                                     = 0x6592a1a7
	CRC_channel                                                           = 0xfe4478bd
	CRC_channelForbidden                                                  = 0x17d493d5
	CRC_chatFull                                                          = 0x2633421b
	CRC_channelFull                                                       = 0xbbab348d
	CRC_chatParticipant                                                   = 0xc02d4007
	CRC_chatParticipantCreator                                            = 0xe46bcee4
	CRC_chatParticipantAdmin                                              = 0xa0933f5b
	CRC_chatParticipantsForbidden                                         = 0x8763d3e1
	CRC_chatParticipants                                                  = 0x3cbc93f8
	CRC_chatPhotoEmpty                                                    = 0x37c1011c
	CRC_chatPhoto                                                         = 0x1c6e1c11
	CRC_messageEmpty                                                      = 0x90a6ca84
	CRC_message                                                           = 0x94345242
	CRC_messageService                                                    = 0x2b085862
	CRC_messageMediaEmpty                                                 = 0x3ded6320
	CRC_messageMediaPhoto                                                 = 0x695150d7
	CRC_messageMediaGeo                                                   = 0x56e0d474
	CRC_messageMediaContact                                               = 0x70322949
	CRC_messageMediaUnsupported                                           = 0x9f84f49e
	CRC_messageMediaDocument                                              = 0x4cf4d72d
	CRC_messageMediaWebPage                                               = 0xddf10c3b
	CRC_messageMediaVenue                                                 = 0x2ec0533f
	CRC_messageMediaGame                                                  = 0xfdb19008
	CRC_messageMediaInvoice                                               = 0xf6a548d3
	CRC_messageMediaGeoLive                                               = 0xb940c666
	CRC_messageMediaPoll                                                  = 0x4bd6e798
	CRC_messageMediaDice                                                  = 0x3f7ee58b
	CRC_messageMediaStory                                                 = 0x68cb6283
	CRC_messageMediaGiveaway                                              = 0xaa073beb
	CRC_messageMediaGiveawayResults                                       = 0xceaa3ea1
	CRC_messageMediaPaidMedia                                             = 0xa8852491
	CRC_messageActionEmpty                                                = 0xb6aef7b0
	CRC_messageActionChatCreate                                           = 0xbd47cbad
	CRC_messageActionChatEditTitle                                        = 0xb5a1ce5a
	CRC_messageActionChatEditPhoto                                        = 0x7fcb13a8
	CRC_messageActionChatDeletePhoto                                      = 0x95e3fbef
	CRC_messageActionChatAddUser                                          = 0x15cefd00
	CRC_messageActionChatDeleteUser                                       = 0xa43f30cc
	CRC_messageActionChatJoinedByLink                                     = 0x031224c3
	CRC_messageActionChannelCreate                                        = 0x95d2ac92
	CRC_messageActionChatMigrateTo                                        = 0xe1037f92
	CRC_messageActionChannelMigrateFrom                                   = 0xea3948e9
	CRC_messageActionPINMessage                                           = 0x94bd38ed
	CRC_messageActionHistoryClear                                         = 0x9fbab604
	CRC_messageActionGameScore                                            = 0x92a72876
	CRC_messageActionPaymentSentMe                                        = 0x8f31b327
	CRC_messageActionPaymentSent                                          = 0x96163f56
	CRC_messageActionPhoneCall                                            = 0x80e11a7f
	CRC_messageActionScreenshotTaken                                      = 0x4792929b
	CRC_messageActionCustomAction                                         = 0xfae69f56
	CRC_messageActionBotAllowed                                           = 0xc516d679
	CRC_messageActionSecureValuesSentMe                                   = 0x1b287353
	CRC_messageActionSecureValuesSent                                     = 0xd95c6154
	CRC_messageActionContactSignUp                                        = 0xf3f25f76
	CRC_messageActionGeoProximityReached                                  = 0x98e0d697
	CRC_messageActionGroupCall                                            = 0x7a0d7f42
	CRC_messageActionInviteToGroupCall                                    = 0x502f92f7
	CRC_messageActionSetMessagesTTL                                       = 0x3c134d7b
	CRC_messageActionGroupCallScheduled                                   = 0xb3a07661
	CRC_messageActionSetChatTheme                                         = 0xaa786345
	CRC_messageActionChatJoinedByRequest                                  = 0xebbca3cb
	CRC_messageActionWebViewDataSentMe                                    = 0x47dd8079
	CRC_messageActionWebViewDataSent                                      = 0xb4c38cb5
	CRC_messageActionGiftPremium                                          = 0xc83d6aec
	CRC_messageActionTopicCreate                                          = 0x0d999256
	CRC_messageActionTopicEdit                                            = 0xc0944820
	CRC_messageActionSuggestProfilePhoto                                  = 0x57de635e
	CRC_messageActionRequestedPeer                                        = 0x31518e9b
	CRC_messageActionSetChatWallPaper                                     = 0x5060a3f4
	CRC_messageActionGiftCode                                             = 0x678c2e09
	CRC_messageActionGiveawayLaunch                                       = 0xa80f51e4
	CRC_messageActionGiveawayResults                                      = 0x87e2f155
	CRC_messageActionBoostApply                                           = 0xcc02aa6d
	CRC_messageActionRequestedPeerSentMe                                  = 0x93b31848
	CRC_messageActionPaymentRefunded                                      = 0x41b3e202
	CRC_messageActionGiftStars                                            = 0x45d5b021
	CRC_messageActionPrizeStars                                           = 0xb00c47a2
	CRC_dialog                                                            = 0xd58a08c6
	CRC_dialogFolder                                                      = 0x71bd134c
	CRC_photoEmpty                                                        = 0x2331b22d
	CRC_photo                                                             = 0xfb197a65
	CRC_photoSizeEmpty                                                    = 0x0e17e23c
	CRC_photoSize                                                         = 0x75c78e60
	CRC_photoCachedSize                                                   = 0x021e1ad6
	CRC_photoStrippedSize                                                 = 0xe0b0bc2e
	CRC_photoSizeProgressive                                              = 0xfa3efb95
	CRC_photoPathSize                                                     = 0xd8214d41
	CRC_geoPointEmpty                                                     = 0x1117dd5f
	CRC_geoPoint                                                          = 0xb2a2f663
	CRC_auth_sentCode                                                     = 0x5e002502
	CRC_auth_sentCodeSuccess                                              = 0x2390fe44
	CRC_auth_authorization                                                = 0x2ea2c0d4
	CRC_auth_authorizationSignUpRequired                                  = 0x44747e9a
	CRC_auth_exportedAuthorization                                        = 0xb434e2b8
	CRC_inputNotifyPeer                                                   = 0xb8bc5b0c
	CRC_inputNotifyUsers                                                  = 0x193b4417
	CRC_inputNotifyChats                                                  = 0x4a95e84e
	CRC_inputNotifyBroadcasts                                             = 0xb1db7c7e
	CRC_inputNotifyForumTopic                                             = 0x5c467992
	CRC_inputPeerNotifySettings                                           = 0xcacb6ae2
	CRC_peerNotifySettings                                                = 0x99622c0c
	CRC_peerSettings                                                      = 0xacd66c5e
	CRC_wallPaper                                                         = 0xa437c3ed
	CRC_wallPaperNoFile                                                   = 0xe0804116
	CRC_inputReportReasonSpam                                             = 0x58dbcab8
	CRC_inputReportReasonViolence                                         = 0x1e22c78d
	CRC_inputReportReasonPornography                                      = 0x2e59d922
	CRC_inputReportReasonChildAbuse                                       = 0xadf44ee3
	CRC_inputReportReasonOther                                            = 0xc1e4a2b1
	CRC_inputReportReasonCopyright                                        = 0x9b89f93a
	CRC_inputReportReasonGeoIrrelevant                                    = 0xdbd4feed
	CRC_inputReportReasonFake                                             = 0xf5ddd6e7
	CRC_inputReportReasonIllegalDrugs                                     = 0x0a8eb2be
	CRC_inputReportReasonPersonalDetails                                  = 0x9ec7863d
	CRC_userFull                                                          = 0xcc997720
	CRC_contact                                                           = 0x145ade0b
	CRC_importedContact                                                   = 0xc13e3c50
	CRC_contactStatus                                                     = 0x16d9703b
	CRC_contacts_contactsNotModified                                      = 0xb74ba9d2
	CRC_contacts_contacts                                                 = 0xeae87e42
	CRC_contacts_importedContacts                                         = 0x77d01c3b
	CRC_contacts_blocked                                                  = 0x0ade1591
	CRC_contacts_blockedSlice                                             = 0xe1664194
	CRC_messages_dialogs                                                  = 0x15ba6c40
	CRC_messages_dialogsSlice                                             = 0x71e094f3
	CRC_messages_dialogsNotModified                                       = 0xf0e3e596
	CRC_messages_messages                                                 = 0x8c718e87
	CRC_messages_messagesSlice                                            = 0x3a54685e
	CRC_messages_channelMessages                                          = 0xc776ba4e
	CRC_messages_messagesNotModified                                      = 0x74535f21
	CRC_messages_chats                                                    = 0x64ff9fd5
	CRC_messages_chatsSlice                                               = 0x9cd81144
	CRC_messages_chatFull                                                 = 0xe5d7d19c
	CRC_messages_affectedHistory                                          = 0xb45c69d1
	CRC_inputMessagesFilterEmpty                                          = 0x57e2f66c
	CRC_inputMessagesFilterPhotos                                         = 0x9609a51c
	CRC_inputMessagesFilterVideo                                          = 0x9fc00e65
	CRC_inputMessagesFilterPhotoVideo                                     = 0x56e9f0e4
	CRC_inputMessagesFilterDocument                                       = 0x9eddf188
	CRC_inputMessagesFilterURL                                            = 0x7ef0dd87
	CRC_inputMessagesFilterGIF                                            = 0xffc86587
	CRC_inputMessagesFilterVoice                                          = 0x50f5c392
	CRC_inputMessagesFilterMusic                                          = 0x3751b49e
	CRC_inputMessagesFilterChatPhotos                                     = 0x3a20ecb8
	CRC_inputMessagesFilterPhoneCalls                                     = 0x80c99768
	CRC_inputMessagesFilterRoundVoice                                     = 0x7a7c17a4
	CRC_inputMessagesFilterRoundVideo                                     = 0xb549da53
	CRC_inputMessagesFilterMyMentions                                     = 0xc1f8e69a
	CRC_inputMessagesFilterGeo                                            = 0xe7026d0d
	CRC_inputMessagesFilterContacts                                       = 0xe062db83
	CRC_inputMessagesFilterPinned                                         = 0x1bb00451
	CRC_updateNewMessage                                                  = 0x1f2b0afd
	CRC_updateMessageID                                                   = 0x4e90bfd6
	CRC_updateDeleteMessages                                              = 0xa20db0e5
	CRC_updateUserTyping                                                  = 0xc01e857f
	CRC_updateChatUserTyping                                              = 0x83487af0
	CRC_updateChatParticipants                                            = 0x07761198
	CRC_updateUserStatus                                                  = 0xe5bdf8de
	CRC_updateUserName                                                    = 0xa7848924
	CRC_updateNewAuthorization                                            = 0x8951abef
	CRC_updateNewEncryptedMessage                                         = 0x12bcbd9a
	CRC_updateEncryptedChatTyping                                         = 0x1710f156
	CRC_updateEncryption                                                  = 0xb4a2e88d
	CRC_updateEncryptedMessagesRead                                       = 0x38fe25b7
	CRC_updateChatParticipantAdd                                          = 0x3dda5451
	CRC_updateChatParticipantDelete                                       = 0xe32f3d77
	CRC_updateDCOptions                                                   = 0x8e5e9873
	CRC_updateNotifySettings                                              = 0xbec268ef
	CRC_updateServiceNotification                                         = 0xebe46819
	CRC_updatePrivacy                                                     = 0xee3b272a
	CRC_updateUserPhone                                                   = 0x05492a13
	CRC_updateReadHistoryInbox                                            = 0x9c974fdf
	CRC_updateReadHistoryOutbox                                           = 0x2f2f21bf
	CRC_updateWebPage                                                     = 0x7f891213
	CRC_updateReadMessagesContents                                        = 0xf8227181
	CRC_updateChannelTooLong                                              = 0x108d941f
	CRC_updateChannel                                                     = 0x635b4c09
	CRC_updateNewChannelMessage                                           = 0x62ba04d9
	CRC_updateReadChannelInbox                                            = 0x922e6e10
	CRC_updateDeleteChannelMessages                                       = 0xc32d5b12
	CRC_updateChannelMessageViews                                         = 0xf226ac08
	CRC_updateChatParticipantAdmin                                        = 0xd7ca61a2
	CRC_updateNewStickerSet                                               = 0x688a30aa
	CRC_updateStickerSetsOrder                                            = 0x0bb2d201
	CRC_updateStickerSets                                                 = 0x31c24808
	CRC_updateSavedGIFs                                                   = 0x9375341e
	CRC_updateBotInlineQuery                                              = 0x496f379c
	CRC_updateBotInlineSend                                               = 0x12f12a07
	CRC_updateEditChannelMessage                                          = 0x1b3f4df7
	CRC_updateBotCallbackQuery                                            = 0xb9cfc48d
	CRC_updateEditMessage                                                 = 0xe40370a3
	CRC_updateInlineBotCallbackQuery                                      = 0x691e9052
	CRC_updateReadChannelOutbox                                           = 0xb75f99a9
	CRC_updateDraftMessage                                                = 0x1b49ec6d
	CRC_updateReadFeaturedStickers                                        = 0x571d2742
	CRC_updateRecentStickers                                              = 0x9a422c20
	CRC_updateConfig                                                      = 0xa229dd06
	CRC_updatePTSChanged                                                  = 0x3354678f
	CRC_updateChannelWebPage                                              = 0x2f2ba99f
	CRC_updateDialogPinned                                                = 0x6e6fe51c
	CRC_updatePinnedDialogs                                               = 0xfa0f3ca2
	CRC_updateBotWebhookJSON                                              = 0x8317c0c3
	CRC_updateBotWebhookJSONQuery                                         = 0x9b9240a6
	CRC_updateBotShippingQuery                                            = 0xb5aefd7d
	CRC_updateBotPrecheckoutQuery                                         = 0x8caa9a96
	CRC_updatePhoneCall                                                   = 0xab0f6b1e
	CRC_updateLangPackTooLong                                             = 0x46560264
	CRC_updateLangPack                                                    = 0x56022f4d
	CRC_updateFavedStickers                                               = 0xe511996d
	CRC_updateChannelReadMessagesContents                                 = 0xea29055d
	CRC_updateContactsReset                                               = 0x7084a7be
	CRC_updateChannelAvailableMessages                                    = 0xb23fc698
	CRC_updateDialogUnreadMark                                            = 0xe16459c3
	CRC_updateMessagePoll                                                 = 0xaca1657b
	CRC_updateChatDefaultBannedRights                                     = 0x54c01850
	CRC_updateFolderPeers                                                 = 0x19360dc0
	CRC_updatePeerSettings                                                = 0x6a7e7366
	CRC_updatePeerLocated                                                 = 0xb4afcfb0
	CRC_updateNewScheduledMessage                                         = 0x39a51dfb
	CRC_updateDeleteScheduledMessages                                     = 0x90866cee
	CRC_updateTheme                                                       = 0x8216fba3
	CRC_updateGeoLiveViewed                                               = 0x871fb939
	CRC_updateLoginToken                                                  = 0x564fe691
	CRC_updateMessagePollVote                                             = 0x24f40e77
	CRC_updateDialogFilter                                                = 0x26ffde7d
	CRC_updateDialogFilterOrder                                           = 0xa5d72105
	CRC_updateDialogFilters                                               = 0x3504914f
	CRC_updatePhoneCallSignalingData                                      = 0x2661bf09
	CRC_updateChannelMessageForwards                                      = 0xd29a27f4
	CRC_updateReadChannelDiscussionInbox                                  = 0xd6b19546
	CRC_updateReadChannelDiscussionOutbox                                 = 0x695c9e7c
	CRC_updatePeerBlocked                                                 = 0xebe07752
	CRC_updateChannelUserTyping                                           = 0x8c88c923
	CRC_updatePinnedMessages                                              = 0xed85eab5
	CRC_updatePinnedChannelMessages                                       = 0x5bb98608
	CRC_updateChat                                                        = 0xf89a6a4e
	CRC_updateGroupCallParticipants                                       = 0xf2ebdb4e
	CRC_updateGroupCall                                                   = 0x14b24500
	CRC_updatePeerHistoryTTL                                              = 0xbb9bb9a5
	CRC_updateChatParticipant                                             = 0xd087663a
	CRC_updateChannelParticipant                                          = 0x985d3abb
	CRC_updateBotStopped                                                  = 0xc4870a49
	CRC_updateGroupCallConnection                                         = 0x0b783982
	CRC_updateBotCommands                                                 = 0x4d712f2e
	CRC_updatePendingJoinRequests                                         = 0x7063c3db
	CRC_updateBotChatInviteRequester                                      = 0x11dfa986
	CRC_updateMessageReactions                                            = 0x5e1b3cb8
	CRC_updateAttachMenuBots                                              = 0x17b7a20b
	CRC_updateWebViewResultSent                                           = 0x1592b79d
	CRC_updateBotMenuButton                                               = 0x14b85813
	CRC_updateSavedRingtones                                              = 0x74d8be99
	CRC_updateTranscribedAudio                                            = 0x0084cd5a
	CRC_updateReadFeaturedEmojiStickers                                   = 0xfb4c496c
	CRC_updateUserEmojiStatus                                             = 0x28373599
	CRC_updateRecentEmojiStatuses                                         = 0x30f443db
	CRC_updateRecentReactions                                             = 0x6f7863f4
	CRC_updateMoveStickerSetToTop                                         = 0x86fccf85
	CRC_updateMessageExtendedMedia                                        = 0xd5a41724
	CRC_updateChannelPinnedTopic                                          = 0x192efbe3
	CRC_updateChannelPinnedTopics                                         = 0xfe198602
	CRC_updateUser                                                        = 0x20529438
	CRC_updateAutoSaveSettings                                            = 0xec05b097
	CRC_updateStory                                                       = 0x75b3b798
	CRC_updateReadStories                                                 = 0xf74e932b
	CRC_updateStoryID                                                     = 0x1bf335b9
	CRC_updateStoriesStealthMode                                          = 0x2c084dc1
	CRC_updateSentStoryReaction                                           = 0x7d627683
	CRC_updateBotChatBoost                                                = 0x904dd49c
	CRC_updateChannelViewForumAsMessages                                  = 0x07b68920
	CRC_updatePeerWallpaper                                               = 0xae3f101d
	CRC_updateBotMessageReaction                                          = 0xac21d3ce
	CRC_updateBotMessageReactions                                         = 0x09cb7759
	CRC_updateSavedDialogPinned                                           = 0xaeaf9e74
	CRC_updatePinnedSavedDialogs                                          = 0x686c85a6
	CRC_updateSavedReactionTags                                           = 0x39c67432
	CRC_updateSMSJob                                                      = 0xf16269d4
	CRC_updateQuickReplies                                                = 0xf9470ab2
	CRC_updateNewQuickReply                                               = 0xf53da717
	CRC_updateDeleteQuickReply                                            = 0x53e6f1ec
	CRC_updateQuickReplyMessage                                           = 0x3e050d0f
	CRC_updateDeleteQuickReplyMessages                                    = 0x566fe7cd
	CRC_updateBotBusinessConnect                                          = 0x8ae5c97a
	CRC_updateBotNewBusinessMessage                                       = 0x9ddb347c
	CRC_updateBotEditBusinessMessage                                      = 0x07df587c
	CRC_updateBotDeleteBusinessMessage                                    = 0xa02a982e
	CRC_updateNewStoryReaction                                            = 0x1824e40b
	CRC_updateBroadcastRevenueTransactions                                = 0xdfd961f5
	CRC_updateStarsBalance                                                = 0x0fb85198
	CRC_updateBusinessBotCallbackQuery                                    = 0x1ea2fda7
	CRC_updateStarsRevenueStatus                                          = 0xa584b019
	CRC_updateBotPurchasedPaidMedia                                       = 0x283bd312
	CRC_updatePaidReactionPrivacy                                         = 0x51ca7aec
	CRC_updates_state                                                     = 0xa56c2a3e
	CRC_updates_differenceEmpty                                           = 0x5d75a138
	CRC_updates_difference                                                = 0x00f49ca0
	CRC_updates_differenceSlice                                           = 0xa8fb1981
	CRC_updates_differenceTooLong                                         = 0x4afe8f6d
	CRC_updatesTooLong                                                    = 0xe317af7e
	CRC_updateShortMessage                                                = 0x313bc7f8
	CRC_updateShortChatMessage                                            = 0x4d6deea5
	CRC_updateShort                                                       = 0x78d4dec1
	CRC_updatesCombined                                                   = 0x725b04c3
	CRC_updates                                                           = 0x74ae4240
	CRC_updateShortSentMessage                                            = 0x9015e101
	CRC_photos_photos                                                     = 0x8dca6aa5
	CRC_photos_photosSlice                                                = 0x15051f54
	CRC_photos_photo                                                      = 0x20212ca8
	CRC_upload_file                                                       = 0x096a18d5
	CRC_upload_fileCDNRedirect                                            = 0xf18cda44
	CRC_dcOption                                                          = 0x18b7a10d
	CRC_config                                                            = 0xcc1a241e
	CRC_nearestDC                                                         = 0x8e1a1775
	CRC_help_appUpdate                                                    = 0xccbbce30
	CRC_help_noAppUpdate                                                  = 0xc45a6536
	CRC_help_inviteText                                                   = 0x18cb9f78
	CRC_encryptedChatEmpty                                                = 0xab7ec0a0
	CRC_encryptedChatWaiting                                              = 0x66b25953
	CRC_encryptedChatRequested                                            = 0x48f1d94c
	CRC_encryptedChat                                                     = 0x61f0d4c7
	CRC_encryptedChatDiscarded                                            = 0x1e1c7c45
	CRC_inputEncryptedChat                                                = 0xf141b5e1
	CRC_encryptedFileEmpty                                                = 0xc21f497e
	CRC_encryptedFile                                                     = 0xa8008cd8
	CRC_inputEncryptedFileEmpty                                           = 0x1837c364
	CRC_inputEncryptedFileUploaded                                        = 0x64bd0306
	CRC_inputEncryptedFile                                                = 0x5a17b5e5
	CRC_inputEncryptedFileBigUploaded                                     = 0x2dc173c8
	CRC_encryptedMessage                                                  = 0xed18c118
	CRC_encryptedMessageService                                           = 0x23734b06
	CRC_messages_dhConfigNotModified                                      = 0xc0e24635
	CRC_messages_dhConfig                                                 = 0x2c221edd
	CRC_messages_sentEncryptedMessage                                     = 0x560f8935
	CRC_messages_sentEncryptedFile                                        = 0x9493ff32
	CRC_inputDocumentEmpty                                                = 0x72f0eaae
	CRC_inputDocument                                                     = 0x1abfb575
	CRC_documentEmpty                                                     = 0x36f8c871
	CRC_document                                                          = 0x8fd4c4d8
	CRC_help_support                                                      = 0x17c6b5f6
	CRC_notifyPeer                                                        = 0x9fd40bd8
	CRC_notifyUsers                                                       = 0xb4c83b4c
	CRC_notifyChats                                                       = 0xc007cec3
	CRC_notifyBroadcasts                                                  = 0xd612e8ef
	CRC_notifyForumTopic                                                  = 0x226e6308
	CRC_sendMessageTypingAction                                           = 0x16bf744e
	CRC_sendMessageCancelAction                                           = 0xfd5ec8f5
	CRC_sendMessageRecordVideoAction                                      = 0xa187d66f
	CRC_sendMessageUploadVideoAction                                      = 0xe9763aec
	CRC_sendMessageRecordAudioAction                                      = 0xd52f73f7
	CRC_sendMessageUploadAudioAction                                      = 0xf351d7ab
	CRC_sendMessageUploadPhotoAction                                      = 0xd1d34a26
	CRC_sendMessageUploadDocumentAction                                   = 0xaa0cd9e4
	CRC_sendMessageGeoLocationAction                                      = 0x176f8ba1
	CRC_sendMessageChooseContactAction                                    = 0x628cbc6f
	CRC_sendMessageGamePlayAction                                         = 0xdd6a8f48
	CRC_sendMessageRecordRoundAction                                      = 0x88f27fbc
	CRC_sendMessageUploadRoundAction                                      = 0x243e1c66
	CRC_speakingInGroupCallAction                                         = 0xd92c2285
	CRC_sendMessageHistoryImportAction                                    = 0xdbda9246
	CRC_sendMessageChooseStickerAction                                    = 0xb05ac6b1
	CRC_sendMessageEmojiInteraction                                       = 0x25972bcb
	CRC_sendMessageEmojiInteractionSeen                                   = 0xb665902e
	CRC_contacts_found                                                    = 0xb3134d9d
	CRC_inputPrivacyKeyStatusTimestamp                                    = 0x4f96cb18
	CRC_inputPrivacyKeyChatInvite                                         = 0xbdfb0426
	CRC_inputPrivacyKeyPhoneCall                                          = 0xfabadc5f
	CRC_inputPrivacyKeyPhoneP2P                                           = 0xdb9e70d2
	CRC_inputPrivacyKeyForwards                                           = 0xa4dd4c08
	CRC_inputPrivacyKeyProfilePhoto                                       = 0x5719bacc
	CRC_inputPrivacyKeyPhoneNumber                                        = 0x0352dafa
	CRC_inputPrivacyKeyAddedByPhone                                       = 0xd1219bdd
	CRC_inputPrivacyKeyVoiceMessages                                      = 0xaee69d68
	CRC_inputPrivacyKeyAbout                                              = 0x3823cc40
	CRC_inputPrivacyKeyBirthday                                           = 0xd65a11cc
	CRC_privacyKeyStatusTimestamp                                         = 0xbc2eab30
	CRC_privacyKeyChatInvite                                              = 0x500e6dfa
	CRC_privacyKeyPhoneCall                                               = 0x3d662b7b
	CRC_privacyKeyPhoneP2P                                                = 0x39491cc8
	CRC_privacyKeyForwards                                                = 0x69ec56a3
	CRC_privacyKeyProfilePhoto                                            = 0x96151fed
	CRC_privacyKeyPhoneNumber                                             = 0xd19ae46d
	CRC_privacyKeyAddedByPhone                                            = 0x42ffd42b
	CRC_privacyKeyVoiceMessages                                           = 0x0697f414
	CRC_privacyKeyAbout                                                   = 0xa486b761
	CRC_privacyKeyBirthday                                                = 0x2000a518
	CRC_inputPrivacyValueAllowContacts                                    = 0x0d09e07b
	CRC_inputPrivacyValueAllowAll                                         = 0x184b35ce
	CRC_inputPrivacyValueAllowUsers                                       = 0x131cc67f
	CRC_inputPrivacyValueDisallowContacts                                 = 0x0ba52007
	CRC_inputPrivacyValueDisallowAll                                      = 0xd66b66c9
	CRC_inputPrivacyValueDisallowUsers                                    = 0x90110467
	CRC_inputPrivacyValueAllowChatParticipants                            = 0x840649cf
	CRC_inputPrivacyValueDisallowChatParticipants                         = 0xe94f0f86
	CRC_inputPrivacyValueAllowCloseFriends                                = 0x2f453e49
	CRC_inputPrivacyValueAllowPremium                                     = 0x77cdc9f1
	CRC_privacyValueAllowContacts                                         = 0xfffe1bac
	CRC_privacyValueAllowAll                                              = 0x65427b82
	CRC_privacyValueAllowUsers                                            = 0xb8905fb2
	CRC_privacyValueDisallowContacts                                      = 0xf888fa1a
	CRC_privacyValueDisallowAll                                           = 0x8b73e763
	CRC_privacyValueDisallowUsers                                         = 0xe4621141
	CRC_privacyValueAllowChatParticipants                                 = 0x6b134e8e
	CRC_privacyValueDisallowChatParticipants                              = 0x41c87565
	CRC_privacyValueAllowCloseFriends                                     = 0xf7e8d89b
	CRC_privacyValueAllowPremium                                          = 0xece9814b
	CRC_account_privacyRules                                              = 0x50a04e45
	CRC_accountDaysTTL                                                    = 0xb8d0afdf
	CRC_documentAttributeImageSize                                        = 0x6c37c15c
	CRC_documentAttributeAnimated                                         = 0x11b58939
	CRC_documentAttributeSticker                                          = 0x6319d612
	CRC_documentAttributeVideo                                            = 0x17399fad
	CRC_documentAttributeAudio                                            = 0x9852f9c6
	CRC_documentAttributeFilename                                         = 0x15590068
	CRC_documentAttributeHasStickers                                      = 0x9801d2f7
	CRC_documentAttributeCustomEmoji                                      = 0xfd149899
	CRC_messages_stickersNotModified                                      = 0xf1749a22
	CRC_messages_stickers                                                 = 0x30a6ec7e
	CRC_stickerPack                                                       = 0x12b299d4
	CRC_messages_allStickersNotModified                                   = 0xe86602c3
	CRC_messages_allStickers                                              = 0xcdbbcebb
	CRC_messages_affectedMessages                                         = 0x84d19185
	CRC_webPageEmpty                                                      = 0x211a1788
	CRC_webPagePending                                                    = 0xb0d13e47
	CRC_webPage                                                           = 0xe89c45b2
	CRC_webPageNotModified                                                = 0x7311ca11
	CRC_authorization                                                     = 0xad01d61d
	CRC_account_authorizations                                            = 0x4bff8ea0
	CRC_account_password                                                  = 0x957b50fb
	CRC_account_passwordSettings                                          = 0x9a5c33e5
	CRC_account_passwordInputSettings                                     = 0xc23727c9
	CRC_auth_passwordRecovery                                             = 0x137948a5
	CRC_receivedNotifyMessage                                             = 0xa384b779
	CRC_chatInviteExported                                                = 0xa22cbd96
	CRC_chatInvitePublicJoinRequests                                      = 0xed107ab7
	CRC_chatInviteAlready                                                 = 0x5a686d7c
	CRC_chatInvite                                                        = 0xfe65389d
	CRC_chatInvitePeek                                                    = 0x61695cb0
	CRC_inputStickerSetEmpty                                              = 0xffb62b95
	CRC_inputStickerSetID                                                 = 0x9de7a269
	CRC_inputStickerSetShortName                                          = 0x861cc8a0
	CRC_inputStickerSetAnimatedEmoji                                      = 0x028703c8
	CRC_inputStickerSetDice                                               = 0xe67f520e
	CRC_inputStickerSetAnimatedEmojiAnimations                            = 0x0cde3739
	CRC_inputStickerSetPremiumGifts                                       = 0xc88b3b02
	CRC_inputStickerSetEmojiGenericAnimations                             = 0x04c4d4ce
	CRC_inputStickerSetEmojiDefaultStatuses                               = 0x29d0f5ee
	CRC_inputStickerSetEmojiDefaultTopicIcons                             = 0x44c1f8e9
	CRC_inputStickerSetEmojiChannelDefaultStatuses                        = 0x49748553
	CRC_stickerSet                                                        = 0x2dd14edc
	CRC_messages_stickerSet                                               = 0x6e153f16
	CRC_messages_stickerSetNotModified                                    = 0xd3f924eb
	CRC_botCommand                                                        = 0xc27ac8c7
	CRC_botInfo                                                           = 0x82437e74
	CRC_keyboardButton                                                    = 0xa2fa4880
	CRC_keyboardButtonURL                                                 = 0x258aff05
	CRC_keyboardButtonCallback                                            = 0x35bbdb6b
	CRC_keyboardButtonRequestPhone                                        = 0xb16a6c29
	CRC_keyboardButtonRequestGeoLocation                                  = 0xfc796b3f
	CRC_keyboardButtonSwitchInline                                        = 0x93b9fbb5
	CRC_keyboardButtonGame                                                = 0x50f41ccf
	CRC_keyboardButtonBuy                                                 = 0xafd93fbb
	CRC_keyboardButtonURLAuth                                             = 0x10b78d29
	CRC_inputKeyboardButtonURLAuth                                        = 0xd02e7fd4
	CRC_keyboardButtonRequestPoll                                         = 0xbbc7515d
	CRC_inputKeyboardButtonUserProfile                                    = 0xe988037b
	CRC_keyboardButtonUserProfile                                         = 0x308660c1
	CRC_keyboardButtonWebView                                             = 0x13767230
	CRC_keyboardButtonSimpleWebView                                       = 0xa0c0505c
	CRC_keyboardButtonRequestPeer                                         = 0x53d7bfd8
	CRC_inputKeyboardButtonRequestPeer                                    = 0xc9662d05
	CRC_keyboardButtonRow                                                 = 0x77608b83
	CRC_replyKeyboardHide                                                 = 0xa03e5b85
	CRC_replyKeyboardForceReply                                           = 0x86b40b08
	CRC_replyKeyboardMarkup                                               = 0x85dd99d1
	CRC_replyInlineMarkup                                                 = 0x48a30254
	CRC_messageEntityUnknown                                              = 0xbb92ba95
	CRC_messageEntityMention                                              = 0xfa04579d
	CRC_messageEntityHashtag                                              = 0x6f635b0d
	CRC_messageEntityBotCommand                                           = 0x6cef8ac7
	CRC_messageEntityURL                                                  = 0x6ed02538
	CRC_messageEntityEmail                                                = 0x64e475c2
	CRC_messageEntityBold                                                 = 0xbd610bc9
	CRC_messageEntityItalic                                               = 0x826f8b60
	CRC_messageEntityCode                                                 = 0x28a20571
	CRC_messageEntityPre                                                  = 0x73924be0
	CRC_messageEntityTextURL                                              = 0x76a6d327
	CRC_messageEntityMentionName                                          = 0xdc7b1140
	CRC_inputMessageEntityMentionName                                     = 0x208e68c9
	CRC_messageEntityPhone                                                = 0x9b69e34b
	CRC_messageEntityCashtag                                              = 0x4c4e743f
	CRC_messageEntityUnderline                                            = 0x9c4e7e8b
	CRC_messageEntityStrike                                               = 0xbf0693d4
	CRC_messageEntityBankCard                                             = 0x761e6af4
	CRC_messageEntitySpoiler                                              = 0x32ca960f
	CRC_messageEntityCustomEmoji                                          = 0xc8cf05f8
	CRC_messageEntityBlockquote                                           = 0xf1ccaaac
	CRC_inputChannelEmpty                                                 = 0xee8c1e86
	CRC_inputChannel                                                      = 0xf35aec28
	CRC_inputChannelFromMessage                                           = 0x5b934f9d
	CRC_contacts_resolvedPeer                                             = 0x7f077ad9
	CRC_messageRange                                                      = 0x0ae30253
	CRC_updates_channelDifferenceEmpty                                    = 0x3e11affb
	CRC_updates_channelDifferenceTooLong                                  = 0xa4bcc6fe
	CRC_updates_channelDifference                                         = 0x2064674e
	CRC_channelMessagesFilterEmpty                                        = 0x94d42ee7
	CRC_channelMessagesFilter                                             = 0xcd77d957
	CRC_channelParticipant                                                = 0xcb397619
	CRC_channelParticipantSelf                                            = 0x4f607bef
	CRC_channelParticipantCreator                                         = 0x2fe601d3
	CRC_channelParticipantAdmin                                           = 0x34c3bb53
	CRC_channelParticipantBanned                                          = 0x6df8014e
	CRC_channelParticipantLeft                                            = 0x1b03f006
	CRC_channelParticipantsRecent                                         = 0xde3f3c79
	CRC_channelParticipantsAdmins                                         = 0xb4608969
	CRC_channelParticipantsKicked                                         = 0xa3b54985
	CRC_channelParticipantsBots                                           = 0xb0d1865b
	CRC_channelParticipantsBanned                                         = 0x1427a5e1
	CRC_channelParticipantsSearch                                         = 0x0656ac4b
	CRC_channelParticipantsContacts                                       = 0xbb6ae88d
	CRC_channelParticipantsMentions                                       = 0xe04b5ceb
	CRC_channels_channelParticipants                                      = 0x9ab0feaf
	CRC_channels_channelParticipantsNotModified                           = 0xf0173fe9
	CRC_channels_channelParticipant                                       = 0xdfb80317
	CRC_help_termsOfService                                               = 0x780a0310
	CRC_messages_savedGIFsNotModified                                     = 0xe8025ca2
	CRC_messages_savedGIFs                                                = 0x84a02a0d
	CRC_inputBotInlineMessageMediaAuto                                    = 0x3380c786
	CRC_inputBotInlineMessageText                                         = 0x3dcd7a87
	CRC_inputBotInlineMessageMediaGeo                                     = 0x96929a85
	CRC_inputBotInlineMessageMediaVenue                                   = 0x417bbf11
	CRC_inputBotInlineMessageMediaContact                                 = 0xa6edbffd
	CRC_inputBotInlineMessageGame                                         = 0x4b425864
	CRC_inputBotInlineMessageMediaInvoice                                 = 0xd7e78225
	CRC_inputBotInlineMessageMediaWebPage                                 = 0xbddcc510
	CRC_inputBotInlineResult                                              = 0x88bf9319
	CRC_inputBotInlineResultPhoto                                         = 0xa8d864a7
	CRC_inputBotInlineResultDocument                                      = 0xfff8fdc4
	CRC_inputBotInlineResultGame                                          = 0x4fa417f2
	CRC_botInlineMessageMediaAuto                                         = 0x764cf810
	CRC_botInlineMessageText                                              = 0x8c7f65e2
	CRC_botInlineMessageMediaGeo                                          = 0x051846fd
	CRC_botInlineMessageMediaVenue                                        = 0x8a86659c
	CRC_botInlineMessageMediaContact                                      = 0x18d1cdc2
	CRC_botInlineMessageMediaInvoice                                      = 0x354a9b09
	CRC_botInlineMessageMediaWebPage                                      = 0x809ad9a6
	CRC_botInlineResult                                                   = 0x11965f3a
	CRC_botInlineMediaResult                                              = 0x17db940b
	CRC_messages_botResults                                               = 0xe021f2f6
	CRC_exportedMessageLink                                               = 0x5dab1af4
	CRC_messageFwdHeader                                                  = 0x4e4df4bb
	CRC_auth_codeTypeSMS                                                  = 0x72a3158c
	CRC_auth_codeTypeCall                                                 = 0x741cd3e3
	CRC_auth_codeTypeFlashCall                                            = 0x226ccefb
	CRC_auth_codeTypeMissedCall                                           = 0xd61ad6ee
	CRC_auth_codeTypeFragmentSMS                                          = 0x06ed998c
	CRC_auth_sentCodeTypeApp                                              = 0x3dbb5986
	CRC_auth_sentCodeTypeSMS                                              = 0xc000bba2
	CRC_auth_sentCodeTypeCall                                             = 0x5353e5a7
	CRC_auth_sentCodeTypeFlashCall                                        = 0xab03c6d9
	CRC_auth_sentCodeTypeMissedCall                                       = 0x82006484
	CRC_auth_sentCodeTypeEmailCode                                        = 0xf450f59b
	CRC_auth_sentCodeTypeSetUpEmailRequired                               = 0xa5491dea
	CRC_auth_sentCodeTypeFragmentSMS                                      = 0xd9565c39
	CRC_auth_sentCodeTypeFirebaseSMS                                      = 0x009fd736
	CRC_auth_sentCodeTypeSMSWord                                          = 0xa416ac81
	CRC_auth_sentCodeTypeSMSPhrase                                        = 0xb37794af
	CRC_messages_botCallbackAnswer                                        = 0x36585ea4
	CRC_messages_messageEditData                                          = 0x26b5dde6
	CRC_inputBotInlineMessageID                                           = 0x890c3d89
	CRC_inputBotInlineMessageID64                                         = 0xb6d915d7
	CRC_inlineBotSwitchPM                                                 = 0x3c20629f
	CRC_messages_peerDialogs                                              = 0x3371c354
	CRC_topPeer                                                           = 0xedcdc05b
	CRC_topPeerCategoryBotsPM                                             = 0xab661b5b
	CRC_topPeerCategoryBotsInline                                         = 0x148677e2
	CRC_topPeerCategoryCorrespondents                                     = 0x0637b7ed
	CRC_topPeerCategoryGroups                                             = 0xbd17a14a
	CRC_topPeerCategoryChannels                                           = 0x161d9628
	CRC_topPeerCategoryPhoneCalls                                         = 0x1e76a78c
	CRC_topPeerCategoryForwardUsers                                       = 0xa8406ca9
	CRC_topPeerCategoryForwardChats                                       = 0xfbeec0f0
	CRC_topPeerCategoryBotsApp                                            = 0xfd9e7bec
	CRC_topPeerCategoryPeers                                              = 0xfb834291
	CRC_contacts_topPeersNotModified                                      = 0xde266ef5
	CRC_contacts_topPeers                                                 = 0x70b772a8
	CRC_contacts_topPeersDisabled                                         = 0xb52c939d
	CRC_draftMessageEmpty                                                 = 0x1b0c841a
	CRC_draftMessage                                                      = 0x2d65321f
	CRC_messages_featuredStickersNotModified                              = 0xc6dc0c66
	CRC_messages_featuredStickers                                         = 0xbe382906
	CRC_messages_recentStickersNotModified                                = 0x0b17f890
	CRC_messages_recentStickers                                           = 0x88d37c56
	CRC_messages_archivedStickers                                         = 0x4fcba9c8
	CRC_messages_stickerSetInstallResultSuccess                           = 0x38641628
	CRC_messages_stickerSetInstallResultArchive                           = 0x35e410a8
	CRC_stickerSetCovered                                                 = 0x6410a5d2
	CRC_stickerSetMultiCovered                                            = 0x3407e51b
	CRC_stickerSetFullCovered                                             = 0x40d13c0e
	CRC_stickerSetNoCovered                                               = 0x77b15d1c
	CRC_maskCoords                                                        = 0xaed6dbb2
	CRC_inputStickeredMediaPhoto                                          = 0x4a992157
	CRC_inputStickeredMediaDocument                                       = 0x0438865b
	CRC_game                                                              = 0xbdf9653b
	CRC_inputGameID                                                       = 0x032c3e77
	CRC_inputGameShortName                                                = 0xc331e80a
	CRC_highScore                                                         = 0x73a379eb
	CRC_messages_highScores                                               = 0x9a3bfd99
	CRC_textEmpty                                                         = 0xdc3d824f
	CRC_textPlain                                                         = 0x744694e0
	CRC_textBold                                                          = 0x6724abc4
	CRC_textItalic                                                        = 0xd912a59c
	CRC_textUnderline                                                     = 0xc12622c4
	CRC_textStrike                                                        = 0x9bf8bb95
	CRC_textFixed                                                         = 0x6c3f19b9
	CRC_textURL                                                           = 0x3c2884c1
	CRC_textEmail                                                         = 0xde5a0dd6
	CRC_textConcat                                                        = 0x7e6260d7
	CRC_textSubscript                                                     = 0xed6a8504
	CRC_textSuperscript                                                   = 0xc7fb5e01
	CRC_textMarked                                                        = 0x034b8621
	CRC_textPhone                                                         = 0x1ccb966a
	CRC_textImage                                                         = 0x081ccf4f
	CRC_textAnchor                                                        = 0x35553762
	CRC_pageBlockUnsupported                                              = 0x13567e8a
	CRC_pageBlockTitle                                                    = 0x70abc3fd
	CRC_pageBlockSubtitle                                                 = 0x8ffa9a1f
	CRC_pageBlockAuthorDate                                               = 0xbaafe5e0
	CRC_pageBlockHeader                                                   = 0xbfd064ec
	CRC_pageBlockSubheader                                                = 0xf12bb6e1
	CRC_pageBlockParagraph                                                = 0x467a0766
	CRC_pageBlockPreformatted                                             = 0xc070d93e
	CRC_pageBlockFooter                                                   = 0x48870999
	CRC_pageBlockDivider                                                  = 0xdb20b188
	CRC_pageBlockAnchor                                                   = 0xce0d37b0
	CRC_pageBlockList                                                     = 0xe4e88011
	CRC_pageBlockBlockquote                                               = 0x263d7c26
	CRC_pageBlockPullquote                                                = 0x4f4456d3
	CRC_pageBlockPhoto                                                    = 0x1759c560
	CRC_pageBlockVideo                                                    = 0x7c8fe7b6
	CRC_pageBlockCover                                                    = 0x39f23300
	CRC_pageBlockEmbed                                                    = 0xa8718dc5
	CRC_pageBlockEmbedPost                                                = 0xf259a80b
	CRC_pageBlockCollage                                                  = 0x65a0fa4d
	CRC_pageBlockSlideshow                                                = 0x031f9590
	CRC_pageBlockChannel                                                  = 0xef1751b5
	CRC_pageBlockAudio                                                    = 0x804361ea
	CRC_pageBlockKicker                                                   = 0x1e148390
	CRC_pageBlockTable                                                    = 0xbf4dea82
	CRC_pageBlockOrderedList                                              = 0x9a8ae1e1
	CRC_pageBlockDetails                                                  = 0x76768bed
	CRC_pageBlockRelatedArticles                                          = 0x16115a96
	CRC_pageBlockMap                                                      = 0xa44f3ef6
	CRC_phoneCallDiscardReasonMissed                                      = 0x85e42301
	CRC_phoneCallDiscardReasonDisconnect                                  = 0xe095c1a0
	CRC_phoneCallDiscardReasonHangup                                      = 0x57adc690
	CRC_phoneCallDiscardReasonBusy                                        = 0xfaf7e8c9
	CRC_dataJSON                                                          = 0x7d748d04
	CRC_labeledPrice                                                      = 0xcb296bf8
	CRC_invoice                                                           = 0x5db95a15
	CRC_paymentCharge                                                     = 0xea02c27e
	CRC_postAddress                                                       = 0x1e8caaeb
	CRC_paymentRequestedInfo                                              = 0x909c3f94
	CRC_paymentSavedCredentialsCard                                       = 0xcdc27a1f
	CRC_webDocument                                                       = 0x1c570ed1
	CRC_webDocumentNoProxy                                                = 0xf9c8bcc6
	CRC_inputWebDocument                                                  = 0x9bed434d
	CRC_inputWebFileLocation                                              = 0xc239d686
	CRC_inputWebFileGeoPointLocation                                      = 0x9f2221c9
	CRC_inputWebFileAudioAlbumThumbLocation                               = 0xf46fe924
	CRC_upload_webFile                                                    = 0x21e753bc
	CRC_payments_paymentForm                                              = 0xa0058751
	CRC_payments_paymentFormStars                                         = 0x7bf6b15c
	CRC_payments_validatedRequestedInfo                                   = 0xd1451883
	CRC_payments_paymentResult                                            = 0x4e5f810d
	CRC_payments_paymentVerificationNeeded                                = 0xd8411139
	CRC_payments_paymentReceipt                                           = 0x70c4fe03
	CRC_payments_paymentReceiptStars                                      = 0xdabbf83a
	CRC_payments_savedInfo                                                = 0xfb8fe43c
	CRC_inputPaymentCredentialsSaved                                      = 0xc10eb2cf
	CRC_inputPaymentCredentials                                           = 0x3417d728
	CRC_inputPaymentCredentialsApplePay                                   = 0x0aa1c39f
	CRC_inputPaymentCredentialsGooglePay                                  = 0x8ac32801
	CRC_account_tmpPassword                                               = 0xdb64fd34
	CRC_shippingOption                                                    = 0xb6213cdf
	CRC_inputStickerSetItem                                               = 0x32da9e9c
	CRC_inputPhoneCall                                                    = 0x1e36fded
	CRC_phoneCallEmpty                                                    = 0x5366c915
	CRC_phoneCallWaiting                                                  = 0xc5226f17
	CRC_phoneCallRequested                                                = 0x14b0ed0c
	CRC_phoneCallAccepted                                                 = 0x3660c311
	CRC_phoneCall                                                         = 0x30535af5
	CRC_phoneCallDiscarded                                                = 0x50ca4de1
	CRC_phoneConnection                                                   = 0x9cc123c7
	CRC_phoneConnectionWebrtc                                             = 0x635fe375
	CRC_phoneCallProtocol                                                 = 0xfc878fc8
	CRC_phone_phoneCall                                                   = 0xec82e140
	CRC_upload_cdnFileReuploadNeeded                                      = 0xeea8e46e
	CRC_upload_cdnFile                                                    = 0xa99fca4f
	CRC_cdnPublicKey                                                      = 0xc982eaba
	CRC_cdnConfig                                                         = 0x5725e40a
	CRC_langPackString                                                    = 0xcad181f6
	CRC_langPackStringPluralized                                          = 0x6c47ac9f
	CRC_langPackStringDeleted                                             = 0x2979eeb2
	CRC_langPackDifference                                                = 0xf385c1f6
	CRC_langPackLanguage                                                  = 0xeeca5ce3
	CRC_channelAdminLogEventActionChangeTitle                             = 0xe6dfb825
	CRC_channelAdminLogEventActionChangeAbout                             = 0x55188a2e
	CRC_channelAdminLogEventActionChangeUsername                          = 0x6a4afc38
	CRC_channelAdminLogEventActionChangePhoto                             = 0x434bd2af
	CRC_channelAdminLogEventActionToggleInvites                           = 0x1b7907ae
	CRC_channelAdminLogEventActionToggleSignatures                        = 0x26ae0971
	CRC_channelAdminLogEventActionUpdatePinned                            = 0xe9e82c18
	CRC_channelAdminLogEventActionEditMessage                             = 0x709b2405
	CRC_channelAdminLogEventActionDeleteMessage                           = 0x42e047bb
	CRC_channelAdminLogEventActionParticipantJoin                         = 0x183040d3
	CRC_channelAdminLogEventActionParticipantLeave                        = 0xf89777f2
	CRC_channelAdminLogEventActionParticipantInvite                       = 0xe31c34d8
	CRC_channelAdminLogEventActionParticipantToggleBan                    = 0xe6d83d7e
	CRC_channelAdminLogEventActionParticipantToggleAdmin                  = 0xd5676710
	CRC_channelAdminLogEventActionChangeStickerSet                        = 0xb1c3caa7
	CRC_channelAdminLogEventActionTogglePreHistoryHidden                  = 0x5f5c95f1
	CRC_channelAdminLogEventActionDefaultBannedRights                     = 0x2df5fc0a
	CRC_channelAdminLogEventActionStopPoll                                = 0x8f079643
	CRC_channelAdminLogEventActionChangeLinkedChat                        = 0x050c7ac8
	CRC_channelAdminLogEventActionChangeLocation                          = 0x0e6b76ae
	CRC_channelAdminLogEventActionToggleSlowMode                          = 0x53909779
	CRC_channelAdminLogEventActionStartGroupCall                          = 0x23209745
	CRC_channelAdminLogEventActionDiscardGroupCall                        = 0xdb9f9140
	CRC_channelAdminLogEventActionParticipantMute                         = 0xf92424d2
	CRC_channelAdminLogEventActionParticipantUnmute                       = 0xe64429c0
	CRC_channelAdminLogEventActionToggleGroupCallSetting                  = 0x56d6a247
	CRC_channelAdminLogEventActionParticipantJoinByInvite                 = 0xfe9fc158
	CRC_channelAdminLogEventActionExportedInviteDelete                    = 0x5a50fca4
	CRC_channelAdminLogEventActionExportedInviteRevoke                    = 0x410a134e
	CRC_channelAdminLogEventActionExportedInviteEdit                      = 0xe90ebb59
	CRC_channelAdminLogEventActionParticipantVolume                       = 0x3e7f6847
	CRC_channelAdminLogEventActionChangeHistoryTTL                        = 0x6e941a38
	CRC_channelAdminLogEventActionParticipantJoinByRequest                = 0xafb6144a
	CRC_channelAdminLogEventActionToggleNoForwards                        = 0xcb2ac766
	CRC_channelAdminLogEventActionSendMessage                             = 0x278f2868
	CRC_channelAdminLogEventActionChangeAvailableReactions                = 0xbe4e0ef8
	CRC_channelAdminLogEventActionChangeUsernames                         = 0xf04fb3a9
	CRC_channelAdminLogEventActionToggleForum                             = 0x02cc6383
	CRC_channelAdminLogEventActionCreateTopic                             = 0x58707d28
	CRC_channelAdminLogEventActionEditTopic                               = 0xf06fe208
	CRC_channelAdminLogEventActionDeleteTopic                             = 0xae168909
	CRC_channelAdminLogEventActionPINTopic                                = 0x5d8d353b
	CRC_channelAdminLogEventActionToggleAntiSpam                          = 0x64f36dfc
	CRC_channelAdminLogEventActionChangePeerColor                         = 0x5796e780
	CRC_channelAdminLogEventActionChangeProfilePeerColor                  = 0x5e477b25
	CRC_channelAdminLogEventActionChangeWallpaper                         = 0x31bb5d52
	CRC_channelAdminLogEventActionChangeEmojiStatus                       = 0x3ea9feb1
	CRC_channelAdminLogEventActionChangeEmojiStickerSet                   = 0x46d840ab
	CRC_channelAdminLogEventActionToggleSignatureProfiles                 = 0x60a79c79
	CRC_channelAdminLogEventActionParticipantSubExtend                    = 0x64642db3
	CRC_channelAdminLogEvent                                              = 0x1fad68cd
	CRC_channels_adminLogResults                                          = 0xed8af74d
	CRC_channelAdminLogEventsFilter                                       = 0xea107ae4
	CRC_popularContact                                                    = 0x5ce14175
	CRC_messages_favedStickersNotModified                                 = 0x9e8fa6d3
	CRC_messages_favedStickers                                            = 0x2cb51097
	CRC_recentMeURLUnknown                                                = 0x46e1d13d
	CRC_recentMeURLUser                                                   = 0xb92c09e2
	CRC_recentMeURLChat                                                   = 0xb2da71d2
	CRC_recentMeURLChatInvite                                             = 0xeb49081d
	CRC_recentMeURLStickerSet                                             = 0xbc0a57dc
	CRC_help_recentMeURLs                                                 = 0x0e0310d7
	CRC_inputSingleMedia                                                  = 0x1cc6e91f
	CRC_webAuthorization                                                  = 0xa6f8f452
	CRC_account_webAuthorizations                                         = 0xed56c9fc
	CRC_inputMessageID                                                    = 0xa676a322
	CRC_inputMessageReplyTo                                               = 0xbad88395
	CRC_inputMessagePinned                                                = 0x86872538
	CRC_inputMessageCallbackQuery                                         = 0xacfa1a7e
	CRC_inputDialogPeer                                                   = 0xfcaafeb7
	CRC_inputDialogPeerFolder                                             = 0x64600527
	CRC_dialogPeer                                                        = 0xe56dbf05
	CRC_dialogPeerFolder                                                  = 0x514519e2
	CRC_messages_foundStickerSetsNotModified                              = 0x0d54b65d
	CRC_messages_foundStickerSets                                         = 0x8af09dd2
	CRC_fileHash                                                          = 0xf39b035c
	CRC_inputClientProxy                                                  = 0x75588b3f
	CRC_help_termsOfServiceUpdateEmpty                                    = 0xe3309f7f
	CRC_help_termsOfServiceUpdate                                         = 0x28ecf961
	CRC_inputSecureFileUploaded                                           = 0x3334b0f0
	CRC_inputSecureFile                                                   = 0x5367e5be
	CRC_secureFileEmpty                                                   = 0x64199744
	CRC_secureFile                                                        = 0x7d09c27e
	CRC_secureData                                                        = 0x8aeabec3
	CRC_securePlainPhone                                                  = 0x7d6099dd
	CRC_securePlainEmail                                                  = 0x21ec5a5f
	CRC_secureValueTypePersonalDetails                                    = 0x9d2a81e3
	CRC_secureValueTypePassport                                           = 0x3dac6a00
	CRC_secureValueTypeDriverLicense                                      = 0x06e425c4
	CRC_secureValueTypeIdentityCard                                       = 0xa0d0744b
	CRC_secureValueTypeInternalPassport                                   = 0x99a48f23
	CRC_secureValueTypeAddress                                            = 0xcbe31e26
	CRC_secureValueTypeUtilityBill                                        = 0xfc36954e
	CRC_secureValueTypeBankStatement                                      = 0x89137c0d
	CRC_secureValueTypeRentalAgreement                                    = 0x8b883488
	CRC_secureValueTypePassportRegistration                               = 0x99e3806a
	CRC_secureValueTypeTemporaryRegistration                              = 0xea02ec33
	CRC_secureValueTypePhone                                              = 0xb320aadb
	CRC_secureValueTypeEmail                                              = 0x8e3ca7ee
	CRC_secureValue                                                       = 0x187fa0ca
	CRC_inputSecureValue                                                  = 0xdb21d0a7
	CRC_secureValueHash                                                   = 0xed1ecdb0
	CRC_secureValueErrorData                                              = 0xe8a40bd9
	CRC_secureValueErrorFrontSide                                         = 0x00be3dfa
	CRC_secureValueErrorReverseSide                                       = 0x868a2aa5
	CRC_secureValueErrorSelfie                                            = 0xe537ced6
	CRC_secureValueErrorFile                                              = 0x7a700873
	CRC_secureValueErrorFiles                                             = 0x666220e9
	CRC_secureValueError                                                  = 0x869d758f
	CRC_secureValueErrorTranslationFile                                   = 0xa1144770
	CRC_secureValueErrorTranslationFiles                                  = 0x34636dd8
	CRC_secureCredentialsEncrypted                                        = 0x33f0ea47
	CRC_account_authorizationForm                                         = 0xad2e1cd8
	CRC_account_sentEmailCode                                             = 0x811f854f
	CRC_help_deepLinkInfoEmpty                                            = 0x66afa166
	CRC_help_deepLinkInfo                                                 = 0x6a4ee832
	CRC_savedPhoneContact                                                 = 0x1142bd56
	CRC_account_takeout                                                   = 0x4dba4501
	CRC_passwordKDFAlgoUnknown                                            = 0xd45ab096
	CRC_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow = 0x3a912d4a
	CRC_securePasswordKDFAlgoUnknown                                      = 0x004a8537
	CRC_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000                   = 0xbbf2dda0
	CRC_securePasswordKDFAlgoSHA512                                       = 0x86471d92
	CRC_secureSecretSettings                                              = 0x1527bcac
	CRC_inputCheckPasswordEmpty                                           = 0x9880f658
	CRC_inputCheckPasswordSRP                                             = 0xd27ff082
	CRC_secureRequiredType                                                = 0x829d99da
	CRC_secureRequiredTypeOneOf                                           = 0x027477b4
	CRC_help_passportConfigNotModified                                    = 0xbfb9f457
	CRC_help_passportConfig                                               = 0xa098d6af
	CRC_inputAppEvent                                                     = 0x1d1b1245
	CRC_jsonObjectValue                                                   = 0xc0de1bd9
	CRC_jsonNull                                                          = 0x3f6d7b68
	CRC_jsonBool                                                          = 0xc7345e6a
	CRC_jsonNumber                                                        = 0x2be0dfa4
	CRC_jsonString                                                        = 0xb71e767a
	CRC_jsonArray                                                         = 0xf7444763
	CRC_jsonObject                                                        = 0x99c1d49d
	CRC_pageTableCell                                                     = 0x34566b6a
	CRC_pageTableRow                                                      = 0xe0c0c5e5
	CRC_pageCaption                                                       = 0x6f747657
	CRC_pageListItemText                                                  = 0xb92fb6cd
	CRC_pageListItemBlocks                                                = 0x25e073fc
	CRC_pageListOrderedItemText                                           = 0x5e068047
	CRC_pageListOrderedItemBlocks                                         = 0x98dd8936
	CRC_pageRelatedArticle                                                = 0xb390dc08
	CRC_page                                                              = 0x98657f0d
	CRC_help_supportName                                                  = 0x8c05f1c9
	CRC_help_userInfoEmpty                                                = 0xf3ae2eed
	CRC_help_userInfo                                                     = 0x01eb3758
	CRC_pollAnswer                                                        = 0xff16e2ca
	CRC_poll                                                              = 0x58747131
	CRC_pollAnswerVoters                                                  = 0x3b6ddad2
	CRC_pollResults                                                       = 0x7adf2420
	CRC_chatOnlines                                                       = 0xf041e250
	CRC_statsURL                                                          = 0x47a971e0
	CRC_chatAdminRights                                                   = 0x5fb224d5
	CRC_chatBannedRights                                                  = 0x9f120418
	CRC_inputWallPaper                                                    = 0xe630b979
	CRC_inputWallPaperSlug                                                = 0x72091c80
	CRC_inputWallPaperNoFile                                              = 0x967a462e
	CRC_account_wallPapersNotModified                                     = 0x1c199183
	CRC_account_wallPapers                                                = 0xcdc3858c
	CRC_codeSettings                                                      = 0xad253d78
	CRC_wallPaperSettings                                                 = 0x372efcd0
	CRC_autoDownloadSettings                                              = 0xbaa57628
	CRC_account_autoDownloadSettings                                      = 0x63cacf26
	CRC_emojiKeyword                                                      = 0xd5b3b9f9
	CRC_emojiKeywordDeleted                                               = 0x236df622
	CRC_emojiKeywordsDifference                                           = 0x5cc761bd
	CRC_emojiURL                                                          = 0xa575739d
	CRC_emojiLanguage                                                     = 0xb3fb5361
	CRC_folder                                                            = 0xff544e65
	CRC_inputFolderPeer                                                   = 0xfbd2c296
	CRC_folderPeer                                                        = 0xe9baa668
	CRC_messages_searchCounter                                            = 0xe844ebff
	CRC_urlAuthResultRequest                                              = 0x92d33a0e
	CRC_urlAuthResultAccepted                                             = 0x8f8c0e4e
	CRC_urlAuthResultDefault                                              = 0xa9d6db1f
	CRC_channelLocationEmpty                                              = 0xbfb5ad8b
	CRC_channelLocation                                                   = 0x209b82db
	CRC_peerLocated                                                       = 0xca461b5d
	CRC_peerSelfLocated                                                   = 0xf8ec284b
	CRC_restrictionReason                                                 = 0xd072acb4
	CRC_inputTheme                                                        = 0x3c5693e9
	CRC_inputThemeSlug                                                    = 0xf5890df1
	CRC_theme                                                             = 0xa00e67d6
	CRC_account_themesNotModified                                         = 0xf41eb622
	CRC_account_themes                                                    = 0x9a3d8c6d
	CRC_auth_loginToken                                                   = 0x629f1980
	CRC_auth_loginTokenMigrateTo                                          = 0x068e9916
	CRC_auth_loginTokenSuccess                                            = 0x390d5c5e
	CRC_account_contentSettings                                           = 0x57e28221
	CRC_messages_inactiveChats                                            = 0xa927fec5
	CRC_baseThemeClassic                                                  = 0xc3a12462
	CRC_baseThemeDay                                                      = 0xfbd81688
	CRC_baseThemeNight                                                    = 0xb7b31ea8
	CRC_baseThemeTinted                                                   = 0x6d5f77ee
	CRC_baseThemeArctic                                                   = 0x5b11125a
	CRC_inputThemeSettings                                                = 0x8fde504f
	CRC_themeSettings                                                     = 0xfa58b6d4
	CRC_webPageAttributeTheme                                             = 0x54b56617
	CRC_webPageAttributeStory                                             = 0x2e94c3e7
	CRC_webPageAttributeStickerSet                                        = 0x50cc03d3
	CRC_messages_votesList                                                = 0x4899484e
	CRC_bankCardOpenURL                                                   = 0xf568028a
	CRC_payments_bankCardData                                             = 0x3e24e573
	CRC_dialogFilter                                                      = 0x5fb5523b
	CRC_dialogFilterDefault                                               = 0x363293ae
	CRC_dialogFilterChatlist                                              = 0x9fe28ea4
	CRC_dialogFilterSuggested                                             = 0x77744d4a
	CRC_statsDateRangeDays                                                = 0xb637edaf
	CRC_statsAbsValueAndPrev                                              = 0xcb43acde
	CRC_statsPercentValue                                                 = 0xcbce2fe0
	CRC_statsGraphAsync                                                   = 0x4a27eb2d
	CRC_statsGraphError                                                   = 0xbedc9822
	CRC_statsGraph                                                        = 0x8ea464b6
	CRC_stats_broadcastStats                                              = 0x396ca5fc
	CRC_help_promoDataEmpty                                               = 0x98f6ac75
	CRC_help_promoData                                                    = 0x8c39793f
	CRC_videoSize                                                         = 0xde33b094
	CRC_videoSizeEmojiMarkup                                              = 0xf85c413c
	CRC_videoSizeStickerMarkup                                            = 0x0da082fe
	CRC_statsGroupTopPoster                                               = 0x9d04af9b
	CRC_statsGroupTopAdmin                                                = 0xd7584c87
	CRC_statsGroupTopInviter                                              = 0x535f779d
	CRC_stats_megagroupStats                                              = 0xef7ff916
	CRC_globalPrivacySettings                                             = 0x734c4ccb
	CRC_help_countryCode                                                  = 0x4203c5ef
	CRC_help_country                                                      = 0xc3878e23
	CRC_help_countriesListNotModified                                     = 0x93cc1f32
	CRC_help_countriesList                                                = 0x87d0759e
	CRC_messageViews                                                      = 0x455b853d
	CRC_messages_messageViews                                             = 0xb6c4f543
	CRC_messages_discussionMessage                                        = 0xa6341782
	CRC_messageReplyHeader                                                = 0xafbc09db
	CRC_messageReplyStoryHeader                                           = 0x0e5af939
	CRC_messageReplies                                                    = 0x83d60fc2
	CRC_peerBlocked                                                       = 0xe8fd8014
	CRC_stats_messageStats                                                = 0x7fe91c14
	CRC_groupCallDiscarded                                                = 0x7780bcb4
	CRC_groupCall                                                         = 0xd597650c
	CRC_inputGroupCall                                                    = 0xd8aa840f
	CRC_groupCallParticipant                                              = 0xeba636fe
	CRC_phone_groupCall                                                   = 0x9e727aad
	CRC_phone_groupParticipants                                           = 0xf47751b6
	CRC_inlineQueryPeerTypeSameBotPM                                      = 0x3081ed9d
	CRC_inlineQueryPeerTypePM                                             = 0x833c0fac
	CRC_inlineQueryPeerTypeChat                                           = 0xd766c50a
	CRC_inlineQueryPeerTypeMegagroup                                      = 0x5ec4be43
	CRC_inlineQueryPeerTypeBroadcast                                      = 0x6334ee9a
	CRC_inlineQueryPeerTypeBotPM                                          = 0x0e3b2d0c
	CRC_messages_historyImport                                            = 0x1662af0b
	CRC_messages_historyImportParsed                                      = 0x5e0fb7b9
	CRC_messages_affectedFoundMessages                                    = 0xef8d3e6c
	CRC_chatInviteImporter                                                = 0x8c5adfd9
	CRC_messages_exportedChatInvites                                      = 0xbdc62dcc
	CRC_messages_exportedChatInvite                                       = 0x1871be50
	CRC_messages_exportedChatInviteReplaced                               = 0x222600ef
	CRC_messages_chatInviteImporters                                      = 0x81b6b00a
	CRC_chatAdminWithInvites                                              = 0xf2ecef23
	CRC_messages_chatAdminsWithInvites                                    = 0xb69b72d7
	CRC_messages_checkedHistoryImportPeer                                 = 0xa24de717
	CRC_phone_joinAsPeers                                                 = 0xafe5623f
	CRC_phone_exportedGroupCallInvite                                     = 0x204bd158
	CRC_groupCallParticipantVideoSourceGroup                              = 0xdcb118b7
	CRC_groupCallParticipantVideo                                         = 0x67753ac8
	CRC_stickers_suggestedShortName                                       = 0x85fea03f
	CRC_botCommandScopeDefault                                            = 0x2f6cb2ab
	CRC_botCommandScopeUsers                                              = 0x3c4f04d8
	CRC_botCommandScopeChats                                              = 0x6fe1a881
	CRC_botCommandScopeChatAdmins                                         = 0xb9aa606a
	CRC_botCommandScopePeer                                               = 0xdb9d897d
	CRC_botCommandScopePeerAdmins                                         = 0x3fd863d1
	CRC_botCommandScopePeerUser                                           = 0x0a1321f3
	CRC_account_resetPasswordFailedWait                                   = 0xe3779861
	CRC_account_resetPasswordRequestedWait                                = 0xe9effc7d
	CRC_account_resetPasswordOK                                           = 0xe926d63e
	CRC_sponsoredMessage                                                  = 0x4d93a990
	CRC_messages_sponsoredMessages                                        = 0xc9ee1d87
	CRC_messages_sponsoredMessagesEmpty                                   = 0x1839490f
	CRC_searchResultsCalendarPeriod                                       = 0xc9b0539f
	CRC_messages_searchResultsCalendar                                    = 0x147ee23c
	CRC_searchResultPosition                                              = 0x7f648b67
	CRC_messages_searchResultsPositions                                   = 0x53b22baf
	CRC_channels_sendAsPeers                                              = 0xf496b0c6
	CRC_users_userFull                                                    = 0x3b6d152e
	CRC_messages_peerSettings                                             = 0x6880b94d
	CRC_auth_loggedOut                                                    = 0xc3a2835f
	CRC_reactionCount                                                     = 0xa3d1cb80
	CRC_messageReactions                                                  = 0x0a339f0b
	CRC_messages_messageReactionsList                                     = 0x31bd492d
	CRC_availableReaction                                                 = 0xc077ec01
	CRC_messages_availableReactionsNotModified                            = 0x9f071957
	CRC_messages_availableReactions                                       = 0x768e3aad
	CRC_messagePeerReaction                                               = 0x8c79b63c
	CRC_groupCallStreamChannel                                            = 0x80eb48af
	CRC_phone_groupCallStreamChannels                                     = 0xd0e482b2
	CRC_phone_groupCallStreamRTMPURL                                      = 0x2dbf3432
	CRC_attachMenuBotIconColor                                            = 0x4576f3f0
	CRC_attachMenuBotIcon                                                 = 0xb2a7386b
	CRC_attachMenuBot                                                     = 0xd90d8dfe
	CRC_attachMenuBotsNotModified                                         = 0xf1d88a5c
	CRC_attachMenuBots                                                    = 0x3c4301c0
	CRC_attachMenuBotsBot                                                 = 0x93bf667f
	CRC_webViewResultURL                                                  = 0x4d22ff98
	CRC_webViewMessageSent                                                = 0x0c94511c
	CRC_botMenuButtonDefault                                              = 0x7533a588
	CRC_botMenuButtonCommands                                             = 0x4258c205
	CRC_botMenuButton                                                     = 0xc7b57ce6
	CRC_account_savedRingtonesNotModified                                 = 0xfbf6e8b1
	CRC_account_savedRingtones                                            = 0xc1e92cc5
	CRC_notificationSoundDefault                                          = 0x97e8bebe
	CRC_notificationSoundNone                                             = 0x6f0c34df
	CRC_notificationSoundLocal                                            = 0x830b9ae4
	CRC_notificationSoundRingtone                                         = 0xff6c8049
	CRC_account_savedRingtone                                             = 0xb7263f6d
	CRC_account_savedRingtoneConverted                                    = 0x1f307eb7
	CRC_attachMenuPeerTypeSameBotPM                                       = 0x7d6be90e
	CRC_attachMenuPeerTypeBotPM                                           = 0xc32bfa1a
	CRC_attachMenuPeerTypePM                                              = 0xf146d31f
	CRC_attachMenuPeerTypeChat                                            = 0x0509113f
	CRC_attachMenuPeerTypeBroadcast                                       = 0x7bfbdefc
	CRC_inputInvoiceMessage                                               = 0xc5b56859
	CRC_inputInvoiceSlug                                                  = 0xc326caef
	CRC_inputInvoicePremiumGiftCode                                       = 0x98986c0d
	CRC_inputInvoiceStars                                                 = 0x65f00ce3
	CRC_inputInvoiceChatInviteSubscription                                = 0x34e793f1
	CRC_payments_exportedInvoice                                          = 0xaed0cbd9
	CRC_messages_transcribedAudio                                         = 0xcfb9d957
	CRC_help_premiumPromo                                                 = 0x5334759c
	CRC_inputStorePaymentPremiumSubscription                              = 0xa6751e66
	CRC_inputStorePaymentGiftPremium                                      = 0x616f7fe8
	CRC_inputStorePaymentPremiumGiftCode                                  = 0xa3805f3f
	CRC_inputStorePaymentPremiumGiveaway                                  = 0x160544ca
	CRC_inputStorePaymentStarsTopup                                       = 0xdddd0f56
	CRC_inputStorePaymentStarsGift                                        = 0x1d741ef7
	CRC_inputStorePaymentStarsGiveaway                                    = 0x751f08fa
	CRC_premiumGiftOption                                                 = 0x74c34319
	CRC_paymentFormMethod                                                 = 0x88f8f21b
	CRC_emojiStatusEmpty                                                  = 0x2de11aae
	CRC_emojiStatus                                                       = 0x929b619d
	CRC_emojiStatusUntil                                                  = 0xfa30a8c7
	CRC_account_emojiStatusesNotModified                                  = 0xd08ce645
	CRC_account_emojiStatuses                                             = 0x90c467d1
	CRC_reactionEmpty                                                     = 0x79f5d419
	CRC_reactionEmoji                                                     = 0x1b2286b8
	CRC_reactionCustomEmoji                                               = 0x8935fc73
	CRC_reactionPaid                                                      = 0x523da4eb
	CRC_chatReactionsNone                                                 = 0xeafc32bc
	CRC_chatReactionsAll                                                  = 0x52928bca
	CRC_chatReactionsSome                                                 = 0x661d4037
	CRC_messages_reactionsNotModified                                     = 0xb06fdbdf
	CRC_messages_reactions                                                = 0xeafdf716
	CRC_emailVerifyPurposeLoginSetup                                      = 0x4345be73
	CRC_emailVerifyPurposeLoginChange                                     = 0x527d22eb
	CRC_emailVerifyPurposePassport                                        = 0xbbf51685
	CRC_emailVerificationCode                                             = 0x922e55a9
	CRC_emailVerificationGoogle                                           = 0xdb909ec2
	CRC_emailVerificationApple                                            = 0x96d074fd
	CRC_account_emailVerified                                             = 0x2b96cd1b
	CRC_account_emailVerifiedLogin                                        = 0xe1bb0d61
	CRC_premiumSubscriptionOption                                         = 0x5f2d1df2
	CRC_sendAsPeer                                                        = 0xb81c7034
	CRC_messageExtendedMediaPreview                                       = 0xad628cc8
	CRC_messageExtendedMedia                                              = 0xee479c64
	CRC_stickerKeyword                                                    = 0xfcfeb29c
	CRC_username                                                          = 0xb4073647
	CRC_forumTopicDeleted                                                 = 0x023f109b
	CRC_forumTopic                                                        = 0x71701da9
	CRC_messages_forumTopics                                              = 0x367617d3
	CRC_defaultHistoryTTL                                                 = 0x43b46b20
	CRC_exportedContactToken                                              = 0x41bf109b
	CRC_requestPeerTypeUser                                               = 0x5f3b8a00
	CRC_requestPeerTypeChat                                               = 0xc9f06e1b
	CRC_requestPeerTypeBroadcast                                          = 0x339bef6c
	CRC_emojiListNotModified                                              = 0x481eadfa
	CRC_emojiList                                                         = 0x7a1e11d1
	CRC_emojiGroup                                                        = 0x7a9abda9
	CRC_emojiGroupGreeting                                                = 0x80d26cc7
	CRC_emojiGroupPremium                                                 = 0x093bcf34
	CRC_messages_emojiGroupsNotModified                                   = 0x6fb4ad87
	CRC_messages_emojiGroups                                              = 0x881fb94b
	CRC_textWithEntities                                                  = 0x751f3146
	CRC_messages_translateResult                                          = 0x33db32f8
	CRC_autoSaveSettings                                                  = 0xc84834ce
	CRC_autoSaveException                                                 = 0x81602d47
	CRC_account_autoSaveSettings                                          = 0x4c3e069d
	CRC_help_appConfigNotModified                                         = 0x7cde641d
	CRC_help_appConfig                                                    = 0xdd18782e
	CRC_inputBotAppID                                                     = 0xa920bd7a
	CRC_inputBotAppShortName                                              = 0x908c0407
	CRC_botAppNotModified                                                 = 0x5da674b7
	CRC_botApp                                                            = 0x95fcd1d6
	CRC_messages_botApp                                                   = 0xeb50adf5
	CRC_inlineBotWebView                                                  = 0xb57295d5
	CRC_readParticipantDate                                               = 0x4a4ff172
	CRC_inputChatlistDialogFilter                                         = 0xf3e0da33
	CRC_exportedChatlistInvite                                            = 0x0c5181ac
	CRC_chatlists_exportedChatlistInvite                                  = 0x10e6e3a6
	CRC_chatlists_exportedInvites                                         = 0x10ab6dc7
	CRC_chatlists_chatlistInviteAlready                                   = 0xfa87f659
	CRC_chatlists_chatlistInvite                                          = 0x1dcd839d
	CRC_chatlists_chatlistUpdates                                         = 0x93bd878d
	CRC_bots_botInfo                                                      = 0xe8a775b0
	CRC_messagePeerVote                                                   = 0xb6cc2d5c
	CRC_messagePeerVoteInputOption                                        = 0x74cda504
	CRC_messagePeerVoteMultiple                                           = 0x4628f6e6
	CRC_storyViews                                                        = 0x8d595cd6
	CRC_storyItemDeleted                                                  = 0x51e6ee4f
	CRC_storyItemSkipped                                                  = 0xffadc913
	CRC_storyItem                                                         = 0x79b26a24
	CRC_stories_allStoriesNotModified                                     = 0x1158fe3e
	CRC_stories_allStories                                                = 0x6efc5e81
	CRC_stories_stories                                                   = 0x63c3dd0a
	CRC_storyView                                                         = 0xb0bdeac5
	CRC_storyViewPublicForward                                            = 0x9083670b
	CRC_storyViewPublicRepost                                             = 0xbd74cf49
	CRC_stories_storyViewsList                                            = 0x59d78fc5
	CRC_stories_storyViews                                                = 0xde9eed1d
	CRC_inputReplyToMessage                                               = 0x22c0f6d5
	CRC_inputReplyToStory                                                 = 0x5881323a
	CRC_exportedStoryLink                                                 = 0x3fc9053b
	CRC_storiesStealthMode                                                = 0x712e27fd
	CRC_mediaAreaCoordinates                                              = 0xcfc9e002
	CRC_mediaAreaVenue                                                    = 0xbe82db9c
	CRC_inputMediaAreaVenue                                               = 0xb282217f
	CRC_mediaAreaGeoPoint                                                 = 0xcad5452d
	CRC_mediaAreaSuggestedReaction                                        = 0x14455871
	CRC_mediaAreaChannelPost                                              = 0x770416af
	CRC_inputMediaAreaChannelPost                                         = 0x2271f2bf
	CRC_mediaAreaURL                                                      = 0x37381085
	CRC_mediaAreaWeather                                                  = 0x49a6549c
	CRC_peerStories                                                       = 0x9a35e999
	CRC_stories_peerStories                                               = 0xcae68768
	CRC_messages_webPage                                                  = 0xfd5e12bd
	CRC_premiumGiftCodeOption                                             = 0x257e962b
	CRC_payments_checkedGiftCode                                          = 0x284a1096
	CRC_payments_giveawayInfo                                             = 0x4367daa0
	CRC_payments_giveawayInfoResults                                      = 0xe175e66f
	CRC_prepaidGiveaway                                                   = 0xb2539d54
	CRC_prepaidStarsGiveaway                                              = 0x9a9d77e0
	CRC_boost                                                             = 0x4b3e14d6
	CRC_premium_boostsList                                                = 0x86f8613c
	CRC_myBoost                                                           = 0xc448415c
	CRC_premium_myBoosts                                                  = 0x9ae228e2
	CRC_premium_boostsStatus                                              = 0x4959427a
	CRC_storyFwdHeader                                                    = 0xb826e150
	CRC_postInteractionCountersMessage                                    = 0xe7058e7f
	CRC_postInteractionCountersStory                                      = 0x8a480e27
	CRC_stats_storyStats                                                  = 0x50cd067c
	CRC_publicForwardMessage                                              = 0x01f2bf4a
	CRC_publicForwardStory                                                = 0xedf3add0
	CRC_stats_publicForwards                                              = 0x93037e20
	CRC_peerColor                                                         = 0xb54b5acf
	CRC_help_peerColorSet                                                 = 0x26219a58
	CRC_help_peerColorProfileSet                                          = 0x767d61eb
	CRC_help_peerColorOption                                              = 0xadec6ebe
	CRC_help_peerColorsNotModified                                        = 0x2ba1f5ce
	CRC_help_peerColors                                                   = 0x00f8ed08
	CRC_storyReaction                                                     = 0x6090d6d5
	CRC_storyReactionPublicForward                                        = 0xbbab2643
	CRC_storyReactionPublicRepost                                         = 0xcfcd0f13
	CRC_stories_storyReactionsList                                        = 0xaa5f789c
	CRC_savedDialog                                                       = 0xbd87cb6c
	CRC_messages_savedDialogs                                             = 0xf83ae221
	CRC_messages_savedDialogsSlice                                        = 0x44ba9dd9
	CRC_messages_savedDialogsNotModified                                  = 0xc01f6fe8
	CRC_savedReactionTag                                                  = 0xcb6ff828
	CRC_messages_savedReactionTagsNotModified                             = 0x889b59ef
	CRC_messages_savedReactionTags                                        = 0x3259950a
	CRC_outboxReadDate                                                    = 0x3bb842ac
	CRC_smsjobs_eligibleToJoin                                            = 0xdc8b44cf
	CRC_smsjobs_status                                                    = 0x2aee9191
	CRC_smsJob                                                            = 0xe6a1eeb8
	CRC_businessWeeklyOpen                                                = 0x120b1ab9
	CRC_businessWorkHours                                                 = 0x8c92b098
	CRC_businessLocation                                                  = 0xac5c1af7
	CRC_inputBusinessRecipients                                           = 0x6f8b32aa
	CRC_businessRecipients                                                = 0x21108ff7
	CRC_businessAwayMessageScheduleAlways                                 = 0xc9b9e2b9
	CRC_businessAwayMessageScheduleOutsideWorkHours                       = 0xc3f2f501
	CRC_businessAwayMessageScheduleCustom                                 = 0xcc4d9ecc
	CRC_inputBusinessGreetingMessage                                      = 0x0194cb3b
	CRC_businessGreetingMessage                                           = 0xe519abab
	CRC_inputBusinessAwayMessage                                          = 0x832175e0
	CRC_businessAwayMessage                                               = 0xef156a5c
	CRC_timezone                                                          = 0xff9289f5
	CRC_help_timezonesListNotModified                                     = 0x970708cc
	CRC_help_timezonesList                                                = 0x7b74ed71
	CRC_quickReply                                                        = 0x0697102b
	CRC_inputQuickReplyShortcut                                           = 0x24596d41
	CRC_inputQuickReplyShortcutID                                         = 0x01190cf1
	CRC_messages_quickReplies                                             = 0xc68d6695
	CRC_messages_quickRepliesNotModified                                  = 0x5f91eb5b
	CRC_connectedBot                                                      = 0xbd068601
	CRC_account_connectedBots                                             = 0x17d7f87b
	CRC_messages_dialogFilters                                            = 0x2ad93719
	CRC_birthday                                                          = 0x6c8e1e06
	CRC_botBusinessConnection                                             = 0x896433b4
	CRC_inputBusinessIntro                                                = 0x09c469cd
	CRC_businessIntro                                                     = 0x5a0a066d
	CRC_messages_myStickers                                               = 0xfaff629d
	CRC_inputCollectibleUsername                                          = 0xe39460a9
	CRC_inputCollectiblePhone                                             = 0xa2e214a4
	CRC_fragment_collectibleInfo                                          = 0x6ebdff91
	CRC_inputBusinessBotRecipients                                        = 0xc4e5921e
	CRC_businessBotRecipients                                             = 0xb88cf373
	CRC_contactBirthday                                                   = 0x1d998733
	CRC_contacts_contactBirthdays                                         = 0x114ff30d
	CRC_missingInvitee                                                    = 0x628c9224
	CRC_messages_invitedUsers                                             = 0x7f5defa6
	CRC_inputBusinessChatLink                                             = 0x11679fa7
	CRC_businessChatLink                                                  = 0xb4ae666f
	CRC_account_businessChatLinks                                         = 0xec43a2d1
	CRC_account_resolvedBusinessChatLinks                                 = 0x9a23af21
	CRC_requestedPeerUser                                                 = 0xd62ff46a
	CRC_requestedPeerChat                                                 = 0x7307544f
	CRC_requestedPeerChannel                                              = 0x8ba403e4
	CRC_sponsoredMessageReportOption                                      = 0x430d3150
	CRC_channels_sponsoredMessageReportResultChooseOption                 = 0x846f9e42
	CRC_channels_sponsoredMessageReportResultAdsHidden                    = 0x3e3bcf2f
	CRC_channels_sponsoredMessageReportResultReported                     = 0xad798849
	CRC_stats_broadcastRevenueStats                                       = 0x5407e297
	CRC_stats_broadcastRevenueWithdrawalURL                               = 0xec659737
	CRC_broadcastRevenueTransactionProceeds                               = 0x557e2cc4
	CRC_broadcastRevenueTransactionWithdrawal                             = 0x5a590978
	CRC_broadcastRevenueTransactionRefund                                 = 0x42d30d2e
	CRC_stats_broadcastRevenueTransactions                                = 0x87158466
	CRC_reactionNotificationsFromContacts                                 = 0xbac3a61a
	CRC_reactionNotificationsFromAll                                      = 0x4b9e22a0
	CRC_reactionsNotifySettings                                           = 0x56e34970
	CRC_broadcastRevenueBalances                                          = 0xc3ff71e7
	CRC_availableEffect                                                   = 0x93c3e27e
	CRC_messages_availableEffectsNotModified                              = 0xd1ed9a5b
	CRC_messages_availableEffects                                         = 0xbddb616e
	CRC_factCheck                                                         = 0xb89bfccf
	CRC_starsTransactionPeerUnsupported                                   = 0x95f2bfe4
	CRC_starsTransactionPeerAppStore                                      = 0xb457b375
	CRC_starsTransactionPeerPlayMarket                                    = 0x7b560a0b
	CRC_starsTransactionPeerPremiumBot                                    = 0x250dbaf8
	CRC_starsTransactionPeerFragment                                      = 0xe92fd902
	CRC_starsTransactionPeer                                              = 0xd80da15d
	CRC_starsTransactionPeerAds                                           = 0x60682812
	CRC_starsTopupOption                                                  = 0x0bd915c0
	CRC_starsTransaction                                                  = 0xee7522d5
	CRC_payments_starsStatus                                              = 0xbbfa316c
	CRC_foundStory                                                        = 0xe87acbc0
	CRC_stories_foundStories                                              = 0xe2de7737
	CRC_geoPointAddress                                                   = 0xde4c5d93
	CRC_starsRevenueStatus                                                = 0x79342946
	CRC_payments_starsRevenueStats                                        = 0xc92bb73b
	CRC_payments_starsRevenueWithdrawalURL                                = 0x1dab80b7
	CRC_payments_starsRevenueAdsAccountURL                                = 0x394e7f21
	CRC_inputStarsTransaction                                             = 0x206ae6d1
	CRC_starsGiftOption                                                   = 0x5e0589f1
	CRC_bots_popularAppBots                                               = 0x1991b13b
	CRC_botPreviewMedia                                                   = 0x23e91ba3
	CRC_bots_previewInfo                                                  = 0x0ca71d64
	CRC_starsSubscriptionPricing                                          = 0x05416d58
	CRC_starsSubscription                                                 = 0x538ecf18
	CRC_messageReactor                                                    = 0x4ba3a95a
	CRC_starsGiveawayOption                                               = 0x94ce852a
	CRC_starsGiveawayWinnersOption                                        = 0x54236209
	CRC_invokeAfterMsg                                                    = 0xcb9f372d
	CRC_invokeAfterMsgs                                                   = 0x3dc4b4f0
	CRC_initConnection                                                    = 0xc1cd5ea9
	CRC_invokeWithLayer                                                   = 0xda9b0d0d
	CRC_invokeWithoutUpdates                                              = 0xbf9459b7
	CRC_invokeWithMessagesRange                                           = 0x365275f2
	CRC_invokeWithTakeout                                                 = 0xaca9fd2e
	CRC_invokeWithBusinessConnection                                      = 0xdd289f8e
	CRC_invokeWithGooglePlayIntegrity                                     = 0x1df92984
	CRC_invokeWithApnsSecret                                              = 0x0dae54f8
	CRC_auth_sendCode                                                     = 0xa677244f
	CRC_auth_signUp                                                       = 0xaac7b717
	CRC_auth_signIn                                                       = 0x8d52a951
	CRC_auth_logOut                                                       = 0x3e72ba19
	CRC_auth_resetAuthorizations                                          = 0x9fab0d1a
	CRC_auth_exportAuthorization                                          = 0xe5bfffcd
	CRC_auth_importAuthorization                                          = 0xa57a7dad
	CRC_auth_bindTempAuthKey                                              = 0xcdd42a05
	CRC_auth_importBotAuthorization                                       = 0x67a3ff2c
	CRC_auth_checkPassword                                                = 0xd18b4d16
	CRC_auth_requestPasswordRecovery                                      = 0xd897bc66
	CRC_auth_recoverPassword                                              = 0x37096c70
	CRC_auth_resendCode                                                   = 0xcae47523
	CRC_auth_cancelCode                                                   = 0x1f040578
	CRC_auth_dropTempAuthKeys                                             = 0x8e48a188
	CRC_auth_exportLoginToken                                             = 0xb7e085fe
	CRC_auth_importLoginToken                                             = 0x95ac5ce4
	CRC_auth_acceptLoginToken                                             = 0xe894ad4d
	CRC_auth_checkRecoveryPassword                                        = 0x0d36bf79
	CRC_auth_importWebTokenAuthorization                                  = 0x2db873a9
	CRC_auth_requestFirebaseSMS                                           = 0x8e39261e
	CRC_auth_resetLoginEmail                                              = 0x7e960193
	CRC_auth_reportMissingCode                                            = 0xcb9deff6
	CRC_account_registerDevice                                            = 0xec86017a
	CRC_account_unregisterDevice                                          = 0x6a0d3206
	CRC_account_updateNotifySettings                                      = 0x84be5b93
	CRC_account_getNotifySettings                                         = 0x12b3ad31
	CRC_account_resetNotifySettings                                       = 0xdb7e1747
	CRC_account_updateProfile                                             = 0x78515775
	CRC_account_updateStatus                                              = 0x6628562c
	CRC_account_getWallPapers                                             = 0x07967d36
	CRC_account_reportPeer                                                = 0xc5ba3d86
	CRC_account_checkUsername                                             = 0x2714d86c
	CRC_account_updateUsername                                            = 0x3e0bdd7c
	CRC_account_getPrivacy                                                = 0xdadbc950
	CRC_account_setPrivacy                                                = 0xc9f81ce8
	CRC_account_deleteAccount                                             = 0xa2c0cf74
	CRC_account_getAccountTTL                                             = 0x08fc711d
	CRC_account_setAccountTTL                                             = 0x2442485e
	CRC_account_sendChangePhoneCode                                       = 0x82574ae5
	CRC_account_changePhone                                               = 0x70c32edb
	CRC_account_updateDeviceLocked                                        = 0x38df3532
	CRC_account_getAuthorizations                                         = 0xe320c158
	CRC_account_resetAuthorization                                        = 0xdf77f3bc
	CRC_account_getPassword                                               = 0x548a30f5
	CRC_account_getPasswordSettings                                       = 0x9cd4eaf9
	CRC_account_updatePasswordSettings                                    = 0xa59b102f
	CRC_account_sendConfirmPhoneCode                                      = 0x1b3faa88
	CRC_account_confirmPhone                                              = 0x5f2178c3
	CRC_account_getTmpPassword                                            = 0x449e0b51
	CRC_account_getWebAuthorizations                                      = 0x182e6d6f
	CRC_account_resetWebAuthorization                                     = 0x2d01b9ef
	CRC_account_resetWebAuthorizations                                    = 0x682d2594
	CRC_account_getAllSecureValues                                        = 0xb288bc7d
	CRC_account_getSecureValue                                            = 0x73665bc2
	CRC_account_saveSecureValue                                           = 0x899fe31d
	CRC_account_deleteSecureValue                                         = 0xb880bc4b
	CRC_account_getAuthorizationForm                                      = 0xa929597a
	CRC_account_acceptAuthorization                                       = 0xf3ed4c73
	CRC_account_sendVerifyPhoneCode                                       = 0xa5a356f9
	CRC_account_verifyPhone                                               = 0x4dd3a7f6
	CRC_account_sendVerifyEmailCode                                       = 0x98e037bb
	CRC_account_verifyEmail                                               = 0x032da4cf
	CRC_account_initTakeoutSession                                        = 0x8ef3eab0
	CRC_account_finishTakeoutSession                                      = 0x1d2652ee
	CRC_account_confirmPasswordEmail                                      = 0x8fdf1920
	CRC_account_resendPasswordEmail                                       = 0x7a7f2a15
	CRC_account_cancelPasswordEmail                                       = 0xc1cbd5b6
	CRC_account_getContactSignUpNotification                              = 0x9f07c728
	CRC_account_setContactSignUpNotification                              = 0xcff43f61
	CRC_account_getNotifyExceptions                                       = 0x53577479
	CRC_account_getWallPaper                                              = 0xfc8ddbea
	CRC_account_uploadWallPaper                                           = 0xe39a8f03
	CRC_account_saveWallPaper                                             = 0x6c5a5b37
	CRC_account_installWallPaper                                          = 0xfeed5769
	CRC_account_resetWallPapers                                           = 0xbb3b9804
	CRC_account_getAutoDownloadSettings                                   = 0x56da0b3f
	CRC_account_saveAutoDownloadSettings                                  = 0x76f36233
	CRC_account_uploadTheme                                               = 0x1c3db333
	CRC_account_createTheme                                               = 0x652e4400
	CRC_account_updateTheme                                               = 0x2bf40ccc
	CRC_account_saveTheme                                                 = 0xf257106c
	CRC_account_installTheme                                              = 0xc727bb3b
	CRC_account_getTheme                                                  = 0x3a5869ec
	CRC_account_getThemes                                                 = 0x7206e458
	CRC_account_setContentSettings                                        = 0xb574b16b
	CRC_account_getContentSettings                                        = 0x8b9b4dae
	CRC_account_getMultiWallPapers                                        = 0x65ad71dc
	CRC_account_getGlobalPrivacySettings                                  = 0xeb2b4cf6
	CRC_account_setGlobalPrivacySettings                                  = 0x1edaaac2
	CRC_account_reportProfilePhoto                                        = 0xfa8cc6f5
	CRC_account_resetPassword                                             = 0x9308ce1b
	CRC_account_declinePasswordReset                                      = 0x4c9409f6
	CRC_account_getChatThemes                                             = 0xd638de89
	CRC_account_setAuthorizationTTL                                       = 0xbf899aa0
	CRC_account_changeAuthorizationSettings                               = 0x40f48462
	CRC_account_getSavedRingtones                                         = 0xe1902288
	CRC_account_saveRingtone                                              = 0x3dea5b03
	CRC_account_uploadRingtone                                            = 0x831a83a2
	CRC_account_updateEmojiStatus                                         = 0xfbd3de6b
	CRC_account_getDefaultEmojiStatuses                                   = 0xd6753386
	CRC_account_getRecentEmojiStatuses                                    = 0x0f578105
	CRC_account_clearRecentEmojiStatuses                                  = 0x18201aae
	CRC_account_reorderUsernames                                          = 0xef500eab
	CRC_account_toggleUsername                                            = 0x58d6b376
	CRC_account_getDefaultProfilePhotoEmojis                              = 0xe2750328
	CRC_account_getDefaultGroupPhotoEmojis                                = 0x915860ae
	CRC_account_getAutoSaveSettings                                       = 0xadcbbcda
	CRC_account_saveAutoSaveSettings                                      = 0xd69b8361
	CRC_account_deleteAutoSaveExceptions                                  = 0x53bc0020
	CRC_account_invalidateSignInCodes                                     = 0xca8ae8ba
	CRC_account_updateColor                                               = 0x7cefa15d
	CRC_account_getDefaultBackgroundEmojis                                = 0xa60ab9ce
	CRC_account_getChannelDefaultEmojiStatuses                            = 0x7727a7d5
	CRC_account_getChannelRestrictedStatusEmojis                          = 0x35a9e0d5
	CRC_account_updateBusinessWorkHours                                   = 0x4b00e066
	CRC_account_updateBusinessLocation                                    = 0x9e6b131a
	CRC_account_updateBusinessGreetingMessage                             = 0x66cdafc4
	CRC_account_updateBusinessAwayMessage                                 = 0xa26a7fa5
	CRC_account_updateConnectedBot                                        = 0x43d8521d
	CRC_account_getConnectedBots                                          = 0x4ea4c80f
	CRC_account_getBotBusinessConnection                                  = 0x76a86270
	CRC_account_updateBusinessIntro                                       = 0xa614d034
	CRC_account_toggleConnectedBotPaused                                  = 0x646e1097
	CRC_account_disablePeerConnectedBot                                   = 0x5e437ed9
	CRC_account_updateBirthday                                            = 0xcc6e0c11
	CRC_account_createBusinessChatLink                                    = 0x8851e68e
	CRC_account_editBusinessChatLink                                      = 0x8c3410af
	CRC_account_deleteBusinessChatLink                                    = 0x60073674
	CRC_account_getBusinessChatLinks                                      = 0x6f70dde1
	CRC_account_resolveBusinessChatLink                                   = 0x5492e5ee
	CRC_account_updatePersonalChannel                                     = 0xd94305e0
	CRC_account_toggleSponsoredMessages                                   = 0xb9d9a38d
	CRC_account_getReactionsNotifySettings                                = 0x06dd654c
	CRC_account_setReactionsNotifySettings                                = 0x316ce548
	CRC_users_getUsers                                                    = 0x0d91a548
	CRC_users_getFullUser                                                 = 0xb60f5918
	CRC_users_setSecureValueErrors                                        = 0x90c894b5
	CRC_users_getIsPremiumRequiredToContact                               = 0xa622aa10
	CRC_contacts_getContactIDs                                            = 0x7adc669d
	CRC_contacts_getStatuses                                              = 0xc4a353ee
	CRC_contacts_getContacts                                              = 0x5dd69e12
	CRC_contacts_importContacts                                           = 0x2c800be5
	CRC_contacts_deleteContacts                                           = 0x096a0e00
	CRC_contacts_deleteByPhones                                           = 0x1013fd9e
	CRC_contacts_block                                                    = 0x2e2e8734
	CRC_contacts_unblock                                                  = 0xb550d328
	CRC_contacts_getBlocked                                               = 0x9a868f80
	CRC_contacts_search                                                   = 0x11f812d8
	CRC_contacts_resolveUsername                                          = 0xf93ccba3
	CRC_contacts_getTopPeers                                              = 0x973478b6
	CRC_contacts_resetTopPeerRating                                       = 0x1ae373ac
	CRC_contacts_resetSaved                                               = 0x879537f1
	CRC_contacts_getSaved                                                 = 0x82f1e39f
	CRC_contacts_toggleTopPeers                                           = 0x8514bdda
	CRC_contacts_addContact                                               = 0xe8f463d0
	CRC_contacts_acceptContact                                            = 0xf831a20f
	CRC_contacts_getLocated                                               = 0xd348bc44
	CRC_contacts_blockFromReplies                                         = 0x29a8962c
	CRC_contacts_resolvePhone                                             = 0x8af94344
	CRC_contacts_exportContactToken                                       = 0xf8654027
	CRC_contacts_importContactToken                                       = 0x13005788
	CRC_contacts_editCloseFriends                                         = 0xba6705f0
	CRC_contacts_setBlocked                                               = 0x94c65c76
	CRC_contacts_getBirthdays                                             = 0xdaeda864
	CRC_messages_getMessages                                              = 0x63c66506
	CRC_messages_getDialogs                                               = 0xa0f4cb4f
	CRC_messages_getHistory                                               = 0x4423e6c5
	CRC_messages_search                                                   = 0x29ee847a
	CRC_messages_readHistory                                              = 0x0e306d3a
	CRC_messages_deleteHistory                                            = 0xb08f922a
	CRC_messages_deleteMessages                                           = 0xe58e95d2
	CRC_messages_receivedMessages                                         = 0x05a954c0
	CRC_messages_setTyping                                                = 0x58943ee2
	CRC_messages_sendMessage                                              = 0x983f9745
	CRC_messages_sendMedia                                                = 0x7852834e
	CRC_messages_forwardMessages                                          = 0xd5039208
	CRC_messages_reportSpam                                               = 0xcf1592db
	CRC_messages_getPeerSettings                                          = 0xefd9a6a2
	CRC_messages_report                                                   = 0x8953ab4e
	CRC_messages_getChats                                                 = 0x49e9528f
	CRC_messages_getFullChat                                              = 0xaeb00b34
	CRC_messages_editChatTitle                                            = 0x73783ffd
	CRC_messages_editChatPhoto                                            = 0x35ddd674
	CRC_messages_addChatUser                                              = 0xcbc6d107
	CRC_messages_deleteChatUser                                           = 0xa2185cab
	CRC_messages_createChat                                               = 0x92ceddd4
	CRC_messages_getDHConfig                                              = 0x26cf8950
	CRC_messages_requestEncryption                                        = 0xf64daf43
	CRC_messages_acceptEncryption                                         = 0x3dbc0415
	CRC_messages_discardEncryption                                        = 0xf393aea0
	CRC_messages_setEncryptedTyping                                       = 0x791451ed
	CRC_messages_readEncryptedHistory                                     = 0x7f4b690a
	CRC_messages_sendEncrypted                                            = 0x44fa7a15
	CRC_messages_sendEncryptedFile                                        = 0x5559481d
	CRC_messages_sendEncryptedService                                     = 0x32d439a4
	CRC_messages_receivedQueue                                            = 0x55a5bb66
	CRC_messages_reportEncryptedSpam                                      = 0x4b0c8c0f
	CRC_messages_readMessageContents                                      = 0x36a73f77
	CRC_messages_getStickers                                              = 0xd5a5d3a1
	CRC_messages_getAllStickers                                           = 0xb8a0a1a8
	CRC_messages_getWebPagePreview                                        = 0x8b68b0cc
	CRC_messages_exportChatInvite                                         = 0xa455de90
	CRC_messages_checkChatInvite                                          = 0x3eadb1bb
	CRC_messages_importChatInvite                                         = 0x6c50051c
	CRC_messages_getStickerSet                                            = 0xc8a0ec74
	CRC_messages_installStickerSet                                        = 0xc78fe460
	CRC_messages_uninstallStickerSet                                      = 0xf96e55de
	CRC_messages_startBot                                                 = 0xe6df7378
	CRC_messages_getMessagesViews                                         = 0x5784d3e1
	CRC_messages_editChatAdmin                                            = 0xa85bd1c2
	CRC_messages_migrateChat                                              = 0xa2875319
	CRC_messages_searchGlobal                                             = 0x4bc6589a
	CRC_messages_reorderStickerSets                                       = 0x78337739
	CRC_messages_getDocumentByHash                                        = 0xb1f2061f
	CRC_messages_getSavedGIFs                                             = 0x5cf09635
	CRC_messages_saveGIF                                                  = 0x327a30cb
	CRC_messages_getInlineBotResults                                      = 0x514e999d
	CRC_messages_setInlineBotResults                                      = 0xbb12a419
	CRC_messages_sendInlineBotResult                                      = 0x3ebee86a
	CRC_messages_getMessageEditData                                       = 0xfda68d36
	CRC_messages_editMessage                                              = 0xdfd14005
	CRC_messages_editInlineBotMessage                                     = 0x83557dba
	CRC_messages_getBotCallbackAnswer                                     = 0x9342ca07
	CRC_messages_setBotCallbackAnswer                                     = 0xd58f130a
	CRC_messages_getPeerDialogs                                           = 0xe470bcfd
	CRC_messages_saveDraft                                                = 0xd372c5ce
	CRC_messages_getAllDrafts                                             = 0x6a3f8d65
	CRC_messages_getFeaturedStickers                                      = 0x64780b14
	CRC_messages_readFeaturedStickers                                     = 0x5b118126
	CRC_messages_getRecentStickers                                        = 0x9da9403b
	CRC_messages_saveRecentSticker                                        = 0x392718f8
	CRC_messages_clearRecentStickers                                      = 0x8999602d
	CRC_messages_getArchivedStickers                                      = 0x57f17692
	CRC_messages_getMaskStickers                                          = 0x640f82b8
	CRC_messages_getAttachedStickers                                      = 0xcc5b67cc
	CRC_messages_setGameScore                                             = 0x8ef8ecc0
	CRC_messages_setInlineGameScore                                       = 0x15ad9f64
	CRC_messages_getGameHighScores                                        = 0xe822649d
	CRC_messages_getInlineGameHighScores                                  = 0x0f635e1b
	CRC_messages_getCommonChats                                           = 0xe40ca104
	CRC_messages_getWebPage                                               = 0x8d9692a3
	CRC_messages_toggleDialogPIN                                          = 0xa731e257
	CRC_messages_reorderPinnedDialogs                                     = 0x3b1adf37
	CRC_messages_getPinnedDialogs                                         = 0xd6b94df2
	CRC_messages_setBotShippingResults                                    = 0xe5f672fa
	CRC_messages_setBotPrecheckoutResults                                 = 0x09c2dd95
	CRC_messages_uploadMedia                                              = 0x14967978
	CRC_messages_sendScreenshotNotification                               = 0xa1405817
	CRC_messages_getFavedStickers                                         = 0x04f1aaa9
	CRC_messages_faveSticker                                              = 0xb9ffc55b
	CRC_messages_getUnreadMentions                                        = 0xf107e790
	CRC_messages_readMentions                                             = 0x36e5bf4d
	CRC_messages_getRecentLocations                                       = 0x702a40e0
	CRC_messages_sendMultiMedia                                           = 0x37b74355
	CRC_messages_uploadEncryptedFile                                      = 0x5057c497
	CRC_messages_searchStickerSets                                        = 0x35705b8a
	CRC_messages_getSplitRanges                                           = 0x1cff7e08
	CRC_messages_markDialogUnread                                         = 0xc286d98f
	CRC_messages_getDialogUnreadMarks                                     = 0x22e24e22
	CRC_messages_clearAllDrafts                                           = 0x7e58ee9c
	CRC_messages_updatePinnedMessage                                      = 0xd2aaf7ec
	CRC_messages_sendVote                                                 = 0x10ea6184
	CRC_messages_getPollResults                                           = 0x73bb643b
	CRC_messages_getOnlines                                               = 0x6e2be050
	CRC_messages_editChatAbout                                            = 0xdef60797
	CRC_messages_editChatDefaultBannedRights                              = 0xa5866b41
	CRC_messages_getEmojiKeywords                                         = 0x35a0e062
	CRC_messages_getEmojiKeywordsDifference                               = 0x1508b6af
	CRC_messages_getEmojiKeywordsLanguages                                = 0x4e9963b2
	CRC_messages_getEmojiURL                                              = 0xd5b10c26
	CRC_messages_getSearchCounters                                        = 0x1bbcf300
	CRC_messages_requestURLAuth                                           = 0x198fb446
	CRC_messages_acceptURLAuth                                            = 0xb12c7125
	CRC_messages_hidePeerSettingsBar                                      = 0x4facb138
	CRC_messages_getScheduledHistory                                      = 0xf516760b
	CRC_messages_getScheduledMessages                                     = 0xbdbb0464
	CRC_messages_sendScheduledMessages                                    = 0xbd38850a
	CRC_messages_deleteScheduledMessages                                  = 0x59ae2b16
	CRC_messages_getPollVotes                                             = 0xb86e380e
	CRC_messages_toggleStickerSets                                        = 0xb5052fea
	CRC_messages_getDialogFilters                                         = 0xefd48c89
	CRC_messages_getSuggestedDialogFilters                                = 0xa29cd42c
	CRC_messages_updateDialogFilter                                       = 0x1ad4a04a
	CRC_messages_updateDialogFiltersOrder                                 = 0xc563c1e4
	CRC_messages_getOldFeaturedStickers                                   = 0x7ed094a1
	CRC_messages_getReplies                                               = 0x22ddd30c
	CRC_messages_getDiscussionMessage                                     = 0x446972fd
	CRC_messages_readDiscussion                                           = 0xf731a9f4
	CRC_messages_unpinAllMessages                                         = 0xee22b9a8
	CRC_messages_deleteChat                                               = 0x5bd0ee50
	CRC_messages_deletePhoneCallHistory                                   = 0xf9cbe409
	CRC_messages_checkHistoryImport                                       = 0x43fe19f3
	CRC_messages_initHistoryImport                                        = 0x34090c3b
	CRC_messages_uploadImportedMedia                                      = 0x2a862092
	CRC_messages_startHistoryImport                                       = 0xb43df344
	CRC_messages_getExportedChatInvites                                   = 0xa2b5a3f6
	CRC_messages_getExportedChatInvite                                    = 0x73746f5c
	CRC_messages_editExportedChatInvite                                   = 0xbdca2f75
	CRC_messages_deleteRevokedExportedChatInvites                         = 0x56987bd5
	CRC_messages_deleteExportedChatInvite                                 = 0xd464a42b
	CRC_messages_getAdminsWithInvites                                     = 0x3920e6ef
	CRC_messages_getChatInviteImporters                                   = 0xdf04dd4e
	CRC_messages_setHistoryTTL                                            = 0xb80e5fe4
	CRC_messages_checkHistoryImportPeer                                   = 0x5dc60f03
	CRC_messages_setChatTheme                                             = 0xe63be13f
	CRC_messages_getMessageReadParticipants                               = 0x31c1c44f
	CRC_messages_getSearchResultsCalendar                                 = 0x6aa3f6bd
	CRC_messages_getSearchResultsPositions                                = 0x9c7f2f10
	CRC_messages_hideChatJoinRequest                                      = 0x7fe7e815
	CRC_messages_hideAllChatJoinRequests                                  = 0xe085f4ea
	CRC_messages_toggleNoForwards                                         = 0xb11eafa2
	CRC_messages_saveDefaultSendAs                                        = 0xccfddf96
	CRC_messages_sendReaction                                             = 0xd30d78d4
	CRC_messages_getMessagesReactions                                     = 0x8bba90e6
	CRC_messages_getMessageReactionsList                                  = 0x461b3f48
	CRC_messages_setChatAvailableReactions                                = 0x864b2581
	CRC_messages_getAvailableReactions                                    = 0x18dea0ac
	CRC_messages_setDefaultReaction                                       = 0x4f47a016
	CRC_messages_translateText                                            = 0x63183030
	CRC_messages_getUnreadReactions                                       = 0x3223495b
	CRC_messages_readReactions                                            = 0x54aa7f8e
	CRC_messages_searchSentMedia                                          = 0x107e31a0
	CRC_messages_getAttachMenuBots                                        = 0x16fcc2cb
	CRC_messages_getAttachMenuBot                                         = 0x77216192
	CRC_messages_toggleBotInAttachMenu                                    = 0x69f59d69
	CRC_messages_requestWebView                                           = 0x269dc2c1
	CRC_messages_prolongWebView                                           = 0xb0d81a83
	CRC_messages_requestSimpleWebView                                     = 0x413a3e73
	CRC_messages_sendWebViewResultMessage                                 = 0x0a4314f5
	CRC_messages_sendWebViewData                                          = 0xdc0242c8
	CRC_messages_transcribeAudio                                          = 0x269e9a49
	CRC_messages_rateTranscribedAudio                                     = 0x7f1d072f
	CRC_messages_getCustomEmojiDocuments                                  = 0xd9ab0f54
	CRC_messages_getEmojiStickers                                         = 0xfbfca18f
	CRC_messages_getFeaturedEmojiStickers                                 = 0x0ecf6736
	CRC_messages_reportReaction                                           = 0x3f64c076
	CRC_messages_getTopReactions                                          = 0xbb8125ba
	CRC_messages_getRecentReactions                                       = 0x39461db2
	CRC_messages_clearRecentReactions                                     = 0x9dfeefb4
	CRC_messages_getExtendedMedia                                         = 0x84f80814
	CRC_messages_setDefaultHistoryTTL                                     = 0x9eb51445
	CRC_messages_getDefaultHistoryTTL                                     = 0x658b7188
	CRC_messages_sendBotRequestedPeer                                     = 0x91b2d060
	CRC_messages_getEmojiGroups                                           = 0x7488ce5b
	CRC_messages_getEmojiStatusGroups                                     = 0x2ecd56cd
	CRC_messages_getEmojiProfilePhotoGroups                               = 0x21a548f3
	CRC_messages_searchCustomEmoji                                        = 0x2c11c0d7
	CRC_messages_togglePeerTranslations                                   = 0xe47cb579
	CRC_messages_getBotApp                                                = 0x34fdc5c3
	CRC_messages_requestAppWebView                                        = 0x53618bce
	CRC_messages_setChatWallPaper                                         = 0x8ffacae1
	CRC_messages_searchEmojiStickerSets                                   = 0x92b4494c
	CRC_messages_getSavedDialogs                                          = 0x5381d21a
	CRC_messages_getSavedHistory                                          = 0x3d9a414d
	CRC_messages_deleteSavedHistory                                       = 0x6e98102b
	CRC_messages_getPinnedSavedDialogs                                    = 0xd63d94e0
	CRC_messages_toggleSavedDialogPIN                                     = 0xac81bbde
	CRC_messages_reorderPinnedSavedDialogs                                = 0x8b716587
	CRC_messages_getSavedReactionTags                                     = 0x3637e05b
	CRC_messages_updateSavedReactionTag                                   = 0x60297dec
	CRC_messages_getDefaultTagReactions                                   = 0xbdf93428
	CRC_messages_getOutboxReadDate                                        = 0x8c4bfe5d
	CRC_messages_getQuickReplies                                          = 0xd483f2a8
	CRC_messages_reorderQuickReplies                                      = 0x60331907
	CRC_messages_checkQuickReplyShortcut                                  = 0xf1d0fbd3
	CRC_messages_editQuickReplyShortcut                                   = 0x5c003cef
	CRC_messages_deleteQuickReplyShortcut                                 = 0x3cc04740
	CRC_messages_getQuickReplyMessages                                    = 0x94a495c3
	CRC_messages_sendQuickReplyMessages                                   = 0x6c750de1
	CRC_messages_deleteQuickReplyMessages                                 = 0xe105e910
	CRC_messages_toggleDialogFilterTags                                   = 0xfd2dda49
	CRC_messages_getMyStickers                                            = 0xd0b5e1fc
	CRC_messages_getEmojiStickerGroups                                    = 0x1dd840f5
	CRC_messages_getAvailableEffects                                      = 0xdea20a39
	CRC_messages_editFactCheck                                            = 0x0589ee75
	CRC_messages_deleteFactCheck                                          = 0xd1da940c
	CRC_messages_getFactCheck                                             = 0xb9cdc5ee
	CRC_messages_requestMainWebView                                       = 0xc9e01e7b
	CRC_messages_sendPaidReaction                                         = 0x9dd6a67b
	CRC_messages_togglePaidReactionPrivacy                                = 0x849ad397
	CRC_messages_getPaidReactionPrivacy                                   = 0x472455aa
	CRC_updates_getState                                                  = 0xedd4882a
	CRC_updates_getDifference                                             = 0x19c2f763
	CRC_updates_getChannelDifference                                      = 0x03173d78
	CRC_photos_updateProfilePhoto                                         = 0x09e82039
	CRC_photos_uploadProfilePhoto                                         = 0x0388a3b5
	CRC_photos_deletePhotos                                               = 0x87cf7f2f
	CRC_photos_getUserPhotos                                              = 0x91cd32a8
	CRC_photos_uploadContactProfilePhoto                                  = 0xe14c4a71
	CRC_upload_saveFilePart                                               = 0xb304a621
	CRC_upload_getFile                                                    = 0xbe5335be
	CRC_upload_saveBigFilePart                                            = 0xde7b673d
	CRC_upload_getWebFile                                                 = 0x24e6818d
	CRC_upload_getCDNFile                                                 = 0x395f69da
	CRC_upload_reuploadCDNFile                                            = 0x9b2754a8
	CRC_upload_getCDNFileHashes                                           = 0x91dc3f31
	CRC_upload_getFileHashes                                              = 0x9156982a
	CRC_help_getConfig                                                    = 0xc4f9186b
	CRC_help_getNearestDC                                                 = 0x1fb33026
	CRC_help_getAppUpdate                                                 = 0x522d5a7d
	CRC_help_getInviteText                                                = 0x4d392343
	CRC_help_getSupport                                                   = 0x9cdf08cd
	CRC_help_setBotUpdatesStatus                                          = 0xec22cfcd
	CRC_help_getCDNConfig                                                 = 0x52029342
	CRC_help_getRecentMeURLs                                              = 0x3dc0f114
	CRC_help_getTermsOfServiceUpdate                                      = 0x2ca51fd1
	CRC_help_acceptTermsOfService                                         = 0xee72f79a
	CRC_help_getDeepLinkInfo                                              = 0x3fedc75f
	CRC_help_getAppConfig                                                 = 0x61e3f854
	CRC_help_saveAppLog                                                   = 0x6f02f748
	CRC_help_getPassportConfig                                            = 0xc661ad08
	CRC_help_getSupportName                                               = 0xd360e72c
	CRC_help_getUserInfo                                                  = 0x038a08d3
	CRC_help_editUserInfo                                                 = 0x66b91b70
	CRC_help_getPromoData                                                 = 0xc0977421
	CRC_help_hidePromoData                                                = 0x1e251c95
	CRC_help_dismissSuggestion                                            = 0xf50dbaa1
	CRC_help_getCountriesList                                             = 0x735787a8
	CRC_help_getPremiumPromo                                              = 0xb81b93d4
	CRC_help_getPeerColors                                                = 0xda80f42f
	CRC_help_getPeerProfileColors                                         = 0xabcfa9fd
	CRC_help_getTimezonesList                                             = 0x49b30240
	CRC_channels_readHistory                                              = 0xcc104937
	CRC_channels_deleteMessages                                           = 0x84c1fd4e
	CRC_channels_reportSpam                                               = 0xf44a8315
	CRC_channels_getMessages                                              = 0xad8c9a23
	CRC_channels_getParticipants                                          = 0x77ced9d0
	CRC_channels_getParticipant                                           = 0xa0ab6cc6
	CRC_channels_getChannels                                              = 0x0a7f6bbb
	CRC_channels_getFullChannel                                           = 0x08736a09
	CRC_channels_createChannel                                            = 0x91006707
	CRC_channels_editAdmin                                                = 0xd33c8902
	CRC_channels_editTitle                                                = 0x566decd0
	CRC_channels_editPhoto                                                = 0xf12e57c9
	CRC_channels_checkUsername                                            = 0x10e6bd2c
	CRC_channels_updateUsername                                           = 0x3514b3de
	CRC_channels_joinChannel                                              = 0x24b524c5
	CRC_channels_leaveChannel                                             = 0xf836aa95
	CRC_channels_inviteToChannel                                          = 0xc9e33d54
	CRC_channels_deleteChannel                                            = 0xc0111fe3
	CRC_channels_exportMessageLink                                        = 0xe63fadeb
	CRC_channels_toggleSignatures                                         = 0x418d549c
	CRC_channels_getAdminedPublicChannels                                 = 0xf8b036af
	CRC_channels_editBanned                                               = 0x96e6cd81
	CRC_channels_getAdminLog                                              = 0x33ddf480
	CRC_channels_setStickers                                              = 0xea8ca4f9
	CRC_channels_readMessageContents                                      = 0xeab5dc38
	CRC_channels_deleteHistory                                            = 0x9baa9647
	CRC_channels_togglePreHistoryHidden                                   = 0xeabbb94c
	CRC_channels_getLeftChannels                                          = 0x8341ecc0
	CRC_channels_getGroupsForDiscussion                                   = 0xf5dad378
	CRC_channels_setDiscussionGroup                                       = 0x40582bb2
	CRC_channels_editCreator                                              = 0x8f38cd1f
	CRC_channels_editLocation                                             = 0x58e63f6d
	CRC_channels_toggleSlowMode                                           = 0xedd49ef0
	CRC_channels_getInactiveChannels                                      = 0x11e831ee
	CRC_channels_convertToGigagroup                                       = 0x0b290c69
	CRC_channels_viewSponsoredMessage                                     = 0xbeaedb94
	CRC_channels_getSponsoredMessages                                     = 0xec210fbf
	CRC_channels_getSendAs                                                = 0x0dc770ee
	CRC_channels_deleteParticipantHistory                                 = 0x367544db
	CRC_channels_toggleJoinToSend                                         = 0xe4cb9580
	CRC_channels_toggleJoinRequest                                        = 0x4c2985b6
	CRC_channels_reorderUsernames                                         = 0xb45ced1d
	CRC_channels_toggleUsername                                           = 0x50f24105
	CRC_channels_deactivateAllUsernames                                   = 0x0a245dd3
	CRC_channels_toggleForum                                              = 0xa4298b29
	CRC_channels_createForumTopic                                         = 0xf40c0224
	CRC_channels_getForumTopics                                           = 0x0de560d1
	CRC_channels_getForumTopicsByID                                       = 0xb0831eb9
	CRC_channels_editForumTopic                                           = 0xf4dfa185
	CRC_channels_updatePinnedForumTopic                                   = 0x6c2d9026
	CRC_channels_deleteTopicHistory                                       = 0x34435f2d
	CRC_channels_reorderPinnedForumTopics                                 = 0x2950a18f
	CRC_channels_toggleAntiSpam                                           = 0x68f3e4eb
	CRC_channels_reportAntiSpamFalsePositive                              = 0xa850a693
	CRC_channels_toggleParticipantsHidden                                 = 0x6a6e7854
	CRC_channels_clickSponsoredMessage                                    = 0x18afbc93
	CRC_channels_updateColor                                              = 0xd8aa3671
	CRC_channels_toggleViewForumAsMessages                                = 0x9738bb15
	CRC_channels_getChannelRecommendations                                = 0x25a71742
	CRC_channels_updateEmojiStatus                                        = 0xf0d3e6a8
	CRC_channels_setBoostsToUnblockRestrictions                           = 0xad399cee
	CRC_channels_setEmojiStickers                                         = 0x3cd930b7
	CRC_channels_reportSponsoredMessage                                   = 0xaf8ff6b9
	CRC_channels_restrictSponsoredMessages                                = 0x9ae91519
	CRC_channels_searchPosts                                              = 0xd19f987b
	CRC_bots_sendCustomRequest                                            = 0xaa2769ed
	CRC_bots_answerWebhookJSONQuery                                       = 0xe6213f4d
	CRC_bots_setBotCommands                                               = 0x0517165a
	CRC_bots_resetBotCommands                                             = 0x3d8de0f9
	CRC_bots_getBotCommands                                               = 0xe34c0dd6
	CRC_bots_setBotMenuButton                                             = 0x4504d54f
	CRC_bots_getBotMenuButton                                             = 0x9c60eb28
	CRC_bots_setBotBroadcastDefaultAdminRights                            = 0x788464e1
	CRC_bots_setBotGroupDefaultAdminRights                                = 0x925ec9ea
	CRC_bots_setBotInfo                                                   = 0x10cf3123
	CRC_bots_getBotInfo                                                   = 0xdcd914fd
	CRC_bots_reorderUsernames                                             = 0x9709b1c2
	CRC_bots_toggleUsername                                               = 0x053ca973
	CRC_bots_canSendMessage                                               = 0x1359f4e6
	CRC_bots_allowSendMessage                                             = 0xf132e3ef
	CRC_bots_invokeWebViewCustomMethod                                    = 0x087fc5e7
	CRC_bots_getPopularAppBots                                            = 0xc2510192
	CRC_bots_addPreviewMedia                                              = 0x17aeb75a
	CRC_bots_editPreviewMedia                                             = 0x8525606f
	CRC_bots_deletePreviewMedia                                           = 0x2d0135b3
	CRC_bots_reorderPreviewMedias                                         = 0xb627f3aa
	CRC_bots_getPreviewInfo                                               = 0x423ab3ad
	CRC_bots_getPreviewMedias                                             = 0xa2a5594d
	CRC_payments_getPaymentForm                                           = 0x37148dbb
	CRC_payments_getPaymentReceipt                                        = 0x2478d1cc
	CRC_payments_validateRequestedInfo                                    = 0xb6c8f12b
	CRC_payments_sendPaymentForm                                          = 0x2d03522f
	CRC_payments_getSavedInfo                                             = 0x227d824b
	CRC_payments_clearSavedInfo                                           = 0xd83d70c1
	CRC_payments_getBankCardData                                          = 0x2e79d779
	CRC_payments_exportInvoice                                            = 0x0f91b065
	CRC_payments_assignAppStoreTransaction                                = 0x80ed747d
	CRC_payments_assignPlayMarketTransaction                              = 0xdffd50d3
	CRC_payments_canPurchasePremium                                       = 0x9fc19eb6
	CRC_payments_getPremiumGiftCodeOptions                                = 0x2757ba54
	CRC_payments_checkGiftCode                                            = 0x8e51b4c1
	CRC_payments_applyGiftCode                                            = 0xf6e26854
	CRC_payments_getGiveawayInfo                                          = 0xf4239425
	CRC_payments_launchPrepaidGiveaway                                    = 0x5ff58f20
	CRC_payments_getStarsTopupOptions                                     = 0xc00ec7d3
	CRC_payments_getStarsStatus                                           = 0x104fcfa7
	CRC_payments_getStarsTransactions                                     = 0x69da4557
	CRC_payments_sendStarsForm                                            = 0x02bb731d
	CRC_payments_refundStarsCharge                                        = 0x25ae8f4a
	CRC_payments_getStarsRevenueStats                                     = 0xd91ffad6
	CRC_payments_getStarsRevenueWithdrawalURL                             = 0x13bbe8b3
	CRC_payments_getStarsRevenueAdsAccountURL                             = 0xd1d7efc5
	CRC_payments_getStarsTransactionsByID                                 = 0x27842d2e
	CRC_payments_getStarsGiftOptions                                      = 0xd3c96bc8
	CRC_payments_getStarsSubscriptions                                    = 0x032512c5
	CRC_payments_changeStarsSubscription                                  = 0xc7770878
	CRC_payments_fulfillStarsSubscription                                 = 0xcc5bebb3
	CRC_payments_getStarsGiveawayOptions                                  = 0xbd1efd3e
	CRC_stickers_createStickerSet                                         = 0x9021ab67
	CRC_stickers_removeStickerFromSet                                     = 0xf7760f51
	CRC_stickers_changeStickerPosition                                    = 0xffb6d4ca
	CRC_stickers_addStickerToSet                                          = 0x8653febe
	CRC_stickers_setStickerSetThumb                                       = 0xa76a5392
	CRC_stickers_checkShortName                                           = 0x284b3639
	CRC_stickers_suggestShortName                                         = 0x4dafc503
	CRC_stickers_changeSticker                                            = 0xf5537ebc
	CRC_stickers_renameStickerSet                                         = 0x124b1c00
	CRC_stickers_deleteStickerSet                                         = 0x87704394
	CRC_stickers_replaceSticker                                           = 0x4696459a
	CRC_phone_getCallConfig                                               = 0x55451fa9
	CRC_phone_requestCall                                                 = 0x42ff96ed
	CRC_phone_acceptCall                                                  = 0x3bd2b4a0
	CRC_phone_confirmCall                                                 = 0x2efe1722
	CRC_phone_receivedCall                                                = 0x17d54f61
	CRC_phone_discardCall                                                 = 0xb2cbc1c0
	CRC_phone_setCallRating                                               = 0x59ead627
	CRC_phone_saveCallDebug                                               = 0x277add7e
	CRC_phone_sendSignalingData                                           = 0xff7a9383
	CRC_phone_createGroupCall                                             = 0x48cdc6d8
	CRC_phone_joinGroupCall                                               = 0xb132ff7b
	CRC_phone_leaveGroupCall                                              = 0x500377f9
	CRC_phone_inviteToGroupCall                                           = 0x7b393160
	CRC_phone_discardGroupCall                                            = 0x7a777135
	CRC_phone_toggleGroupCallSettings                                     = 0x74bbb43d
	CRC_phone_getGroupCall                                                = 0x041845db
	CRC_phone_getGroupParticipants                                        = 0xc558d8ab
	CRC_phone_checkGroupCall                                              = 0xb59cf977
	CRC_phone_toggleGroupCallRecord                                       = 0xf128c708
	CRC_phone_editGroupCallParticipant                                    = 0xa5273abf
	CRC_phone_editGroupCallTitle                                          = 0x1ca6ac0a
	CRC_phone_getGroupCallJoinAs                                          = 0xef7c213a
	CRC_phone_exportGroupCallInvite                                       = 0xe6aa647f
	CRC_phone_toggleGroupCallStartSubscription                            = 0x219c34e6
	CRC_phone_startScheduledGroupCall                                     = 0x5680e342
	CRC_phone_saveDefaultGroupCallJoinAs                                  = 0x575e1f8c
	CRC_phone_joinGroupCallPresentation                                   = 0xcbea6bc4
	CRC_phone_leaveGroupCallPresentation                                  = 0x1c50d144
	CRC_phone_getGroupCallStreamChannels                                  = 0x1ab21940
	CRC_phone_getGroupCallStreamRTMPURL                                   = 0xdeb3abbf
	CRC_phone_saveCallLog                                                 = 0x41248786
	CRC_langpack_getLangPack                                              = 0xf2f2330a
	CRC_langpack_getStrings                                               = 0xefea3803
	CRC_langpack_getDifference                                            = 0xcd984aa5
	CRC_langpack_getLanguages                                             = 0x42c6978f
	CRC_langpack_getLanguage                                              = 0x6a596502
	CRC_folders_editPeerFolders                                           = 0x6847d0ab
	CRC_stats_getBroadcastStats                                           = 0xab42441a
	CRC_stats_loadAsyncGraph                                              = 0x621d5fa0
	CRC_stats_getMegagroupStats                                           = 0xdcdf8607
	CRC_stats_getMessagePublicForwards                                    = 0x5f150144
	CRC_stats_getMessageStats                                             = 0xb6e0a3f5
	CRC_stats_getStoryStats                                               = 0x374fef40
	CRC_stats_getStoryPublicForwards                                      = 0xa6437ef6
	CRC_stats_getBroadcastRevenueStats                                    = 0x75dfb671
	CRC_stats_getBroadcastRevenueWithdrawalURL                            = 0x2a65ef73
	CRC_stats_getBroadcastRevenueTransactions                             = 0x0069280f
	CRC_chatlists_exportChatlistInvite                                    = 0x8472478e
	CRC_chatlists_deleteExportedInvite                                    = 0x719c5c5e
	CRC_chatlists_editExportedInvite                                      = 0x653db63d
	CRC_chatlists_getExportedInvites                                      = 0xce03da83
	CRC_chatlists_checkChatlistInvite                                     = 0x41c10fff
	CRC_chatlists_joinChatlistInvite                                      = 0xa6b1e39a
	CRC_chatlists_getChatlistUpdates                                      = 0x89419521
	CRC_chatlists_joinChatlistUpdates                                     = 0xe089f8f5
	CRC_chatlists_hideChatlistUpdates                                     = 0x66e486fb
	CRC_chatlists_getLeaveChatlistSuggestions                             = 0xfdbcd714
	CRC_chatlists_leaveChatlist                                           = 0x74fae13a
	CRC_stories_canSendStory                                              = 0xc7dfdfdd
	CRC_stories_sendStory                                                 = 0xe4e6694b
	CRC_stories_editStory                                                 = 0xb583ba46
	CRC_stories_deleteStories                                             = 0xae59db5f
	CRC_stories_togglePinned                                              = 0x9a75a1ef
	CRC_stories_getAllStories                                             = 0xeeb0d625
	CRC_stories_getPinnedStories                                          = 0x5821a5dc
	CRC_stories_getStoriesArchive                                         = 0xb4352016
	CRC_stories_getStoriesByID                                            = 0x5774ca74
	CRC_stories_toggleAllStoriesHidden                                    = 0x7c2557c4
	CRC_stories_readStories                                               = 0xa556dac8
	CRC_stories_incrementStoryViews                                       = 0xb2028afb
	CRC_stories_getStoryViewsList                                         = 0x7ed23c57
	CRC_stories_getStoriesViews                                           = 0x28e16cc8
	CRC_stories_exportStoryLink                                           = 0x7b8def20
	CRC_stories_report                                                    = 0x1923fa8c
	CRC_stories_activateStealthMode                                       = 0x57bbd166
	CRC_stories_sendReaction                                              = 0x7fd736b2
	CRC_stories_getPeerStories                                            = 0x2c4ada50
	CRC_stories_getAllReadPeerStories                                     = 0x9b5ae7f9
	CRC_stories_getPeerMaxIDs                                             = 0x535983c3
	CRC_stories_getChatsToSend                                            = 0xa56a8b60
	CRC_stories_togglePeerStoriesHidden                                   = 0xbd0415c4
	CRC_stories_getStoryReactionsList                                     = 0xb9b2881f
	CRC_stories_togglePinnedToTop                                         = 0x0b297e9b
	CRC_stories_searchPosts                                               = 0x6cea116a
	CRC_premium_getBoostsList                                             = 0x60f67660
	CRC_premium_getMyBoosts                                               = 0x0be77b4a
	CRC_premium_applyBoost                                                = 0x6b7da746
	CRC_premium_getBoostsStatus                                           = 0x042f1f61
	CRC_premium_getUserBoosts                                             = 0x39854d1f
	CRC_smsjobs_isEligibleToJoin                                          = 0x0edc39d0
	CRC_smsjobs_join                                                      = 0xa74ece2d
	CRC_smsjobs_leave                                                     = 0x9898ad73
	CRC_smsjobs_updateSettings                                            = 0x093fa0bf
	CRC_smsjobs_getStatus                                                 = 0x10a698e8
	CRC_smsjobs_getSMSJob                                                 = 0x778d902f
	CRC_smsjobs_finishJob                                                 = 0x4f1ebf24
	CRC_fragment_getCollectibleInfo                                       = 0xbe1e85ba
)

// Constructs ResPQ
type TL_resPQ struct {
	Nonce                       [16]byte
	ServerNonce                 [16]byte
	PQ                          string
	ServerPublicKeyFingerprints []int64
}

// Constructs P_Q_inner_data
type TL_pqInnerData struct {
	PQ          string
	P           string
	Q           string
	Nonce       [16]byte
	ServerNonce [16]byte
	NewNonce    [32]byte
}

// Constructs P_Q_inner_data
type TL_pqInnerDataDC struct {
	PQ          string
	P           string
	Q           string
	Nonce       [16]byte
	ServerNonce [16]byte
	NewNonce    [32]byte
	DC          int32
}

// Constructs P_Q_inner_data
type TL_pqInnerDataTemp struct {
	PQ          string
	P           string
	Q           string
	Nonce       [16]byte
	ServerNonce [16]byte
	NewNonce    [32]byte
	ExpiresIn   int32
}

// Constructs P_Q_inner_data
type TL_pqInnerDataTempDC struct {
	PQ          string
	P           string
	Q           string
	Nonce       [16]byte
	ServerNonce [16]byte
	NewNonce    [32]byte
	DC          int32
	ExpiresIn   int32
}

// Constructs BindAuthKeyInner
type TL_bindAuthKeyInner struct {
	Nonce         int64
	TempAuthKeyID int64
	PermAuthKeyID int64
	TempSessionID int64
	ExpiresAt     int32
}

// Constructs Server_DH_Params
type TL_serverDHParamsFail struct {
	Nonce        [16]byte
	ServerNonce  [16]byte
	NewNonceHash [16]byte
}

// Constructs Server_DH_Params
type TL_serverDHParamsOK struct {
	Nonce           [16]byte
	ServerNonce     [16]byte
	EncryptedAnswer string
}

// Constructs Server_DH_inner_data
type TL_serverDHInnerData struct {
	Nonce       [16]byte
	ServerNonce [16]byte
	G           int32
	DHPrime     string
	GA          string
	ServerTime  int32
}

// Constructs Client_DH_Inner_Data
type TL_clientDHInnerData struct {
	Nonce       [16]byte
	ServerNonce [16]byte
	RetryID     int64
	GB          string
}

// Constructs Set_client_DH_params_answer
type TL_dhGenOK struct {
	Nonce         [16]byte
	ServerNonce   [16]byte
	NewNonceHash1 [16]byte
}

// Constructs Set_client_DH_params_answer
type TL_dhGenRetry struct {
	Nonce         [16]byte
	ServerNonce   [16]byte
	NewNonceHash2 [16]byte
}

// Constructs Set_client_DH_params_answer
type TL_dhGenFail struct {
	Nonce         [16]byte
	ServerNonce   [16]byte
	NewNonceHash3 [16]byte
}

// Constructs DestroyAuthKeyRes
type TL_destroyAuthKeyOK struct {
}

// Constructs DestroyAuthKeyRes
type TL_destroyAuthKeyNone struct {
}

// Constructs DestroyAuthKeyRes
type TL_destroyAuthKeyFail struct {
}

// Returns ResPQ: TL_resPQ
type TL_reqPQ struct {
	Nonce [16]byte
}

// Returns ResPQ: TL_resPQ
type TL_reqPQMulti struct {
	Nonce [16]byte
}

// Returns Server_DH_Params: TL_serverDHParamsFail | TL_serverDHParamsOK
type TL_reqDHParams struct {
	Nonce                [16]byte
	ServerNonce          [16]byte
	P                    string
	Q                    string
	PublicKeyFingerprint int64
	EncryptedData        string
}

// Returns Set_client_DH_params_answer: TL_dhGenOK | TL_dhGenRetry | TL_dhGenFail
type TL_setClientDHParams struct {
	Nonce         [16]byte
	ServerNonce   [16]byte
	EncryptedData string
}

// Returns DestroyAuthKeyRes: TL_destroyAuthKeyOK | TL_destroyAuthKeyNone | TL_destroyAuthKeyFail
type TL_destroyAuthKey struct {
}

// Constructs MsgsAck
type TL_msgsACK struct {
	MsgIDs []int64
}

// Constructs BadMsgNotification
type TL_badMsgNotification struct {
	BadMsgID    int64
	BadMsgSeqno int32
	ErrorCode   int32
}

// Constructs BadMsgNotification
type TL_badServerSalt struct {
	BadMsgID      int64
	BadMsgSeqno   int32
	ErrorCode     int32
	NewServerSalt int64
}

// Constructs MsgsStateReq
type TL_msgsStateReq struct {
	MsgIDs []int64
}

// Constructs MsgsStateInfo
type TL_msgsStateInfo struct {
	ReqMsgID int64
	Info     string
}

// Constructs MsgsAllInfo
type TL_msgsAllInfo struct {
	MsgIDs []int64
	Info   string
}

// Constructs MsgDetailedInfo
type TL_msgDetailedInfo struct {
	MsgID       int64
	AnswerMsgID int64
	Bytes       int32
	Status      int32
}

// Constructs MsgDetailedInfo
type TL_msgNewDetailedInfo struct {
	AnswerMsgID int64
	Bytes       int32
	Status      int32
}

// Constructs MsgResendReq
type TL_msgResendReq struct {
	MsgIDs []int64
}

// Constructs RpcError
type TL_rpcError struct {
	ErrorCode    int32
	ErrorMessage string
}

// Constructs RpcDropAnswer
type TL_rpcAnswerUnknown struct {
}

// Constructs RpcDropAnswer
type TL_rpcAnswerDroppedRunning struct {
}

// Constructs RpcDropAnswer
type TL_rpcAnswerDropped struct {
	MsgID int64
	SeqNo int32
	Bytes int32
}

// Constructs FutureSalt
type TL_futureSalt struct {
	ValidSince int32
	ValidUntil int32
	Salt       int64
}

// Constructs FutureSalts
type TL_futureSalts struct {
	ReqMsgID int64
	Now      int32
	Salts    []TL // future_salt:
}

// Constructs Pong
type TL_pong struct {
	MsgID  int64
	PingID int64
}

// Constructs DestroySessionRes
type TL_destroySessionOK struct {
	SessionID int64
}

// Constructs DestroySessionRes
type TL_destroySessionNone struct {
	SessionID int64
}

// Constructs NewSession
type TL_newSessionCreated struct {
	FirstMsgID int64
	UniqueID   int64
	ServerSalt int64
}

// Constructs HttpWait
type TL_httpWait struct {
	MaxDelay  int32
	WaitAfter int32
	MaxWait   int32
}

// Constructs IpPort
type TL_ipPort struct {
	IPv4 int32
	Port int32
}

// Constructs IpPort
type TL_ipPortSecret struct {
	IPv4   int32
	Port   int32
	Secret []byte
}

// Constructs AccessPointRule
type TL_accessPointRule struct {
	PhonePrefixRules string
	DCID             int32
	IPs              []TL // IpPort: TL_ipPort | TL_ipPortSecret
}

// Constructs help.ConfigSimple
type TL_help_configSimple struct {
	Date    int32
	Expires int32
	Rules   []TL_accessPointRule
}

// Constructs TlsClientHello
type TL_tlsClientHello struct {
	Blocks []TL // TlsBlock: TL_tlsBlockString | TL_tlsBlockRandom | TL_tlsBlockZero | TL_tlsBlockDomain | TL_tlsBlockGrease | TL_tlsBlockPublicKey | TL_tlsBlockScope | TL_tlsBlockPermutation
}

// Constructs TlsBlock
type TL_tlsBlockString struct {
	Data string
}

// Constructs TlsBlock
type TL_tlsBlockRandom struct {
	Length int32
}

// Constructs TlsBlock
type TL_tlsBlockZero struct {
	Length int32
}

// Constructs TlsBlock
type TL_tlsBlockDomain struct {
}

// Constructs TlsBlock
type TL_tlsBlockGrease struct {
	Seed int32
}

// Constructs TlsBlock
type TL_tlsBlockPublicKey struct {
}

// Constructs TlsBlock
type TL_tlsBlockScope struct {
	Entries []TL // TlsBlock: TL_tlsBlockString | TL_tlsBlockRandom | TL_tlsBlockZero | TL_tlsBlockDomain | TL_tlsBlockGrease | TL_tlsBlockPublicKey | TL_tlsBlockScope | TL_tlsBlockPermutation
}

// Constructs TlsBlock
type TL_tlsBlockPermutation struct {
	Entries [][]TL // TlsBlock: TL_tlsBlockString | TL_tlsBlockRandom | TL_tlsBlockZero | TL_tlsBlockDomain | TL_tlsBlockGrease | TL_tlsBlockPublicKey | TL_tlsBlockScope | TL_tlsBlockPermutation
}

// Returns RpcDropAnswer: TL_rpcAnswerUnknown | TL_rpcAnswerDroppedRunning | TL_rpcAnswerDropped
type TL_rpcDropAnswer struct {
	ReqMsgID int64
}

// Returns FutureSalts: TL_futureSalts
type TL_getFutureSalts struct {
	Num int32
}

// Returns Pong: TL_pong
type TL_ping struct {
	PingID int64
}

// Returns Pong: TL_pong
type TL_pingDelayDisconnect struct {
	PingID          int64
	DisconnectDelay int32
}

// Returns DestroySessionRes: TL_destroySessionOK | TL_destroySessionNone
type TL_destroySession struct {
	SessionID int64
}

// Constructs Bool
type TL_boolFalse struct {
}

// Constructs Bool
type TL_boolTrue struct {
}

// Constructs True
type TL_true struct {
}

// Constructs Error
type TL_error struct {
	Code int32
	Text string
}

// Constructs Null
type TL_null struct {
}

// Constructs InputPeer
type TL_inputPeerEmpty struct {
}

// Constructs InputPeer
type TL_inputPeerSelf struct {
}

// Constructs InputPeer
type TL_inputPeerChat struct {
	ChatID int64
}

// Constructs InputPeer
type TL_inputPeerUser struct {
	UserID     int64
	AccessHash int64
}

// Constructs InputPeer
type TL_inputPeerChannel struct {
	ChannelID  int64
	AccessHash int64
}

// Constructs InputPeer
type TL_inputPeerUserFromMessage struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID  int32
	UserID int64
}

// Constructs InputPeer
type TL_inputPeerChannelFromMessage struct {
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID     int32
	ChannelID int64
}

// Constructs InputUser
type TL_inputUserEmpty struct {
}

// Constructs InputUser
type TL_inputUserSelf struct {
}

// Constructs InputUser
type TL_inputUser struct {
	UserID     int64
	AccessHash int64
}

// Constructs InputUser
type TL_inputUserFromMessage struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID  int32
	UserID int64
}

// Constructs InputContact
type TL_inputPhoneContact struct {
	ClientID  int64
	Phone     string
	FirstName string
	LastName  string
}

// Constructs InputFile
type TL_inputFile struct {
	ID          int64
	Parts       int32
	Name        string
	MD5Checksum string
}

// Constructs InputFile
type TL_inputFileBig struct {
	ID    int64
	Parts int32
	Name  string
}

// Constructs InputFile
type TL_inputFileStoryDocument struct {
	ID TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
}

// Constructs InputMedia
type TL_inputMediaEmpty struct {
}

// Constructs InputMedia
type TL_inputMediaUploadedPhoto struct {
	Spoiler    bool
	File       TL     // InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	Stickers   []TL   // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	TTLSeconds *int32 // (optional)
}

// Constructs InputMedia
type TL_inputMediaPhoto struct {
	Spoiler    bool
	ID         TL     // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
	TTLSeconds *int32 // (optional)
}

// Constructs InputMedia
type TL_inputMediaGeoPoint struct {
	GeoPoint TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
}

// Constructs InputMedia
type TL_inputMediaContact struct {
	PhoneNumber string
	FirstName   string
	LastName    string
	Vcard       string
}

// Constructs InputMedia
type TL_inputMediaUploadedDocument struct {
	NosoundVideo bool
	ForceFile    bool
	Spoiler      bool
	File         TL // InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	Thumb        TL // (optional) InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	MIMEType     string
	Attributes   []TL   // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
	Stickers     []TL   // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	TTLSeconds   *int32 // (optional)
}

// Constructs InputMedia
type TL_inputMediaDocument struct {
	Spoiler    bool
	ID         TL      // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	TTLSeconds *int32  // (optional)
	Query      *string // (optional)
}

// Constructs InputMedia
type TL_inputMediaVenue struct {
	GeoPoint  TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Title     string
	Address   string
	Provider  string
	VenueID   string
	VenueType string
}

// Constructs InputMedia
type TL_inputMediaPhotoExternal struct {
	Spoiler    bool
	URL        string
	TTLSeconds *int32 // (optional)
}

// Constructs InputMedia
type TL_inputMediaDocumentExternal struct {
	Spoiler    bool
	URL        string
	TTLSeconds *int32 // (optional)
}

// Constructs InputMedia
type TL_inputMediaGame struct {
	ID TL // InputGame: TL_inputGameID | TL_inputGameShortName
}

// Constructs InputMedia
type TL_inputMediaInvoice struct {
	Title         string
	Description   string
	Photo         *TL_inputWebDocument // (optional)
	Invoice       TL_invoice
	Payload       []byte
	Provider      *string // (optional)
	ProviderData  TL_dataJSON
	StartParam    *string // (optional)
	ExtendedMedia TL      // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
}

// Constructs InputMedia
type TL_inputMediaGeoLive struct {
	Stopped                     bool
	GeoPoint                    TL     // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Heading                     *int32 // (optional)
	Period                      *int32 // (optional)
	ProximityNotificationRadius *int32 // (optional)
}

// Constructs InputMedia
type TL_inputMediaPoll struct {
	Poll             TL_poll
	CorrectAnswers   [][]byte // (optional)
	Solution         *string  // (optional)
	SolutionEntities []TL     // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs InputMedia
type TL_inputMediaDice struct {
	Emoticon string
}

// Constructs InputMedia
type TL_inputMediaStory struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   int32
}

// Constructs InputMedia
type TL_inputMediaWebPage struct {
	ForceLargeMedia bool
	ForceSmallMedia bool
	Optional        bool
	URL             string
}

// Constructs InputMedia
type TL_inputMediaPaidMedia struct {
	StarsAmount   int64
	ExtendedMedia []TL    // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	Payload       *string // (optional)
}

// Constructs InputChatPhoto
type TL_inputChatPhotoEmpty struct {
}

// Constructs InputChatPhoto
type TL_inputChatUploadedPhoto struct {
	File             TL       // (optional) InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	Video            TL       // (optional) InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	VideoStartTS     *float64 // (optional)
	VideoEmojiMarkup TL       // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
}

// Constructs InputChatPhoto
type TL_inputChatPhoto struct {
	ID TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
}

// Constructs InputGeoPoint
type TL_inputGeoPointEmpty struct {
}

// Constructs InputGeoPoint
type TL_inputGeoPoint struct {
	Lat            float64
	Long           float64
	AccuracyRadius *int32 // (optional)
}

// Constructs InputPhoto
type TL_inputPhotoEmpty struct {
}

// Constructs InputPhoto
type TL_inputPhoto struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
}

// Constructs InputFileLocation
type TL_inputFileLocation struct {
	VolumeID      int64
	LocalID       int32
	Secret        int64
	FileReference []byte
}

// Constructs InputFileLocation
type TL_inputEncryptedFileLocation struct {
	ID         int64
	AccessHash int64
}

// Constructs InputFileLocation
type TL_inputDocumentFileLocation struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
	ThumbSize     string
}

// Constructs InputFileLocation
type TL_inputSecureFileLocation struct {
	ID         int64
	AccessHash int64
}

// Constructs InputFileLocation
type TL_inputTakeoutFileLocation struct {
}

// Constructs InputFileLocation
type TL_inputPhotoFileLocation struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
	ThumbSize     string
}

// Constructs InputFileLocation
type TL_inputPhotoLegacyFileLocation struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
	VolumeID      int64
	LocalID       int32
	Secret        int64
}

// Constructs InputFileLocation
type TL_inputPeerPhotoFileLocation struct {
	Big     bool
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	PhotoID int64
}

// Constructs InputFileLocation
type TL_inputStickerSetThumb struct {
	Stickerset   TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	ThumbVersion int32
}

// Constructs InputFileLocation
type TL_inputGroupCallStream struct {
	Call         TL_inputGroupCall
	TimeMS       int64
	Scale        int32
	VideoChannel *int32 // (optional)
	VideoQuality *int32 // (optional)
}

// Constructs Peer
type TL_peerUser struct {
	UserID int64
}

// Constructs Peer
type TL_peerChat struct {
	ChatID int64
}

// Constructs Peer
type TL_peerChannel struct {
	ChannelID int64
}

// Constructs storage.FileType
type TL_storage_fileUnknown struct {
}

// Constructs storage.FileType
type TL_storage_filePartial struct {
}

// Constructs storage.FileType
type TL_storage_fileJPEG struct {
}

// Constructs storage.FileType
type TL_storage_fileGIF struct {
}

// Constructs storage.FileType
type TL_storage_filePNG struct {
}

// Constructs storage.FileType
type TL_storage_filePDF struct {
}

// Constructs storage.FileType
type TL_storage_fileMP3 struct {
}

// Constructs storage.FileType
type TL_storage_fileMOV struct {
}

// Constructs storage.FileType
type TL_storage_fileMP4 struct {
}

// Constructs storage.FileType
type TL_storage_fileWEBP struct {
}

// Constructs User
type TL_userEmpty struct {
	ID int64
}

// Constructs User
type TL_user struct {
	Self                  bool
	Contact               bool
	MutualContact         bool
	Deleted               bool
	Bot                   bool
	BotChatHistory        bool
	BotNochats            bool
	Verified              bool
	Restricted            bool
	Min                   bool
	BotInlineGeo          bool
	Support               bool
	Scam                  bool
	ApplyMinPhoto         bool
	Fake                  bool
	BotAttachMenu         bool
	Premium               bool
	AttachMenuEnabled     bool
	BotCanEdit            bool
	CloseFriend           bool
	StoriesHidden         bool
	StoriesUnavailable    bool
	ContactRequirePremium bool
	BotBusiness           bool
	BotHasMainApp         bool
	ID                    int64
	AccessHash            *int64                 // (optional)
	FirstName             *string                // (optional)
	LastName              *string                // (optional)
	Username              *string                // (optional)
	Phone                 *string                // (optional)
	Photo                 TL                     // (optional) UserProfilePhoto: TL_userProfilePhotoEmpty | TL_userProfilePhoto
	Status                TL                     // (optional) UserStatus: TL_userStatusEmpty | TL_userStatusOnline | TL_userStatusOffline | TL_userStatusRecently | TL_userStatusLastWeek | TL_userStatusLastMonth
	BotInfoVersion        *int32                 // (optional)
	RestrictionReason     []TL_restrictionReason // (optional)
	BotInlinePlaceholder  *string                // (optional)
	LangCode              *string                // (optional)
	EmojiStatus           TL                     // (optional) EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
	Usernames             []TL_username          // (optional)
	StoriesMaxID          *int32                 // (optional)
	Color                 *TL_peerColor          // (optional)
	ProfileColor          *TL_peerColor          // (optional)
	BotActiveUsers        *int32                 // (optional)
}

// Constructs UserProfilePhoto
type TL_userProfilePhotoEmpty struct {
}

// Constructs UserProfilePhoto
type TL_userProfilePhoto struct {
	HasVideo      bool
	Personal      bool
	PhotoID       int64
	StrippedThumb []byte // (optional)
	DCID          int32
}

// Constructs UserStatus
type TL_userStatusEmpty struct {
}

// Constructs UserStatus
type TL_userStatusOnline struct {
	Expires int32
}

// Constructs UserStatus
type TL_userStatusOffline struct {
	WasOnline int32
}

// Constructs UserStatus
type TL_userStatusRecently struct {
	ByMe bool
}

// Constructs UserStatus
type TL_userStatusLastWeek struct {
	ByMe bool
}

// Constructs UserStatus
type TL_userStatusLastMonth struct {
	ByMe bool
}

// Constructs Chat
type TL_chatEmpty struct {
	ID int64
}

// Constructs Chat
type TL_chat struct {
	Creator             bool
	Left                bool
	Deactivated         bool
	CallActive          bool
	CallNotEmpty        bool
	Noforwards          bool
	ID                  int64
	Title               string
	Photo               TL // ChatPhoto: TL_chatPhotoEmpty | TL_chatPhoto
	ParticipantsCount   int32
	Date                int32
	Version             int32
	MigratedTo          TL                   // (optional) InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	AdminRights         *TL_chatAdminRights  // (optional)
	DefaultBannedRights *TL_chatBannedRights // (optional)
}

// Constructs Chat
type TL_chatForbidden struct {
	ID    int64
	Title string
}

// Constructs Chat
type TL_channel struct {
	Creator               bool
	Left                  bool
	Broadcast             bool
	Verified              bool
	Megagroup             bool
	Restricted            bool
	Signatures            bool
	Min                   bool
	Scam                  bool
	HasLink               bool
	HasGeo                bool
	SlowmodeEnabled       bool
	CallActive            bool
	CallNotEmpty          bool
	Fake                  bool
	Gigagroup             bool
	Noforwards            bool
	JoinToSend            bool
	JoinRequest           bool
	Forum                 bool
	StoriesHidden         bool
	StoriesHiddenMin      bool
	StoriesUnavailable    bool
	SignatureProfiles     bool
	ID                    int64
	AccessHash            *int64 // (optional)
	Title                 string
	Username              *string // (optional)
	Photo                 TL      // ChatPhoto: TL_chatPhotoEmpty | TL_chatPhoto
	Date                  int32
	RestrictionReason     []TL_restrictionReason // (optional)
	AdminRights           *TL_chatAdminRights    // (optional)
	BannedRights          *TL_chatBannedRights   // (optional)
	DefaultBannedRights   *TL_chatBannedRights   // (optional)
	ParticipantsCount     *int32                 // (optional)
	Usernames             []TL_username          // (optional)
	StoriesMaxID          *int32                 // (optional)
	Color                 *TL_peerColor          // (optional)
	ProfileColor          *TL_peerColor          // (optional)
	EmojiStatus           TL                     // (optional) EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
	Level                 *int32                 // (optional)
	SubscriptionUntilDate *int32                 // (optional)
}

// Constructs Chat
type TL_channelForbidden struct {
	Broadcast  bool
	Megagroup  bool
	ID         int64
	AccessHash int64
	Title      string
	UntilDate  *int32 // (optional)
}

// Constructs ChatFull
type TL_chatFull struct {
	CanSetUsername         bool
	HasScheduled           bool
	TranslationsDisabled   bool
	ID                     int64
	About                  string
	Participants           TL // ChatParticipants: TL_chatParticipantsForbidden | TL_chatParticipants
	ChatPhoto              TL // (optional) Photo: TL_photoEmpty | TL_photo
	NotifySettings         TL_peerNotifySettings
	ExportedInvite         TL                 // (optional) ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	BotInfo                []TL_botInfo       // (optional)
	PinnedMsgID            *int32             // (optional)
	FolderID               *int32             // (optional)
	Call                   *TL_inputGroupCall // (optional)
	TTLPeriod              *int32             // (optional)
	GroupcallDefaultJoinAs TL                 // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ThemeEmoticon          *string            // (optional)
	RequestsPending        *int32             // (optional)
	RecentRequesters       []int64            // (optional)
	AvailableReactions     TL                 // (optional) ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
	ReactionsLimit         *int32             // (optional)
}

// Constructs ChatFull
type TL_channelFull struct {
	CanViewParticipants    bool
	CanSetUsername         bool
	CanSetStickers         bool
	HiddenPrehistory       bool
	CanSetLocation         bool
	HasScheduled           bool
	CanViewStats           bool
	Blocked                bool
	CanDeleteChannel       bool
	Antispam               bool
	ParticipantsHidden     bool
	TranslationsDisabled   bool
	StoriesPinnedAvailable bool
	ViewForumAsMessages    bool
	RestrictedSponsored    bool
	CanViewRevenue         bool
	PaidMediaAllowed       bool
	CanViewStarsRevenue    bool
	PaidReactionsAvailable bool
	ID                     int64
	About                  string
	ParticipantsCount      *int32 // (optional)
	AdminsCount            *int32 // (optional)
	KickedCount            *int32 // (optional)
	BannedCount            *int32 // (optional)
	OnlineCount            *int32 // (optional)
	ReadInboxMaxID         int32
	ReadOutboxMaxID        int32
	UnreadCount            int32
	ChatPhoto              TL // Photo: TL_photoEmpty | TL_photo
	NotifySettings         TL_peerNotifySettings
	ExportedInvite         TL // (optional) ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	BotInfo                []TL_botInfo
	MigratedFromChatID     *int64         // (optional)
	MigratedFromMaxID      *int32         // (optional)
	PinnedMsgID            *int32         // (optional)
	Stickerset             *TL_stickerSet // (optional)
	AvailableMinID         *int32         // (optional)
	FolderID               *int32         // (optional)
	LinkedChatID           *int64         // (optional)
	Location               TL             // (optional) ChannelLocation: TL_channelLocationEmpty | TL_channelLocation
	SlowmodeSeconds        *int32         // (optional)
	SlowmodeNextSendDate   *int32         // (optional)
	StatsDC                *int32         // (optional)
	PTS                    int32
	Call                   *TL_inputGroupCall // (optional)
	TTLPeriod              *int32             // (optional)
	PendingSuggestions     []string           // (optional)
	GroupcallDefaultJoinAs TL                 // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ThemeEmoticon          *string            // (optional)
	RequestsPending        *int32             // (optional)
	RecentRequesters       []int64            // (optional)
	DefaultSendAs          TL                 // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	AvailableReactions     TL                 // (optional) ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
	ReactionsLimit         *int32             // (optional)
	Stories                *TL_peerStories    // (optional)
	Wallpaper              TL                 // (optional) WallPaper: TL_wallPaper | TL_wallPaperNoFile
	BoostsApplied          *int32             // (optional)
	BoostsUnrestrict       *int32             // (optional)
	Emojiset               *TL_stickerSet     // (optional)
}

// Constructs ChatParticipant
type TL_chatParticipant struct {
	UserID    int64
	InviterID int64
	Date      int32
}

// Constructs ChatParticipant
type TL_chatParticipantCreator struct {
	UserID int64
}

// Constructs ChatParticipant
type TL_chatParticipantAdmin struct {
	UserID    int64
	InviterID int64
	Date      int32
}

// Constructs ChatParticipants
type TL_chatParticipantsForbidden struct {
	ChatID          int64
	SelfParticipant TL // (optional) ChatParticipant: TL_chatParticipant | TL_chatParticipantCreator | TL_chatParticipantAdmin
}

// Constructs ChatParticipants
type TL_chatParticipants struct {
	ChatID       int64
	Participants []TL // ChatParticipant: TL_chatParticipant | TL_chatParticipantCreator | TL_chatParticipantAdmin
	Version      int32
}

// Constructs ChatPhoto
type TL_chatPhotoEmpty struct {
}

// Constructs ChatPhoto
type TL_chatPhoto struct {
	HasVideo      bool
	PhotoID       int64
	StrippedThumb []byte // (optional)
	DCID          int32
}

// Constructs Message
type TL_messageEmpty struct {
	ID     int32
	PeerID TL // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs Message
type TL_message struct {
	Out                  bool
	Mentioned            bool
	MediaUnread          bool
	Silent               bool
	Post                 bool
	FromScheduled        bool
	Legacy               bool
	EditHide             bool
	Pinned               bool
	Noforwards           bool
	InvertMedia          bool
	Offline              bool
	ID                   int32
	FromID               TL                   // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	FromBoostsApplied    *int32               // (optional)
	PeerID               TL                   // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	SavedPeerID          TL                   // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	FwdFrom              *TL_messageFwdHeader // (optional)
	ViaBotID             *int64               // (optional)
	ViaBusinessBotID     *int64               // (optional)
	ReplyTo              TL                   // (optional) MessageReplyHeader: TL_messageReplyHeader | TL_messageReplyStoryHeader
	Date                 int32
	Message              string
	Media                TL                     // (optional) MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
	ReplyMarkup          TL                     // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities             []TL                   // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Views                *int32                 // (optional)
	Forwards             *int32                 // (optional)
	Replies              *TL_messageReplies     // (optional)
	EditDate             *int32                 // (optional)
	PostAuthor           *string                // (optional)
	GroupedID            *int64                 // (optional)
	Reactions            *TL_messageReactions   // (optional)
	RestrictionReason    []TL_restrictionReason // (optional)
	TTLPeriod            *int32                 // (optional)
	QuickReplyShortcutID *int32                 // (optional)
	Effect               *int64                 // (optional)
	Factcheck            *TL_factCheck          // (optional)
}

// Constructs Message
type TL_messageService struct {
	Out         bool
	Mentioned   bool
	MediaUnread bool
	Silent      bool
	Post        bool
	Legacy      bool
	ID          int32
	FromID      TL // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	PeerID      TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ReplyTo     TL // (optional) MessageReplyHeader: TL_messageReplyHeader | TL_messageReplyStoryHeader
	Date        int32
	Action      TL     // MessageAction: TL_messageActionEmpty | TL_messageActionChatCreate | TL_messageActionChatEditTitle | TL_messageActionChatEditPhoto | TL_messageActionChatDeletePhoto | TL_messageActionChatAddUser | TL_messageActionChatDeleteUser | TL_messageActionChatJoinedByLink | TL_messageActionChannelCreate | TL_messageActionChatMigrateTo | TL_messageActionChannelMigrateFrom | TL_messageActionPINMessage | TL_messageActionHistoryClear | TL_messageActionGameScore | TL_messageActionPaymentSentMe | TL_messageActionPaymentSent | TL_messageActionPhoneCall | TL_messageActionScreenshotTaken | TL_messageActionCustomAction | TL_messageActionBotAllowed | TL_messageActionSecureValuesSentMe | TL_messageActionSecureValuesSent | TL_messageActionContactSignUp | TL_messageActionGeoProximityReached | TL_messageActionGroupCall | TL_messageActionInviteToGroupCall | TL_messageActionSetMessagesTTL | TL_messageActionGroupCallScheduled | TL_messageActionSetChatTheme | TL_messageActionChatJoinedByRequest | TL_messageActionWebViewDataSentMe | TL_messageActionWebViewDataSent | TL_messageActionGiftPremium | TL_messageActionTopicCreate | TL_messageActionTopicEdit | TL_messageActionSuggestProfilePhoto | TL_messageActionRequestedPeer | TL_messageActionSetChatWallPaper | TL_messageActionGiftCode | TL_messageActionGiveawayLaunch | TL_messageActionGiveawayResults | TL_messageActionBoostApply | TL_messageActionRequestedPeerSentMe | TL_messageActionPaymentRefunded | TL_messageActionGiftStars | TL_messageActionPrizeStars
	TTLPeriod   *int32 // (optional)
}

// Constructs MessageMedia
type TL_messageMediaEmpty struct {
}

// Constructs MessageMedia
type TL_messageMediaPhoto struct {
	Spoiler    bool
	Photo      TL     // (optional) Photo: TL_photoEmpty | TL_photo
	TTLSeconds *int32 // (optional)
}

// Constructs MessageMedia
type TL_messageMediaGeo struct {
	Geo TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
}

// Constructs MessageMedia
type TL_messageMediaContact struct {
	PhoneNumber string
	FirstName   string
	LastName    string
	Vcard       string
	UserID      int64
}

// Constructs MessageMedia
type TL_messageMediaUnsupported struct {
}

// Constructs MessageMedia
type TL_messageMediaDocument struct {
	Nopremium   bool
	Spoiler     bool
	Video       bool
	Round       bool
	Voice       bool
	Document    TL     // (optional) Document: TL_documentEmpty | TL_document
	AltDocument TL     // (optional) Document: TL_documentEmpty | TL_document
	TTLSeconds  *int32 // (optional)
}

// Constructs MessageMedia
type TL_messageMediaWebPage struct {
	ForceLargeMedia bool
	ForceSmallMedia bool
	Manual          bool
	Safe            bool
	Webpage         TL // WebPage: TL_webPageEmpty | TL_webPagePending | TL_webPage | TL_webPageNotModified
}

// Constructs MessageMedia
type TL_messageMediaVenue struct {
	Geo       TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Title     string
	Address   string
	Provider  string
	VenueID   string
	VenueType string
}

// Constructs MessageMedia
type TL_messageMediaGame struct {
	Game TL_game
}

// Constructs MessageMedia
type TL_messageMediaInvoice struct {
	ShippingAddressRequested bool
	Test                     bool
	Title                    string
	Description              string
	Photo                    TL     // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	ReceiptMsgID             *int32 // (optional)
	Currency                 string
	TotalAmount              int64
	StartParam               string
	ExtendedMedia            TL // (optional) MessageExtendedMedia: TL_messageExtendedMediaPreview | TL_messageExtendedMedia
}

// Constructs MessageMedia
type TL_messageMediaGeoLive struct {
	Geo                         TL     // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Heading                     *int32 // (optional)
	Period                      int32
	ProximityNotificationRadius *int32 // (optional)
}

// Constructs MessageMedia
type TL_messageMediaPoll struct {
	Poll    TL_poll
	Results TL_pollResults
}

// Constructs MessageMedia
type TL_messageMediaDice struct {
	Value    int32
	Emoticon string
}

// Constructs MessageMedia
type TL_messageMediaStory struct {
	ViaMention bool
	Peer       TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ID         int32
	Story      TL // (optional) StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs MessageMedia
type TL_messageMediaGiveaway struct {
	OnlyNewSubscribers bool
	WinnersAreVisible  bool
	Channels           []int64
	CountriesISO2      []string // (optional)
	PrizeDescription   *string  // (optional)
	Quantity           int32
	Months             *int32 // (optional)
	Stars              *int64 // (optional)
	UntilDate          int32
}

// Constructs MessageMedia
type TL_messageMediaGiveawayResults struct {
	OnlyNewSubscribers   bool
	Refunded             bool
	ChannelID            int64
	AdditionalPeersCount *int32 // (optional)
	LaunchMsgID          int32
	WinnersCount         int32
	UnclaimedCount       int32
	Winners              []int64
	Months               *int32  // (optional)
	Stars                *int64  // (optional)
	PrizeDescription     *string // (optional)
	UntilDate            int32
}

// Constructs MessageMedia
type TL_messageMediaPaidMedia struct {
	StarsAmount   int64
	ExtendedMedia []TL // MessageExtendedMedia: TL_messageExtendedMediaPreview | TL_messageExtendedMedia
}

// Constructs MessageAction
type TL_messageActionEmpty struct {
}

// Constructs MessageAction
type TL_messageActionChatCreate struct {
	Title string
	Users []int64
}

// Constructs MessageAction
type TL_messageActionChatEditTitle struct {
	Title string
}

// Constructs MessageAction
type TL_messageActionChatEditPhoto struct {
	Photo TL // Photo: TL_photoEmpty | TL_photo
}

// Constructs MessageAction
type TL_messageActionChatDeletePhoto struct {
}

// Constructs MessageAction
type TL_messageActionChatAddUser struct {
	Users []int64
}

// Constructs MessageAction
type TL_messageActionChatDeleteUser struct {
	UserID int64
}

// Constructs MessageAction
type TL_messageActionChatJoinedByLink struct {
	InviterID int64
}

// Constructs MessageAction
type TL_messageActionChannelCreate struct {
	Title string
}

// Constructs MessageAction
type TL_messageActionChatMigrateTo struct {
	ChannelID int64
}

// Constructs MessageAction
type TL_messageActionChannelMigrateFrom struct {
	Title  string
	ChatID int64
}

// Constructs MessageAction
type TL_messageActionPINMessage struct {
}

// Constructs MessageAction
type TL_messageActionHistoryClear struct {
}

// Constructs MessageAction
type TL_messageActionGameScore struct {
	GameID int64
	Score  int32
}

// Constructs MessageAction
type TL_messageActionPaymentSentMe struct {
	RecurringInit    bool
	RecurringUsed    bool
	Currency         string
	TotalAmount      int64
	Payload          []byte
	Info             *TL_paymentRequestedInfo // (optional)
	ShippingOptionID *string                  // (optional)
	Charge           TL_paymentCharge
}

// Constructs MessageAction
type TL_messageActionPaymentSent struct {
	RecurringInit bool
	RecurringUsed bool
	Currency      string
	TotalAmount   int64
	InvoiceSlug   *string // (optional)
}

// Constructs MessageAction
type TL_messageActionPhoneCall struct {
	Video    bool
	CallID   int64
	Reason   TL     // (optional) PhoneCallDiscardReason: TL_phoneCallDiscardReasonMissed | TL_phoneCallDiscardReasonDisconnect | TL_phoneCallDiscardReasonHangup | TL_phoneCallDiscardReasonBusy
	Duration *int32 // (optional)
}

// Constructs MessageAction
type TL_messageActionScreenshotTaken struct {
}

// Constructs MessageAction
type TL_messageActionCustomAction struct {
	Message string
}

// Constructs MessageAction
type TL_messageActionBotAllowed struct {
	AttachMenu  bool
	FromRequest bool
	Domain      *string // (optional)
	App         TL      // (optional) BotApp: TL_botAppNotModified | TL_botApp
}

// Constructs MessageAction
type TL_messageActionSecureValuesSentMe struct {
	Values      []TL_secureValue
	Credentials TL_secureCredentialsEncrypted
}

// Constructs MessageAction
type TL_messageActionSecureValuesSent struct {
	Types []TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
}

// Constructs MessageAction
type TL_messageActionContactSignUp struct {
}

// Constructs MessageAction
type TL_messageActionGeoProximityReached struct {
	FromID   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ToID     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Distance int32
}

// Constructs MessageAction
type TL_messageActionGroupCall struct {
	Call     TL_inputGroupCall
	Duration *int32 // (optional)
}

// Constructs MessageAction
type TL_messageActionInviteToGroupCall struct {
	Call  TL_inputGroupCall
	Users []int64
}

// Constructs MessageAction
type TL_messageActionSetMessagesTTL struct {
	Period          int32
	AutoSettingFrom *int64 // (optional)
}

// Constructs MessageAction
type TL_messageActionGroupCallScheduled struct {
	Call         TL_inputGroupCall
	ScheduleDate int32
}

// Constructs MessageAction
type TL_messageActionSetChatTheme struct {
	Emoticon string
}

// Constructs MessageAction
type TL_messageActionChatJoinedByRequest struct {
}

// Constructs MessageAction
type TL_messageActionWebViewDataSentMe struct {
	Text string
	Data string
}

// Constructs MessageAction
type TL_messageActionWebViewDataSent struct {
	Text string
}

// Constructs MessageAction
type TL_messageActionGiftPremium struct {
	Currency       string
	Amount         int64
	Months         int32
	CryptoCurrency *string // (optional)
	CryptoAmount   *int64  // (optional)
}

// Constructs MessageAction
type TL_messageActionTopicCreate struct {
	Title       string
	IconColor   int32
	IconEmojiID *int64 // (optional)
}

// Constructs MessageAction
type TL_messageActionTopicEdit struct {
	Title       *string // (optional)
	IconEmojiID *int64  // (optional)
	Closed      *bool   // (optional)
	Hidden      *bool   // (optional)
}

// Constructs MessageAction
type TL_messageActionSuggestProfilePhoto struct {
	Photo TL // Photo: TL_photoEmpty | TL_photo
}

// Constructs MessageAction
type TL_messageActionRequestedPeer struct {
	ButtonID int32
	Peers    []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs MessageAction
type TL_messageActionSetChatWallPaper struct {
	Same      bool
	ForBoth   bool
	Wallpaper TL // WallPaper: TL_wallPaper | TL_wallPaperNoFile
}

// Constructs MessageAction
type TL_messageActionGiftCode struct {
	ViaGiveaway    bool
	Unclaimed      bool
	BoostPeer      TL // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Months         int32
	Slug           string
	Currency       *string // (optional)
	Amount         *int64  // (optional)
	CryptoCurrency *string // (optional)
	CryptoAmount   *int64  // (optional)
}

// Constructs MessageAction
type TL_messageActionGiveawayLaunch struct {
	Stars *int64 // (optional)
}

// Constructs MessageAction
type TL_messageActionGiveawayResults struct {
	Stars          bool
	WinnersCount   int32
	UnclaimedCount int32
}

// Constructs MessageAction
type TL_messageActionBoostApply struct {
	Boosts int32
}

// Constructs MessageAction
type TL_messageActionRequestedPeerSentMe struct {
	ButtonID int32
	Peers    []TL // RequestedPeer: TL_requestedPeerUser | TL_requestedPeerChat | TL_requestedPeerChannel
}

// Constructs MessageAction
type TL_messageActionPaymentRefunded struct {
	Peer        TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Currency    string
	TotalAmount int64
	Payload     []byte // (optional)
	Charge      TL_paymentCharge
}

// Constructs MessageAction
type TL_messageActionGiftStars struct {
	Currency       string
	Amount         int64
	Stars          int64
	CryptoCurrency *string // (optional)
	CryptoAmount   *int64  // (optional)
	TransactionID  *string // (optional)
}

// Constructs MessageAction
type TL_messageActionPrizeStars struct {
	Unclaimed     bool
	Stars         int64
	TransactionID string
	BoostPeer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	GiveawayMsgID int32
}

// Constructs Dialog
type TL_dialog struct {
	Pinned               bool
	UnreadMark           bool
	ViewForumAsMessages  bool
	Peer                 TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TopMessage           int32
	ReadInboxMaxID       int32
	ReadOutboxMaxID      int32
	UnreadCount          int32
	UnreadMentionsCount  int32
	UnreadReactionsCount int32
	NotifySettings       TL_peerNotifySettings
	PTS                  *int32 // (optional)
	Draft                TL     // (optional) DraftMessage: TL_draftMessageEmpty | TL_draftMessage
	FolderID             *int32 // (optional)
	TTLPeriod            *int32 // (optional)
}

// Constructs Dialog
type TL_dialogFolder struct {
	Pinned                     bool
	Folder                     TL_folder
	Peer                       TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TopMessage                 int32
	UnreadMutedPeersCount      int32
	UnreadUnmutedPeersCount    int32
	UnreadMutedMessagesCount   int32
	UnreadUnmutedMessagesCount int32
}

// Constructs Photo
type TL_photoEmpty struct {
	ID int64
}

// Constructs Photo
type TL_photo struct {
	HasStickers   bool
	ID            int64
	AccessHash    int64
	FileReference []byte
	Date          int32
	Sizes         []TL // PhotoSize: TL_photoSizeEmpty | TL_photoSize | TL_photoCachedSize | TL_photoStrippedSize | TL_photoSizeProgressive | TL_photoPathSize
	VideoSizes    []TL // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
	DCID          int32
}

// Constructs PhotoSize
type TL_photoSizeEmpty struct {
	Type string
}

// Constructs PhotoSize
type TL_photoSize struct {
	Type string
	W    int32
	H    int32
	Size int32
}

// Constructs PhotoSize
type TL_photoCachedSize struct {
	Type  string
	W     int32
	H     int32
	Bytes []byte
}

// Constructs PhotoSize
type TL_photoStrippedSize struct {
	Type  string
	Bytes []byte
}

// Constructs PhotoSize
type TL_photoSizeProgressive struct {
	Type  string
	W     int32
	H     int32
	Sizes []int32
}

// Constructs PhotoSize
type TL_photoPathSize struct {
	Type  string
	Bytes []byte
}

// Constructs GeoPoint
type TL_geoPointEmpty struct {
}

// Constructs GeoPoint
type TL_geoPoint struct {
	Long           float64
	Lat            float64
	AccessHash     int64
	AccuracyRadius *int32 // (optional)
}

// Constructs auth.SentCode
type TL_auth_sentCode struct {
	Type          TL // auth.SentCodeType: TL_auth_sentCodeTypeApp | TL_auth_sentCodeTypeSMS | TL_auth_sentCodeTypeCall | TL_auth_sentCodeTypeFlashCall | TL_auth_sentCodeTypeMissedCall | TL_auth_sentCodeTypeEmailCode | TL_auth_sentCodeTypeSetUpEmailRequired | TL_auth_sentCodeTypeFragmentSMS | TL_auth_sentCodeTypeFirebaseSMS | TL_auth_sentCodeTypeSMSWord | TL_auth_sentCodeTypeSMSPhrase
	PhoneCodeHash string
	NextType      TL     // (optional) auth.CodeType: TL_auth_codeTypeSMS | TL_auth_codeTypeCall | TL_auth_codeTypeFlashCall | TL_auth_codeTypeMissedCall | TL_auth_codeTypeFragmentSMS
	Timeout       *int32 // (optional)
}

// Constructs auth.SentCode
type TL_auth_sentCodeSuccess struct {
	Authorization TL // auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
}

// Constructs auth.Authorization
type TL_auth_authorization struct {
	SetupPasswordRequired bool
	OtherwiseReloginDays  *int32 // (optional)
	TmpSessions           *int32 // (optional)
	FutureAuthToken       []byte // (optional)
	User                  TL     // User: TL_userEmpty | TL_user
}

// Constructs auth.Authorization
type TL_auth_authorizationSignUpRequired struct {
	TermsOfService *TL_help_termsOfService // (optional)
}

// Constructs auth.ExportedAuthorization
type TL_auth_exportedAuthorization struct {
	ID    int64
	Bytes []byte
}

// Constructs InputNotifyPeer
type TL_inputNotifyPeer struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs InputNotifyPeer
type TL_inputNotifyUsers struct {
}

// Constructs InputNotifyPeer
type TL_inputNotifyChats struct {
}

// Constructs InputNotifyPeer
type TL_inputNotifyBroadcasts struct {
}

// Constructs InputNotifyPeer
type TL_inputNotifyForumTopic struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID int32
}

// Constructs InputPeerNotifySettings
type TL_inputPeerNotifySettings struct {
	ShowPreviews      *bool  // (optional)
	Silent            *bool  // (optional)
	MuteUntil         *int32 // (optional)
	Sound             TL     // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	StoriesMuted      *bool  // (optional)
	StoriesHideSender *bool  // (optional)
	StoriesSound      TL     // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
}

// Constructs PeerNotifySettings
type TL_peerNotifySettings struct {
	ShowPreviews        *bool  // (optional)
	Silent              *bool  // (optional)
	MuteUntil           *int32 // (optional)
	IOSSound            TL     // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	AndroidSound        TL     // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	OtherSound          TL     // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	StoriesMuted        *bool  // (optional)
	StoriesHideSender   *bool  // (optional)
	StoriesIOSSound     TL     // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	StoriesAndroidSound TL     // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	StoriesOtherSound   TL     // (optional) NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
}

// Constructs PeerSettings
type TL_peerSettings struct {
	ReportSpam            bool
	AddContact            bool
	BlockContact          bool
	ShareContact          bool
	NeedContactsException bool
	ReportGeo             bool
	Autoarchived          bool
	InviteMembers         bool
	RequestChatBroadcast  bool
	BusinessBotPaused     bool
	BusinessBotCanReply   bool
	GeoDistance           *int32  // (optional)
	RequestChatTitle      *string // (optional)
	RequestChatDate       *int32  // (optional)
	BusinessBotID         *int64  // (optional)
	BusinessBotManageURL  *string // (optional)
}

// Constructs WallPaper
type TL_wallPaper struct {
	ID         int64
	Creator    bool
	Default    bool
	Pattern    bool
	Dark       bool
	AccessHash int64
	Slug       string
	Document   TL                    // Document: TL_documentEmpty | TL_document
	Settings   *TL_wallPaperSettings // (optional)
}

// Constructs WallPaper
type TL_wallPaperNoFile struct {
	ID       int64
	Default  bool
	Dark     bool
	Settings *TL_wallPaperSettings // (optional)
}

// Constructs ReportReason
type TL_inputReportReasonSpam struct {
}

// Constructs ReportReason
type TL_inputReportReasonViolence struct {
}

// Constructs ReportReason
type TL_inputReportReasonPornography struct {
}

// Constructs ReportReason
type TL_inputReportReasonChildAbuse struct {
}

// Constructs ReportReason
type TL_inputReportReasonOther struct {
}

// Constructs ReportReason
type TL_inputReportReasonCopyright struct {
}

// Constructs ReportReason
type TL_inputReportReasonGeoIrrelevant struct {
}

// Constructs ReportReason
type TL_inputReportReasonFake struct {
}

// Constructs ReportReason
type TL_inputReportReasonIllegalDrugs struct {
}

// Constructs ReportReason
type TL_inputReportReasonPersonalDetails struct {
}

// Constructs UserFull
type TL_userFull struct {
	Blocked                 bool
	PhoneCallsAvailable     bool
	PhoneCallsPrivate       bool
	CanPINMessage           bool
	HasScheduled            bool
	VideoCallsAvailable     bool
	VoiceMessagesForbidden  bool
	TranslationsDisabled    bool
	StoriesPinnedAvailable  bool
	BlockedMyStoriesFrom    bool
	WallpaperOverridden     bool
	ContactRequirePremium   bool
	ReadDatesPrivate        bool
	SponsoredEnabled        bool
	ID                      int64
	About                   *string // (optional)
	Settings                TL_peerSettings
	PersonalPhoto           TL // (optional) Photo: TL_photoEmpty | TL_photo
	ProfilePhoto            TL // (optional) Photo: TL_photoEmpty | TL_photo
	FallbackPhoto           TL // (optional) Photo: TL_photoEmpty | TL_photo
	NotifySettings          TL_peerNotifySettings
	BotInfo                 *TL_botInfo // (optional)
	PinnedMsgID             *int32      // (optional)
	CommonChatsCount        int32
	FolderID                *int32                      // (optional)
	TTLPeriod               *int32                      // (optional)
	ThemeEmoticon           *string                     // (optional)
	PrivateForwardName      *string                     // (optional)
	BotGroupAdminRights     *TL_chatAdminRights         // (optional)
	BotBroadcastAdminRights *TL_chatAdminRights         // (optional)
	PremiumGifts            []TL_premiumGiftOption      // (optional)
	Wallpaper               TL                          // (optional) WallPaper: TL_wallPaper | TL_wallPaperNoFile
	Stories                 *TL_peerStories             // (optional)
	BusinessWorkHours       *TL_businessWorkHours       // (optional)
	BusinessLocation        *TL_businessLocation        // (optional)
	BusinessGreetingMessage *TL_businessGreetingMessage // (optional)
	BusinessAwayMessage     *TL_businessAwayMessage     // (optional)
	BusinessIntro           *TL_businessIntro           // (optional)
	Birthday                *TL_birthday                // (optional)
	PersonalChannelID       *int64                      // (optional)
	PersonalChannelMessage  *int32                      // (optional)
}

// Constructs Contact
type TL_contact struct {
	UserID int64
	Mutual bool
}

// Constructs ImportedContact
type TL_importedContact struct {
	UserID   int64
	ClientID int64
}

// Constructs ContactStatus
type TL_contactStatus struct {
	UserID int64
	Status TL // UserStatus: TL_userStatusEmpty | TL_userStatusOnline | TL_userStatusOffline | TL_userStatusRecently | TL_userStatusLastWeek | TL_userStatusLastMonth
}

// Constructs contacts.Contacts
type TL_contacts_contactsNotModified struct {
}

// Constructs contacts.Contacts
type TL_contacts_contacts struct {
	Contacts   []TL_contact
	SavedCount int32
	Users      []TL // User: TL_userEmpty | TL_user
}

// Constructs contacts.ImportedContacts
type TL_contacts_importedContacts struct {
	Imported       []TL_importedContact
	PopularInvites []TL_popularContact
	RetryContacts  []int64
	Users          []TL // User: TL_userEmpty | TL_user
}

// Constructs contacts.Blocked
type TL_contacts_blocked struct {
	Blocked []TL_peerBlocked
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs contacts.Blocked
type TL_contacts_blockedSlice struct {
	Count   int32
	Blocked []TL_peerBlocked
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.Dialogs
type TL_messages_dialogs struct {
	Dialogs  []TL // Dialog: TL_dialog | TL_dialogFolder
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.Dialogs
type TL_messages_dialogsSlice struct {
	Count    int32
	Dialogs  []TL // Dialog: TL_dialog | TL_dialogFolder
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.Dialogs
type TL_messages_dialogsNotModified struct {
	Count int32
}

// Constructs messages.Messages
type TL_messages_messages struct {
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.Messages
type TL_messages_messagesSlice struct {
	Inexact        bool
	Count          int32
	NextRate       *int32 // (optional)
	OffsetIDOffset *int32 // (optional)
	Messages       []TL   // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats          []TL   // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users          []TL   // User: TL_userEmpty | TL_user
}

// Constructs messages.Messages
type TL_messages_channelMessages struct {
	Inexact        bool
	PTS            int32
	Count          int32
	OffsetIDOffset *int32 // (optional)
	Messages       []TL   // Message: TL_messageEmpty | TL_message | TL_messageService
	Topics         []TL   // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
	Chats          []TL   // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users          []TL   // User: TL_userEmpty | TL_user
}

// Constructs messages.Messages
type TL_messages_messagesNotModified struct {
	Count int32
}

// Constructs messages.Chats
type TL_messages_chats struct {
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
}

// Constructs messages.Chats
type TL_messages_chatsSlice struct {
	Count int32
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
}

// Constructs messages.ChatFull
type TL_messages_chatFull struct {
	FullChat TL   // ChatFull: TL_chatFull | TL_channelFull
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.AffectedHistory
type TL_messages_affectedHistory struct {
	PTS      int32
	PTSCount int32
	Offset   int32
}

// Constructs MessagesFilter
type TL_inputMessagesFilterEmpty struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterPhotos struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterVideo struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterPhotoVideo struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterDocument struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterURL struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterGIF struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterVoice struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterMusic struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterChatPhotos struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterPhoneCalls struct {
	Missed bool
}

// Constructs MessagesFilter
type TL_inputMessagesFilterRoundVoice struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterRoundVideo struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterMyMentions struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterGeo struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterContacts struct {
}

// Constructs MessagesFilter
type TL_inputMessagesFilterPinned struct {
}

// Constructs Update
type TL_updateNewMessage struct {
	Message  TL // Message: TL_messageEmpty | TL_message | TL_messageService
	PTS      int32
	PTSCount int32
}

// Constructs Update
type TL_updateMessageID struct {
	ID       int32
	RandomID int64
}

// Constructs Update
type TL_updateDeleteMessages struct {
	Messages []int32
	PTS      int32
	PTSCount int32
}

// Constructs Update
type TL_updateUserTyping struct {
	UserID int64
	Action TL // SendMessageAction: TL_sendMessageTypingAction | TL_sendMessageCancelAction | TL_sendMessageRecordVideoAction | TL_sendMessageUploadVideoAction | TL_sendMessageRecordAudioAction | TL_sendMessageUploadAudioAction | TL_sendMessageUploadPhotoAction | TL_sendMessageUploadDocumentAction | TL_sendMessageGeoLocationAction | TL_sendMessageChooseContactAction | TL_sendMessageGamePlayAction | TL_sendMessageRecordRoundAction | TL_sendMessageUploadRoundAction | TL_speakingInGroupCallAction | TL_sendMessageHistoryImportAction | TL_sendMessageChooseStickerAction | TL_sendMessageEmojiInteraction | TL_sendMessageEmojiInteractionSeen
}

// Constructs Update
type TL_updateChatUserTyping struct {
	ChatID int64
	FromID TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Action TL // SendMessageAction: TL_sendMessageTypingAction | TL_sendMessageCancelAction | TL_sendMessageRecordVideoAction | TL_sendMessageUploadVideoAction | TL_sendMessageRecordAudioAction | TL_sendMessageUploadAudioAction | TL_sendMessageUploadPhotoAction | TL_sendMessageUploadDocumentAction | TL_sendMessageGeoLocationAction | TL_sendMessageChooseContactAction | TL_sendMessageGamePlayAction | TL_sendMessageRecordRoundAction | TL_sendMessageUploadRoundAction | TL_speakingInGroupCallAction | TL_sendMessageHistoryImportAction | TL_sendMessageChooseStickerAction | TL_sendMessageEmojiInteraction | TL_sendMessageEmojiInteractionSeen
}

// Constructs Update
type TL_updateChatParticipants struct {
	Participants TL // ChatParticipants: TL_chatParticipantsForbidden | TL_chatParticipants
}

// Constructs Update
type TL_updateUserStatus struct {
	UserID int64
	Status TL // UserStatus: TL_userStatusEmpty | TL_userStatusOnline | TL_userStatusOffline | TL_userStatusRecently | TL_userStatusLastWeek | TL_userStatusLastMonth
}

// Constructs Update
type TL_updateUserName struct {
	UserID    int64
	FirstName string
	LastName  string
	Usernames []TL_username
}

// Constructs Update
type TL_updateNewAuthorization struct {
	Unconfirmed bool
	Hash        int64
	Date        *int32  // (optional)
	Device      *string // (optional)
	Location    *string // (optional)
}

// Constructs Update
type TL_updateNewEncryptedMessage struct {
	Message TL // EncryptedMessage: TL_encryptedMessage | TL_encryptedMessageService
	QTS     int32
}

// Constructs Update
type TL_updateEncryptedChatTyping struct {
	ChatID int32
}

// Constructs Update
type TL_updateEncryption struct {
	Chat TL // EncryptedChat: TL_encryptedChatEmpty | TL_encryptedChatWaiting | TL_encryptedChatRequested | TL_encryptedChat | TL_encryptedChatDiscarded
	Date int32
}

// Constructs Update
type TL_updateEncryptedMessagesRead struct {
	ChatID  int32
	MaxDate int32
	Date    int32
}

// Constructs Update
type TL_updateChatParticipantAdd struct {
	ChatID    int64
	UserID    int64
	InviterID int64
	Date      int32
	Version   int32
}

// Constructs Update
type TL_updateChatParticipantDelete struct {
	ChatID  int64
	UserID  int64
	Version int32
}

// Constructs Update
type TL_updateDCOptions struct {
	DCOptions []TL_dcOption
}

// Constructs Update
type TL_updateNotifySettings struct {
	Peer           TL // NotifyPeer: TL_notifyPeer | TL_notifyUsers | TL_notifyChats | TL_notifyBroadcasts | TL_notifyForumTopic
	NotifySettings TL_peerNotifySettings
}

// Constructs Update
type TL_updateServiceNotification struct {
	Popup       bool
	InvertMedia bool
	InboxDate   *int32 // (optional)
	Type        string
	Message     string
	Media       TL   // MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
	Entities    []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs Update
type TL_updatePrivacy struct {
	Key   TL   // PrivacyKey: TL_privacyKeyStatusTimestamp | TL_privacyKeyChatInvite | TL_privacyKeyPhoneCall | TL_privacyKeyPhoneP2P | TL_privacyKeyForwards | TL_privacyKeyProfilePhoto | TL_privacyKeyPhoneNumber | TL_privacyKeyAddedByPhone | TL_privacyKeyVoiceMessages | TL_privacyKeyAbout | TL_privacyKeyBirthday
	Rules []TL // PrivacyRule: TL_privacyValueAllowContacts | TL_privacyValueAllowAll | TL_privacyValueAllowUsers | TL_privacyValueDisallowContacts | TL_privacyValueDisallowAll | TL_privacyValueDisallowUsers | TL_privacyValueAllowChatParticipants | TL_privacyValueDisallowChatParticipants | TL_privacyValueAllowCloseFriends | TL_privacyValueAllowPremium
}

// Constructs Update
type TL_updateUserPhone struct {
	UserID int64
	Phone  string
}

// Constructs Update
type TL_updateReadHistoryInbox struct {
	FolderID         *int32 // (optional)
	Peer             TL     // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MaxID            int32
	StillUnreadCount int32
	PTS              int32
	PTSCount         int32
}

// Constructs Update
type TL_updateReadHistoryOutbox struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MaxID    int32
	PTS      int32
	PTSCount int32
}

// Constructs Update
type TL_updateWebPage struct {
	Webpage  TL // WebPage: TL_webPageEmpty | TL_webPagePending | TL_webPage | TL_webPageNotModified
	PTS      int32
	PTSCount int32
}

// Constructs Update
type TL_updateReadMessagesContents struct {
	Messages []int32
	PTS      int32
	PTSCount int32
	Date     *int32 // (optional)
}

// Constructs Update
type TL_updateChannelTooLong struct {
	ChannelID int64
	PTS       *int32 // (optional)
}

// Constructs Update
type TL_updateChannel struct {
	ChannelID int64
}

// Constructs Update
type TL_updateNewChannelMessage struct {
	Message  TL // Message: TL_messageEmpty | TL_message | TL_messageService
	PTS      int32
	PTSCount int32
}

// Constructs Update
type TL_updateReadChannelInbox struct {
	FolderID         *int32 // (optional)
	ChannelID        int64
	MaxID            int32
	StillUnreadCount int32
	PTS              int32
}

// Constructs Update
type TL_updateDeleteChannelMessages struct {
	ChannelID int64
	Messages  []int32
	PTS       int32
	PTSCount  int32
}

// Constructs Update
type TL_updateChannelMessageViews struct {
	ChannelID int64
	ID        int32
	Views     int32
}

// Constructs Update
type TL_updateChatParticipantAdmin struct {
	ChatID  int64
	UserID  int64
	IsAdmin bool
	Version int32
}

// Constructs Update
type TL_updateNewStickerSet struct {
	Stickerset TL // messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
}

// Constructs Update
type TL_updateStickerSetsOrder struct {
	Masks  bool
	Emojis bool
	Order  []int64
}

// Constructs Update
type TL_updateStickerSets struct {
	Masks  bool
	Emojis bool
}

// Constructs Update
type TL_updateSavedGIFs struct {
}

// Constructs Update
type TL_updateBotInlineQuery struct {
	QueryID  int64
	UserID   int64
	Query    string
	Geo      TL // (optional) GeoPoint: TL_geoPointEmpty | TL_geoPoint
	PeerType TL // (optional) InlineQueryPeerType: TL_inlineQueryPeerTypeSameBotPM | TL_inlineQueryPeerTypePM | TL_inlineQueryPeerTypeChat | TL_inlineQueryPeerTypeMegagroup | TL_inlineQueryPeerTypeBroadcast | TL_inlineQueryPeerTypeBotPM
	Offset   string
}

// Constructs Update
type TL_updateBotInlineSend struct {
	UserID int64
	Query  string
	Geo    TL // (optional) GeoPoint: TL_geoPointEmpty | TL_geoPoint
	ID     string
	MsgID  TL // (optional) InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
}

// Constructs Update
type TL_updateEditChannelMessage struct {
	Message  TL // Message: TL_messageEmpty | TL_message | TL_messageService
	PTS      int32
	PTSCount int32
}

// Constructs Update
type TL_updateBotCallbackQuery struct {
	QueryID       int64
	UserID        int64
	Peer          TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID         int32
	ChatInstance  int64
	Data          []byte  // (optional)
	GameShortName *string // (optional)
}

// Constructs Update
type TL_updateEditMessage struct {
	Message  TL // Message: TL_messageEmpty | TL_message | TL_messageService
	PTS      int32
	PTSCount int32
}

// Constructs Update
type TL_updateInlineBotCallbackQuery struct {
	QueryID       int64
	UserID        int64
	MsgID         TL // InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
	ChatInstance  int64
	Data          []byte  // (optional)
	GameShortName *string // (optional)
}

// Constructs Update
type TL_updateReadChannelOutbox struct {
	ChannelID int64
	MaxID     int32
}

// Constructs Update
type TL_updateDraftMessage struct {
	Peer     TL     // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TopMsgID *int32 // (optional)
	Draft    TL     // DraftMessage: TL_draftMessageEmpty | TL_draftMessage
}

// Constructs Update
type TL_updateReadFeaturedStickers struct {
}

// Constructs Update
type TL_updateRecentStickers struct {
}

// Constructs Update
type TL_updateConfig struct {
}

// Constructs Update
type TL_updatePTSChanged struct {
}

// Constructs Update
type TL_updateChannelWebPage struct {
	ChannelID int64
	Webpage   TL // WebPage: TL_webPageEmpty | TL_webPagePending | TL_webPage | TL_webPageNotModified
	PTS       int32
	PTSCount  int32
}

// Constructs Update
type TL_updateDialogPinned struct {
	Pinned   bool
	FolderID *int32 // (optional)
	Peer     TL     // DialogPeer: TL_dialogPeer | TL_dialogPeerFolder
}

// Constructs Update
type TL_updatePinnedDialogs struct {
	FolderID *int32 // (optional)
	Order    []TL   // (optional) DialogPeer: TL_dialogPeer | TL_dialogPeerFolder
}

// Constructs Update
type TL_updateBotWebhookJSON struct {
	Data TL_dataJSON
}

// Constructs Update
type TL_updateBotWebhookJSONQuery struct {
	QueryID int64
	Data    TL_dataJSON
	Timeout int32
}

// Constructs Update
type TL_updateBotShippingQuery struct {
	QueryID         int64
	UserID          int64
	Payload         []byte
	ShippingAddress TL_postAddress
}

// Constructs Update
type TL_updateBotPrecheckoutQuery struct {
	QueryID          int64
	UserID           int64
	Payload          []byte
	Info             *TL_paymentRequestedInfo // (optional)
	ShippingOptionID *string                  // (optional)
	Currency         string
	TotalAmount      int64
}

// Constructs Update
type TL_updatePhoneCall struct {
	PhoneCall TL // PhoneCall: TL_phoneCallEmpty | TL_phoneCallWaiting | TL_phoneCallRequested | TL_phoneCallAccepted | TL_phoneCall | TL_phoneCallDiscarded
}

// Constructs Update
type TL_updateLangPackTooLong struct {
	LangCode string
}

// Constructs Update
type TL_updateLangPack struct {
	Difference TL_langPackDifference
}

// Constructs Update
type TL_updateFavedStickers struct {
}

// Constructs Update
type TL_updateChannelReadMessagesContents struct {
	ChannelID int64
	TopMsgID  *int32 // (optional)
	Messages  []int32
}

// Constructs Update
type TL_updateContactsReset struct {
}

// Constructs Update
type TL_updateChannelAvailableMessages struct {
	ChannelID      int64
	AvailableMinID int32
}

// Constructs Update
type TL_updateDialogUnreadMark struct {
	Unread bool
	Peer   TL // DialogPeer: TL_dialogPeer | TL_dialogPeerFolder
}

// Constructs Update
type TL_updateMessagePoll struct {
	PollID  int64
	Poll    *TL_poll // (optional)
	Results TL_pollResults
}

// Constructs Update
type TL_updateChatDefaultBannedRights struct {
	Peer                TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	DefaultBannedRights TL_chatBannedRights
	Version             int32
}

// Constructs Update
type TL_updateFolderPeers struct {
	FolderPeers []TL_folderPeer
	PTS         int32
	PTSCount    int32
}

// Constructs Update
type TL_updatePeerSettings struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Settings TL_peerSettings
}

// Constructs Update
type TL_updatePeerLocated struct {
	Peers []TL // PeerLocated: TL_peerLocated | TL_peerSelfLocated
}

// Constructs Update
type TL_updateNewScheduledMessage struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs Update
type TL_updateDeleteScheduledMessages struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Messages []int32
}

// Constructs Update
type TL_updateTheme struct {
	Theme TL_theme
}

// Constructs Update
type TL_updateGeoLiveViewed struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID int32
}

// Constructs Update
type TL_updateLoginToken struct {
}

// Constructs Update
type TL_updateMessagePollVote struct {
	PollID  int64
	Peer    TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Options [][]byte
	QTS     int32
}

// Constructs Update
type TL_updateDialogFilter struct {
	ID     int32
	Filter TL // (optional) DialogFilter: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
}

// Constructs Update
type TL_updateDialogFilterOrder struct {
	Order []int32
}

// Constructs Update
type TL_updateDialogFilters struct {
}

// Constructs Update
type TL_updatePhoneCallSignalingData struct {
	PhoneCallID int64
	Data        []byte
}

// Constructs Update
type TL_updateChannelMessageForwards struct {
	ChannelID int64
	ID        int32
	Forwards  int32
}

// Constructs Update
type TL_updateReadChannelDiscussionInbox struct {
	ChannelID     int64
	TopMsgID      int32
	ReadMaxID     int32
	BroadcastID   *int64 // (optional)
	BroadcastPost *int32 // (optional)
}

// Constructs Update
type TL_updateReadChannelDiscussionOutbox struct {
	ChannelID int64
	TopMsgID  int32
	ReadMaxID int32
}

// Constructs Update
type TL_updatePeerBlocked struct {
	Blocked              bool
	BlockedMyStoriesFrom bool
	PeerID               TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs Update
type TL_updateChannelUserTyping struct {
	ChannelID int64
	TopMsgID  *int32 // (optional)
	FromID    TL     // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Action    TL     // SendMessageAction: TL_sendMessageTypingAction | TL_sendMessageCancelAction | TL_sendMessageRecordVideoAction | TL_sendMessageUploadVideoAction | TL_sendMessageRecordAudioAction | TL_sendMessageUploadAudioAction | TL_sendMessageUploadPhotoAction | TL_sendMessageUploadDocumentAction | TL_sendMessageGeoLocationAction | TL_sendMessageChooseContactAction | TL_sendMessageGamePlayAction | TL_sendMessageRecordRoundAction | TL_sendMessageUploadRoundAction | TL_speakingInGroupCallAction | TL_sendMessageHistoryImportAction | TL_sendMessageChooseStickerAction | TL_sendMessageEmojiInteraction | TL_sendMessageEmojiInteractionSeen
}

// Constructs Update
type TL_updatePinnedMessages struct {
	Pinned   bool
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Messages []int32
	PTS      int32
	PTSCount int32
}

// Constructs Update
type TL_updatePinnedChannelMessages struct {
	Pinned    bool
	ChannelID int64
	Messages  []int32
	PTS       int32
	PTSCount  int32
}

// Constructs Update
type TL_updateChat struct {
	ChatID int64
}

// Constructs Update
type TL_updateGroupCallParticipants struct {
	Call         TL_inputGroupCall
	Participants []TL_groupCallParticipant
	Version      int32
}

// Constructs Update
type TL_updateGroupCall struct {
	ChatID int64
	Call   TL // GroupCall: TL_groupCallDiscarded | TL_groupCall
}

// Constructs Update
type TL_updatePeerHistoryTTL struct {
	Peer      TL     // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TTLPeriod *int32 // (optional)
}

// Constructs Update
type TL_updateChatParticipant struct {
	ChatID          int64
	Date            int32
	ActorID         int64
	UserID          int64
	PrevParticipant TL // (optional) ChatParticipant: TL_chatParticipant | TL_chatParticipantCreator | TL_chatParticipantAdmin
	NewParticipant  TL // (optional) ChatParticipant: TL_chatParticipant | TL_chatParticipantCreator | TL_chatParticipantAdmin
	Invite          TL // (optional) ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	QTS             int32
}

// Constructs Update
type TL_updateChannelParticipant struct {
	ViaChatlist     bool
	ChannelID       int64
	Date            int32
	ActorID         int64
	UserID          int64
	PrevParticipant TL // (optional) ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	NewParticipant  TL // (optional) ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	Invite          TL // (optional) ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	QTS             int32
}

// Constructs Update
type TL_updateBotStopped struct {
	UserID  int64
	Date    int32
	Stopped bool
	QTS     int32
}

// Constructs Update
type TL_updateGroupCallConnection struct {
	Presentation bool
	Params       TL_dataJSON
}

// Constructs Update
type TL_updateBotCommands struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	BotID    int64
	Commands []TL_botCommand
}

// Constructs Update
type TL_updatePendingJoinRequests struct {
	Peer             TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	RequestsPending  int32
	RecentRequesters []int64
}

// Constructs Update
type TL_updateBotChatInviteRequester struct {
	Peer   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date   int32
	UserID int64
	About  string
	Invite TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	QTS    int32
}

// Constructs Update
type TL_updateMessageReactions struct {
	Peer      TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID     int32
	TopMsgID  *int32 // (optional)
	Reactions TL_messageReactions
}

// Constructs Update
type TL_updateAttachMenuBots struct {
}

// Constructs Update
type TL_updateWebViewResultSent struct {
	QueryID int64
}

// Constructs Update
type TL_updateBotMenuButton struct {
	BotID  int64
	Button TL // BotMenuButton: TL_botMenuButtonDefault | TL_botMenuButtonCommands | TL_botMenuButton
}

// Constructs Update
type TL_updateSavedRingtones struct {
}

// Constructs Update
type TL_updateTranscribedAudio struct {
	Pending         bool
	Peer            TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID           int32
	TranscriptionID int64
	Text            string
}

// Constructs Update
type TL_updateReadFeaturedEmojiStickers struct {
}

// Constructs Update
type TL_updateUserEmojiStatus struct {
	UserID      int64
	EmojiStatus TL // EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
}

// Constructs Update
type TL_updateRecentEmojiStatuses struct {
}

// Constructs Update
type TL_updateRecentReactions struct {
}

// Constructs Update
type TL_updateMoveStickerSetToTop struct {
	Masks      bool
	Emojis     bool
	Stickerset int64
}

// Constructs Update
type TL_updateMessageExtendedMedia struct {
	Peer          TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID         int32
	ExtendedMedia []TL // MessageExtendedMedia: TL_messageExtendedMediaPreview | TL_messageExtendedMedia
}

// Constructs Update
type TL_updateChannelPinnedTopic struct {
	Pinned    bool
	ChannelID int64
	TopicID   int32
}

// Constructs Update
type TL_updateChannelPinnedTopics struct {
	ChannelID int64
	Order     []int32 // (optional)
}

// Constructs Update
type TL_updateUser struct {
	UserID int64
}

// Constructs Update
type TL_updateAutoSaveSettings struct {
}

// Constructs Update
type TL_updateStory struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Story TL // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs Update
type TL_updateReadStories struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MaxID int32
}

// Constructs Update
type TL_updateStoryID struct {
	ID       int32
	RandomID int64
}

// Constructs Update
type TL_updateStoriesStealthMode struct {
	StealthMode TL_storiesStealthMode
}

// Constructs Update
type TL_updateSentStoryReaction struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	StoryID  int32
	Reaction TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Constructs Update
type TL_updateBotChatBoost struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Boost TL_boost
	QTS   int32
}

// Constructs Update
type TL_updateChannelViewForumAsMessages struct {
	ChannelID int64
	Enabled   bool
}

// Constructs Update
type TL_updatePeerWallpaper struct {
	WallpaperOverridden bool
	Peer                TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Wallpaper           TL // (optional) WallPaper: TL_wallPaper | TL_wallPaperNoFile
}

// Constructs Update
type TL_updateBotMessageReaction struct {
	Peer         TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID        int32
	Date         int32
	Actor        TL   // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	OldReactions []TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
	NewReactions []TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
	QTS          int32
}

// Constructs Update
type TL_updateBotMessageReactions struct {
	Peer      TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MsgID     int32
	Date      int32
	Reactions []TL_reactionCount
	QTS       int32
}

// Constructs Update
type TL_updateSavedDialogPinned struct {
	Pinned bool
	Peer   TL // DialogPeer: TL_dialogPeer | TL_dialogPeerFolder
}

// Constructs Update
type TL_updatePinnedSavedDialogs struct {
	Order []TL // (optional) DialogPeer: TL_dialogPeer | TL_dialogPeerFolder
}

// Constructs Update
type TL_updateSavedReactionTags struct {
}

// Constructs Update
type TL_updateSMSJob struct {
	JobID string
}

// Constructs Update
type TL_updateQuickReplies struct {
	QuickReplies []TL_quickReply
}

// Constructs Update
type TL_updateNewQuickReply struct {
	QuickReply TL_quickReply
}

// Constructs Update
type TL_updateDeleteQuickReply struct {
	ShortcutID int32
}

// Constructs Update
type TL_updateQuickReplyMessage struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs Update
type TL_updateDeleteQuickReplyMessages struct {
	ShortcutID int32
	Messages   []int32
}

// Constructs Update
type TL_updateBotBusinessConnect struct {
	Connection TL_botBusinessConnection
	QTS        int32
}

// Constructs Update
type TL_updateBotNewBusinessMessage struct {
	ConnectionID   string
	Message        TL // Message: TL_messageEmpty | TL_message | TL_messageService
	ReplyToMessage TL // (optional) Message: TL_messageEmpty | TL_message | TL_messageService
	QTS            int32
}

// Constructs Update
type TL_updateBotEditBusinessMessage struct {
	ConnectionID   string
	Message        TL // Message: TL_messageEmpty | TL_message | TL_messageService
	ReplyToMessage TL // (optional) Message: TL_messageEmpty | TL_message | TL_messageService
	QTS            int32
}

// Constructs Update
type TL_updateBotDeleteBusinessMessage struct {
	ConnectionID string
	Peer         TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Messages     []int32
	QTS          int32
}

// Constructs Update
type TL_updateNewStoryReaction struct {
	StoryID  int32
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Reaction TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Constructs Update
type TL_updateBroadcastRevenueTransactions struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Balances TL_broadcastRevenueBalances
}

// Constructs Update
type TL_updateStarsBalance struct {
	Balance int64
}

// Constructs Update
type TL_updateBusinessBotCallbackQuery struct {
	QueryID        int64
	UserID         int64
	ConnectionID   string
	Message        TL // Message: TL_messageEmpty | TL_message | TL_messageService
	ReplyToMessage TL // (optional) Message: TL_messageEmpty | TL_message | TL_messageService
	ChatInstance   int64
	Data           []byte // (optional)
}

// Constructs Update
type TL_updateStarsRevenueStatus struct {
	Peer   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Status TL_starsRevenueStatus
}

// Constructs Update
type TL_updateBotPurchasedPaidMedia struct {
	UserID  int64
	Payload string
	QTS     int32
}

// Constructs Update
type TL_updatePaidReactionPrivacy struct {
	Private bool
}

// Constructs updates.State
type TL_updates_state struct {
	PTS         int32
	QTS         int32
	Date        int32
	Seq         int32
	UnreadCount int32
}

// Constructs updates.Difference
type TL_updates_differenceEmpty struct {
	Date int32
	Seq  int32
}

// Constructs updates.Difference
type TL_updates_difference struct {
	NewMessages          []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	NewEncryptedMessages []TL // EncryptedMessage: TL_encryptedMessage | TL_encryptedMessageService
	OtherUpdates         []TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDCOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGIFs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePTSChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction | TL_updateBotChatBoost | TL_updateChannelViewForumAsMessages | TL_updatePeerWallpaper | TL_updateBotMessageReaction | TL_updateBotMessageReactions | TL_updateSavedDialogPinned | TL_updatePinnedSavedDialogs | TL_updateSavedReactionTags | TL_updateSMSJob | TL_updateQuickReplies | TL_updateNewQuickReply | TL_updateDeleteQuickReply | TL_updateQuickReplyMessage | TL_updateDeleteQuickReplyMessages | TL_updateBotBusinessConnect | TL_updateBotNewBusinessMessage | TL_updateBotEditBusinessMessage | TL_updateBotDeleteBusinessMessage | TL_updateNewStoryReaction | TL_updateBroadcastRevenueTransactions | TL_updateStarsBalance | TL_updateBusinessBotCallbackQuery | TL_updateStarsRevenueStatus | TL_updateBotPurchasedPaidMedia | TL_updatePaidReactionPrivacy
	Chats                []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users                []TL // User: TL_userEmpty | TL_user
	State                TL_updates_state
}

// Constructs updates.Difference
type TL_updates_differenceSlice struct {
	NewMessages          []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	NewEncryptedMessages []TL // EncryptedMessage: TL_encryptedMessage | TL_encryptedMessageService
	OtherUpdates         []TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDCOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGIFs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePTSChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction | TL_updateBotChatBoost | TL_updateChannelViewForumAsMessages | TL_updatePeerWallpaper | TL_updateBotMessageReaction | TL_updateBotMessageReactions | TL_updateSavedDialogPinned | TL_updatePinnedSavedDialogs | TL_updateSavedReactionTags | TL_updateSMSJob | TL_updateQuickReplies | TL_updateNewQuickReply | TL_updateDeleteQuickReply | TL_updateQuickReplyMessage | TL_updateDeleteQuickReplyMessages | TL_updateBotBusinessConnect | TL_updateBotNewBusinessMessage | TL_updateBotEditBusinessMessage | TL_updateBotDeleteBusinessMessage | TL_updateNewStoryReaction | TL_updateBroadcastRevenueTransactions | TL_updateStarsBalance | TL_updateBusinessBotCallbackQuery | TL_updateStarsRevenueStatus | TL_updateBotPurchasedPaidMedia | TL_updatePaidReactionPrivacy
	Chats                []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users                []TL // User: TL_userEmpty | TL_user
	IntermediateState    TL_updates_state
}

// Constructs updates.Difference
type TL_updates_differenceTooLong struct {
	PTS int32
}

// Constructs Updates
type TL_updatesTooLong struct {
}

// Constructs Updates
type TL_updateShortMessage struct {
	Out         bool
	Mentioned   bool
	MediaUnread bool
	Silent      bool
	ID          int32
	UserID      int64
	Message     string
	PTS         int32
	PTSCount    int32
	Date        int32
	FwdFrom     *TL_messageFwdHeader // (optional)
	ViaBotID    *int64               // (optional)
	ReplyTo     TL                   // (optional) MessageReplyHeader: TL_messageReplyHeader | TL_messageReplyStoryHeader
	Entities    []TL                 // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	TTLPeriod   *int32               // (optional)
}

// Constructs Updates
type TL_updateShortChatMessage struct {
	Out         bool
	Mentioned   bool
	MediaUnread bool
	Silent      bool
	ID          int32
	FromID      int64
	ChatID      int64
	Message     string
	PTS         int32
	PTSCount    int32
	Date        int32
	FwdFrom     *TL_messageFwdHeader // (optional)
	ViaBotID    *int64               // (optional)
	ReplyTo     TL                   // (optional) MessageReplyHeader: TL_messageReplyHeader | TL_messageReplyStoryHeader
	Entities    []TL                 // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	TTLPeriod   *int32               // (optional)
}

// Constructs Updates
type TL_updateShort struct {
	Update TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDCOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGIFs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePTSChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction | TL_updateBotChatBoost | TL_updateChannelViewForumAsMessages | TL_updatePeerWallpaper | TL_updateBotMessageReaction | TL_updateBotMessageReactions | TL_updateSavedDialogPinned | TL_updatePinnedSavedDialogs | TL_updateSavedReactionTags | TL_updateSMSJob | TL_updateQuickReplies | TL_updateNewQuickReply | TL_updateDeleteQuickReply | TL_updateQuickReplyMessage | TL_updateDeleteQuickReplyMessages | TL_updateBotBusinessConnect | TL_updateBotNewBusinessMessage | TL_updateBotEditBusinessMessage | TL_updateBotDeleteBusinessMessage | TL_updateNewStoryReaction | TL_updateBroadcastRevenueTransactions | TL_updateStarsBalance | TL_updateBusinessBotCallbackQuery | TL_updateStarsRevenueStatus | TL_updateBotPurchasedPaidMedia | TL_updatePaidReactionPrivacy
	Date   int32
}

// Constructs Updates
type TL_updatesCombined struct {
	Updates  []TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDCOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGIFs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePTSChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction | TL_updateBotChatBoost | TL_updateChannelViewForumAsMessages | TL_updatePeerWallpaper | TL_updateBotMessageReaction | TL_updateBotMessageReactions | TL_updateSavedDialogPinned | TL_updatePinnedSavedDialogs | TL_updateSavedReactionTags | TL_updateSMSJob | TL_updateQuickReplies | TL_updateNewQuickReply | TL_updateDeleteQuickReply | TL_updateQuickReplyMessage | TL_updateDeleteQuickReplyMessages | TL_updateBotBusinessConnect | TL_updateBotNewBusinessMessage | TL_updateBotEditBusinessMessage | TL_updateBotDeleteBusinessMessage | TL_updateNewStoryReaction | TL_updateBroadcastRevenueTransactions | TL_updateStarsBalance | TL_updateBusinessBotCallbackQuery | TL_updateStarsRevenueStatus | TL_updateBotPurchasedPaidMedia | TL_updatePaidReactionPrivacy
	Users    []TL // User: TL_userEmpty | TL_user
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Date     int32
	SeqStart int32
	Seq      int32
}

// Constructs Updates
type TL_updates struct {
	Updates []TL // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDCOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGIFs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePTSChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction | TL_updateBotChatBoost | TL_updateChannelViewForumAsMessages | TL_updatePeerWallpaper | TL_updateBotMessageReaction | TL_updateBotMessageReactions | TL_updateSavedDialogPinned | TL_updatePinnedSavedDialogs | TL_updateSavedReactionTags | TL_updateSMSJob | TL_updateQuickReplies | TL_updateNewQuickReply | TL_updateDeleteQuickReply | TL_updateQuickReplyMessage | TL_updateDeleteQuickReplyMessages | TL_updateBotBusinessConnect | TL_updateBotNewBusinessMessage | TL_updateBotEditBusinessMessage | TL_updateBotDeleteBusinessMessage | TL_updateNewStoryReaction | TL_updateBroadcastRevenueTransactions | TL_updateStarsBalance | TL_updateBusinessBotCallbackQuery | TL_updateStarsRevenueStatus | TL_updateBotPurchasedPaidMedia | TL_updatePaidReactionPrivacy
	Users   []TL // User: TL_userEmpty | TL_user
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Date    int32
	Seq     int32
}

// Constructs Updates
type TL_updateShortSentMessage struct {
	Out       bool
	ID        int32
	PTS       int32
	PTSCount  int32
	Date      int32
	Media     TL     // (optional) MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
	Entities  []TL   // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	TTLPeriod *int32 // (optional)
}

// Constructs photos.Photos
type TL_photos_photos struct {
	Photos []TL // Photo: TL_photoEmpty | TL_photo
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs photos.Photos
type TL_photos_photosSlice struct {
	Count  int32
	Photos []TL // Photo: TL_photoEmpty | TL_photo
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs photos.Photo
type TL_photos_photo struct {
	Photo TL   // Photo: TL_photoEmpty | TL_photo
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs upload.File
type TL_upload_file struct {
	Type  TL // storage.FileType: TL_storage_fileUnknown | TL_storage_filePartial | TL_storage_fileJPEG | TL_storage_fileGIF | TL_storage_filePNG | TL_storage_filePDF | TL_storage_fileMP3 | TL_storage_fileMOV | TL_storage_fileMP4 | TL_storage_fileWEBP
	Mtime int32
	Bytes []byte
}

// Constructs upload.File
type TL_upload_fileCDNRedirect struct {
	DCID          int32
	FileToken     []byte
	EncryptionKey []byte
	EncryptionIV  []byte
	FileHashes    []TL_fileHash
}

// Constructs DcOption
type TL_dcOption struct {
	IPv6         bool
	MediaOnly    bool
	TCPOOnly     bool
	CDN          bool
	Static       bool
	ThisPortOnly bool
	ID           int32
	IPAddress    string
	Port         int32
	Secret       []byte // (optional)
}

// Constructs Config
type TL_config struct {
	DefaultP2PContacts      bool
	PreloadFeaturedStickers bool
	RevokePMInbox           bool
	BlockedMode             bool
	ForceTryIPv6            bool
	Date                    int32
	Expires                 int32
	TestMode                bool
	ThisDC                  int32
	DCOptions               []TL_dcOption
	DCTXTDomainName         string
	ChatSizeMax             int32
	MegagroupSizeMax        int32
	ForwardedCountMax       int32
	OnlineUpdatePeriodMS    int32
	OfflineBlurTimeoutMS    int32
	OfflineIdleTimeoutMS    int32
	OnlineCloudTimeoutMS    int32
	NotifyCloudDelayMS      int32
	NotifyDefaultDelayMS    int32
	PushChatPeriodMS        int32
	PushChatLimit           int32
	EditTimeLimit           int32
	RevokeTimeLimit         int32
	RevokePMTimeLimit       int32
	RatingEDecay            int32
	StickersRecentLimit     int32
	ChannelsReadMediaPeriod int32
	TmpSessions             *int32 // (optional)
	CallReceiveTimeoutMS    int32
	CallRingTimeoutMS       int32
	CallConnectTimeoutMS    int32
	CallPacketTimeoutMS     int32
	MeURLPrefix             string
	AutoupdateURLPrefix     *string // (optional)
	GIFSearchUsername       *string // (optional)
	VenueSearchUsername     *string // (optional)
	ImgSearchUsername       *string // (optional)
	StaticMapsProvider      *string // (optional)
	CaptionLengthMax        int32
	MessageLengthMax        int32
	WebfileDCID             int32
	SuggestedLangCode       *string // (optional)
	LangPackVersion         *int32  // (optional)
	BaseLangPackVersion     *int32  // (optional)
	ReactionsDefault        TL      // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
	AutologinToken          *string // (optional)
}

// Constructs NearestDc
type TL_nearestDC struct {
	Country   string
	ThisDC    int32
	NearestDC int32
}

// Constructs help.AppUpdate
type TL_help_appUpdate struct {
	CanNotSkip bool
	ID         int32
	Version    string
	Text       string
	Entities   []TL    // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Document   TL      // (optional) Document: TL_documentEmpty | TL_document
	URL        *string // (optional)
	Sticker    TL      // (optional) Document: TL_documentEmpty | TL_document
}

// Constructs help.AppUpdate
type TL_help_noAppUpdate struct {
}

// Constructs help.InviteText
type TL_help_inviteText struct {
	Message string
}

// Constructs EncryptedChat
type TL_encryptedChatEmpty struct {
	ID int32
}

// Constructs EncryptedChat
type TL_encryptedChatWaiting struct {
	ID            int32
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
}

// Constructs EncryptedChat
type TL_encryptedChatRequested struct {
	FolderID      *int32 // (optional)
	ID            int32
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
	GA            []byte
}

// Constructs EncryptedChat
type TL_encryptedChat struct {
	ID             int32
	AccessHash     int64
	Date           int32
	AdminID        int64
	ParticipantID  int64
	GAOrB          []byte
	KeyFingerprint int64
}

// Constructs EncryptedChat
type TL_encryptedChatDiscarded struct {
	HistoryDeleted bool
	ID             int32
}

// Constructs InputEncryptedChat
type TL_inputEncryptedChat struct {
	ChatID     int32
	AccessHash int64
}

// Constructs EncryptedFile
type TL_encryptedFileEmpty struct {
}

// Constructs EncryptedFile
type TL_encryptedFile struct {
	ID             int64
	AccessHash     int64
	Size           int64
	DCID           int32
	KeyFingerprint int32
}

// Constructs InputEncryptedFile
type TL_inputEncryptedFileEmpty struct {
}

// Constructs InputEncryptedFile
type TL_inputEncryptedFileUploaded struct {
	ID             int64
	Parts          int32
	MD5Checksum    string
	KeyFingerprint int32
}

// Constructs InputEncryptedFile
type TL_inputEncryptedFile struct {
	ID         int64
	AccessHash int64
}

// Constructs InputEncryptedFile
type TL_inputEncryptedFileBigUploaded struct {
	ID             int64
	Parts          int32
	KeyFingerprint int32
}

// Constructs EncryptedMessage
type TL_encryptedMessage struct {
	RandomID int64
	ChatID   int32
	Date     int32
	Bytes    []byte
	File     TL // EncryptedFile: TL_encryptedFileEmpty | TL_encryptedFile
}

// Constructs EncryptedMessage
type TL_encryptedMessageService struct {
	RandomID int64
	ChatID   int32
	Date     int32
	Bytes    []byte
}

// Constructs messages.DhConfig
type TL_messages_dhConfigNotModified struct {
	Random []byte
}

// Constructs messages.DhConfig
type TL_messages_dhConfig struct {
	G       int32
	P       []byte
	Version int32
	Random  []byte
}

// Constructs messages.SentEncryptedMessage
type TL_messages_sentEncryptedMessage struct {
	Date int32
}

// Constructs messages.SentEncryptedMessage
type TL_messages_sentEncryptedFile struct {
	Date int32
	File TL // EncryptedFile: TL_encryptedFileEmpty | TL_encryptedFile
}

// Constructs InputDocument
type TL_inputDocumentEmpty struct {
}

// Constructs InputDocument
type TL_inputDocument struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
}

// Constructs Document
type TL_documentEmpty struct {
	ID int64
}

// Constructs Document
type TL_document struct {
	ID            int64
	AccessHash    int64
	FileReference []byte
	Date          int32
	MIMEType      string
	Size          int64
	Thumbs        []TL // (optional) PhotoSize: TL_photoSizeEmpty | TL_photoSize | TL_photoCachedSize | TL_photoStrippedSize | TL_photoSizeProgressive | TL_photoPathSize
	VideoThumbs   []TL // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
	DCID          int32
	Attributes    []TL // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
}

// Constructs help.Support
type TL_help_support struct {
	PhoneNumber string
	User        TL // User: TL_userEmpty | TL_user
}

// Constructs NotifyPeer
type TL_notifyPeer struct {
	Peer TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs NotifyPeer
type TL_notifyUsers struct {
}

// Constructs NotifyPeer
type TL_notifyChats struct {
}

// Constructs NotifyPeer
type TL_notifyBroadcasts struct {
}

// Constructs NotifyPeer
type TL_notifyForumTopic struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TopMsgID int32
}

// Constructs SendMessageAction
type TL_sendMessageTypingAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageCancelAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageRecordVideoAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageUploadVideoAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageRecordAudioAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageUploadAudioAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageUploadPhotoAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageUploadDocumentAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageGeoLocationAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageChooseContactAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageGamePlayAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageRecordRoundAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageUploadRoundAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_speakingInGroupCallAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageHistoryImportAction struct {
	Progress int32
}

// Constructs SendMessageAction
type TL_sendMessageChooseStickerAction struct {
}

// Constructs SendMessageAction
type TL_sendMessageEmojiInteraction struct {
	Emoticon    string
	MsgID       int32
	Interaction TL_dataJSON
}

// Constructs SendMessageAction
type TL_sendMessageEmojiInteractionSeen struct {
	Emoticon string
}

// Constructs contacts.Found
type TL_contacts_found struct {
	MyResults []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Results   []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats     []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users     []TL // User: TL_userEmpty | TL_user
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyStatusTimestamp struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyChatInvite struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyPhoneCall struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyPhoneP2P struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyForwards struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyProfilePhoto struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyPhoneNumber struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyAddedByPhone struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyVoiceMessages struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyAbout struct {
}

// Constructs InputPrivacyKey
type TL_inputPrivacyKeyBirthday struct {
}

// Constructs PrivacyKey
type TL_privacyKeyStatusTimestamp struct {
}

// Constructs PrivacyKey
type TL_privacyKeyChatInvite struct {
}

// Constructs PrivacyKey
type TL_privacyKeyPhoneCall struct {
}

// Constructs PrivacyKey
type TL_privacyKeyPhoneP2P struct {
}

// Constructs PrivacyKey
type TL_privacyKeyForwards struct {
}

// Constructs PrivacyKey
type TL_privacyKeyProfilePhoto struct {
}

// Constructs PrivacyKey
type TL_privacyKeyPhoneNumber struct {
}

// Constructs PrivacyKey
type TL_privacyKeyAddedByPhone struct {
}

// Constructs PrivacyKey
type TL_privacyKeyVoiceMessages struct {
}

// Constructs PrivacyKey
type TL_privacyKeyAbout struct {
}

// Constructs PrivacyKey
type TL_privacyKeyBirthday struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowContacts struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowAll struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowUsers struct {
	Users []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueDisallowContacts struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueDisallowAll struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueDisallowUsers struct {
	Users []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowChatParticipants struct {
	Chats []int64
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueDisallowChatParticipants struct {
	Chats []int64
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowCloseFriends struct {
}

// Constructs InputPrivacyRule
type TL_inputPrivacyValueAllowPremium struct {
}

// Constructs PrivacyRule
type TL_privacyValueAllowContacts struct {
}

// Constructs PrivacyRule
type TL_privacyValueAllowAll struct {
}

// Constructs PrivacyRule
type TL_privacyValueAllowUsers struct {
	Users []int64
}

// Constructs PrivacyRule
type TL_privacyValueDisallowContacts struct {
}

// Constructs PrivacyRule
type TL_privacyValueDisallowAll struct {
}

// Constructs PrivacyRule
type TL_privacyValueDisallowUsers struct {
	Users []int64
}

// Constructs PrivacyRule
type TL_privacyValueAllowChatParticipants struct {
	Chats []int64
}

// Constructs PrivacyRule
type TL_privacyValueDisallowChatParticipants struct {
	Chats []int64
}

// Constructs PrivacyRule
type TL_privacyValueAllowCloseFriends struct {
}

// Constructs PrivacyRule
type TL_privacyValueAllowPremium struct {
}

// Constructs account.PrivacyRules
type TL_account_privacyRules struct {
	Rules []TL // PrivacyRule: TL_privacyValueAllowContacts | TL_privacyValueAllowAll | TL_privacyValueAllowUsers | TL_privacyValueDisallowContacts | TL_privacyValueDisallowAll | TL_privacyValueDisallowUsers | TL_privacyValueAllowChatParticipants | TL_privacyValueDisallowChatParticipants | TL_privacyValueAllowCloseFriends | TL_privacyValueAllowPremium
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs AccountDaysTTL
type TL_accountDaysTTL struct {
	Days int32
}

// Constructs DocumentAttribute
type TL_documentAttributeImageSize struct {
	W int32
	H int32
}

// Constructs DocumentAttribute
type TL_documentAttributeAnimated struct {
}

// Constructs DocumentAttribute
type TL_documentAttributeSticker struct {
	Mask       bool
	Alt        string
	Stickerset TL             // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	MaskCoords *TL_maskCoords // (optional)
}

// Constructs DocumentAttribute
type TL_documentAttributeVideo struct {
	RoundMessage      bool
	SupportsStreaming bool
	Nosound           bool
	Duration          float64
	W                 int32
	H                 int32
	PreloadPrefixSize *int32   // (optional)
	VideoStartTS      *float64 // (optional)
}

// Constructs DocumentAttribute
type TL_documentAttributeAudio struct {
	Voice     bool
	Duration  int32
	Title     *string // (optional)
	Performer *string // (optional)
	Waveform  []byte  // (optional)
}

// Constructs DocumentAttribute
type TL_documentAttributeFilename struct {
	FileName string
}

// Constructs DocumentAttribute
type TL_documentAttributeHasStickers struct {
}

// Constructs DocumentAttribute
type TL_documentAttributeCustomEmoji struct {
	Free       bool
	TextColor  bool
	Alt        string
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
}

// Constructs messages.Stickers
type TL_messages_stickersNotModified struct {
}

// Constructs messages.Stickers
type TL_messages_stickers struct {
	Hash     int64
	Stickers []TL // Document: TL_documentEmpty | TL_document
}

// Constructs StickerPack
type TL_stickerPack struct {
	Emoticon  string
	Documents []int64
}

// Constructs messages.AllStickers
type TL_messages_allStickersNotModified struct {
}

// Constructs messages.AllStickers
type TL_messages_allStickers struct {
	Hash int64
	Sets []TL_stickerSet
}

// Constructs messages.AffectedMessages
type TL_messages_affectedMessages struct {
	PTS      int32
	PTSCount int32
}

// Constructs WebPage
type TL_webPageEmpty struct {
	ID  int64
	URL *string // (optional)
}

// Constructs WebPage
type TL_webPagePending struct {
	ID   int64
	URL  *string // (optional)
	Date int32
}

// Constructs WebPage
type TL_webPage struct {
	HasLargeMedia bool
	ID            int64
	URL           string
	DisplayURL    string
	Hash          int32
	Type          *string  // (optional)
	SiteName      *string  // (optional)
	Title         *string  // (optional)
	Description   *string  // (optional)
	Photo         TL       // (optional) Photo: TL_photoEmpty | TL_photo
	EmbedURL      *string  // (optional)
	EmbedType     *string  // (optional)
	EmbedWidth    *int32   // (optional)
	EmbedHeight   *int32   // (optional)
	Duration      *int32   // (optional)
	Author        *string  // (optional)
	Document      TL       // (optional) Document: TL_documentEmpty | TL_document
	CachedPage    *TL_page // (optional)
	Attributes    []TL     // (optional) WebPageAttribute: TL_webPageAttributeTheme | TL_webPageAttributeStory | TL_webPageAttributeStickerSet
}

// Constructs WebPage
type TL_webPageNotModified struct {
	CachedPageViews *int32 // (optional)
}

// Constructs Authorization
type TL_authorization struct {
	Current                   bool
	OfficialApp               bool
	PasswordPending           bool
	EncryptedRequestsDisabled bool
	CallRequestsDisabled      bool
	Unconfirmed               bool
	Hash                      int64
	DeviceModel               string
	Platform                  string
	SystemVersion             string
	APIID                     int32
	AppName                   string
	AppVersion                string
	DateCreated               int32
	DateActive                int32
	IP                        string
	Country                   string
	Region                    string
}

// Constructs account.Authorizations
type TL_account_authorizations struct {
	AuthorizationTTLDays int32
	Authorizations       []TL_authorization
}

// Constructs account.Password
type TL_account_password struct {
	HasRecovery             bool
	HasSecureValues         bool
	HasPassword             bool
	CurrentAlgo             TL      // (optional) PasswordKdfAlgo: TL_passwordKDFAlgoUnknown | TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
	SrpB                    []byte  // (optional)
	SrpID                   *int64  // (optional)
	Hint                    *string // (optional)
	EmailUnconfirmedPattern *string // (optional)
	NewAlgo                 TL      // PasswordKdfAlgo: TL_passwordKDFAlgoUnknown | TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
	NewSecureAlgo           TL      // SecurePasswordKdfAlgo: TL_securePasswordKDFAlgoUnknown | TL_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000 | TL_securePasswordKDFAlgoSHA512
	SecureRandom            []byte
	PendingResetDate        *int32  // (optional)
	LoginEmailPattern       *string // (optional)
}

// Constructs account.PasswordSettings
type TL_account_passwordSettings struct {
	Email          *string                  // (optional)
	SecureSettings *TL_secureSecretSettings // (optional)
}

// Constructs account.PasswordInputSettings
type TL_account_passwordInputSettings struct {
	NewAlgo           TL                       // (optional) PasswordKdfAlgo: TL_passwordKDFAlgoUnknown | TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
	NewPasswordHash   []byte                   // (optional)
	Hint              *string                  // (optional)
	Email             *string                  // (optional)
	NewSecureSettings *TL_secureSecretSettings // (optional)
}

// Constructs auth.PasswordRecovery
type TL_auth_passwordRecovery struct {
	EmailPattern string
}

// Constructs ReceivedNotifyMessage
type TL_receivedNotifyMessage struct {
	ID    int32
	Flags int32
}

// Constructs ExportedChatInvite
type TL_chatInviteExported struct {
	Revoked             bool
	Permanent           bool
	RequestNeeded       bool
	Link                string
	AdminID             int64
	Date                int32
	StartDate           *int32                       // (optional)
	ExpireDate          *int32                       // (optional)
	UsageLimit          *int32                       // (optional)
	Usage               *int32                       // (optional)
	Requested           *int32                       // (optional)
	SubscriptionExpired *int32                       // (optional)
	Title               *string                      // (optional)
	SubscriptionPricing *TL_starsSubscriptionPricing // (optional)
}

// Constructs ExportedChatInvite
type TL_chatInvitePublicJoinRequests struct {
}

// Constructs ChatInvite
type TL_chatInviteAlready struct {
	Chat TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
}

// Constructs ChatInvite
type TL_chatInvite struct {
	Channel                  bool
	Broadcast                bool
	Public                   bool
	Megagroup                bool
	RequestNeeded            bool
	Verified                 bool
	Scam                     bool
	Fake                     bool
	CanRefulfillSubscription bool
	Title                    string
	About                    *string // (optional)
	Photo                    TL      // Photo: TL_photoEmpty | TL_photo
	ParticipantsCount        int32
	Participants             []TL // (optional) User: TL_userEmpty | TL_user
	Color                    int32
	SubscriptionPricing      *TL_starsSubscriptionPricing // (optional)
	SubscriptionFormID       *int64                       // (optional)
}

// Constructs ChatInvite
type TL_chatInvitePeek struct {
	Chat    TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Expires int32
}

// Constructs InputStickerSet
type TL_inputStickerSetEmpty struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetID struct {
	ID         int64
	AccessHash int64
}

// Constructs InputStickerSet
type TL_inputStickerSetShortName struct {
	ShortName string
}

// Constructs InputStickerSet
type TL_inputStickerSetAnimatedEmoji struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetDice struct {
	Emoticon string
}

// Constructs InputStickerSet
type TL_inputStickerSetAnimatedEmojiAnimations struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetPremiumGifts struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetEmojiGenericAnimations struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetEmojiDefaultStatuses struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetEmojiDefaultTopicIcons struct {
}

// Constructs InputStickerSet
type TL_inputStickerSetEmojiChannelDefaultStatuses struct {
}

// Constructs StickerSet
type TL_stickerSet struct {
	Archived           bool
	Official           bool
	Masks              bool
	Emojis             bool
	TextColor          bool
	ChannelEmojiStatus bool
	Creator            bool
	InstalledDate      *int32 // (optional)
	ID                 int64
	AccessHash         int64
	Title              string
	ShortName          string
	Thumbs             []TL   // (optional) PhotoSize: TL_photoSizeEmpty | TL_photoSize | TL_photoCachedSize | TL_photoStrippedSize | TL_photoSizeProgressive | TL_photoPathSize
	ThumbDCID          *int32 // (optional)
	ThumbVersion       *int32 // (optional)
	ThumbDocumentID    *int64 // (optional)
	Count              int32
	Hash               int32
}

// Constructs messages.StickerSet
type TL_messages_stickerSet struct {
	Set       TL_stickerSet
	Packs     []TL_stickerPack
	Keywords  []TL_stickerKeyword
	Documents []TL // Document: TL_documentEmpty | TL_document
}

// Constructs messages.StickerSet
type TL_messages_stickerSetNotModified struct {
}

// Constructs BotCommand
type TL_botCommand struct {
	Command     string
	Description string
}

// Constructs BotInfo
type TL_botInfo struct {
	HasPreviewMedias    bool
	UserID              *int64          // (optional)
	Description         *string         // (optional)
	DescriptionPhoto    TL              // (optional) Photo: TL_photoEmpty | TL_photo
	DescriptionDocument TL              // (optional) Document: TL_documentEmpty | TL_document
	Commands            []TL_botCommand // (optional)
	MenuButton          TL              // (optional) BotMenuButton: TL_botMenuButtonDefault | TL_botMenuButtonCommands | TL_botMenuButton
	PrivacyPolicyURL    *string         // (optional)
}

// Constructs KeyboardButton
type TL_keyboardButton struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonURL struct {
	Text string
	URL  string
}

// Constructs KeyboardButton
type TL_keyboardButtonCallback struct {
	RequiresPassword bool
	Text             string
	Data             []byte
}

// Constructs KeyboardButton
type TL_keyboardButtonRequestPhone struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonRequestGeoLocation struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonSwitchInline struct {
	SamePeer  bool
	Text      string
	Query     string
	PeerTypes []TL // (optional) InlineQueryPeerType: TL_inlineQueryPeerTypeSameBotPM | TL_inlineQueryPeerTypePM | TL_inlineQueryPeerTypeChat | TL_inlineQueryPeerTypeMegagroup | TL_inlineQueryPeerTypeBroadcast | TL_inlineQueryPeerTypeBotPM
}

// Constructs KeyboardButton
type TL_keyboardButtonGame struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonBuy struct {
	Text string
}

// Constructs KeyboardButton
type TL_keyboardButtonURLAuth struct {
	Text     string
	FwdText  *string // (optional)
	URL      string
	ButtonID int32
}

// Constructs KeyboardButton
type TL_inputKeyboardButtonURLAuth struct {
	RequestWriteAccess bool
	Text               string
	FwdText            *string // (optional)
	URL                string
	Bot                TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs KeyboardButton
type TL_keyboardButtonRequestPoll struct {
	Quiz *bool // (optional)
	Text string
}

// Constructs KeyboardButton
type TL_inputKeyboardButtonUserProfile struct {
	Text   string
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs KeyboardButton
type TL_keyboardButtonUserProfile struct {
	Text   string
	UserID int64
}

// Constructs KeyboardButton
type TL_keyboardButtonWebView struct {
	Text string
	URL  string
}

// Constructs KeyboardButton
type TL_keyboardButtonSimpleWebView struct {
	Text string
	URL  string
}

// Constructs KeyboardButton
type TL_keyboardButtonRequestPeer struct {
	Text        string
	ButtonID    int32
	PeerType    TL // RequestPeerType: TL_requestPeerTypeUser | TL_requestPeerTypeChat | TL_requestPeerTypeBroadcast
	MaxQuantity int32
}

// Constructs KeyboardButton
type TL_inputKeyboardButtonRequestPeer struct {
	NameRequested     bool
	UsernameRequested bool
	PhotoRequested    bool
	Text              string
	ButtonID          int32
	PeerType          TL // RequestPeerType: TL_requestPeerTypeUser | TL_requestPeerTypeChat | TL_requestPeerTypeBroadcast
	MaxQuantity       int32
}

// Constructs KeyboardButtonRow
type TL_keyboardButtonRow struct {
	Buttons []TL // KeyboardButton: TL_keyboardButton | TL_keyboardButtonURL | TL_keyboardButtonCallback | TL_keyboardButtonRequestPhone | TL_keyboardButtonRequestGeoLocation | TL_keyboardButtonSwitchInline | TL_keyboardButtonGame | TL_keyboardButtonBuy | TL_keyboardButtonURLAuth | TL_inputKeyboardButtonURLAuth | TL_keyboardButtonRequestPoll | TL_inputKeyboardButtonUserProfile | TL_keyboardButtonUserProfile | TL_keyboardButtonWebView | TL_keyboardButtonSimpleWebView | TL_keyboardButtonRequestPeer | TL_inputKeyboardButtonRequestPeer
}

// Constructs ReplyMarkup
type TL_replyKeyboardHide struct {
	Selective bool
}

// Constructs ReplyMarkup
type TL_replyKeyboardForceReply struct {
	SingleUse   bool
	Selective   bool
	Placeholder *string // (optional)
}

// Constructs ReplyMarkup
type TL_replyKeyboardMarkup struct {
	Resize      bool
	SingleUse   bool
	Selective   bool
	Persistent  bool
	Rows        []TL_keyboardButtonRow
	Placeholder *string // (optional)
}

// Constructs ReplyMarkup
type TL_replyInlineMarkup struct {
	Rows []TL_keyboardButtonRow
}

// Constructs MessageEntity
type TL_messageEntityUnknown struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityMention struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityHashtag struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityBotCommand struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityURL struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityEmail struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityBold struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityItalic struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityCode struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityPre struct {
	Offset   int32
	Length   int32
	Language string
}

// Constructs MessageEntity
type TL_messageEntityTextURL struct {
	Offset int32
	Length int32
	URL    string
}

// Constructs MessageEntity
type TL_messageEntityMentionName struct {
	Offset int32
	Length int32
	UserID int64
}

// Constructs MessageEntity
type TL_inputMessageEntityMentionName struct {
	Offset int32
	Length int32
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs MessageEntity
type TL_messageEntityPhone struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityCashtag struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityUnderline struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityStrike struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityBankCard struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntitySpoiler struct {
	Offset int32
	Length int32
}

// Constructs MessageEntity
type TL_messageEntityCustomEmoji struct {
	Offset     int32
	Length     int32
	DocumentID int64
}

// Constructs MessageEntity
type TL_messageEntityBlockquote struct {
	Collapsed bool
	Offset    int32
	Length    int32
}

// Constructs InputChannel
type TL_inputChannelEmpty struct {
}

// Constructs InputChannel
type TL_inputChannel struct {
	ChannelID  int64
	AccessHash int64
}

// Constructs InputChannel
type TL_inputChannelFromMessage struct {
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID     int32
	ChannelID int64
}

// Constructs contacts.ResolvedPeer
type TL_contacts_resolvedPeer struct {
	Peer  TL   // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs MessageRange
type TL_messageRange struct {
	MinID int32
	MaxID int32
}

// Constructs updates.ChannelDifference
type TL_updates_channelDifferenceEmpty struct {
	Final   bool
	PTS     int32
	Timeout *int32 // (optional)
}

// Constructs updates.ChannelDifference
type TL_updates_channelDifferenceTooLong struct {
	Final    bool
	Timeout  *int32 // (optional)
	Dialog   TL     // Dialog: TL_dialog | TL_dialogFolder
	Messages []TL   // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL   // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL   // User: TL_userEmpty | TL_user
}

// Constructs updates.ChannelDifference
type TL_updates_channelDifference struct {
	Final        bool
	PTS          int32
	Timeout      *int32 // (optional)
	NewMessages  []TL   // Message: TL_messageEmpty | TL_message | TL_messageService
	OtherUpdates []TL   // Update: TL_updateNewMessage | TL_updateMessageID | TL_updateDeleteMessages | TL_updateUserTyping | TL_updateChatUserTyping | TL_updateChatParticipants | TL_updateUserStatus | TL_updateUserName | TL_updateNewAuthorization | TL_updateNewEncryptedMessage | TL_updateEncryptedChatTyping | TL_updateEncryption | TL_updateEncryptedMessagesRead | TL_updateChatParticipantAdd | TL_updateChatParticipantDelete | TL_updateDCOptions | TL_updateNotifySettings | TL_updateServiceNotification | TL_updatePrivacy | TL_updateUserPhone | TL_updateReadHistoryInbox | TL_updateReadHistoryOutbox | TL_updateWebPage | TL_updateReadMessagesContents | TL_updateChannelTooLong | TL_updateChannel | TL_updateNewChannelMessage | TL_updateReadChannelInbox | TL_updateDeleteChannelMessages | TL_updateChannelMessageViews | TL_updateChatParticipantAdmin | TL_updateNewStickerSet | TL_updateStickerSetsOrder | TL_updateStickerSets | TL_updateSavedGIFs | TL_updateBotInlineQuery | TL_updateBotInlineSend | TL_updateEditChannelMessage | TL_updateBotCallbackQuery | TL_updateEditMessage | TL_updateInlineBotCallbackQuery | TL_updateReadChannelOutbox | TL_updateDraftMessage | TL_updateReadFeaturedStickers | TL_updateRecentStickers | TL_updateConfig | TL_updatePTSChanged | TL_updateChannelWebPage | TL_updateDialogPinned | TL_updatePinnedDialogs | TL_updateBotWebhookJSON | TL_updateBotWebhookJSONQuery | TL_updateBotShippingQuery | TL_updateBotPrecheckoutQuery | TL_updatePhoneCall | TL_updateLangPackTooLong | TL_updateLangPack | TL_updateFavedStickers | TL_updateChannelReadMessagesContents | TL_updateContactsReset | TL_updateChannelAvailableMessages | TL_updateDialogUnreadMark | TL_updateMessagePoll | TL_updateChatDefaultBannedRights | TL_updateFolderPeers | TL_updatePeerSettings | TL_updatePeerLocated | TL_updateNewScheduledMessage | TL_updateDeleteScheduledMessages | TL_updateTheme | TL_updateGeoLiveViewed | TL_updateLoginToken | TL_updateMessagePollVote | TL_updateDialogFilter | TL_updateDialogFilterOrder | TL_updateDialogFilters | TL_updatePhoneCallSignalingData | TL_updateChannelMessageForwards | TL_updateReadChannelDiscussionInbox | TL_updateReadChannelDiscussionOutbox | TL_updatePeerBlocked | TL_updateChannelUserTyping | TL_updatePinnedMessages | TL_updatePinnedChannelMessages | TL_updateChat | TL_updateGroupCallParticipants | TL_updateGroupCall | TL_updatePeerHistoryTTL | TL_updateChatParticipant | TL_updateChannelParticipant | TL_updateBotStopped | TL_updateGroupCallConnection | TL_updateBotCommands | TL_updatePendingJoinRequests | TL_updateBotChatInviteRequester | TL_updateMessageReactions | TL_updateAttachMenuBots | TL_updateWebViewResultSent | TL_updateBotMenuButton | TL_updateSavedRingtones | TL_updateTranscribedAudio | TL_updateReadFeaturedEmojiStickers | TL_updateUserEmojiStatus | TL_updateRecentEmojiStatuses | TL_updateRecentReactions | TL_updateMoveStickerSetToTop | TL_updateMessageExtendedMedia | TL_updateChannelPinnedTopic | TL_updateChannelPinnedTopics | TL_updateUser | TL_updateAutoSaveSettings | TL_updateStory | TL_updateReadStories | TL_updateStoryID | TL_updateStoriesStealthMode | TL_updateSentStoryReaction | TL_updateBotChatBoost | TL_updateChannelViewForumAsMessages | TL_updatePeerWallpaper | TL_updateBotMessageReaction | TL_updateBotMessageReactions | TL_updateSavedDialogPinned | TL_updatePinnedSavedDialogs | TL_updateSavedReactionTags | TL_updateSMSJob | TL_updateQuickReplies | TL_updateNewQuickReply | TL_updateDeleteQuickReply | TL_updateQuickReplyMessage | TL_updateDeleteQuickReplyMessages | TL_updateBotBusinessConnect | TL_updateBotNewBusinessMessage | TL_updateBotEditBusinessMessage | TL_updateBotDeleteBusinessMessage | TL_updateNewStoryReaction | TL_updateBroadcastRevenueTransactions | TL_updateStarsBalance | TL_updateBusinessBotCallbackQuery | TL_updateStarsRevenueStatus | TL_updateBotPurchasedPaidMedia | TL_updatePaidReactionPrivacy
	Chats        []TL   // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL   // User: TL_userEmpty | TL_user
}

// Constructs ChannelMessagesFilter
type TL_channelMessagesFilterEmpty struct {
}

// Constructs ChannelMessagesFilter
type TL_channelMessagesFilter struct {
	ExcludeNewMessages bool
	Ranges             []TL_messageRange
}

// Constructs ChannelParticipant
type TL_channelParticipant struct {
	UserID                int64
	Date                  int32
	SubscriptionUntilDate *int32 // (optional)
}

// Constructs ChannelParticipant
type TL_channelParticipantSelf struct {
	ViaRequest            bool
	UserID                int64
	InviterID             int64
	Date                  int32
	SubscriptionUntilDate *int32 // (optional)
}

// Constructs ChannelParticipant
type TL_channelParticipantCreator struct {
	UserID      int64
	AdminRights TL_chatAdminRights
	Rank        *string // (optional)
}

// Constructs ChannelParticipant
type TL_channelParticipantAdmin struct {
	CanEdit     bool
	Self        bool
	UserID      int64
	InviterID   *int64 // (optional)
	PromotedBy  int64
	Date        int32
	AdminRights TL_chatAdminRights
	Rank        *string // (optional)
}

// Constructs ChannelParticipant
type TL_channelParticipantBanned struct {
	Left         bool
	Peer         TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	KickedBy     int64
	Date         int32
	BannedRights TL_chatBannedRights
}

// Constructs ChannelParticipant
type TL_channelParticipantLeft struct {
	Peer TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsRecent struct {
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsAdmins struct {
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsKicked struct {
	Q string
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsBots struct {
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsBanned struct {
	Q string
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsSearch struct {
	Q string
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsContacts struct {
	Q string
}

// Constructs ChannelParticipantsFilter
type TL_channelParticipantsMentions struct {
	Q        *string // (optional)
	TopMsgID *int32  // (optional)
}

// Constructs channels.ChannelParticipants
type TL_channels_channelParticipants struct {
	Count        int32
	Participants []TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
}

// Constructs channels.ChannelParticipants
type TL_channels_channelParticipantsNotModified struct {
}

// Constructs channels.ChannelParticipant
type TL_channels_channelParticipant struct {
	Participant TL   // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	Chats       []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users       []TL // User: TL_userEmpty | TL_user
}

// Constructs help.TermsOfService
type TL_help_termsOfService struct {
	Popup         bool
	ID            TL_dataJSON
	Text          string
	Entities      []TL   // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	MinAgeConfirm *int32 // (optional)
}

// Constructs messages.SavedGifs
type TL_messages_savedGIFsNotModified struct {
}

// Constructs messages.SavedGifs
type TL_messages_savedGIFs struct {
	Hash int64
	GIFs []TL // Document: TL_documentEmpty | TL_document
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaAuto struct {
	InvertMedia bool
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ReplyMarkup TL   // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageText struct {
	NoWebpage   bool
	InvertMedia bool
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ReplyMarkup TL   // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaGeo struct {
	GeoPoint                    TL     // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Heading                     *int32 // (optional)
	Period                      *int32 // (optional)
	ProximityNotificationRadius *int32 // (optional)
	ReplyMarkup                 TL     // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaVenue struct {
	GeoPoint    TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Title       string
	Address     string
	Provider    string
	VenueID     string
	VenueType   string
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaContact struct {
	PhoneNumber string
	FirstName   string
	LastName    string
	Vcard       string
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageGame struct {
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaInvoice struct {
	Title        string
	Description  string
	Photo        *TL_inputWebDocument // (optional)
	Invoice      TL_invoice
	Payload      []byte
	Provider     string
	ProviderData TL_dataJSON
	ReplyMarkup  TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineMessage
type TL_inputBotInlineMessageMediaWebPage struct {
	InvertMedia     bool
	ForceLargeMedia bool
	ForceSmallMedia bool
	Optional        bool
	Message         string
	Entities        []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	URL             string
	ReplyMarkup     TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs InputBotInlineResult
type TL_inputBotInlineResult struct {
	ID          string
	Type        string
	Title       *string              // (optional)
	Description *string              // (optional)
	URL         *string              // (optional)
	Thumb       *TL_inputWebDocument // (optional)
	Content     *TL_inputWebDocument // (optional)
	SendMessage TL                   // InputBotInlineMessage: TL_inputBotInlineMessageMediaAuto | TL_inputBotInlineMessageText | TL_inputBotInlineMessageMediaGeo | TL_inputBotInlineMessageMediaVenue | TL_inputBotInlineMessageMediaContact | TL_inputBotInlineMessageGame | TL_inputBotInlineMessageMediaInvoice | TL_inputBotInlineMessageMediaWebPage
}

// Constructs InputBotInlineResult
type TL_inputBotInlineResultPhoto struct {
	ID          string
	Type        string
	Photo       TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
	SendMessage TL // InputBotInlineMessage: TL_inputBotInlineMessageMediaAuto | TL_inputBotInlineMessageText | TL_inputBotInlineMessageMediaGeo | TL_inputBotInlineMessageMediaVenue | TL_inputBotInlineMessageMediaContact | TL_inputBotInlineMessageGame | TL_inputBotInlineMessageMediaInvoice | TL_inputBotInlineMessageMediaWebPage
}

// Constructs InputBotInlineResult
type TL_inputBotInlineResultDocument struct {
	ID          string
	Type        string
	Title       *string // (optional)
	Description *string // (optional)
	Document    TL      // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	SendMessage TL      // InputBotInlineMessage: TL_inputBotInlineMessageMediaAuto | TL_inputBotInlineMessageText | TL_inputBotInlineMessageMediaGeo | TL_inputBotInlineMessageMediaVenue | TL_inputBotInlineMessageMediaContact | TL_inputBotInlineMessageGame | TL_inputBotInlineMessageMediaInvoice | TL_inputBotInlineMessageMediaWebPage
}

// Constructs InputBotInlineResult
type TL_inputBotInlineResultGame struct {
	ID          string
	ShortName   string
	SendMessage TL // InputBotInlineMessage: TL_inputBotInlineMessageMediaAuto | TL_inputBotInlineMessageText | TL_inputBotInlineMessageMediaGeo | TL_inputBotInlineMessageMediaVenue | TL_inputBotInlineMessageMediaContact | TL_inputBotInlineMessageGame | TL_inputBotInlineMessageMediaInvoice | TL_inputBotInlineMessageMediaWebPage
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaAuto struct {
	InvertMedia bool
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ReplyMarkup TL   // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageText struct {
	NoWebpage   bool
	InvertMedia bool
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ReplyMarkup TL   // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaGeo struct {
	Geo                         TL     // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Heading                     *int32 // (optional)
	Period                      *int32 // (optional)
	ProximityNotificationRadius *int32 // (optional)
	ReplyMarkup                 TL     // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaVenue struct {
	Geo         TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Title       string
	Address     string
	Provider    string
	VenueID     string
	VenueType   string
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaContact struct {
	PhoneNumber string
	FirstName   string
	LastName    string
	Vcard       string
	ReplyMarkup TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaInvoice struct {
	ShippingAddressRequested bool
	Test                     bool
	Title                    string
	Description              string
	Photo                    TL // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Currency                 string
	TotalAmount              int64
	ReplyMarkup              TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineMessage
type TL_botInlineMessageMediaWebPage struct {
	InvertMedia     bool
	ForceLargeMedia bool
	ForceSmallMedia bool
	Manual          bool
	Safe            bool
	Message         string
	Entities        []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	URL             string
	ReplyMarkup     TL // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
}

// Constructs BotInlineResult
type TL_botInlineResult struct {
	ID          string
	Type        string
	Title       *string // (optional)
	Description *string // (optional)
	URL         *string // (optional)
	Thumb       TL      // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Content     TL      // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	SendMessage TL      // BotInlineMessage: TL_botInlineMessageMediaAuto | TL_botInlineMessageText | TL_botInlineMessageMediaGeo | TL_botInlineMessageMediaVenue | TL_botInlineMessageMediaContact | TL_botInlineMessageMediaInvoice | TL_botInlineMessageMediaWebPage
}

// Constructs BotInlineResult
type TL_botInlineMediaResult struct {
	ID          string
	Type        string
	Photo       TL      // (optional) Photo: TL_photoEmpty | TL_photo
	Document    TL      // (optional) Document: TL_documentEmpty | TL_document
	Title       *string // (optional)
	Description *string // (optional)
	SendMessage TL      // BotInlineMessage: TL_botInlineMessageMediaAuto | TL_botInlineMessageText | TL_botInlineMessageMediaGeo | TL_botInlineMessageMediaVenue | TL_botInlineMessageMediaContact | TL_botInlineMessageMediaInvoice | TL_botInlineMessageMediaWebPage
}

// Constructs messages.BotResults
type TL_messages_botResults struct {
	Gallery       bool
	QueryID       int64
	NextOffset    *string               // (optional)
	SwitchPM      *TL_inlineBotSwitchPM // (optional)
	SwitchWebview *TL_inlineBotWebView  // (optional)
	Results       []TL                  // BotInlineResult: TL_botInlineResult | TL_botInlineMediaResult
	CacheTime     int32
	Users         []TL // User: TL_userEmpty | TL_user
}

// Constructs ExportedMessageLink
type TL_exportedMessageLink struct {
	Link string
	HTML string
}

// Constructs MessageFwdHeader
type TL_messageFwdHeader struct {
	Imported       bool
	SavedOut       bool
	FromID         TL      // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	FromName       *string // (optional)
	Date           int32
	ChannelPost    *int32  // (optional)
	PostAuthor     *string // (optional)
	SavedFromPeer  TL      // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	SavedFromMsgID *int32  // (optional)
	SavedFromID    TL      // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	SavedFromName  *string // (optional)
	SavedDate      *int32  // (optional)
	PSAType        *string // (optional)
}

// Constructs auth.CodeType
type TL_auth_codeTypeSMS struct {
}

// Constructs auth.CodeType
type TL_auth_codeTypeCall struct {
}

// Constructs auth.CodeType
type TL_auth_codeTypeFlashCall struct {
}

// Constructs auth.CodeType
type TL_auth_codeTypeMissedCall struct {
}

// Constructs auth.CodeType
type TL_auth_codeTypeFragmentSMS struct {
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeApp struct {
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeSMS struct {
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeCall struct {
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeFlashCall struct {
	Pattern string
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeMissedCall struct {
	Prefix string
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeEmailCode struct {
	AppleSigninAllowed   bool
	GoogleSigninAllowed  bool
	EmailPattern         string
	Length               int32
	ResetAvailablePeriod *int32 // (optional)
	ResetPendingDate     *int32 // (optional)
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeSetUpEmailRequired struct {
	AppleSigninAllowed  bool
	GoogleSigninAllowed bool
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeFragmentSMS struct {
	URL    string
	Length int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeFirebaseSMS struct {
	Nonce                  []byte  // (optional)
	PlayIntegrityProjectID *int64  // (optional)
	PlayIntegrityNonce     []byte  // (optional)
	Receipt                *string // (optional)
	PushTimeout            *int32  // (optional)
	Length                 int32
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeSMSWord struct {
	Beginning *string // (optional)
}

// Constructs auth.SentCodeType
type TL_auth_sentCodeTypeSMSPhrase struct {
	Beginning *string // (optional)
}

// Constructs messages.BotCallbackAnswer
type TL_messages_botCallbackAnswer struct {
	Alert     bool
	HasURL    bool
	NativeUI  bool
	Message   *string // (optional)
	URL       *string // (optional)
	CacheTime int32
}

// Constructs messages.MessageEditData
type TL_messages_messageEditData struct {
	Caption bool
}

// Constructs InputBotInlineMessageID
type TL_inputBotInlineMessageID struct {
	DCID       int32
	ID         int64
	AccessHash int64
}

// Constructs InputBotInlineMessageID
type TL_inputBotInlineMessageID64 struct {
	DCID       int32
	OwnerID    int64
	ID         int32
	AccessHash int64
}

// Constructs InlineBotSwitchPM
type TL_inlineBotSwitchPM struct {
	Text       string
	StartParam string
}

// Constructs messages.PeerDialogs
type TL_messages_peerDialogs struct {
	Dialogs  []TL // Dialog: TL_dialog | TL_dialogFolder
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
	State    TL_updates_state
}

// Constructs TopPeer
type TL_topPeer struct {
	Peer   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Rating float64
}

// Constructs TopPeerCategory
type TL_topPeerCategoryBotsPM struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryBotsInline struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryCorrespondents struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryGroups struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryChannels struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryPhoneCalls struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryForwardUsers struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryForwardChats struct {
}

// Constructs TopPeerCategory
type TL_topPeerCategoryBotsApp struct {
}

// Constructs TopPeerCategoryPeers
type TL_topPeerCategoryPeers struct {
	Category TL // TopPeerCategory: TL_topPeerCategoryBotsPM | TL_topPeerCategoryBotsInline | TL_topPeerCategoryCorrespondents | TL_topPeerCategoryGroups | TL_topPeerCategoryChannels | TL_topPeerCategoryPhoneCalls | TL_topPeerCategoryForwardUsers | TL_topPeerCategoryForwardChats | TL_topPeerCategoryBotsApp
	Count    int32
	Peers    []TL_topPeer
}

// Constructs contacts.TopPeers
type TL_contacts_topPeersNotModified struct {
}

// Constructs contacts.TopPeers
type TL_contacts_topPeers struct {
	Categories []TL_topPeerCategoryPeers
	Chats      []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL // User: TL_userEmpty | TL_user
}

// Constructs contacts.TopPeers
type TL_contacts_topPeersDisabled struct {
}

// Constructs DraftMessage
type TL_draftMessageEmpty struct {
	Date *int32 // (optional)
}

// Constructs DraftMessage
type TL_draftMessage struct {
	NoWebpage   bool
	InvertMedia bool
	ReplyTo     TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	Message     string
	Entities    []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Media       TL   // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	Date        int32
	Effect      *int64 // (optional)
}

// Constructs messages.FeaturedStickers
type TL_messages_featuredStickersNotModified struct {
	Count int32
}

// Constructs messages.FeaturedStickers
type TL_messages_featuredStickers struct {
	Premium bool
	Hash    int64
	Count   int32
	Sets    []TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
	Unread  []int64
}

// Constructs messages.RecentStickers
type TL_messages_recentStickersNotModified struct {
}

// Constructs messages.RecentStickers
type TL_messages_recentStickers struct {
	Hash     int64
	Packs    []TL_stickerPack
	Stickers []TL // Document: TL_documentEmpty | TL_document
	Dates    []int32
}

// Constructs messages.ArchivedStickers
type TL_messages_archivedStickers struct {
	Count int32
	Sets  []TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
}

// Constructs messages.StickerSetInstallResult
type TL_messages_stickerSetInstallResultSuccess struct {
}

// Constructs messages.StickerSetInstallResult
type TL_messages_stickerSetInstallResultArchive struct {
	Sets []TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
}

// Constructs StickerSetCovered
type TL_stickerSetCovered struct {
	Set   TL_stickerSet
	Cover TL // Document: TL_documentEmpty | TL_document
}

// Constructs StickerSetCovered
type TL_stickerSetMultiCovered struct {
	Set    TL_stickerSet
	Covers []TL // Document: TL_documentEmpty | TL_document
}

// Constructs StickerSetCovered
type TL_stickerSetFullCovered struct {
	Set       TL_stickerSet
	Packs     []TL_stickerPack
	Keywords  []TL_stickerKeyword
	Documents []TL // Document: TL_documentEmpty | TL_document
}

// Constructs StickerSetCovered
type TL_stickerSetNoCovered struct {
	Set TL_stickerSet
}

// Constructs MaskCoords
type TL_maskCoords struct {
	N    int32
	X    float64
	Y    float64
	Zoom float64
}

// Constructs InputStickeredMedia
type TL_inputStickeredMediaPhoto struct {
	ID TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
}

// Constructs InputStickeredMedia
type TL_inputStickeredMediaDocument struct {
	ID TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
}

// Constructs Game
type TL_game struct {
	ID          int64
	AccessHash  int64
	ShortName   string
	Title       string
	Description string
	Photo       TL // Photo: TL_photoEmpty | TL_photo
	Document    TL // (optional) Document: TL_documentEmpty | TL_document
}

// Constructs InputGame
type TL_inputGameID struct {
	ID         int64
	AccessHash int64
}

// Constructs InputGame
type TL_inputGameShortName struct {
	BotID     TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	ShortName string
}

// Constructs HighScore
type TL_highScore struct {
	Pos    int32
	UserID int64
	Score  int32
}

// Constructs messages.HighScores
type TL_messages_highScores struct {
	Scores []TL_highScore
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs RichText
type TL_textEmpty struct {
}

// Constructs RichText
type TL_textPlain struct {
	Text string
}

// Constructs RichText
type TL_textBold struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textItalic struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textUnderline struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textStrike struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textFixed struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textURL struct {
	Text      TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	URL       string
	WebpageID int64
}

// Constructs RichText
type TL_textEmail struct {
	Text  TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Email string
}

// Constructs RichText
type TL_textConcat struct {
	Texts []TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textSubscript struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textSuperscript struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textMarked struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs RichText
type TL_textPhone struct {
	Text  TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Phone string
}

// Constructs RichText
type TL_textImage struct {
	DocumentID int64
	W          int32
	H          int32
}

// Constructs RichText
type TL_textAnchor struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Name string
}

// Constructs PageBlock
type TL_pageBlockUnsupported struct {
}

// Constructs PageBlock
type TL_pageBlockTitle struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockSubtitle struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockAuthorDate struct {
	Author        TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	PublishedDate int32
}

// Constructs PageBlock
type TL_pageBlockHeader struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockSubheader struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockParagraph struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockPreformatted struct {
	Text     TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Language string
}

// Constructs PageBlock
type TL_pageBlockFooter struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockDivider struct {
}

// Constructs PageBlock
type TL_pageBlockAnchor struct {
	Name string
}

// Constructs PageBlock
type TL_pageBlockList struct {
	Items []TL // PageListItem: TL_pageListItemText | TL_pageListItemBlocks
}

// Constructs PageBlock
type TL_pageBlockBlockquote struct {
	Text    TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Caption TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockPullquote struct {
	Text    TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Caption TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockPhoto struct {
	PhotoID   int64
	Caption   TL_pageCaption
	URL       *string // (optional)
	WebpageID *int64  // (optional)
}

// Constructs PageBlock
type TL_pageBlockVideo struct {
	Autoplay bool
	Loop     bool
	VideoID  int64
	Caption  TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockCover struct {
	Cover TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
}

// Constructs PageBlock
type TL_pageBlockEmbed struct {
	FullWidth      bool
	AllowScrolling bool
	URL            *string // (optional)
	HTML           *string // (optional)
	PosterPhotoID  *int64  // (optional)
	W              *int32  // (optional)
	H              *int32  // (optional)
	Caption        TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockEmbedPost struct {
	URL           string
	WebpageID     int64
	AuthorPhotoID int64
	Author        string
	Date          int32
	Blocks        []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Caption       TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockCollage struct {
	Items   []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Caption TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockSlideshow struct {
	Items   []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Caption TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockChannel struct {
	Channel TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
}

// Constructs PageBlock
type TL_pageBlockAudio struct {
	AudioID int64
	Caption TL_pageCaption
}

// Constructs PageBlock
type TL_pageBlockKicker struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockTable struct {
	Bordered bool
	Striped  bool
	Title    TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Rows     []TL_pageTableRow
}

// Constructs PageBlock
type TL_pageBlockOrderedList struct {
	Items []TL // PageListOrderedItem: TL_pageListOrderedItemText | TL_pageListOrderedItemBlocks
}

// Constructs PageBlock
type TL_pageBlockDetails struct {
	Open   bool
	Blocks []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Title  TL   // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageBlock
type TL_pageBlockRelatedArticles struct {
	Title    TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Articles []TL_pageRelatedArticle
}

// Constructs PageBlock
type TL_pageBlockMap struct {
	Geo     TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Zoom    int32
	W       int32
	H       int32
	Caption TL_pageCaption
}

// Constructs PhoneCallDiscardReason
type TL_phoneCallDiscardReasonMissed struct {
}

// Constructs PhoneCallDiscardReason
type TL_phoneCallDiscardReasonDisconnect struct {
}

// Constructs PhoneCallDiscardReason
type TL_phoneCallDiscardReasonHangup struct {
}

// Constructs PhoneCallDiscardReason
type TL_phoneCallDiscardReasonBusy struct {
}

// Constructs DataJSON
type TL_dataJSON struct {
	Data string
}

// Constructs LabeledPrice
type TL_labeledPrice struct {
	Label  string
	Amount int64
}

// Constructs Invoice
type TL_invoice struct {
	Test                     bool
	NameRequested            bool
	PhoneRequested           bool
	EmailRequested           bool
	ShippingAddressRequested bool
	Flexible                 bool
	PhoneToProvider          bool
	EmailToProvider          bool
	Recurring                bool
	Currency                 string
	Prices                   []TL_labeledPrice
	MaxTipAmount             *int64  // (optional)
	SuggestedTipAmounts      []int64 // (optional)
	TermsURL                 *string // (optional)
}

// Constructs PaymentCharge
type TL_paymentCharge struct {
	ID               string
	ProviderChargeID string
}

// Constructs PostAddress
type TL_postAddress struct {
	StreetLine1 string
	StreetLine2 string
	City        string
	State       string
	CountryISO2 string
	PostCode    string
}

// Constructs PaymentRequestedInfo
type TL_paymentRequestedInfo struct {
	Name            *string         // (optional)
	Phone           *string         // (optional)
	Email           *string         // (optional)
	ShippingAddress *TL_postAddress // (optional)
}

// Constructs PaymentSavedCredentials
type TL_paymentSavedCredentialsCard struct {
	ID    string
	Title string
}

// Constructs WebDocument
type TL_webDocument struct {
	URL        string
	AccessHash int64
	Size       int32
	MIMEType   string
	Attributes []TL // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
}

// Constructs WebDocument
type TL_webDocumentNoProxy struct {
	URL        string
	Size       int32
	MIMEType   string
	Attributes []TL // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
}

// Constructs InputWebDocument
type TL_inputWebDocument struct {
	URL        string
	Size       int32
	MIMEType   string
	Attributes []TL // DocumentAttribute: TL_documentAttributeImageSize | TL_documentAttributeAnimated | TL_documentAttributeSticker | TL_documentAttributeVideo | TL_documentAttributeAudio | TL_documentAttributeFilename | TL_documentAttributeHasStickers | TL_documentAttributeCustomEmoji
}

// Constructs InputWebFileLocation
type TL_inputWebFileLocation struct {
	URL        string
	AccessHash int64
}

// Constructs InputWebFileLocation
type TL_inputWebFileGeoPointLocation struct {
	GeoPoint   TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	AccessHash int64
	W          int32
	H          int32
	Zoom       int32
	Scale      int32
}

// Constructs InputWebFileLocation
type TL_inputWebFileAudioAlbumThumbLocation struct {
	Small     bool
	Document  TL      // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Title     *string // (optional)
	Performer *string // (optional)
}

// Constructs upload.WebFile
type TL_upload_webFile struct {
	Size     int32
	MIMEType string
	FileType TL // storage.FileType: TL_storage_fileUnknown | TL_storage_filePartial | TL_storage_fileJPEG | TL_storage_fileGIF | TL_storage_filePNG | TL_storage_filePDF | TL_storage_fileMP3 | TL_storage_fileMOV | TL_storage_fileMP4 | TL_storage_fileWEBP
	Mtime    int32
	Bytes    []byte
}

// Constructs payments.PaymentForm
type TL_payments_paymentForm struct {
	CanSaveCredentials bool
	PasswordMissing    bool
	FormID             int64
	BotID              int64
	Title              string
	Description        string
	Photo              TL // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Invoice            TL_invoice
	ProviderID         int64
	URL                string
	NativeProvider     *string                          // (optional)
	NativeParams       *TL_dataJSON                     // (optional)
	AdditionalMethods  []TL_paymentFormMethod           // (optional)
	SavedInfo          *TL_paymentRequestedInfo         // (optional)
	SavedCredentials   []TL_paymentSavedCredentialsCard // (optional)
	Users              []TL                             // User: TL_userEmpty | TL_user
}

// Constructs payments.PaymentForm
type TL_payments_paymentFormStars struct {
	FormID      int64
	BotID       int64
	Title       string
	Description string
	Photo       TL // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Invoice     TL_invoice
	Users       []TL // User: TL_userEmpty | TL_user
}

// Constructs payments.ValidatedRequestedInfo
type TL_payments_validatedRequestedInfo struct {
	ID              *string             // (optional)
	ShippingOptions []TL_shippingOption // (optional)
}

// Constructs payments.PaymentResult
type TL_payments_paymentResult struct {
	Updates TL // Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
}

// Constructs payments.PaymentResult
type TL_payments_paymentVerificationNeeded struct {
	URL string
}

// Constructs payments.PaymentReceipt
type TL_payments_paymentReceipt struct {
	Date             int32
	BotID            int64
	ProviderID       int64
	Title            string
	Description      string
	Photo            TL // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Invoice          TL_invoice
	Info             *TL_paymentRequestedInfo // (optional)
	Shipping         *TL_shippingOption       // (optional)
	TipAmount        *int64                   // (optional)
	Currency         string
	TotalAmount      int64
	CredentialsTitle string
	Users            []TL // User: TL_userEmpty | TL_user
}

// Constructs payments.PaymentReceipt
type TL_payments_paymentReceiptStars struct {
	Date          int32
	BotID         int64
	Title         string
	Description   string
	Photo         TL // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	Invoice       TL_invoice
	Currency      string
	TotalAmount   int64
	TransactionID string
	Users         []TL // User: TL_userEmpty | TL_user
}

// Constructs payments.SavedInfo
type TL_payments_savedInfo struct {
	HasSavedCredentials bool
	SavedInfo           *TL_paymentRequestedInfo // (optional)
}

// Constructs InputPaymentCredentials
type TL_inputPaymentCredentialsSaved struct {
	ID          string
	TmpPassword []byte
}

// Constructs InputPaymentCredentials
type TL_inputPaymentCredentials struct {
	Save bool
	Data TL_dataJSON
}

// Constructs InputPaymentCredentials
type TL_inputPaymentCredentialsApplePay struct {
	PaymentData TL_dataJSON
}

// Constructs InputPaymentCredentials
type TL_inputPaymentCredentialsGooglePay struct {
	PaymentToken TL_dataJSON
}

// Constructs account.TmpPassword
type TL_account_tmpPassword struct {
	TmpPassword []byte
	ValidUntil  int32
}

// Constructs ShippingOption
type TL_shippingOption struct {
	ID     string
	Title  string
	Prices []TL_labeledPrice
}

// Constructs InputStickerSetItem
type TL_inputStickerSetItem struct {
	Document   TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Emoji      string
	MaskCoords *TL_maskCoords // (optional)
	Keywords   *string        // (optional)
}

// Constructs InputPhoneCall
type TL_inputPhoneCall struct {
	ID         int64
	AccessHash int64
}

// Constructs PhoneCall
type TL_phoneCallEmpty struct {
	ID int64
}

// Constructs PhoneCall
type TL_phoneCallWaiting struct {
	Video         bool
	ID            int64
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
	Protocol      TL_phoneCallProtocol
	ReceiveDate   *int32 // (optional)
}

// Constructs PhoneCall
type TL_phoneCallRequested struct {
	Video         bool
	ID            int64
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
	GAHash        []byte
	Protocol      TL_phoneCallProtocol
}

// Constructs PhoneCall
type TL_phoneCallAccepted struct {
	Video         bool
	ID            int64
	AccessHash    int64
	Date          int32
	AdminID       int64
	ParticipantID int64
	GB            []byte
	Protocol      TL_phoneCallProtocol
}

// Constructs PhoneCall
type TL_phoneCall struct {
	P2PAllowed       bool
	Video            bool
	ID               int64
	AccessHash       int64
	Date             int32
	AdminID          int64
	ParticipantID    int64
	GAOrB            []byte
	KeyFingerprint   int64
	Protocol         TL_phoneCallProtocol
	Connections      []TL // PhoneConnection: TL_phoneConnection | TL_phoneConnectionWebrtc
	StartDate        int32
	CustomParameters *TL_dataJSON // (optional)
}

// Constructs PhoneCall
type TL_phoneCallDiscarded struct {
	NeedRating bool
	NeedDebug  bool
	Video      bool
	ID         int64
	Reason     TL     // (optional) PhoneCallDiscardReason: TL_phoneCallDiscardReasonMissed | TL_phoneCallDiscardReasonDisconnect | TL_phoneCallDiscardReasonHangup | TL_phoneCallDiscardReasonBusy
	Duration   *int32 // (optional)
}

// Constructs PhoneConnection
type TL_phoneConnection struct {
	TCP     bool
	ID      int64
	IP      string
	IPv6    string
	Port    int32
	PeerTag []byte
}

// Constructs PhoneConnection
type TL_phoneConnectionWebrtc struct {
	Turn     bool
	STUN     bool
	ID       int64
	IP       string
	IPv6     string
	Port     int32
	Username string
	Password string
}

// Constructs PhoneCallProtocol
type TL_phoneCallProtocol struct {
	UDPP2P          bool
	UDPReflector    bool
	MinLayer        int32
	MaxLayer        int32
	LibraryVersions []string
}

// Constructs phone.PhoneCall
type TL_phone_phoneCall struct {
	PhoneCall TL   // PhoneCall: TL_phoneCallEmpty | TL_phoneCallWaiting | TL_phoneCallRequested | TL_phoneCallAccepted | TL_phoneCall | TL_phoneCallDiscarded
	Users     []TL // User: TL_userEmpty | TL_user
}

// Constructs upload.CdnFile
type TL_upload_cdnFileReuploadNeeded struct {
	RequestToken []byte
}

// Constructs upload.CdnFile
type TL_upload_cdnFile struct {
	Bytes []byte
}

// Constructs CdnPublicKey
type TL_cdnPublicKey struct {
	DCID      int32
	PublicKey string
}

// Constructs CdnConfig
type TL_cdnConfig struct {
	PublicKeys []TL_cdnPublicKey
}

// Constructs LangPackString
type TL_langPackString struct {
	Key   string
	Value string
}

// Constructs LangPackString
type TL_langPackStringPluralized struct {
	Key        string
	ZeroValue  *string // (optional)
	OneValue   *string // (optional)
	TwoValue   *string // (optional)
	FewValue   *string // (optional)
	ManyValue  *string // (optional)
	OtherValue string
}

// Constructs LangPackString
type TL_langPackStringDeleted struct {
	Key string
}

// Constructs LangPackDifference
type TL_langPackDifference struct {
	LangCode    string
	FromVersion int32
	Version     int32
	Strings     []TL // LangPackString: TL_langPackString | TL_langPackStringPluralized | TL_langPackStringDeleted
}

// Constructs LangPackLanguage
type TL_langPackLanguage struct {
	Official        bool
	RTL             bool
	Beta            bool
	Name            string
	NativeName      string
	LangCode        string
	BaseLangCode    *string // (optional)
	PluralCode      string
	StringsCount    int32
	TranslatedCount int32
	TranslationsURL string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeTitle struct {
	PrevValue string
	NewValue  string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeAbout struct {
	PrevValue string
	NewValue  string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeUsername struct {
	PrevValue string
	NewValue  string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangePhoto struct {
	PrevPhoto TL // Photo: TL_photoEmpty | TL_photo
	NewPhoto  TL // Photo: TL_photoEmpty | TL_photo
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleInvites struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleSignatures struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionUpdatePinned struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionEditMessage struct {
	PrevMessage TL // Message: TL_messageEmpty | TL_message | TL_messageService
	NewMessage  TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionDeleteMessage struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantJoin struct {
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantLeave struct {
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantInvite struct {
	Participant TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantToggleBan struct {
	PrevParticipant TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	NewParticipant  TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantToggleAdmin struct {
	PrevParticipant TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	NewParticipant  TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeStickerSet struct {
	PrevStickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	NewStickerset  TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionTogglePreHistoryHidden struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionDefaultBannedRights struct {
	PrevBannedRights TL_chatBannedRights
	NewBannedRights  TL_chatBannedRights
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionStopPoll struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeLinkedChat struct {
	PrevValue int64
	NewValue  int64
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeLocation struct {
	PrevValue TL // ChannelLocation: TL_channelLocationEmpty | TL_channelLocation
	NewValue  TL // ChannelLocation: TL_channelLocationEmpty | TL_channelLocation
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleSlowMode struct {
	PrevValue int32
	NewValue  int32
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionStartGroupCall struct {
	Call TL_inputGroupCall
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionDiscardGroupCall struct {
	Call TL_inputGroupCall
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantMute struct {
	Participant TL_groupCallParticipant
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantUnmute struct {
	Participant TL_groupCallParticipant
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleGroupCallSetting struct {
	JoinMuted bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantJoinByInvite struct {
	ViaChatlist bool
	Invite      TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionExportedInviteDelete struct {
	Invite TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionExportedInviteRevoke struct {
	Invite TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionExportedInviteEdit struct {
	PrevInvite TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	NewInvite  TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantVolume struct {
	Participant TL_groupCallParticipant
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeHistoryTTL struct {
	PrevValue int32
	NewValue  int32
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantJoinByRequest struct {
	Invite     TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	ApprovedBy int64
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleNoForwards struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionSendMessage struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeAvailableReactions struct {
	PrevValue TL // ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
	NewValue  TL // ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeUsernames struct {
	PrevValue []string
	NewValue  []string
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleForum struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionCreateTopic struct {
	Topic TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionEditTopic struct {
	PrevTopic TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
	NewTopic  TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionDeleteTopic struct {
	Topic TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionPINTopic struct {
	PrevTopic TL // (optional) ForumTopic: TL_forumTopicDeleted | TL_forumTopic
	NewTopic  TL // (optional) ForumTopic: TL_forumTopicDeleted | TL_forumTopic
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleAntiSpam struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangePeerColor struct {
	PrevValue TL_peerColor
	NewValue  TL_peerColor
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeProfilePeerColor struct {
	PrevValue TL_peerColor
	NewValue  TL_peerColor
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeWallpaper struct {
	PrevValue TL // WallPaper: TL_wallPaper | TL_wallPaperNoFile
	NewValue  TL // WallPaper: TL_wallPaper | TL_wallPaperNoFile
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeEmojiStatus struct {
	PrevValue TL // EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
	NewValue  TL // EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionChangeEmojiStickerSet struct {
	PrevStickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	NewStickerset  TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionToggleSignatureProfiles struct {
	NewValue bool
}

// Constructs ChannelAdminLogEventAction
type TL_channelAdminLogEventActionParticipantSubExtend struct {
	PrevParticipant TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
	NewParticipant  TL // ChannelParticipant: TL_channelParticipant | TL_channelParticipantSelf | TL_channelParticipantCreator | TL_channelParticipantAdmin | TL_channelParticipantBanned | TL_channelParticipantLeft
}

// Constructs ChannelAdminLogEvent
type TL_channelAdminLogEvent struct {
	ID     int64
	Date   int32
	UserID int64
	Action TL // ChannelAdminLogEventAction: TL_channelAdminLogEventActionChangeTitle | TL_channelAdminLogEventActionChangeAbout | TL_channelAdminLogEventActionChangeUsername | TL_channelAdminLogEventActionChangePhoto | TL_channelAdminLogEventActionToggleInvites | TL_channelAdminLogEventActionToggleSignatures | TL_channelAdminLogEventActionUpdatePinned | TL_channelAdminLogEventActionEditMessage | TL_channelAdminLogEventActionDeleteMessage | TL_channelAdminLogEventActionParticipantJoin | TL_channelAdminLogEventActionParticipantLeave | TL_channelAdminLogEventActionParticipantInvite | TL_channelAdminLogEventActionParticipantToggleBan | TL_channelAdminLogEventActionParticipantToggleAdmin | TL_channelAdminLogEventActionChangeStickerSet | TL_channelAdminLogEventActionTogglePreHistoryHidden | TL_channelAdminLogEventActionDefaultBannedRights | TL_channelAdminLogEventActionStopPoll | TL_channelAdminLogEventActionChangeLinkedChat | TL_channelAdminLogEventActionChangeLocation | TL_channelAdminLogEventActionToggleSlowMode | TL_channelAdminLogEventActionStartGroupCall | TL_channelAdminLogEventActionDiscardGroupCall | TL_channelAdminLogEventActionParticipantMute | TL_channelAdminLogEventActionParticipantUnmute | TL_channelAdminLogEventActionToggleGroupCallSetting | TL_channelAdminLogEventActionParticipantJoinByInvite | TL_channelAdminLogEventActionExportedInviteDelete | TL_channelAdminLogEventActionExportedInviteRevoke | TL_channelAdminLogEventActionExportedInviteEdit | TL_channelAdminLogEventActionParticipantVolume | TL_channelAdminLogEventActionChangeHistoryTTL | TL_channelAdminLogEventActionParticipantJoinByRequest | TL_channelAdminLogEventActionToggleNoForwards | TL_channelAdminLogEventActionSendMessage | TL_channelAdminLogEventActionChangeAvailableReactions | TL_channelAdminLogEventActionChangeUsernames | TL_channelAdminLogEventActionToggleForum | TL_channelAdminLogEventActionCreateTopic | TL_channelAdminLogEventActionEditTopic | TL_channelAdminLogEventActionDeleteTopic | TL_channelAdminLogEventActionPINTopic | TL_channelAdminLogEventActionToggleAntiSpam | TL_channelAdminLogEventActionChangePeerColor | TL_channelAdminLogEventActionChangeProfilePeerColor | TL_channelAdminLogEventActionChangeWallpaper | TL_channelAdminLogEventActionChangeEmojiStatus | TL_channelAdminLogEventActionChangeEmojiStickerSet | TL_channelAdminLogEventActionToggleSignatureProfiles | TL_channelAdminLogEventActionParticipantSubExtend
}

// Constructs channels.AdminLogResults
type TL_channels_adminLogResults struct {
	Events []TL_channelAdminLogEvent
	Chats  []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs ChannelAdminLogEventsFilter
type TL_channelAdminLogEventsFilter struct {
	Join      bool
	Leave     bool
	Invite    bool
	Ban       bool
	Unban     bool
	Kick      bool
	Unkick    bool
	Promote   bool
	Demote    bool
	Info      bool
	Settings  bool
	Pinned    bool
	Edit      bool
	Delete    bool
	GroupCall bool
	Invites   bool
	Send      bool
	Forums    bool
	SubExtend bool
}

// Constructs PopularContact
type TL_popularContact struct {
	ClientID  int64
	Importers int32
}

// Constructs messages.FavedStickers
type TL_messages_favedStickersNotModified struct {
}

// Constructs messages.FavedStickers
type TL_messages_favedStickers struct {
	Hash     int64
	Packs    []TL_stickerPack
	Stickers []TL // Document: TL_documentEmpty | TL_document
}

// Constructs RecentMeUrl
type TL_recentMeURLUnknown struct {
	URL string
}

// Constructs RecentMeUrl
type TL_recentMeURLUser struct {
	URL    string
	UserID int64
}

// Constructs RecentMeUrl
type TL_recentMeURLChat struct {
	URL    string
	ChatID int64
}

// Constructs RecentMeUrl
type TL_recentMeURLChatInvite struct {
	URL        string
	ChatInvite TL // ChatInvite: TL_chatInviteAlready | TL_chatInvite | TL_chatInvitePeek
}

// Constructs RecentMeUrl
type TL_recentMeURLStickerSet struct {
	URL string
	Set TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
}

// Constructs help.RecentMeUrls
type TL_help_recentMeURLs struct {
	URLs  []TL // RecentMeUrl: TL_recentMeURLUnknown | TL_recentMeURLUser | TL_recentMeURLChat | TL_recentMeURLChatInvite | TL_recentMeURLStickerSet
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs InputSingleMedia
type TL_inputSingleMedia struct {
	Media    TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	RandomID int64
	Message  string
	Entities []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs WebAuthorization
type TL_webAuthorization struct {
	Hash        int64
	BotID       int64
	Domain      string
	Browser     string
	Platform    string
	DateCreated int32
	DateActive  int32
	IP          string
	Region      string
}

// Constructs account.WebAuthorizations
type TL_account_webAuthorizations struct {
	Authorizations []TL_webAuthorization
	Users          []TL // User: TL_userEmpty | TL_user
}

// Constructs InputMessage
type TL_inputMessageID struct {
	ID int32
}

// Constructs InputMessage
type TL_inputMessageReplyTo struct {
	ID int32
}

// Constructs InputMessage
type TL_inputMessagePinned struct {
}

// Constructs InputMessage
type TL_inputMessageCallbackQuery struct {
	ID      int32
	QueryID int64
}

// Constructs InputDialogPeer
type TL_inputDialogPeer struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs InputDialogPeer
type TL_inputDialogPeerFolder struct {
	FolderID int32
}

// Constructs DialogPeer
type TL_dialogPeer struct {
	Peer TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs DialogPeer
type TL_dialogPeerFolder struct {
	FolderID int32
}

// Constructs messages.FoundStickerSets
type TL_messages_foundStickerSetsNotModified struct {
}

// Constructs messages.FoundStickerSets
type TL_messages_foundStickerSets struct {
	Hash int64
	Sets []TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
}

// Constructs FileHash
type TL_fileHash struct {
	Offset int64
	Limit  int32
	Hash   []byte
}

// Constructs InputClientProxy
type TL_inputClientProxy struct {
	Address string
	Port    int32
}

// Constructs help.TermsOfServiceUpdate
type TL_help_termsOfServiceUpdateEmpty struct {
	Expires int32
}

// Constructs help.TermsOfServiceUpdate
type TL_help_termsOfServiceUpdate struct {
	Expires        int32
	TermsOfService TL_help_termsOfService
}

// Constructs InputSecureFile
type TL_inputSecureFileUploaded struct {
	ID          int64
	Parts       int32
	MD5Checksum string
	FileHash    []byte
	Secret      []byte
}

// Constructs InputSecureFile
type TL_inputSecureFile struct {
	ID         int64
	AccessHash int64
}

// Constructs SecureFile
type TL_secureFileEmpty struct {
}

// Constructs SecureFile
type TL_secureFile struct {
	ID         int64
	AccessHash int64
	Size       int64
	DCID       int32
	Date       int32
	FileHash   []byte
	Secret     []byte
}

// Constructs SecureData
type TL_secureData struct {
	Data     []byte
	DataHash []byte
	Secret   []byte
}

// Constructs SecurePlainData
type TL_securePlainPhone struct {
	Phone string
}

// Constructs SecurePlainData
type TL_securePlainEmail struct {
	Email string
}

// Constructs SecureValueType
type TL_secureValueTypePersonalDetails struct {
}

// Constructs SecureValueType
type TL_secureValueTypePassport struct {
}

// Constructs SecureValueType
type TL_secureValueTypeDriverLicense struct {
}

// Constructs SecureValueType
type TL_secureValueTypeIdentityCard struct {
}

// Constructs SecureValueType
type TL_secureValueTypeInternalPassport struct {
}

// Constructs SecureValueType
type TL_secureValueTypeAddress struct {
}

// Constructs SecureValueType
type TL_secureValueTypeUtilityBill struct {
}

// Constructs SecureValueType
type TL_secureValueTypeBankStatement struct {
}

// Constructs SecureValueType
type TL_secureValueTypeRentalAgreement struct {
}

// Constructs SecureValueType
type TL_secureValueTypePassportRegistration struct {
}

// Constructs SecureValueType
type TL_secureValueTypeTemporaryRegistration struct {
}

// Constructs SecureValueType
type TL_secureValueTypePhone struct {
}

// Constructs SecureValueType
type TL_secureValueTypeEmail struct {
}

// Constructs SecureValue
type TL_secureValue struct {
	Type        TL             // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	Data        *TL_secureData // (optional)
	FrontSide   TL             // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	ReverseSide TL             // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	Selfie      TL             // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	Translation []TL           // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	Files       []TL           // (optional) SecureFile: TL_secureFileEmpty | TL_secureFile
	PlainData   TL             // (optional) SecurePlainData: TL_securePlainPhone | TL_securePlainEmail
	Hash        []byte
}

// Constructs InputSecureValue
type TL_inputSecureValue struct {
	Type        TL             // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	Data        *TL_secureData // (optional)
	FrontSide   TL             // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	ReverseSide TL             // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	Selfie      TL             // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	Translation []TL           // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	Files       []TL           // (optional) InputSecureFile: TL_inputSecureFileUploaded | TL_inputSecureFile
	PlainData   TL             // (optional) SecurePlainData: TL_securePlainPhone | TL_securePlainEmail
}

// Constructs SecureValueHash
type TL_secureValueHash struct {
	Type TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	Hash []byte
}

// Constructs SecureValueError
type TL_secureValueErrorData struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	DataHash []byte
	Field    string
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorFrontSide struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorReverseSide struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorSelfie struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorFile struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorFiles struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash [][]byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueError struct {
	Type TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	Hash []byte
	Text string
}

// Constructs SecureValueError
type TL_secureValueErrorTranslationFile struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash []byte
	Text     string
}

// Constructs SecureValueError
type TL_secureValueErrorTranslationFiles struct {
	Type     TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
	FileHash [][]byte
	Text     string
}

// Constructs SecureCredentialsEncrypted
type TL_secureCredentialsEncrypted struct {
	Data   []byte
	Hash   []byte
	Secret []byte
}

// Constructs account.AuthorizationForm
type TL_account_authorizationForm struct {
	RequiredTypes    []TL // SecureRequiredType: TL_secureRequiredType | TL_secureRequiredTypeOneOf
	Values           []TL_secureValue
	Errors           []TL    // SecureValueError: TL_secureValueErrorData | TL_secureValueErrorFrontSide | TL_secureValueErrorReverseSide | TL_secureValueErrorSelfie | TL_secureValueErrorFile | TL_secureValueErrorFiles | TL_secureValueError | TL_secureValueErrorTranslationFile | TL_secureValueErrorTranslationFiles
	Users            []TL    // User: TL_userEmpty | TL_user
	PrivacyPolicyURL *string // (optional)
}

// Constructs account.SentEmailCode
type TL_account_sentEmailCode struct {
	EmailPattern string
	Length       int32
}

// Constructs help.DeepLinkInfo
type TL_help_deepLinkInfoEmpty struct {
}

// Constructs help.DeepLinkInfo
type TL_help_deepLinkInfo struct {
	UpdateApp bool
	Message   string
	Entities  []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs SavedContact
type TL_savedPhoneContact struct {
	Phone     string
	FirstName string
	LastName  string
	Date      int32
}

// Constructs account.Takeout
type TL_account_takeout struct {
	ID int64
}

// Constructs PasswordKdfAlgo
type TL_passwordKDFAlgoUnknown struct {
}

// Constructs PasswordKdfAlgo
type TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow struct {
	Salt1 []byte
	Salt2 []byte
	G     int32
	P     []byte
}

// Constructs SecurePasswordKdfAlgo
type TL_securePasswordKDFAlgoUnknown struct {
}

// Constructs SecurePasswordKdfAlgo
type TL_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000 struct {
	Salt []byte
}

// Constructs SecurePasswordKdfAlgo
type TL_securePasswordKDFAlgoSHA512 struct {
	Salt []byte
}

// Constructs SecureSecretSettings
type TL_secureSecretSettings struct {
	SecureAlgo     TL // SecurePasswordKdfAlgo: TL_securePasswordKDFAlgoUnknown | TL_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000 | TL_securePasswordKDFAlgoSHA512
	SecureSecret   []byte
	SecureSecretID int64
}

// Constructs InputCheckPasswordSRP
type TL_inputCheckPasswordEmpty struct {
}

// Constructs InputCheckPasswordSRP
type TL_inputCheckPasswordSRP struct {
	SrpID int64
	A     []byte
	M1    []byte
}

// Constructs SecureRequiredType
type TL_secureRequiredType struct {
	NativeNames         bool
	SelfieRequired      bool
	TranslationRequired bool
	Type                TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
}

// Constructs SecureRequiredType
type TL_secureRequiredTypeOneOf struct {
	Types []TL // SecureRequiredType: TL_secureRequiredType | TL_secureRequiredTypeOneOf
}

// Constructs help.PassportConfig
type TL_help_passportConfigNotModified struct {
}

// Constructs help.PassportConfig
type TL_help_passportConfig struct {
	Hash           int32
	CountriesLangs TL_dataJSON
}

// Constructs InputAppEvent
type TL_inputAppEvent struct {
	Time float64
	Type string
	Peer int64
	Data TL // JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
}

// Constructs JSONObjectValue
type TL_jsonObjectValue struct {
	Key   string
	Value TL // JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
}

// Constructs JSONValue
type TL_jsonNull struct {
}

// Constructs JSONValue
type TL_jsonBool struct {
	Value bool
}

// Constructs JSONValue
type TL_jsonNumber struct {
	Value float64
}

// Constructs JSONValue
type TL_jsonString struct {
	Value string
}

// Constructs JSONValue
type TL_jsonArray struct {
	Value []TL // JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
}

// Constructs JSONValue
type TL_jsonObject struct {
	Value []TL_jsonObjectValue
}

// Constructs PageTableCell
type TL_pageTableCell struct {
	Header       bool
	AlignCenter  bool
	AlignRight   bool
	ValignMiddle bool
	ValignBottom bool
	Text         TL     // (optional) RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Colspan      *int32 // (optional)
	Rowspan      *int32 // (optional)
}

// Constructs PageTableRow
type TL_pageTableRow struct {
	Cells []TL_pageTableCell
}

// Constructs PageCaption
type TL_pageCaption struct {
	Text   TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
	Credit TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageListItem
type TL_pageListItemText struct {
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageListItem
type TL_pageListItemBlocks struct {
	Blocks []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
}

// Constructs PageListOrderedItem
type TL_pageListOrderedItemText struct {
	Num  string
	Text TL // RichText: TL_textEmpty | TL_textPlain | TL_textBold | TL_textItalic | TL_textUnderline | TL_textStrike | TL_textFixed | TL_textURL | TL_textEmail | TL_textConcat | TL_textSubscript | TL_textSuperscript | TL_textMarked | TL_textPhone | TL_textImage | TL_textAnchor
}

// Constructs PageListOrderedItem
type TL_pageListOrderedItemBlocks struct {
	Num    string
	Blocks []TL // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
}

// Constructs PageRelatedArticle
type TL_pageRelatedArticle struct {
	URL           string
	WebpageID     int64
	Title         *string // (optional)
	Description   *string // (optional)
	PhotoID       *int64  // (optional)
	Author        *string // (optional)
	PublishedDate *int32  // (optional)
}

// Constructs Page
type TL_page struct {
	Part      bool
	RTL       bool
	V2        bool
	URL       string
	Blocks    []TL   // PageBlock: TL_pageBlockUnsupported | TL_pageBlockTitle | TL_pageBlockSubtitle | TL_pageBlockAuthorDate | TL_pageBlockHeader | TL_pageBlockSubheader | TL_pageBlockParagraph | TL_pageBlockPreformatted | TL_pageBlockFooter | TL_pageBlockDivider | TL_pageBlockAnchor | TL_pageBlockList | TL_pageBlockBlockquote | TL_pageBlockPullquote | TL_pageBlockPhoto | TL_pageBlockVideo | TL_pageBlockCover | TL_pageBlockEmbed | TL_pageBlockEmbedPost | TL_pageBlockCollage | TL_pageBlockSlideshow | TL_pageBlockChannel | TL_pageBlockAudio | TL_pageBlockKicker | TL_pageBlockTable | TL_pageBlockOrderedList | TL_pageBlockDetails | TL_pageBlockRelatedArticles | TL_pageBlockMap
	Photos    []TL   // Photo: TL_photoEmpty | TL_photo
	Documents []TL   // Document: TL_documentEmpty | TL_document
	Views     *int32 // (optional)
}

// Constructs help.SupportName
type TL_help_supportName struct {
	Name string
}

// Constructs help.UserInfo
type TL_help_userInfoEmpty struct {
}

// Constructs help.UserInfo
type TL_help_userInfo struct {
	Message  string
	Entities []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Author   string
	Date     int32
}

// Constructs PollAnswer
type TL_pollAnswer struct {
	Text   TL_textWithEntities
	Option []byte
}

// Constructs Poll
type TL_poll struct {
	ID             int64
	Closed         bool
	PublicVoters   bool
	MultipleChoice bool
	Quiz           bool
	Question       TL_textWithEntities
	Answers        []TL_pollAnswer
	ClosePeriod    *int32 // (optional)
	CloseDate      *int32 // (optional)
}

// Constructs PollAnswerVoters
type TL_pollAnswerVoters struct {
	Chosen  bool
	Correct bool
	Option  []byte
	Voters  int32
}

// Constructs PollResults
type TL_pollResults struct {
	Min              bool
	Results          []TL_pollAnswerVoters // (optional)
	TotalVoters      *int32                // (optional)
	RecentVoters     []TL                  // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Solution         *string               // (optional)
	SolutionEntities []TL                  // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs ChatOnlines
type TL_chatOnlines struct {
	Onlines int32
}

// Constructs StatsURL
type TL_statsURL struct {
	URL string
}

// Constructs ChatAdminRights
type TL_chatAdminRights struct {
	ChangeInfo     bool
	PostMessages   bool
	EditMessages   bool
	DeleteMessages bool
	BanUsers       bool
	InviteUsers    bool
	PINMessages    bool
	AddAdmins      bool
	Anonymous      bool
	ManageCall     bool
	Other          bool
	ManageTopics   bool
	PostStories    bool
	EditStories    bool
	DeleteStories  bool
}

// Constructs ChatBannedRights
type TL_chatBannedRights struct {
	ViewMessages    bool
	SendMessages    bool
	SendMedia       bool
	SendStickers    bool
	SendGIFs        bool
	SendGames       bool
	SendInline      bool
	EmbedLinks      bool
	SendPolls       bool
	ChangeInfo      bool
	InviteUsers     bool
	PINMessages     bool
	ManageTopics    bool
	SendPhotos      bool
	SendVideos      bool
	SendRoundvideos bool
	SendAudios      bool
	SendVoices      bool
	SendDocs        bool
	SendPlain       bool
	UntilDate       int32
}

// Constructs InputWallPaper
type TL_inputWallPaper struct {
	ID         int64
	AccessHash int64
}

// Constructs InputWallPaper
type TL_inputWallPaperSlug struct {
	Slug string
}

// Constructs InputWallPaper
type TL_inputWallPaperNoFile struct {
	ID int64
}

// Constructs account.WallPapers
type TL_account_wallPapersNotModified struct {
}

// Constructs account.WallPapers
type TL_account_wallPapers struct {
	Hash       int64
	Wallpapers []TL // WallPaper: TL_wallPaper | TL_wallPaperNoFile
}

// Constructs CodeSettings
type TL_codeSettings struct {
	AllowFlashcall  bool
	CurrentNumber   bool
	AllowAppHash    bool
	AllowMissedCall bool
	AllowFirebase   bool
	UnknownNumber   bool
	LogoutTokens    [][]byte // (optional)
	Token           *string  // (optional)
	AppSandbox      *bool    // (optional)
}

// Constructs WallPaperSettings
type TL_wallPaperSettings struct {
	Blur                  bool
	Motion                bool
	BackgroundColor       *int32  // (optional)
	SecondBackgroundColor *int32  // (optional)
	ThirdBackgroundColor  *int32  // (optional)
	FourthBackgroundColor *int32  // (optional)
	Intensity             *int32  // (optional)
	Rotation              *int32  // (optional)
	Emoticon              *string // (optional)
}

// Constructs AutoDownloadSettings
type TL_autoDownloadSettings struct {
	Disabled                      bool
	VideoPreloadLarge             bool
	AudioPreloadNext              bool
	PhonecallsLessData            bool
	StoriesPreload                bool
	PhotoSizeMax                  int32
	VideoSizeMax                  int64
	FileSizeMax                   int64
	VideoUploadMaxbitrate         int32
	SmallQueueActiveOperationsMax int32
	LargeQueueActiveOperationsMax int32
}

// Constructs account.AutoDownloadSettings
type TL_account_autoDownloadSettings struct {
	Low    TL_autoDownloadSettings
	Medium TL_autoDownloadSettings
	High   TL_autoDownloadSettings
}

// Constructs EmojiKeyword
type TL_emojiKeyword struct {
	Keyword   string
	Emoticons []string
}

// Constructs EmojiKeyword
type TL_emojiKeywordDeleted struct {
	Keyword   string
	Emoticons []string
}

// Constructs EmojiKeywordsDifference
type TL_emojiKeywordsDifference struct {
	LangCode    string
	FromVersion int32
	Version     int32
	Keywords    []TL // EmojiKeyword: TL_emojiKeyword | TL_emojiKeywordDeleted
}

// Constructs EmojiURL
type TL_emojiURL struct {
	URL string
}

// Constructs EmojiLanguage
type TL_emojiLanguage struct {
	LangCode string
}

// Constructs Folder
type TL_folder struct {
	AutofillNewBroadcasts     bool
	AutofillPublicGroups      bool
	AutofillNewCorrespondents bool
	ID                        int32
	Title                     string
	Photo                     TL // (optional) ChatPhoto: TL_chatPhotoEmpty | TL_chatPhoto
}

// Constructs InputFolderPeer
type TL_inputFolderPeer struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	FolderID int32
}

// Constructs FolderPeer
type TL_folderPeer struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	FolderID int32
}

// Constructs messages.SearchCounter
type TL_messages_searchCounter struct {
	Inexact bool
	Filter  TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterURL | TL_inputMessagesFilterGIF | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	Count   int32
}

// Constructs UrlAuthResult
type TL_urlAuthResultRequest struct {
	RequestWriteAccess bool
	Bot                TL // User: TL_userEmpty | TL_user
	Domain             string
}

// Constructs UrlAuthResult
type TL_urlAuthResultAccepted struct {
	URL string
}

// Constructs UrlAuthResult
type TL_urlAuthResultDefault struct {
}

// Constructs ChannelLocation
type TL_channelLocationEmpty struct {
}

// Constructs ChannelLocation
type TL_channelLocation struct {
	GeoPoint TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Address  string
}

// Constructs PeerLocated
type TL_peerLocated struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Expires  int32
	Distance int32
}

// Constructs PeerLocated
type TL_peerSelfLocated struct {
	Expires int32
}

// Constructs RestrictionReason
type TL_restrictionReason struct {
	Platform string
	Reason   string
	Text     string
}

// Constructs InputTheme
type TL_inputTheme struct {
	ID         int64
	AccessHash int64
}

// Constructs InputTheme
type TL_inputThemeSlug struct {
	Slug string
}

// Constructs Theme
type TL_theme struct {
	Creator       bool
	Default       bool
	ForChat       bool
	ID            int64
	AccessHash    int64
	Slug          string
	Title         string
	Document      TL                 // (optional) Document: TL_documentEmpty | TL_document
	Settings      []TL_themeSettings // (optional)
	Emoticon      *string            // (optional)
	InstallsCount *int32             // (optional)
}

// Constructs account.Themes
type TL_account_themesNotModified struct {
}

// Constructs account.Themes
type TL_account_themes struct {
	Hash   int64
	Themes []TL_theme
}

// Constructs auth.LoginToken
type TL_auth_loginToken struct {
	Expires int32
	Token   []byte
}

// Constructs auth.LoginToken
type TL_auth_loginTokenMigrateTo struct {
	DCID  int32
	Token []byte
}

// Constructs auth.LoginToken
type TL_auth_loginTokenSuccess struct {
	Authorization TL // auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
}

// Constructs account.ContentSettings
type TL_account_contentSettings struct {
	SensitiveEnabled   bool
	SensitiveCanChange bool
}

// Constructs messages.InactiveChats
type TL_messages_inactiveChats struct {
	Dates []int32
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs BaseTheme
type TL_baseThemeClassic struct {
}

// Constructs BaseTheme
type TL_baseThemeDay struct {
}

// Constructs BaseTheme
type TL_baseThemeNight struct {
}

// Constructs BaseTheme
type TL_baseThemeTinted struct {
}

// Constructs BaseTheme
type TL_baseThemeArctic struct {
}

// Constructs InputThemeSettings
type TL_inputThemeSettings struct {
	MessageColorsAnimated bool
	BaseTheme             TL // BaseTheme: TL_baseThemeClassic | TL_baseThemeDay | TL_baseThemeNight | TL_baseThemeTinted | TL_baseThemeArctic
	AccentColor           int32
	OutboxAccentColor     *int32                // (optional)
	MessageColors         []int32               // (optional)
	Wallpaper             TL                    // (optional) InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
	WallpaperSettings     *TL_wallPaperSettings // (optional)
}

// Constructs ThemeSettings
type TL_themeSettings struct {
	MessageColorsAnimated bool
	BaseTheme             TL // BaseTheme: TL_baseThemeClassic | TL_baseThemeDay | TL_baseThemeNight | TL_baseThemeTinted | TL_baseThemeArctic
	AccentColor           int32
	OutboxAccentColor     *int32  // (optional)
	MessageColors         []int32 // (optional)
	Wallpaper             TL      // (optional) WallPaper: TL_wallPaper | TL_wallPaperNoFile
}

// Constructs WebPageAttribute
type TL_webPageAttributeTheme struct {
	Documents []TL              // (optional) Document: TL_documentEmpty | TL_document
	Settings  *TL_themeSettings // (optional)
}

// Constructs WebPageAttribute
type TL_webPageAttributeStory struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ID    int32
	Story TL // (optional) StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs WebPageAttribute
type TL_webPageAttributeStickerSet struct {
	Emojis    bool
	TextColor bool
	Stickers  []TL // Document: TL_documentEmpty | TL_document
}

// Constructs messages.VotesList
type TL_messages_votesList struct {
	Count      int32
	Votes      []TL    // MessagePeerVote: TL_messagePeerVote | TL_messagePeerVoteInputOption | TL_messagePeerVoteMultiple
	Chats      []TL    // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL    // User: TL_userEmpty | TL_user
	NextOffset *string // (optional)
}

// Constructs BankCardOpenUrl
type TL_bankCardOpenURL struct {
	URL  string
	Name string
}

// Constructs payments.BankCardData
type TL_payments_bankCardData struct {
	Title    string
	OpenURLs []TL_bankCardOpenURL
}

// Constructs DialogFilter
type TL_dialogFilter struct {
	Contacts        bool
	NonContacts     bool
	Groups          bool
	Broadcasts      bool
	Bots            bool
	ExcludeMuted    bool
	ExcludeRead     bool
	ExcludeArchived bool
	ID              int32
	Title           string
	Emoticon        *string // (optional)
	Color           *int32  // (optional)
	PinnedPeers     []TL    // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	IncludePeers    []TL    // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ExcludePeers    []TL    // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs DialogFilter
type TL_dialogFilterDefault struct {
}

// Constructs DialogFilter
type TL_dialogFilterChatlist struct {
	HasMyInvites bool
	ID           int32
	Title        string
	Emoticon     *string // (optional)
	Color        *int32  // (optional)
	PinnedPeers  []TL    // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	IncludePeers []TL    // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs DialogFilterSuggested
type TL_dialogFilterSuggested struct {
	Filter      TL // DialogFilter: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
	Description string
}

// Constructs StatsDateRangeDays
type TL_statsDateRangeDays struct {
	MinDate int32
	MaxDate int32
}

// Constructs StatsAbsValueAndPrev
type TL_statsAbsValueAndPrev struct {
	Current  float64
	Previous float64
}

// Constructs StatsPercentValue
type TL_statsPercentValue struct {
	Part  float64
	Total float64
}

// Constructs StatsGraph
type TL_statsGraphAsync struct {
	Token string
}

// Constructs StatsGraph
type TL_statsGraphError struct {
	Error string
}

// Constructs StatsGraph
type TL_statsGraph struct {
	JSON      TL_dataJSON
	ZoomToken *string // (optional)
}

// Constructs stats.BroadcastStats
type TL_stats_broadcastStats struct {
	Period                       TL_statsDateRangeDays
	Followers                    TL_statsAbsValueAndPrev
	ViewsPerPost                 TL_statsAbsValueAndPrev
	SharesPerPost                TL_statsAbsValueAndPrev
	ReactionsPerPost             TL_statsAbsValueAndPrev
	ViewsPerStory                TL_statsAbsValueAndPrev
	SharesPerStory               TL_statsAbsValueAndPrev
	ReactionsPerStory            TL_statsAbsValueAndPrev
	EnabledNotifications         TL_statsPercentValue
	GrowthGraph                  TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	FollowersGraph               TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	MuteGraph                    TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	TopHoursGraph                TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	InteractionsGraph            TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	IVInteractionsGraph          TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	ViewsBySourceGraph           TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	NewFollowersBySourceGraph    TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	LanguagesGraph               TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	ReactionsByEmotionGraph      TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	StoryInteractionsGraph       TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	StoryReactionsByEmotionGraph TL   // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	RecentPostsInteractions      []TL // PostInteractionCounters: TL_postInteractionCountersMessage | TL_postInteractionCountersStory
}

// Constructs help.PromoData
type TL_help_promoDataEmpty struct {
	Expires int32
}

// Constructs help.PromoData
type TL_help_promoData struct {
	Proxy      bool
	Expires    int32
	Peer       TL      // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats      []TL    // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL    // User: TL_userEmpty | TL_user
	PSAType    *string // (optional)
	PSAMessage *string // (optional)
}

// Constructs VideoSize
type TL_videoSize struct {
	Type         string
	W            int32
	H            int32
	Size         int32
	VideoStartTS *float64 // (optional)
}

// Constructs VideoSize
type TL_videoSizeEmojiMarkup struct {
	EmojiID          int64
	BackgroundColors []int32
}

// Constructs VideoSize
type TL_videoSizeStickerMarkup struct {
	Stickerset       TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	StickerID        int64
	BackgroundColors []int32
}

// Constructs StatsGroupTopPoster
type TL_statsGroupTopPoster struct {
	UserID   int64
	Messages int32
	AvgChars int32
}

// Constructs StatsGroupTopAdmin
type TL_statsGroupTopAdmin struct {
	UserID  int64
	Deleted int32
	Kicked  int32
	Banned  int32
}

// Constructs StatsGroupTopInviter
type TL_statsGroupTopInviter struct {
	UserID      int64
	Invitations int32
}

// Constructs stats.MegagroupStats
type TL_stats_megagroupStats struct {
	Period                  TL_statsDateRangeDays
	Members                 TL_statsAbsValueAndPrev
	Messages                TL_statsAbsValueAndPrev
	Viewers                 TL_statsAbsValueAndPrev
	Posters                 TL_statsAbsValueAndPrev
	GrowthGraph             TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	MembersGraph            TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	NewMembersBySourceGraph TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	LanguagesGraph          TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	MessagesGraph           TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	ActionsGraph            TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	TopHoursGraph           TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	WeekdaysGraph           TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	TopPosters              []TL_statsGroupTopPoster
	TopAdmins               []TL_statsGroupTopAdmin
	TopInviters             []TL_statsGroupTopInviter
	Users                   []TL // User: TL_userEmpty | TL_user
}

// Constructs GlobalPrivacySettings
type TL_globalPrivacySettings struct {
	ArchiveAndMuteNewNoncontactPeers bool
	KeepArchivedUnmuted              bool
	KeepArchivedFolders              bool
	HideReadMarks                    bool
	NewNoncontactPeersRequirePremium bool
}

// Constructs help.CountryCode
type TL_help_countryCode struct {
	CountryCode string
	Prefixes    []string // (optional)
	Patterns    []string // (optional)
}

// Constructs help.Country
type TL_help_country struct {
	Hidden       bool
	ISO2         string
	DefaultName  string
	Name         *string // (optional)
	CountryCodes []TL_help_countryCode
}

// Constructs help.CountriesList
type TL_help_countriesListNotModified struct {
}

// Constructs help.CountriesList
type TL_help_countriesList struct {
	Countries []TL_help_country
	Hash      int32
}

// Constructs MessageViews
type TL_messageViews struct {
	Views    *int32             // (optional)
	Forwards *int32             // (optional)
	Replies  *TL_messageReplies // (optional)
}

// Constructs messages.MessageViews
type TL_messages_messageViews struct {
	Views []TL_messageViews
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.DiscussionMessage
type TL_messages_discussionMessage struct {
	Messages        []TL   // Message: TL_messageEmpty | TL_message | TL_messageService
	MaxID           *int32 // (optional)
	ReadInboxMaxID  *int32 // (optional)
	ReadOutboxMaxID *int32 // (optional)
	UnreadCount     int32
	Chats           []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users           []TL // User: TL_userEmpty | TL_user
}

// Constructs MessageReplyHeader
type TL_messageReplyHeader struct {
	ReplyToScheduled bool
	ForumTopic       bool
	Quote            bool
	ReplyToMsgID     *int32               // (optional)
	ReplyToPeerID    TL                   // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ReplyFrom        *TL_messageFwdHeader // (optional)
	ReplyMedia       TL                   // (optional) MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
	ReplyToTopID     *int32               // (optional)
	QuoteText        *string              // (optional)
	QuoteEntities    []TL                 // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	QuoteOffset      *int32               // (optional)
}

// Constructs MessageReplyHeader
type TL_messageReplyStoryHeader struct {
	Peer    TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	StoryID int32
}

// Constructs MessageReplies
type TL_messageReplies struct {
	Comments       bool
	Replies        int32
	RepliesPTS     int32
	RecentRepliers []TL   // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	ChannelID      *int64 // (optional)
	MaxID          *int32 // (optional)
	ReadMaxID      *int32 // (optional)
}

// Constructs PeerBlocked
type TL_peerBlocked struct {
	PeerID TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date   int32
}

// Constructs stats.MessageStats
type TL_stats_messageStats struct {
	ViewsGraph              TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	ReactionsByEmotionGraph TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
}

// Constructs GroupCall
type TL_groupCallDiscarded struct {
	ID         int64
	AccessHash int64
	Duration   int32
}

// Constructs GroupCall
type TL_groupCall struct {
	JoinMuted               bool
	CanChangeJoinMuted      bool
	JoinDateAsc             bool
	ScheduleStartSubscribed bool
	CanStartVideo           bool
	RecordVideoActive       bool
	RTMPStream              bool
	ListenersHidden         bool
	ID                      int64
	AccessHash              int64
	ParticipantsCount       int32
	Title                   *string // (optional)
	StreamDCID              *int32  // (optional)
	RecordStartDate         *int32  // (optional)
	ScheduleDate            *int32  // (optional)
	UnmutedVideoCount       *int32  // (optional)
	UnmutedVideoLimit       int32
	Version                 int32
}

// Constructs InputGroupCall
type TL_inputGroupCall struct {
	ID         int64
	AccessHash int64
}

// Constructs GroupCallParticipant
type TL_groupCallParticipant struct {
	Muted           bool
	Left            bool
	CanSelfUnmute   bool
	JustJoined      bool
	Versioned       bool
	Min             bool
	MutedByYou      bool
	VolumeByAdmin   bool
	Self            bool
	VideoJoined     bool
	Peer            TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date            int32
	ActiveDate      *int32 // (optional)
	Source          int32
	Volume          *int32                        // (optional)
	About           *string                       // (optional)
	RaiseHandRating *int64                        // (optional)
	Video           *TL_groupCallParticipantVideo // (optional)
	Presentation    *TL_groupCallParticipantVideo // (optional)
}

// Constructs phone.GroupCall
type TL_phone_groupCall struct {
	Call                   TL // GroupCall: TL_groupCallDiscarded | TL_groupCall
	Participants           []TL_groupCallParticipant
	ParticipantsNextOffset string
	Chats                  []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users                  []TL // User: TL_userEmpty | TL_user
}

// Constructs phone.GroupParticipants
type TL_phone_groupParticipants struct {
	Count        int32
	Participants []TL_groupCallParticipant
	NextOffset   string
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
	Version      int32
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeSameBotPM struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypePM struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeChat struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeMegagroup struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeBroadcast struct {
}

// Constructs InlineQueryPeerType
type TL_inlineQueryPeerTypeBotPM struct {
}

// Constructs messages.HistoryImport
type TL_messages_historyImport struct {
	ID int64
}

// Constructs messages.HistoryImportParsed
type TL_messages_historyImportParsed struct {
	PM    bool
	Group bool
	Title *string // (optional)
}

// Constructs messages.AffectedFoundMessages
type TL_messages_affectedFoundMessages struct {
	PTS      int32
	PTSCount int32
	Offset   int32
	Messages []int32
}

// Constructs ChatInviteImporter
type TL_chatInviteImporter struct {
	Requested   bool
	ViaChatlist bool
	UserID      int64
	Date        int32
	About       *string // (optional)
	ApprovedBy  *int64  // (optional)
}

// Constructs messages.ExportedChatInvites
type TL_messages_exportedChatInvites struct {
	Count   int32
	Invites []TL // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.ExportedChatInvite
type TL_messages_exportedChatInvite struct {
	Invite TL   // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.ExportedChatInvite
type TL_messages_exportedChatInviteReplaced struct {
	Invite    TL   // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	NewInvite TL   // ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
	Users     []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.ChatInviteImporters
type TL_messages_chatInviteImporters struct {
	Count     int32
	Importers []TL_chatInviteImporter
	Users     []TL // User: TL_userEmpty | TL_user
}

// Constructs ChatAdminWithInvites
type TL_chatAdminWithInvites struct {
	AdminID             int64
	InvitesCount        int32
	RevokedInvitesCount int32
}

// Constructs messages.ChatAdminsWithInvites
type TL_messages_chatAdminsWithInvites struct {
	Admins []TL_chatAdminWithInvites
	Users  []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.CheckedHistoryImportPeer
type TL_messages_checkedHistoryImportPeer struct {
	ConfirmText string
}

// Constructs phone.JoinAsPeers
type TL_phone_joinAsPeers struct {
	Peers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs phone.ExportedGroupCallInvite
type TL_phone_exportedGroupCallInvite struct {
	Link string
}

// Constructs GroupCallParticipantVideoSourceGroup
type TL_groupCallParticipantVideoSourceGroup struct {
	Semantics string
	Sources   []int32
}

// Constructs GroupCallParticipantVideo
type TL_groupCallParticipantVideo struct {
	Paused       bool
	Endpoint     string
	SourceGroups []TL_groupCallParticipantVideoSourceGroup
	AudioSource  *int32 // (optional)
}

// Constructs stickers.SuggestedShortName
type TL_stickers_suggestedShortName struct {
	ShortName string
}

// Constructs BotCommandScope
type TL_botCommandScopeDefault struct {
}

// Constructs BotCommandScope
type TL_botCommandScopeUsers struct {
}

// Constructs BotCommandScope
type TL_botCommandScopeChats struct {
}

// Constructs BotCommandScope
type TL_botCommandScopeChatAdmins struct {
}

// Constructs BotCommandScope
type TL_botCommandScopePeer struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs BotCommandScope
type TL_botCommandScopePeerAdmins struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Constructs BotCommandScope
type TL_botCommandScopePeerUser struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs account.ResetPasswordResult
type TL_account_resetPasswordFailedWait struct {
	RetryDate int32
}

// Constructs account.ResetPasswordResult
type TL_account_resetPasswordRequestedWait struct {
	UntilDate int32
}

// Constructs account.ResetPasswordResult
type TL_account_resetPasswordOK struct {
}

// Constructs SponsoredMessage
type TL_sponsoredMessage struct {
	Recommended    bool
	CanReport      bool
	RandomID       []byte
	URL            string
	Title          string
	Message        string
	Entities       []TL          // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Photo          TL            // (optional) Photo: TL_photoEmpty | TL_photo
	Media          TL            // (optional) MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
	Color          *TL_peerColor // (optional)
	ButtonText     string
	SponsorInfo    *string // (optional)
	AdditionalInfo *string // (optional)
}

// Constructs messages.SponsoredMessages
type TL_messages_sponsoredMessages struct {
	PostsBetween *int32 // (optional)
	Messages     []TL_sponsoredMessage
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.SponsoredMessages
type TL_messages_sponsoredMessagesEmpty struct {
}

// Constructs SearchResultsCalendarPeriod
type TL_searchResultsCalendarPeriod struct {
	Date     int32
	MinMsgID int32
	MaxMsgID int32
	Count    int32
}

// Constructs messages.SearchResultsCalendar
type TL_messages_searchResultsCalendar struct {
	Inexact        bool
	Count          int32
	MinDate        int32
	MinMsgID       int32
	OffsetIDOffset *int32 // (optional)
	Periods        []TL_searchResultsCalendarPeriod
	Messages       []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats          []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users          []TL // User: TL_userEmpty | TL_user
}

// Constructs SearchResultsPosition
type TL_searchResultPosition struct {
	MsgID  int32
	Date   int32
	Offset int32
}

// Constructs messages.SearchResultsPositions
type TL_messages_searchResultsPositions struct {
	Count     int32
	Positions []TL_searchResultPosition
}

// Constructs channels.SendAsPeers
type TL_channels_sendAsPeers struct {
	Peers []TL_sendAsPeer
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs users.UserFull
type TL_users_userFull struct {
	FullUser TL_userFull
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.PeerSettings
type TL_messages_peerSettings struct {
	Settings TL_peerSettings
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs auth.LoggedOut
type TL_auth_loggedOut struct {
	FutureAuthToken []byte // (optional)
}

// Constructs ReactionCount
type TL_reactionCount struct {
	ChosenOrder *int32 // (optional)
	Reaction    TL     // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
	Count       int32
}

// Constructs MessageReactions
type TL_messageReactions struct {
	Min             bool
	CanSeeList      bool
	ReactionsAsTags bool
	Results         []TL_reactionCount
	RecentReactions []TL_messagePeerReaction // (optional)
	TopReactors     []TL_messageReactor      // (optional)
}

// Constructs messages.MessageReactionsList
type TL_messages_messageReactionsList struct {
	Count      int32
	Reactions  []TL_messagePeerReaction
	Chats      []TL    // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL    // User: TL_userEmpty | TL_user
	NextOffset *string // (optional)
}

// Constructs AvailableReaction
type TL_availableReaction struct {
	Inactive          bool
	Premium           bool
	Reaction          string
	Title             string
	StaticIcon        TL // Document: TL_documentEmpty | TL_document
	AppearAnimation   TL // Document: TL_documentEmpty | TL_document
	SelectAnimation   TL // Document: TL_documentEmpty | TL_document
	ActivateAnimation TL // Document: TL_documentEmpty | TL_document
	EffectAnimation   TL // Document: TL_documentEmpty | TL_document
	AroundAnimation   TL // (optional) Document: TL_documentEmpty | TL_document
	CenterIcon        TL // (optional) Document: TL_documentEmpty | TL_document
}

// Constructs messages.AvailableReactions
type TL_messages_availableReactionsNotModified struct {
}

// Constructs messages.AvailableReactions
type TL_messages_availableReactions struct {
	Hash      int32
	Reactions []TL_availableReaction
}

// Constructs MessagePeerReaction
type TL_messagePeerReaction struct {
	Big      bool
	Unread   bool
	My       bool
	PeerID   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date     int32
	Reaction TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Constructs GroupCallStreamChannel
type TL_groupCallStreamChannel struct {
	Channel         int32
	Scale           int32
	LastTimestampMS int64
}

// Constructs phone.GroupCallStreamChannels
type TL_phone_groupCallStreamChannels struct {
	Channels []TL_groupCallStreamChannel
}

// Constructs phone.GroupCallStreamRtmpUrl
type TL_phone_groupCallStreamRTMPURL struct {
	URL string
	Key string
}

// Constructs AttachMenuBotIconColor
type TL_attachMenuBotIconColor struct {
	Name  string
	Color int32
}

// Constructs AttachMenuBotIcon
type TL_attachMenuBotIcon struct {
	Name   string
	Icon   TL                          // Document: TL_documentEmpty | TL_document
	Colors []TL_attachMenuBotIconColor // (optional)
}

// Constructs AttachMenuBot
type TL_attachMenuBot struct {
	Inactive                 bool
	HasSettings              bool
	RequestWriteAccess       bool
	ShowInAttachMenu         bool
	ShowInSideMenu           bool
	SideMenuDisclaimerNeeded bool
	BotID                    int64
	ShortName                string
	PeerTypes                []TL // (optional) AttachMenuPeerType: TL_attachMenuPeerTypeSameBotPM | TL_attachMenuPeerTypeBotPM | TL_attachMenuPeerTypePM | TL_attachMenuPeerTypeChat | TL_attachMenuPeerTypeBroadcast
	Icons                    []TL_attachMenuBotIcon
}

// Constructs AttachMenuBots
type TL_attachMenuBotsNotModified struct {
}

// Constructs AttachMenuBots
type TL_attachMenuBots struct {
	Hash  int64
	Bots  []TL_attachMenuBot
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs AttachMenuBotsBot
type TL_attachMenuBotsBot struct {
	Bot   TL_attachMenuBot
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs WebViewResult
type TL_webViewResultURL struct {
	Fullsize bool
	QueryID  *int64 // (optional)
	URL      string
}

// Constructs WebViewMessageSent
type TL_webViewMessageSent struct {
	MsgID TL // (optional) InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
}

// Constructs BotMenuButton
type TL_botMenuButtonDefault struct {
}

// Constructs BotMenuButton
type TL_botMenuButtonCommands struct {
}

// Constructs BotMenuButton
type TL_botMenuButton struct {
	Text string
	URL  string
}

// Constructs account.SavedRingtones
type TL_account_savedRingtonesNotModified struct {
}

// Constructs account.SavedRingtones
type TL_account_savedRingtones struct {
	Hash      int64
	Ringtones []TL // Document: TL_documentEmpty | TL_document
}

// Constructs NotificationSound
type TL_notificationSoundDefault struct {
}

// Constructs NotificationSound
type TL_notificationSoundNone struct {
}

// Constructs NotificationSound
type TL_notificationSoundLocal struct {
	Title string
	Data  string
}

// Constructs NotificationSound
type TL_notificationSoundRingtone struct {
	ID int64
}

// Constructs account.SavedRingtone
type TL_account_savedRingtone struct {
}

// Constructs account.SavedRingtone
type TL_account_savedRingtoneConverted struct {
	Document TL // Document: TL_documentEmpty | TL_document
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypeSameBotPM struct {
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypeBotPM struct {
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypePM struct {
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypeChat struct {
}

// Constructs AttachMenuPeerType
type TL_attachMenuPeerTypeBroadcast struct {
}

// Constructs InputInvoice
type TL_inputInvoiceMessage struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Constructs InputInvoice
type TL_inputInvoiceSlug struct {
	Slug string
}

// Constructs InputInvoice
type TL_inputInvoicePremiumGiftCode struct {
	Purpose TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway | TL_inputStorePaymentStarsTopup | TL_inputStorePaymentStarsGift | TL_inputStorePaymentStarsGiveaway
	Option  TL_premiumGiftCodeOption
}

// Constructs InputInvoice
type TL_inputInvoiceStars struct {
	Purpose TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway | TL_inputStorePaymentStarsTopup | TL_inputStorePaymentStarsGift | TL_inputStorePaymentStarsGiveaway
}

// Constructs InputInvoice
type TL_inputInvoiceChatInviteSubscription struct {
	Hash string
}

// Constructs payments.ExportedInvoice
type TL_payments_exportedInvoice struct {
	URL string
}

// Constructs messages.TranscribedAudio
type TL_messages_transcribedAudio struct {
	Pending               bool
	TranscriptionID       int64
	Text                  string
	TrialRemainsNum       *int32 // (optional)
	TrialRemainsUntilDate *int32 // (optional)
}

// Constructs help.PremiumPromo
type TL_help_premiumPromo struct {
	StatusText     string
	StatusEntities []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	VideoSections  []string
	Videos         []TL // Document: TL_documentEmpty | TL_document
	PeriodOptions  []TL_premiumSubscriptionOption
	Users          []TL // User: TL_userEmpty | TL_user
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentPremiumSubscription struct {
	Restore bool
	Upgrade bool
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentGiftPremium struct {
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Currency string
	Amount   int64
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentPremiumGiftCode struct {
	Users     []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	BoostPeer TL   // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Currency  string
	Amount    int64
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentPremiumGiveaway struct {
	OnlyNewSubscribers bool
	WinnersAreVisible  bool
	BoostPeer          TL       // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	AdditionalPeers    []TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	CountriesISO2      []string // (optional)
	PrizeDescription   *string  // (optional)
	RandomID           int64
	UntilDate          int32
	Currency           string
	Amount             int64
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentStarsTopup struct {
	Stars    int64
	Currency string
	Amount   int64
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentStarsGift struct {
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Stars    int64
	Currency string
	Amount   int64
}

// Constructs InputStorePaymentPurpose
type TL_inputStorePaymentStarsGiveaway struct {
	OnlyNewSubscribers bool
	WinnersAreVisible  bool
	Stars              int64
	BoostPeer          TL       // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	AdditionalPeers    []TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	CountriesISO2      []string // (optional)
	PrizeDescription   *string  // (optional)
	RandomID           int64
	UntilDate          int32
	Currency           string
	Amount             int64
	Users              int32
}

// Constructs PremiumGiftOption
type TL_premiumGiftOption struct {
	Months       int32
	Currency     string
	Amount       int64
	BotURL       string
	StoreProduct *string // (optional)
}

// Constructs PaymentFormMethod
type TL_paymentFormMethod struct {
	URL   string
	Title string
}

// Constructs EmojiStatus
type TL_emojiStatusEmpty struct {
}

// Constructs EmojiStatus
type TL_emojiStatus struct {
	DocumentID int64
}

// Constructs EmojiStatus
type TL_emojiStatusUntil struct {
	DocumentID int64
	Until      int32
}

// Constructs account.EmojiStatuses
type TL_account_emojiStatusesNotModified struct {
}

// Constructs account.EmojiStatuses
type TL_account_emojiStatuses struct {
	Hash     int64
	Statuses []TL // EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
}

// Constructs Reaction
type TL_reactionEmpty struct {
}

// Constructs Reaction
type TL_reactionEmoji struct {
	Emoticon string
}

// Constructs Reaction
type TL_reactionCustomEmoji struct {
	DocumentID int64
}

// Constructs Reaction
type TL_reactionPaid struct {
}

// Constructs ChatReactions
type TL_chatReactionsNone struct {
}

// Constructs ChatReactions
type TL_chatReactionsAll struct {
	AllowCustom bool
}

// Constructs ChatReactions
type TL_chatReactionsSome struct {
	Reactions []TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Constructs messages.Reactions
type TL_messages_reactionsNotModified struct {
}

// Constructs messages.Reactions
type TL_messages_reactions struct {
	Hash      int64
	Reactions []TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Constructs EmailVerifyPurpose
type TL_emailVerifyPurposeLoginSetup struct {
	PhoneNumber   string
	PhoneCodeHash string
}

// Constructs EmailVerifyPurpose
type TL_emailVerifyPurposeLoginChange struct {
}

// Constructs EmailVerifyPurpose
type TL_emailVerifyPurposePassport struct {
}

// Constructs EmailVerification
type TL_emailVerificationCode struct {
	Code string
}

// Constructs EmailVerification
type TL_emailVerificationGoogle struct {
	Token string
}

// Constructs EmailVerification
type TL_emailVerificationApple struct {
	Token string
}

// Constructs account.EmailVerified
type TL_account_emailVerified struct {
	Email string
}

// Constructs account.EmailVerified
type TL_account_emailVerifiedLogin struct {
	Email    string
	SentCode TL // auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
}

// Constructs PremiumSubscriptionOption
type TL_premiumSubscriptionOption struct {
	Current            bool
	CanPurchaseUpgrade bool
	Transaction        *string // (optional)
	Months             int32
	Currency           string
	Amount             int64
	BotURL             string
	StoreProduct       *string // (optional)
}

// Constructs SendAsPeer
type TL_sendAsPeer struct {
	PremiumRequired bool
	Peer            TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs MessageExtendedMedia
type TL_messageExtendedMediaPreview struct {
	W             *int32 // (optional)
	H             *int32 // (optional)
	Thumb         TL     // (optional) PhotoSize: TL_photoSizeEmpty | TL_photoSize | TL_photoCachedSize | TL_photoStrippedSize | TL_photoSizeProgressive | TL_photoPathSize
	VideoDuration *int32 // (optional)
}

// Constructs MessageExtendedMedia
type TL_messageExtendedMedia struct {
	Media TL // MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
}

// Constructs StickerKeyword
type TL_stickerKeyword struct {
	DocumentID int64
	Keyword    []string
}

// Constructs Username
type TL_username struct {
	Editable bool
	Active   bool
	Username string
}

// Constructs ForumTopic
type TL_forumTopicDeleted struct {
	ID int32
}

// Constructs ForumTopic
type TL_forumTopic struct {
	My                   bool
	Closed               bool
	Pinned               bool
	Short                bool
	Hidden               bool
	ID                   int32
	Date                 int32
	Title                string
	IconColor            int32
	IconEmojiID          *int64 // (optional)
	TopMessage           int32
	ReadInboxMaxID       int32
	ReadOutboxMaxID      int32
	UnreadCount          int32
	UnreadMentionsCount  int32
	UnreadReactionsCount int32
	FromID               TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	NotifySettings       TL_peerNotifySettings
	Draft                TL // (optional) DraftMessage: TL_draftMessageEmpty | TL_draftMessage
}

// Constructs messages.ForumTopics
type TL_messages_forumTopics struct {
	OrderByCreateDate bool
	Count             int32
	Topics            []TL // ForumTopic: TL_forumTopicDeleted | TL_forumTopic
	Messages          []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats             []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users             []TL // User: TL_userEmpty | TL_user
	PTS               int32
}

// Constructs DefaultHistoryTTL
type TL_defaultHistoryTTL struct {
	Period int32
}

// Constructs ExportedContactToken
type TL_exportedContactToken struct {
	URL     string
	Expires int32
}

// Constructs RequestPeerType
type TL_requestPeerTypeUser struct {
	Bot     *bool // (optional)
	Premium *bool // (optional)
}

// Constructs RequestPeerType
type TL_requestPeerTypeChat struct {
	Creator         bool
	BotParticipant  bool
	HasUsername     *bool               // (optional)
	Forum           *bool               // (optional)
	UserAdminRights *TL_chatAdminRights // (optional)
	BotAdminRights  *TL_chatAdminRights // (optional)
}

// Constructs RequestPeerType
type TL_requestPeerTypeBroadcast struct {
	Creator         bool
	HasUsername     *bool               // (optional)
	UserAdminRights *TL_chatAdminRights // (optional)
	BotAdminRights  *TL_chatAdminRights // (optional)
}

// Constructs EmojiList
type TL_emojiListNotModified struct {
}

// Constructs EmojiList
type TL_emojiList struct {
	Hash       int64
	DocumentID []int64
}

// Constructs EmojiGroup
type TL_emojiGroup struct {
	Title       string
	IconEmojiID int64
	Emoticons   []string
}

// Constructs EmojiGroup
type TL_emojiGroupGreeting struct {
	Title       string
	IconEmojiID int64
	Emoticons   []string
}

// Constructs EmojiGroup
type TL_emojiGroupPremium struct {
	Title       string
	IconEmojiID int64
}

// Constructs messages.EmojiGroups
type TL_messages_emojiGroupsNotModified struct {
}

// Constructs messages.EmojiGroups
type TL_messages_emojiGroups struct {
	Hash   int32
	Groups []TL // EmojiGroup: TL_emojiGroup | TL_emojiGroupGreeting | TL_emojiGroupPremium
}

// Constructs TextWithEntities
type TL_textWithEntities struct {
	Text     string
	Entities []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Constructs messages.TranslatedText
type TL_messages_translateResult struct {
	Result []TL_textWithEntities
}

// Constructs AutoSaveSettings
type TL_autoSaveSettings struct {
	Photos       bool
	Videos       bool
	VideoMaxSize *int64 // (optional)
}

// Constructs AutoSaveException
type TL_autoSaveException struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Settings TL_autoSaveSettings
}

// Constructs account.AutoSaveSettings
type TL_account_autoSaveSettings struct {
	UsersSettings      TL_autoSaveSettings
	ChatsSettings      TL_autoSaveSettings
	BroadcastsSettings TL_autoSaveSettings
	Exceptions         []TL_autoSaveException
	Chats              []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users              []TL // User: TL_userEmpty | TL_user
}

// Constructs help.AppConfig
type TL_help_appConfigNotModified struct {
}

// Constructs help.AppConfig
type TL_help_appConfig struct {
	Hash   int32
	Config TL // JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
}

// Constructs InputBotApp
type TL_inputBotAppID struct {
	ID         int64
	AccessHash int64
}

// Constructs InputBotApp
type TL_inputBotAppShortName struct {
	BotID     TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	ShortName string
}

// Constructs BotApp
type TL_botAppNotModified struct {
}

// Constructs BotApp
type TL_botApp struct {
	ID          int64
	AccessHash  int64
	ShortName   string
	Title       string
	Description string
	Photo       TL // Photo: TL_photoEmpty | TL_photo
	Document    TL // (optional) Document: TL_documentEmpty | TL_document
	Hash        int64
}

// Constructs messages.BotApp
type TL_messages_botApp struct {
	Inactive           bool
	RequestWriteAccess bool
	HasSettings        bool
	App                TL // BotApp: TL_botAppNotModified | TL_botApp
}

// Constructs InlineBotWebView
type TL_inlineBotWebView struct {
	Text string
	URL  string
}

// Constructs ReadParticipantDate
type TL_readParticipantDate struct {
	UserID int64
	Date   int32
}

// Constructs InputChatlist
type TL_inputChatlistDialogFilter struct {
	FilterID int32
}

// Constructs ExportedChatlistInvite
type TL_exportedChatlistInvite struct {
	Title string
	URL   string
	Peers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs chatlists.ExportedChatlistInvite
type TL_chatlists_exportedChatlistInvite struct {
	Filter TL // DialogFilter: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
	Invite TL_exportedChatlistInvite
}

// Constructs chatlists.ExportedInvites
type TL_chatlists_exportedInvites struct {
	Invites []TL_exportedChatlistInvite
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs chatlists.ChatlistInvite
type TL_chatlists_chatlistInviteAlready struct {
	FilterID     int32
	MissingPeers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	AlreadyPeers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
}

// Constructs chatlists.ChatlistInvite
type TL_chatlists_chatlistInvite struct {
	Title    string
	Emoticon *string // (optional)
	Peers    []TL    // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats    []TL    // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL    // User: TL_userEmpty | TL_user
}

// Constructs chatlists.ChatlistUpdates
type TL_chatlists_chatlistUpdates struct {
	MissingPeers []TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
}

// Constructs bots.BotInfo
type TL_bots_botInfo struct {
	Name        string
	About       string
	Description string
}

// Constructs MessagePeerVote
type TL_messagePeerVote struct {
	Peer   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Option []byte
	Date   int32
}

// Constructs MessagePeerVote
type TL_messagePeerVoteInputOption struct {
	Peer TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date int32
}

// Constructs MessagePeerVote
type TL_messagePeerVoteMultiple struct {
	Peer    TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Options [][]byte
	Date    int32
}

// Constructs StoryViews
type TL_storyViews struct {
	HasViewers     bool
	ViewsCount     int32
	ForwardsCount  *int32             // (optional)
	Reactions      []TL_reactionCount // (optional)
	ReactionsCount *int32             // (optional)
	RecentViewers  []int64            // (optional)
}

// Constructs StoryItem
type TL_storyItemDeleted struct {
	ID int32
}

// Constructs StoryItem
type TL_storyItemSkipped struct {
	CloseFriends bool
	ID           int32
	Date         int32
	ExpireDate   int32
}

// Constructs StoryItem
type TL_storyItem struct {
	Pinned           bool
	Public           bool
	CloseFriends     bool
	Min              bool
	Noforwards       bool
	Edited           bool
	Contacts         bool
	SelectedContacts bool
	Out              bool
	ID               int32
	Date             int32
	FromID           TL                 // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	FwdFrom          *TL_storyFwdHeader // (optional)
	ExpireDate       int32
	Caption          *string        // (optional)
	Entities         []TL           // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Media            TL             // MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
	MediaAreas       []TL           // (optional) MediaArea: TL_mediaAreaVenue | TL_inputMediaAreaVenue | TL_mediaAreaGeoPoint | TL_mediaAreaSuggestedReaction | TL_mediaAreaChannelPost | TL_inputMediaAreaChannelPost | TL_mediaAreaURL | TL_mediaAreaWeather
	Privacy          []TL           // (optional) PrivacyRule: TL_privacyValueAllowContacts | TL_privacyValueAllowAll | TL_privacyValueAllowUsers | TL_privacyValueDisallowContacts | TL_privacyValueDisallowAll | TL_privacyValueDisallowUsers | TL_privacyValueAllowChatParticipants | TL_privacyValueDisallowChatParticipants | TL_privacyValueAllowCloseFriends | TL_privacyValueAllowPremium
	Views            *TL_storyViews // (optional)
	SentReaction     TL             // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Constructs stories.AllStories
type TL_stories_allStoriesNotModified struct {
	State       string
	StealthMode TL_storiesStealthMode
}

// Constructs stories.AllStories
type TL_stories_allStories struct {
	HasMore     bool
	Count       int32
	State       string
	PeerStories []TL_peerStories
	Chats       []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users       []TL // User: TL_userEmpty | TL_user
	StealthMode TL_storiesStealthMode
}

// Constructs stories.Stories
type TL_stories_stories struct {
	Count       int32
	Stories     []TL    // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
	PinnedToTop []int32 // (optional)
	Chats       []TL    // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users       []TL    // User: TL_userEmpty | TL_user
}

// Constructs StoryView
type TL_storyView struct {
	Blocked              bool
	BlockedMyStoriesFrom bool
	UserID               int64
	Date                 int32
	Reaction             TL // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Constructs StoryView
type TL_storyViewPublicForward struct {
	Blocked              bool
	BlockedMyStoriesFrom bool
	Message              TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs StoryView
type TL_storyViewPublicRepost struct {
	Blocked              bool
	BlockedMyStoriesFrom bool
	PeerID               TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Story                TL // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs stories.StoryViewsList
type TL_stories_storyViewsList struct {
	Count          int32
	ViewsCount     int32
	ForwardsCount  int32
	ReactionsCount int32
	Views          []TL    // StoryView: TL_storyView | TL_storyViewPublicForward | TL_storyViewPublicRepost
	Chats          []TL    // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users          []TL    // User: TL_userEmpty | TL_user
	NextOffset     *string // (optional)
}

// Constructs stories.StoryViews
type TL_stories_storyViews struct {
	Views []TL_storyViews
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs InputReplyTo
type TL_inputReplyToMessage struct {
	ReplyToMsgID  int32
	TopMsgID      *int32  // (optional)
	ReplyToPeerID TL      // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	QuoteText     *string // (optional)
	QuoteEntities []TL    // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	QuoteOffset   *int32  // (optional)
}

// Constructs InputReplyTo
type TL_inputReplyToStory struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	StoryID int32
}

// Constructs ExportedStoryLink
type TL_exportedStoryLink struct {
	Link string
}

// Constructs StoriesStealthMode
type TL_storiesStealthMode struct {
	ActiveUntilDate   *int32 // (optional)
	CooldownUntilDate *int32 // (optional)
}

// Constructs MediaAreaCoordinates
type TL_mediaAreaCoordinates struct {
	X        float64
	Y        float64
	W        float64
	H        float64
	Rotation float64
	Radius   *float64 // (optional)
}

// Constructs MediaArea
type TL_mediaAreaVenue struct {
	Coordinates TL_mediaAreaCoordinates
	Geo         TL // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Title       string
	Address     string
	Provider    string
	VenueID     string
	VenueType   string
}

// Constructs MediaArea
type TL_inputMediaAreaVenue struct {
	Coordinates TL_mediaAreaCoordinates
	QueryID     int64
	ResultID    string
}

// Constructs MediaArea
type TL_mediaAreaGeoPoint struct {
	Coordinates TL_mediaAreaCoordinates
	Geo         TL                  // GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Address     *TL_geoPointAddress // (optional)
}

// Constructs MediaArea
type TL_mediaAreaSuggestedReaction struct {
	Dark        bool
	Flipped     bool
	Coordinates TL_mediaAreaCoordinates
	Reaction    TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Constructs MediaArea
type TL_mediaAreaChannelPost struct {
	Coordinates TL_mediaAreaCoordinates
	ChannelID   int64
	MsgID       int32
}

// Constructs MediaArea
type TL_inputMediaAreaChannelPost struct {
	Coordinates TL_mediaAreaCoordinates
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MsgID       int32
}

// Constructs MediaArea
type TL_mediaAreaURL struct {
	Coordinates TL_mediaAreaCoordinates
	URL         string
}

// Constructs MediaArea
type TL_mediaAreaWeather struct {
	Coordinates  TL_mediaAreaCoordinates
	Emoji        string
	TemperatureC float64
	Color        int32
}

// Constructs PeerStories
type TL_peerStories struct {
	Peer      TL     // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	MaxReadID *int32 // (optional)
	Stories   []TL   // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs stories.PeerStories
type TL_stories_peerStories struct {
	Stories TL_peerStories
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.WebPage
type TL_messages_webPage struct {
	Webpage TL   // WebPage: TL_webPageEmpty | TL_webPagePending | TL_webPage | TL_webPageNotModified
	Chats   []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users   []TL // User: TL_userEmpty | TL_user
}

// Constructs PremiumGiftCodeOption
type TL_premiumGiftCodeOption struct {
	Users         int32
	Months        int32
	StoreProduct  *string // (optional)
	StoreQuantity *int32  // (optional)
	Currency      string
	Amount        int64
}

// Constructs payments.CheckedGiftCode
type TL_payments_checkedGiftCode struct {
	ViaGiveaway   bool
	FromID        TL     // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	GiveawayMsgID *int32 // (optional)
	ToID          *int64 // (optional)
	Date          int32
	Months        int32
	UsedDate      *int32 // (optional)
	Chats         []TL   // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users         []TL   // User: TL_userEmpty | TL_user
}

// Constructs payments.GiveawayInfo
type TL_payments_giveawayInfo struct {
	Participating         bool
	PreparingResults      bool
	StartDate             int32
	JoinedTooEarlyDate    *int32  // (optional)
	AdminDisallowedChatID *int64  // (optional)
	DisallowedCountry     *string // (optional)
}

// Constructs payments.GiveawayInfo
type TL_payments_giveawayInfoResults struct {
	Winner         bool
	Refunded       bool
	StartDate      int32
	GiftCodeSlug   *string // (optional)
	StarsPrize     *int64  // (optional)
	FinishDate     int32
	WinnersCount   int32
	ActivatedCount *int32 // (optional)
}

// Constructs PrepaidGiveaway
type TL_prepaidGiveaway struct {
	ID       int64
	Months   int32
	Quantity int32
	Date     int32
}

// Constructs PrepaidGiveaway
type TL_prepaidStarsGiveaway struct {
	ID       int64
	Stars    int64
	Quantity int32
	Boosts   int32
	Date     int32
}

// Constructs Boost
type TL_boost struct {
	Gift          bool
	Giveaway      bool
	Unclaimed     bool
	ID            string
	UserID        *int64 // (optional)
	GiveawayMsgID *int32 // (optional)
	Date          int32
	Expires       int32
	UsedGiftSlug  *string // (optional)
	Multiplier    *int32  // (optional)
	Stars         *int64  // (optional)
}

// Constructs premium.BoostsList
type TL_premium_boostsList struct {
	Count      int32
	Boosts     []TL_boost
	NextOffset *string // (optional)
	Users      []TL    // User: TL_userEmpty | TL_user
}

// Constructs MyBoost
type TL_myBoost struct {
	Slot              int32
	Peer              TL // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date              int32
	Expires           int32
	CooldownUntilDate *int32 // (optional)
}

// Constructs premium.MyBoosts
type TL_premium_myBoosts struct {
	MyBoosts []TL_myBoost
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs premium.BoostsStatus
type TL_premium_boostsStatus struct {
	MyBoost            bool
	Level              int32
	CurrentLevelBoosts int32
	Boosts             int32
	GiftBoosts         *int32                // (optional)
	NextLevelBoosts    *int32                // (optional)
	PremiumAudience    *TL_statsPercentValue // (optional)
	BoostURL           string
	PrepaidGiveaways   []TL    // (optional) PrepaidGiveaway: TL_prepaidGiveaway | TL_prepaidStarsGiveaway
	MyBoostSlots       []int32 // (optional)
}

// Constructs StoryFwdHeader
type TL_storyFwdHeader struct {
	Modified bool
	From     TL      // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	FromName *string // (optional)
	StoryID  *int32  // (optional)
}

// Constructs PostInteractionCounters
type TL_postInteractionCountersMessage struct {
	MsgID     int32
	Views     int32
	Forwards  int32
	Reactions int32
}

// Constructs PostInteractionCounters
type TL_postInteractionCountersStory struct {
	StoryID   int32
	Views     int32
	Forwards  int32
	Reactions int32
}

// Constructs stats.StoryStats
type TL_stats_storyStats struct {
	ViewsGraph              TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	ReactionsByEmotionGraph TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
}

// Constructs PublicForward
type TL_publicForwardMessage struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs PublicForward
type TL_publicForwardStory struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Story TL // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs stats.PublicForwards
type TL_stats_publicForwards struct {
	Count      int32
	Forwards   []TL    // PublicForward: TL_publicForwardMessage | TL_publicForwardStory
	NextOffset *string // (optional)
	Chats      []TL    // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL    // User: TL_userEmpty | TL_user
}

// Constructs PeerColor
type TL_peerColor struct {
	Color             *int32 // (optional)
	BackgroundEmojiID *int64 // (optional)
}

// Constructs help.PeerColorSet
type TL_help_peerColorSet struct {
	Colors []int32
}

// Constructs help.PeerColorSet
type TL_help_peerColorProfileSet struct {
	PaletteColors []int32
	BgColors      []int32
	StoryColors   []int32
}

// Constructs help.PeerColorOption
type TL_help_peerColorOption struct {
	Hidden          bool
	ColorID         int32
	Colors          TL     // (optional) help.PeerColorSet: TL_help_peerColorSet | TL_help_peerColorProfileSet
	DarkColors      TL     // (optional) help.PeerColorSet: TL_help_peerColorSet | TL_help_peerColorProfileSet
	ChannelMinLevel *int32 // (optional)
	GroupMinLevel   *int32 // (optional)
}

// Constructs help.PeerColors
type TL_help_peerColorsNotModified struct {
}

// Constructs help.PeerColors
type TL_help_peerColors struct {
	Hash   int32
	Colors []TL_help_peerColorOption
}

// Constructs StoryReaction
type TL_storyReaction struct {
	PeerID   TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Date     int32
	Reaction TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Constructs StoryReaction
type TL_storyReactionPublicForward struct {
	Message TL // Message: TL_messageEmpty | TL_message | TL_messageService
}

// Constructs StoryReaction
type TL_storyReactionPublicRepost struct {
	PeerID TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Story  TL // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs stories.StoryReactionsList
type TL_stories_storyReactionsList struct {
	Count      int32
	Reactions  []TL    // StoryReaction: TL_storyReaction | TL_storyReactionPublicForward | TL_storyReactionPublicRepost
	Chats      []TL    // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL    // User: TL_userEmpty | TL_user
	NextOffset *string // (optional)
}

// Constructs SavedDialog
type TL_savedDialog struct {
	Pinned     bool
	Peer       TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	TopMessage int32
}

// Constructs messages.SavedDialogs
type TL_messages_savedDialogs struct {
	Dialogs  []TL_savedDialog
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.SavedDialogs
type TL_messages_savedDialogsSlice struct {
	Count    int32
	Dialogs  []TL_savedDialog
	Messages []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.SavedDialogs
type TL_messages_savedDialogsNotModified struct {
	Count int32
}

// Constructs SavedReactionTag
type TL_savedReactionTag struct {
	Reaction TL      // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
	Title    *string // (optional)
	Count    int32
}

// Constructs messages.SavedReactionTags
type TL_messages_savedReactionTagsNotModified struct {
}

// Constructs messages.SavedReactionTags
type TL_messages_savedReactionTags struct {
	Tags []TL_savedReactionTag
	Hash int64
}

// Constructs OutboxReadDate
type TL_outboxReadDate struct {
	Date int32
}

// Constructs smsjobs.EligibilityToJoin
type TL_smsjobs_eligibleToJoin struct {
	TermsURL       string
	MonthlySentSMS int32
}

// Constructs smsjobs.Status
type TL_smsjobs_status struct {
	AllowInternational bool
	RecentSent         int32
	RecentSince        int32
	RecentRemains      int32
	TotalSent          int32
	TotalSince         int32
	LastGiftSlug       *string // (optional)
	TermsURL           string
}

// Constructs SmsJob
type TL_smsJob struct {
	JobID       string
	PhoneNumber string
	Text        string
}

// Constructs BusinessWeeklyOpen
type TL_businessWeeklyOpen struct {
	StartMinute int32
	EndMinute   int32
}

// Constructs BusinessWorkHours
type TL_businessWorkHours struct {
	OpenNow    bool
	TimezoneID string
	WeeklyOpen []TL_businessWeeklyOpen
}

// Constructs BusinessLocation
type TL_businessLocation struct {
	GeoPoint TL // (optional) GeoPoint: TL_geoPointEmpty | TL_geoPoint
	Address  string
}

// Constructs InputBusinessRecipients
type TL_inputBusinessRecipients struct {
	ExistingChats   bool
	NewChats        bool
	Contacts        bool
	NonContacts     bool
	ExcludeSelected bool
	Users           []TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs BusinessRecipients
type TL_businessRecipients struct {
	ExistingChats   bool
	NewChats        bool
	Contacts        bool
	NonContacts     bool
	ExcludeSelected bool
	Users           []int64 // (optional)
}

// Constructs BusinessAwayMessageSchedule
type TL_businessAwayMessageScheduleAlways struct {
}

// Constructs BusinessAwayMessageSchedule
type TL_businessAwayMessageScheduleOutsideWorkHours struct {
}

// Constructs BusinessAwayMessageSchedule
type TL_businessAwayMessageScheduleCustom struct {
	StartDate int32
	EndDate   int32
}

// Constructs InputBusinessGreetingMessage
type TL_inputBusinessGreetingMessage struct {
	ShortcutID     int32
	Recipients     TL_inputBusinessRecipients
	NoActivityDays int32
}

// Constructs BusinessGreetingMessage
type TL_businessGreetingMessage struct {
	ShortcutID     int32
	Recipients     TL_businessRecipients
	NoActivityDays int32
}

// Constructs InputBusinessAwayMessage
type TL_inputBusinessAwayMessage struct {
	OfflineOnly bool
	ShortcutID  int32
	Schedule    TL // BusinessAwayMessageSchedule: TL_businessAwayMessageScheduleAlways | TL_businessAwayMessageScheduleOutsideWorkHours | TL_businessAwayMessageScheduleCustom
	Recipients  TL_inputBusinessRecipients
}

// Constructs BusinessAwayMessage
type TL_businessAwayMessage struct {
	OfflineOnly bool
	ShortcutID  int32
	Schedule    TL // BusinessAwayMessageSchedule: TL_businessAwayMessageScheduleAlways | TL_businessAwayMessageScheduleOutsideWorkHours | TL_businessAwayMessageScheduleCustom
	Recipients  TL_businessRecipients
}

// Constructs Timezone
type TL_timezone struct {
	ID        string
	Name      string
	UtcOffset int32
}

// Constructs help.TimezonesList
type TL_help_timezonesListNotModified struct {
}

// Constructs help.TimezonesList
type TL_help_timezonesList struct {
	Timezones []TL_timezone
	Hash      int32
}

// Constructs QuickReply
type TL_quickReply struct {
	ShortcutID int32
	Shortcut   string
	TopMessage int32
	Count      int32
}

// Constructs InputQuickReplyShortcut
type TL_inputQuickReplyShortcut struct {
	Shortcut string
}

// Constructs InputQuickReplyShortcut
type TL_inputQuickReplyShortcutID struct {
	ShortcutID int32
}

// Constructs messages.QuickReplies
type TL_messages_quickReplies struct {
	QuickReplies []TL_quickReply
	Messages     []TL // Message: TL_messageEmpty | TL_message | TL_messageService
	Chats        []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users        []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.QuickReplies
type TL_messages_quickRepliesNotModified struct {
}

// Constructs ConnectedBot
type TL_connectedBot struct {
	CanReply   bool
	BotID      int64
	Recipients TL_businessBotRecipients
}

// Constructs account.ConnectedBots
type TL_account_connectedBots struct {
	ConnectedBots []TL_connectedBot
	Users         []TL // User: TL_userEmpty | TL_user
}

// Constructs messages.DialogFilters
type TL_messages_dialogFilters struct {
	TagsEnabled bool
	Filters     []TL // DialogFilter: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
}

// Constructs Birthday
type TL_birthday struct {
	Day   int32
	Month int32
	Year  *int32 // (optional)
}

// Constructs BotBusinessConnection
type TL_botBusinessConnection struct {
	CanReply     bool
	Disabled     bool
	ConnectionID string
	UserID       int64
	DCID         int32
	Date         int32
}

// Constructs InputBusinessIntro
type TL_inputBusinessIntro struct {
	Title       string
	Description string
	Sticker     TL // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
}

// Constructs BusinessIntro
type TL_businessIntro struct {
	Title       string
	Description string
	Sticker     TL // (optional) Document: TL_documentEmpty | TL_document
}

// Constructs messages.MyStickers
type TL_messages_myStickers struct {
	Count int32
	Sets  []TL // StickerSetCovered: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
}

// Constructs InputCollectible
type TL_inputCollectibleUsername struct {
	Username string
}

// Constructs InputCollectible
type TL_inputCollectiblePhone struct {
	Phone string
}

// Constructs fragment.CollectibleInfo
type TL_fragment_collectibleInfo struct {
	PurchaseDate   int32
	Currency       string
	Amount         int64
	CryptoCurrency string
	CryptoAmount   int64
	URL            string
}

// Constructs InputBusinessBotRecipients
type TL_inputBusinessBotRecipients struct {
	ExistingChats   bool
	NewChats        bool
	Contacts        bool
	NonContacts     bool
	ExcludeSelected bool
	Users           []TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	ExcludeUsers    []TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Constructs BusinessBotRecipients
type TL_businessBotRecipients struct {
	ExistingChats   bool
	NewChats        bool
	Contacts        bool
	NonContacts     bool
	ExcludeSelected bool
	Users           []int64 // (optional)
	ExcludeUsers    []int64 // (optional)
}

// Constructs ContactBirthday
type TL_contactBirthday struct {
	ContactID int64
	Birthday  TL_birthday
}

// Constructs contacts.ContactBirthdays
type TL_contacts_contactBirthdays struct {
	Contacts []TL_contactBirthday
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs MissingInvitee
type TL_missingInvitee struct {
	PremiumWouldAllowInvite bool
	PremiumRequiredForPM    bool
	UserID                  int64
}

// Constructs messages.InvitedUsers
type TL_messages_invitedUsers struct {
	Updates         TL // Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
	MissingInvitees []TL_missingInvitee
}

// Constructs InputBusinessChatLink
type TL_inputBusinessChatLink struct {
	Message  string
	Entities []TL    // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Title    *string // (optional)
}

// Constructs BusinessChatLink
type TL_businessChatLink struct {
	Link     string
	Message  string
	Entities []TL    // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Title    *string // (optional)
	Views    int32
}

// Constructs account.BusinessChatLinks
type TL_account_businessChatLinks struct {
	Links []TL_businessChatLink
	Chats []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users []TL // User: TL_userEmpty | TL_user
}

// Constructs account.ResolvedBusinessChatLinks
type TL_account_resolvedBusinessChatLinks struct {
	Peer     TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Message  string
	Entities []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Chats    []TL // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users    []TL // User: TL_userEmpty | TL_user
}

// Constructs RequestedPeer
type TL_requestedPeerUser struct {
	UserID    int64
	FirstName *string // (optional)
	LastName  *string // (optional)
	Username  *string // (optional)
	Photo     TL      // (optional) Photo: TL_photoEmpty | TL_photo
}

// Constructs RequestedPeer
type TL_requestedPeerChat struct {
	ChatID int64
	Title  *string // (optional)
	Photo  TL      // (optional) Photo: TL_photoEmpty | TL_photo
}

// Constructs RequestedPeer
type TL_requestedPeerChannel struct {
	ChannelID int64
	Title     *string // (optional)
	Username  *string // (optional)
	Photo     TL      // (optional) Photo: TL_photoEmpty | TL_photo
}

// Constructs SponsoredMessageReportOption
type TL_sponsoredMessageReportOption struct {
	Text   string
	Option []byte
}

// Constructs channels.SponsoredMessageReportResult
type TL_channels_sponsoredMessageReportResultChooseOption struct {
	Title   string
	Options []TL_sponsoredMessageReportOption
}

// Constructs channels.SponsoredMessageReportResult
type TL_channels_sponsoredMessageReportResultAdsHidden struct {
}

// Constructs channels.SponsoredMessageReportResult
type TL_channels_sponsoredMessageReportResultReported struct {
}

// Constructs stats.BroadcastRevenueStats
type TL_stats_broadcastRevenueStats struct {
	TopHoursGraph TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	RevenueGraph  TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	Balances      TL_broadcastRevenueBalances
	UsdRate       float64
}

// Constructs stats.BroadcastRevenueWithdrawalUrl
type TL_stats_broadcastRevenueWithdrawalURL struct {
	URL string
}

// Constructs BroadcastRevenueTransaction
type TL_broadcastRevenueTransactionProceeds struct {
	Amount   int64
	FromDate int32
	ToDate   int32
}

// Constructs BroadcastRevenueTransaction
type TL_broadcastRevenueTransactionWithdrawal struct {
	Pending         bool
	Failed          bool
	Amount          int64
	Date            int32
	Provider        string
	TransactionDate *int32  // (optional)
	TransactionURL  *string // (optional)
}

// Constructs BroadcastRevenueTransaction
type TL_broadcastRevenueTransactionRefund struct {
	Amount   int64
	Date     int32
	Provider string
}

// Constructs stats.BroadcastRevenueTransactions
type TL_stats_broadcastRevenueTransactions struct {
	Count        int32
	Transactions []TL // BroadcastRevenueTransaction: TL_broadcastRevenueTransactionProceeds | TL_broadcastRevenueTransactionWithdrawal | TL_broadcastRevenueTransactionRefund
}

// Constructs ReactionNotificationsFrom
type TL_reactionNotificationsFromContacts struct {
}

// Constructs ReactionNotificationsFrom
type TL_reactionNotificationsFromAll struct {
}

// Constructs ReactionsNotifySettings
type TL_reactionsNotifySettings struct {
	MessagesNotifyFrom TL // (optional) ReactionNotificationsFrom: TL_reactionNotificationsFromContacts | TL_reactionNotificationsFromAll
	StoriesNotifyFrom  TL // (optional) ReactionNotificationsFrom: TL_reactionNotificationsFromContacts | TL_reactionNotificationsFromAll
	Sound              TL // NotificationSound: TL_notificationSoundDefault | TL_notificationSoundNone | TL_notificationSoundLocal | TL_notificationSoundRingtone
	ShowPreviews       bool
}

// Constructs BroadcastRevenueBalances
type TL_broadcastRevenueBalances struct {
	WithdrawalEnabled bool
	CurrentBalance    int64
	AvailableBalance  int64
	OverallRevenue    int64
}

// Constructs AvailableEffect
type TL_availableEffect struct {
	PremiumRequired   bool
	ID                int64
	Emoticon          string
	StaticIconID      *int64 // (optional)
	EffectStickerID   int64
	EffectAnimationID *int64 // (optional)
}

// Constructs messages.AvailableEffects
type TL_messages_availableEffectsNotModified struct {
}

// Constructs messages.AvailableEffects
type TL_messages_availableEffects struct {
	Hash      int32
	Effects   []TL_availableEffect
	Documents []TL // Document: TL_documentEmpty | TL_document
}

// Constructs FactCheck
type TL_factCheck struct {
	NeedCheck bool
	Country   *string              // (optional)
	Text      *TL_textWithEntities // (optional)
	Hash      int64
}

// Constructs StarsTransactionPeer
type TL_starsTransactionPeerUnsupported struct {
}

// Constructs StarsTransactionPeer
type TL_starsTransactionPeerAppStore struct {
}

// Constructs StarsTransactionPeer
type TL_starsTransactionPeerPlayMarket struct {
}

// Constructs StarsTransactionPeer
type TL_starsTransactionPeerPremiumBot struct {
}

// Constructs StarsTransactionPeer
type TL_starsTransactionPeerFragment struct {
}

// Constructs StarsTransactionPeer
type TL_starsTransactionPeer struct {
	Peer TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
}

// Constructs StarsTransactionPeer
type TL_starsTransactionPeerAds struct {
}

// Constructs StarsTopupOption
type TL_starsTopupOption struct {
	Extended     bool
	Stars        int64
	StoreProduct *string // (optional)
	Currency     string
	Amount       int64
}

// Constructs StarsTransaction
type TL_starsTransaction struct {
	Refund             bool
	Pending            bool
	Failed             bool
	Gift               bool
	Reaction           bool
	ID                 string
	Stars              int64
	Date               int32
	Peer               TL      // StarsTransactionPeer: TL_starsTransactionPeerUnsupported | TL_starsTransactionPeerAppStore | TL_starsTransactionPeerPlayMarket | TL_starsTransactionPeerPremiumBot | TL_starsTransactionPeerFragment | TL_starsTransactionPeer | TL_starsTransactionPeerAds
	Title              *string // (optional)
	Description        *string // (optional)
	Photo              TL      // (optional) WebDocument: TL_webDocument | TL_webDocumentNoProxy
	TransactionDate    *int32  // (optional)
	TransactionURL     *string // (optional)
	BotPayload         []byte  // (optional)
	MsgID              *int32  // (optional)
	ExtendedMedia      []TL    // (optional) MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
	SubscriptionPeriod *int32  // (optional)
	GiveawayPostID     *int32  // (optional)
}

// Constructs payments.StarsStatus
type TL_payments_starsStatus struct {
	Balance                     int64
	Subscriptions               []TL_starsSubscription // (optional)
	SubscriptionsNextOffset     *string                // (optional)
	SubscriptionsMissingBalance *int64                 // (optional)
	History                     []TL_starsTransaction  // (optional)
	NextOffset                  *string                // (optional)
	Chats                       []TL                   // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users                       []TL                   // User: TL_userEmpty | TL_user
}

// Constructs FoundStory
type TL_foundStory struct {
	Peer  TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Story TL // StoryItem: TL_storyItemDeleted | TL_storyItemSkipped | TL_storyItem
}

// Constructs stories.FoundStories
type TL_stories_foundStories struct {
	Count      int32
	Stories    []TL_foundStory
	NextOffset *string // (optional)
	Chats      []TL    // Chat: TL_chatEmpty | TL_chat | TL_chatForbidden | TL_channel | TL_channelForbidden
	Users      []TL    // User: TL_userEmpty | TL_user
}

// Constructs GeoPointAddress
type TL_geoPointAddress struct {
	CountryISO2 string
	State       *string // (optional)
	City        *string // (optional)
	Street      *string // (optional)
}

// Constructs StarsRevenueStatus
type TL_starsRevenueStatus struct {
	WithdrawalEnabled bool
	CurrentBalance    int64
	AvailableBalance  int64
	OverallRevenue    int64
	NextWithdrawalAt  *int32 // (optional)
}

// Constructs payments.StarsRevenueStats
type TL_payments_starsRevenueStats struct {
	RevenueGraph TL // StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
	Status       TL_starsRevenueStatus
	UsdRate      float64
}

// Constructs payments.StarsRevenueWithdrawalUrl
type TL_payments_starsRevenueWithdrawalURL struct {
	URL string
}

// Constructs payments.StarsRevenueAdsAccountUrl
type TL_payments_starsRevenueAdsAccountURL struct {
	URL string
}

// Constructs InputStarsTransaction
type TL_inputStarsTransaction struct {
	Refund bool
	ID     string
}

// Constructs StarsGiftOption
type TL_starsGiftOption struct {
	Extended     bool
	Stars        int64
	StoreProduct *string // (optional)
	Currency     string
	Amount       int64
}

// Constructs bots.PopularAppBots
type TL_bots_popularAppBots struct {
	NextOffset *string // (optional)
	Users      []TL    // User: TL_userEmpty | TL_user
}

// Constructs BotPreviewMedia
type TL_botPreviewMedia struct {
	Date  int32
	Media TL // MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
}

// Constructs bots.PreviewInfo
type TL_bots_previewInfo struct {
	Media     []TL_botPreviewMedia
	LangCodes []string
}

// Constructs StarsSubscriptionPricing
type TL_starsSubscriptionPricing struct {
	Period int32
	Amount int64
}

// Constructs StarsSubscription
type TL_starsSubscription struct {
	Canceled       bool
	CanRefulfill   bool
	MissingBalance bool
	ID             string
	Peer           TL // Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	UntilDate      int32
	Pricing        TL_starsSubscriptionPricing
	ChatInviteHash *string // (optional)
}

// Constructs MessageReactor
type TL_messageReactor struct {
	Top       bool
	My        bool
	Anonymous bool
	PeerID    TL // (optional) Peer: TL_peerUser | TL_peerChat | TL_peerChannel
	Count     int32
}

// Constructs StarsGiveawayOption
type TL_starsGiveawayOption struct {
	Extended     bool
	Default      bool
	Stars        int64
	YearlyBoosts int32
	StoreProduct *string // (optional)
	Currency     string
	Amount       int64
	Winners      []TL_starsGiveawayWinnersOption
}

// Constructs StarsGiveawayWinnersOption
type TL_starsGiveawayWinnersOption struct {
	Default      bool
	Users        int32
	PerUserStars int64
}

// Returns response to Query
type TL_invokeAfterMsg struct {
	MsgID int64
	Query TLReq
}

// Returns response to Query
type TL_invokeAfterMsgs struct {
	MsgIDs []int64
	Query  TLReq
}

// Returns response to Query
type TL_initConnection struct {
	APIID          int32
	DeviceModel    string
	SystemVersion  string
	AppVersion     string
	SystemLangCode string
	LangPack       string
	LangCode       string
	Proxy          *TL_inputClientProxy // (optional)
	Params         TL                   // (optional) JSONValue: TL_jsonNull | TL_jsonBool | TL_jsonNumber | TL_jsonString | TL_jsonArray | TL_jsonObject
	Query          TLReq
}

// Returns response to Query
type TL_invokeWithLayer struct {
	Layer int32
	Query TLReq
}

// Returns response to Query
type TL_invokeWithoutUpdates struct {
	Query TLReq
}

// Returns response to Query
type TL_invokeWithMessagesRange struct {
	Range TL_messageRange
	Query TLReq
}

// Returns response to Query
type TL_invokeWithTakeout struct {
	TakeoutID int64
	Query     TLReq
}

// Returns response to Query
type TL_invokeWithBusinessConnection struct {
	ConnectionID string
	Query        TLReq
}

// Returns response to Query
type TL_invokeWithGooglePlayIntegrity struct {
	Nonce string
	Token string
	Query TLReq
}

// Returns response to Query
type TL_invokeWithApnsSecret struct {
	Nonce  string
	Secret string
	Query  TLReq
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_auth_sendCode struct {
	PhoneNumber string
	APIID       int32
	APIHash     string
	Settings    TL_codeSettings
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_signUp struct {
	NoJoinedNotifications bool
	PhoneNumber           string
	PhoneCodeHash         string
	FirstName             string
	LastName              string
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_signIn struct {
	PhoneNumber       string
	PhoneCodeHash     string
	PhoneCode         *string // (optional)
	EmailVerification TL      // (optional) EmailVerification: TL_emailVerificationCode | TL_emailVerificationGoogle | TL_emailVerificationApple
}

// Returns auth.LoggedOut: TL_auth_loggedOut
type TL_auth_logOut struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_resetAuthorizations struct {
}

// Returns auth.ExportedAuthorization: TL_auth_exportedAuthorization
type TL_auth_exportAuthorization struct {
	DCID int32
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_importAuthorization struct {
	ID    int64
	Bytes []byte
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_bindTempAuthKey struct {
	PermAuthKeyID    int64
	Nonce            int64
	ExpiresAt        int32
	EncryptedMessage []byte
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_importBotAuthorization struct {
	Flags        int32
	APIID        int32
	APIHash      string
	BotAuthToken string
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_checkPassword struct {
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns auth.PasswordRecovery: TL_auth_passwordRecovery
type TL_auth_requestPasswordRecovery struct {
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_recoverPassword struct {
	Code        string
	NewSettings *TL_account_passwordInputSettings // (optional)
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_auth_resendCode struct {
	PhoneNumber   string
	PhoneCodeHash string
	Reason        *string // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_cancelCode struct {
	PhoneNumber   string
	PhoneCodeHash string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_dropTempAuthKeys struct {
	ExceptAuthKeys []int64
}

// Returns auth.LoginToken: TL_auth_loginToken | TL_auth_loginTokenMigrateTo | TL_auth_loginTokenSuccess
type TL_auth_exportLoginToken struct {
	APIID     int32
	APIHash   string
	ExceptIDs []int64
}

// Returns auth.LoginToken: TL_auth_loginToken | TL_auth_loginTokenMigrateTo | TL_auth_loginTokenSuccess
type TL_auth_importLoginToken struct {
	Token []byte
}

// Returns Authorization: TL_authorization
type TL_auth_acceptLoginToken struct {
	Token []byte
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_checkRecoveryPassword struct {
	Code string
}

// Returns auth.Authorization: TL_auth_authorization | TL_auth_authorizationSignUpRequired
type TL_auth_importWebTokenAuthorization struct {
	APIID        int32
	APIHash      string
	WebAuthToken string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_requestFirebaseSMS struct {
	PhoneNumber        string
	PhoneCodeHash      string
	SafetyNetToken     *string // (optional)
	PlayIntegrityToken *string // (optional)
	IOSPushSecret      *string // (optional)
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_auth_resetLoginEmail struct {
	PhoneNumber   string
	PhoneCodeHash string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_auth_reportMissingCode struct {
	PhoneNumber   string
	PhoneCodeHash string
	Mnc           string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_registerDevice struct {
	NoMuted    bool
	TokenType  int32
	Token      string
	AppSandbox bool
	Secret     []byte
	OtherUIDs  []int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_unregisterDevice struct {
	TokenType int32
	Token     string
	OtherUIDs []int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateNotifySettings struct {
	Peer     TL // InputNotifyPeer: TL_inputNotifyPeer | TL_inputNotifyUsers | TL_inputNotifyChats | TL_inputNotifyBroadcasts | TL_inputNotifyForumTopic
	Settings TL_inputPeerNotifySettings
}

// Returns PeerNotifySettings: TL_peerNotifySettings
type TL_account_getNotifySettings struct {
	Peer TL // InputNotifyPeer: TL_inputNotifyPeer | TL_inputNotifyUsers | TL_inputNotifyChats | TL_inputNotifyBroadcasts | TL_inputNotifyForumTopic
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetNotifySettings struct {
}

// Returns User: TL_userEmpty | TL_user
type TL_account_updateProfile struct {
	FirstName *string // (optional)
	LastName  *string // (optional)
	About     *string // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateStatus struct {
	Offline bool
}

// Returns account.WallPapers: TL_account_wallPapersNotModified | TL_account_wallPapers
type TL_account_getWallPapers struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_reportPeer struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Reason  TL // ReportReason: TL_inputReportReasonSpam | TL_inputReportReasonViolence | TL_inputReportReasonPornography | TL_inputReportReasonChildAbuse | TL_inputReportReasonOther | TL_inputReportReasonCopyright | TL_inputReportReasonGeoIrrelevant | TL_inputReportReasonFake | TL_inputReportReasonIllegalDrugs | TL_inputReportReasonPersonalDetails
	Message string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_checkUsername struct {
	Username string
}

// Returns User: TL_userEmpty | TL_user
type TL_account_updateUsername struct {
	Username string
}

// Returns account.PrivacyRules: TL_account_privacyRules
type TL_account_getPrivacy struct {
	Key TL // InputPrivacyKey: TL_inputPrivacyKeyStatusTimestamp | TL_inputPrivacyKeyChatInvite | TL_inputPrivacyKeyPhoneCall | TL_inputPrivacyKeyPhoneP2P | TL_inputPrivacyKeyForwards | TL_inputPrivacyKeyProfilePhoto | TL_inputPrivacyKeyPhoneNumber | TL_inputPrivacyKeyAddedByPhone | TL_inputPrivacyKeyVoiceMessages | TL_inputPrivacyKeyAbout | TL_inputPrivacyKeyBirthday
}

// Returns account.PrivacyRules: TL_account_privacyRules
type TL_account_setPrivacy struct {
	Key   TL   // InputPrivacyKey: TL_inputPrivacyKeyStatusTimestamp | TL_inputPrivacyKeyChatInvite | TL_inputPrivacyKeyPhoneCall | TL_inputPrivacyKeyPhoneP2P | TL_inputPrivacyKeyForwards | TL_inputPrivacyKeyProfilePhoto | TL_inputPrivacyKeyPhoneNumber | TL_inputPrivacyKeyAddedByPhone | TL_inputPrivacyKeyVoiceMessages | TL_inputPrivacyKeyAbout | TL_inputPrivacyKeyBirthday
	Rules []TL // InputPrivacyRule: TL_inputPrivacyValueAllowContacts | TL_inputPrivacyValueAllowAll | TL_inputPrivacyValueAllowUsers | TL_inputPrivacyValueDisallowContacts | TL_inputPrivacyValueDisallowAll | TL_inputPrivacyValueDisallowUsers | TL_inputPrivacyValueAllowChatParticipants | TL_inputPrivacyValueDisallowChatParticipants | TL_inputPrivacyValueAllowCloseFriends | TL_inputPrivacyValueAllowPremium
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_deleteAccount struct {
	Reason   string
	Password TL // (optional) InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns AccountDaysTTL: TL_accountDaysTTL
type TL_account_getAccountTTL struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_setAccountTTL struct {
	TTL TL_accountDaysTTL
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_account_sendChangePhoneCode struct {
	PhoneNumber string
	Settings    TL_codeSettings
}

// Returns User: TL_userEmpty | TL_user
type TL_account_changePhone struct {
	PhoneNumber   string
	PhoneCodeHash string
	PhoneCode     string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateDeviceLocked struct {
	Period int32
}

// Returns account.Authorizations: TL_account_authorizations
type TL_account_getAuthorizations struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetAuthorization struct {
	Hash int64
}

// Returns account.Password: TL_account_password
type TL_account_getPassword struct {
}

// Returns account.PasswordSettings: TL_account_passwordSettings
type TL_account_getPasswordSettings struct {
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updatePasswordSettings struct {
	Password    TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
	NewSettings TL_account_passwordInputSettings
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_account_sendConfirmPhoneCode struct {
	Hash     string
	Settings TL_codeSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_confirmPhone struct {
	PhoneCodeHash string
	PhoneCode     string
}

// Returns account.TmpPassword: TL_account_tmpPassword
type TL_account_getTmpPassword struct {
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
	Period   int32
}

// Returns account.WebAuthorizations: TL_account_webAuthorizations
type TL_account_getWebAuthorizations struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetWebAuthorization struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetWebAuthorizations struct {
}

// Returns Vector<SecureValue>: TL_secureValue
type TL_account_getAllSecureValues struct {
}

// Returns Vector<SecureValue>: TL_secureValue
type TL_account_getSecureValue struct {
	Types []TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
}

// Returns SecureValue: TL_secureValue
type TL_account_saveSecureValue struct {
	Value          TL_inputSecureValue
	SecureSecretID int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_deleteSecureValue struct {
	Types []TL // SecureValueType: TL_secureValueTypePersonalDetails | TL_secureValueTypePassport | TL_secureValueTypeDriverLicense | TL_secureValueTypeIdentityCard | TL_secureValueTypeInternalPassport | TL_secureValueTypeAddress | TL_secureValueTypeUtilityBill | TL_secureValueTypeBankStatement | TL_secureValueTypeRentalAgreement | TL_secureValueTypePassportRegistration | TL_secureValueTypeTemporaryRegistration | TL_secureValueTypePhone | TL_secureValueTypeEmail
}

// Returns account.AuthorizationForm: TL_account_authorizationForm
type TL_account_getAuthorizationForm struct {
	BotID     int64
	Scope     string
	PublicKey string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_acceptAuthorization struct {
	BotID       int64
	Scope       string
	PublicKey   string
	ValueHashes []TL_secureValueHash
	Credentials TL_secureCredentialsEncrypted
}

// Returns auth.SentCode: TL_auth_sentCode | TL_auth_sentCodeSuccess
type TL_account_sendVerifyPhoneCode struct {
	PhoneNumber string
	Settings    TL_codeSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_verifyPhone struct {
	PhoneNumber   string
	PhoneCodeHash string
	PhoneCode     string
}

// Returns account.SentEmailCode: TL_account_sentEmailCode
type TL_account_sendVerifyEmailCode struct {
	Purpose TL // EmailVerifyPurpose: TL_emailVerifyPurposeLoginSetup | TL_emailVerifyPurposeLoginChange | TL_emailVerifyPurposePassport
	Email   string
}

// Returns account.EmailVerified: TL_account_emailVerified | TL_account_emailVerifiedLogin
type TL_account_verifyEmail struct {
	Purpose      TL // EmailVerifyPurpose: TL_emailVerifyPurposeLoginSetup | TL_emailVerifyPurposeLoginChange | TL_emailVerifyPurposePassport
	Verification TL // EmailVerification: TL_emailVerificationCode | TL_emailVerificationGoogle | TL_emailVerificationApple
}

// Returns account.Takeout: TL_account_takeout
type TL_account_initTakeoutSession struct {
	Contacts          bool
	MessageUsers      bool
	MessageChats      bool
	MessageMegagroups bool
	MessageChannels   bool
	Files             bool
	FileMaxSize       *int64 // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_finishTakeoutSession struct {
	Success bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_confirmPasswordEmail struct {
	Code string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resendPasswordEmail struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_cancelPasswordEmail struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_getContactSignUpNotification struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_setContactSignUpNotification struct {
	Silent bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_account_getNotifyExceptions struct {
	CompareSound   bool
	CompareStories bool
	Peer           TL // (optional) InputNotifyPeer: TL_inputNotifyPeer | TL_inputNotifyUsers | TL_inputNotifyChats | TL_inputNotifyBroadcasts | TL_inputNotifyForumTopic
}

// Returns WallPaper: TL_wallPaper | TL_wallPaperNoFile
type TL_account_getWallPaper struct {
	Wallpaper TL // InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
}

// Returns WallPaper: TL_wallPaper | TL_wallPaperNoFile
type TL_account_uploadWallPaper struct {
	ForChat  bool
	File     TL // InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	MIMEType string
	Settings TL_wallPaperSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_saveWallPaper struct {
	Wallpaper TL // InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
	Unsave    bool
	Settings  TL_wallPaperSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_installWallPaper struct {
	Wallpaper TL // InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
	Settings  TL_wallPaperSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_resetWallPapers struct {
}

// Returns account.AutoDownloadSettings: TL_account_autoDownloadSettings
type TL_account_getAutoDownloadSettings struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_saveAutoDownloadSettings struct {
	Low      bool
	High     bool
	Settings TL_autoDownloadSettings
}

// Returns Document: TL_documentEmpty | TL_document
type TL_account_uploadTheme struct {
	File     TL // InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	Thumb    TL // (optional) InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	FileName string
	MIMEType string
}

// Returns Theme: TL_theme
type TL_account_createTheme struct {
	Slug     string
	Title    string
	Document TL                      // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Settings []TL_inputThemeSettings // (optional)
}

// Returns Theme: TL_theme
type TL_account_updateTheme struct {
	Format   string
	Theme    TL                      // InputTheme: TL_inputTheme | TL_inputThemeSlug
	Slug     *string                 // (optional)
	Title    *string                 // (optional)
	Document TL                      // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Settings []TL_inputThemeSettings // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_saveTheme struct {
	Theme  TL // InputTheme: TL_inputTheme | TL_inputThemeSlug
	Unsave bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_installTheme struct {
	Dark      bool
	Theme     TL      // (optional) InputTheme: TL_inputTheme | TL_inputThemeSlug
	Format    *string // (optional)
	BaseTheme TL      // (optional) BaseTheme: TL_baseThemeClassic | TL_baseThemeDay | TL_baseThemeNight | TL_baseThemeTinted | TL_baseThemeArctic
}

// Returns Theme: TL_theme
type TL_account_getTheme struct {
	Format string
	Theme  TL // InputTheme: TL_inputTheme | TL_inputThemeSlug
}

// Returns account.Themes: TL_account_themesNotModified | TL_account_themes
type TL_account_getThemes struct {
	Format string
	Hash   int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_setContentSettings struct {
	SensitiveEnabled bool
}

// Returns account.ContentSettings: TL_account_contentSettings
type TL_account_getContentSettings struct {
}

// Returns Vector<WallPaper>: TL_wallPaper | TL_wallPaperNoFile
type TL_account_getMultiWallPapers struct {
	Wallpapers []TL // InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
}

// Returns GlobalPrivacySettings: TL_globalPrivacySettings
type TL_account_getGlobalPrivacySettings struct {
}

// Returns GlobalPrivacySettings: TL_globalPrivacySettings
type TL_account_setGlobalPrivacySettings struct {
	Settings TL_globalPrivacySettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_reportProfilePhoto struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	PhotoID TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
	Reason  TL // ReportReason: TL_inputReportReasonSpam | TL_inputReportReasonViolence | TL_inputReportReasonPornography | TL_inputReportReasonChildAbuse | TL_inputReportReasonOther | TL_inputReportReasonCopyright | TL_inputReportReasonGeoIrrelevant | TL_inputReportReasonFake | TL_inputReportReasonIllegalDrugs | TL_inputReportReasonPersonalDetails
	Message string
}

// Returns account.ResetPasswordResult: TL_account_resetPasswordFailedWait | TL_account_resetPasswordRequestedWait | TL_account_resetPasswordOK
type TL_account_resetPassword struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_declinePasswordReset struct {
}

// Returns account.Themes: TL_account_themesNotModified | TL_account_themes
type TL_account_getChatThemes struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_setAuthorizationTTL struct {
	AuthorizationTTLDays int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_changeAuthorizationSettings struct {
	Confirmed                 bool
	Hash                      int64
	EncryptedRequestsDisabled *bool // (optional)
	CallRequestsDisabled      *bool // (optional)
}

// Returns account.SavedRingtones: TL_account_savedRingtonesNotModified | TL_account_savedRingtones
type TL_account_getSavedRingtones struct {
	Hash int64
}

// Returns account.SavedRingtone: TL_account_savedRingtone | TL_account_savedRingtoneConverted
type TL_account_saveRingtone struct {
	ID     TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Unsave bool
}

// Returns Document: TL_documentEmpty | TL_document
type TL_account_uploadRingtone struct {
	File     TL // InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	FileName string
	MIMEType string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateEmojiStatus struct {
	EmojiStatus TL // EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
}

// Returns account.EmojiStatuses: TL_account_emojiStatusesNotModified | TL_account_emojiStatuses
type TL_account_getDefaultEmojiStatuses struct {
	Hash int64
}

// Returns account.EmojiStatuses: TL_account_emojiStatusesNotModified | TL_account_emojiStatuses
type TL_account_getRecentEmojiStatuses struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_clearRecentEmojiStatuses struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_reorderUsernames struct {
	Order []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_toggleUsername struct {
	Username string
	Active   bool
}

// Returns EmojiList: TL_emojiListNotModified | TL_emojiList
type TL_account_getDefaultProfilePhotoEmojis struct {
	Hash int64
}

// Returns EmojiList: TL_emojiListNotModified | TL_emojiList
type TL_account_getDefaultGroupPhotoEmojis struct {
	Hash int64
}

// Returns account.AutoSaveSettings: TL_account_autoSaveSettings
type TL_account_getAutoSaveSettings struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_saveAutoSaveSettings struct {
	Users      bool
	Chats      bool
	Broadcasts bool
	Peer       TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Settings   TL_autoSaveSettings
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_deleteAutoSaveExceptions struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_invalidateSignInCodes struct {
	Codes []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateColor struct {
	ForProfile        bool
	Color             *int32 // (optional)
	BackgroundEmojiID *int64 // (optional)
}

// Returns EmojiList: TL_emojiListNotModified | TL_emojiList
type TL_account_getDefaultBackgroundEmojis struct {
	Hash int64
}

// Returns account.EmojiStatuses: TL_account_emojiStatusesNotModified | TL_account_emojiStatuses
type TL_account_getChannelDefaultEmojiStatuses struct {
	Hash int64
}

// Returns EmojiList: TL_emojiListNotModified | TL_emojiList
type TL_account_getChannelRestrictedStatusEmojis struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateBusinessWorkHours struct {
	BusinessWorkHours *TL_businessWorkHours // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateBusinessLocation struct {
	GeoPoint TL      // (optional) InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Address  *string // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateBusinessGreetingMessage struct {
	Message *TL_inputBusinessGreetingMessage // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateBusinessAwayMessage struct {
	Message *TL_inputBusinessAwayMessage // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_account_updateConnectedBot struct {
	CanReply   bool
	Deleted    bool
	Bot        TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Recipients TL_inputBusinessBotRecipients
}

// Returns account.ConnectedBots: TL_account_connectedBots
type TL_account_getConnectedBots struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_account_getBotBusinessConnection struct {
	ConnectionID string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateBusinessIntro struct {
	Intro *TL_inputBusinessIntro // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_toggleConnectedBotPaused struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Paused bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_disablePeerConnectedBot struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updateBirthday struct {
	Birthday *TL_birthday // (optional)
}

// Returns BusinessChatLink: TL_businessChatLink
type TL_account_createBusinessChatLink struct {
	Link TL_inputBusinessChatLink
}

// Returns BusinessChatLink: TL_businessChatLink
type TL_account_editBusinessChatLink struct {
	Slug string
	Link TL_inputBusinessChatLink
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_deleteBusinessChatLink struct {
	Slug string
}

// Returns account.BusinessChatLinks: TL_account_businessChatLinks
type TL_account_getBusinessChatLinks struct {
}

// Returns account.ResolvedBusinessChatLinks: TL_account_resolvedBusinessChatLinks
type TL_account_resolveBusinessChatLink struct {
	Slug string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_updatePersonalChannel struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_account_toggleSponsoredMessages struct {
	Enabled bool
}

// Returns ReactionsNotifySettings: TL_reactionsNotifySettings
type TL_account_getReactionsNotifySettings struct {
}

// Returns ReactionsNotifySettings: TL_reactionsNotifySettings
type TL_account_setReactionsNotifySettings struct {
	Settings TL_reactionsNotifySettings
}

// Returns Vector<User>: TL_userEmpty | TL_user
type TL_users_getUsers struct {
	ID []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns users.UserFull: TL_users_userFull
type TL_users_getFullUser struct {
	ID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_users_setSecureValueErrors struct {
	ID     TL   // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Errors []TL // SecureValueError: TL_secureValueErrorData | TL_secureValueErrorFrontSide | TL_secureValueErrorReverseSide | TL_secureValueErrorSelfie | TL_secureValueErrorFile | TL_secureValueErrorFiles | TL_secureValueError | TL_secureValueErrorTranslationFile | TL_secureValueErrorTranslationFiles
}

// Returns Vector<Bool>: TL_boolFalse | TL_boolTrue
type TL_users_getIsPremiumRequiredToContact struct {
	ID []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Vector<int>:
type TL_contacts_getContactIDs struct {
	Hash int64
}

// Returns Vector<ContactStatus>: TL_contactStatus
type TL_contacts_getStatuses struct {
}

// Returns contacts.Contacts: TL_contacts_contactsNotModified | TL_contacts_contacts
type TL_contacts_getContacts struct {
	Hash int64
}

// Returns contacts.ImportedContacts: TL_contacts_importedContacts
type TL_contacts_importContacts struct {
	Contacts []TL_inputPhoneContact
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_deleteContacts struct {
	ID []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_deleteByPhones struct {
	Phones []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_block struct {
	MyStoriesFrom bool
	ID            TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_unblock struct {
	MyStoriesFrom bool
	ID            TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns contacts.Blocked: TL_contacts_blocked | TL_contacts_blockedSlice
type TL_contacts_getBlocked struct {
	MyStoriesFrom bool
	Offset        int32
	Limit         int32
}

// Returns contacts.Found: TL_contacts_found
type TL_contacts_search struct {
	Q     string
	Limit int32
}

// Returns contacts.ResolvedPeer: TL_contacts_resolvedPeer
type TL_contacts_resolveUsername struct {
	Username string
}

// Returns contacts.TopPeers: TL_contacts_topPeersNotModified | TL_contacts_topPeers | TL_contacts_topPeersDisabled
type TL_contacts_getTopPeers struct {
	Correspondents bool
	BotsPM         bool
	BotsInline     bool
	PhoneCalls     bool
	ForwardUsers   bool
	ForwardChats   bool
	Groups         bool
	Channels       bool
	BotsApp        bool
	Offset         int32
	Limit          int32
	Hash           int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_resetTopPeerRating struct {
	Category TL // TopPeerCategory: TL_topPeerCategoryBotsPM | TL_topPeerCategoryBotsInline | TL_topPeerCategoryCorrespondents | TL_topPeerCategoryGroups | TL_topPeerCategoryChannels | TL_topPeerCategoryPhoneCalls | TL_topPeerCategoryForwardUsers | TL_topPeerCategoryForwardChats | TL_topPeerCategoryBotsApp
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_resetSaved struct {
}

// Returns Vector<SavedContact>: TL_savedPhoneContact
type TL_contacts_getSaved struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_toggleTopPeers struct {
	Enabled bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_addContact struct {
	AddPhonePrivacyException bool
	ID                       TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	FirstName                string
	LastName                 string
	Phone                    string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_acceptContact struct {
	ID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_getLocated struct {
	Background  bool
	GeoPoint    TL     // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	SelfExpires *int32 // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_contacts_blockFromReplies struct {
	DeleteMessage bool
	DeleteHistory bool
	ReportSpam    bool
	MsgID         int32
}

// Returns contacts.ResolvedPeer: TL_contacts_resolvedPeer
type TL_contacts_resolvePhone struct {
	Phone string
}

// Returns ExportedContactToken: TL_exportedContactToken
type TL_contacts_exportContactToken struct {
}

// Returns User: TL_userEmpty | TL_user
type TL_contacts_importContactToken struct {
	Token string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_editCloseFriends struct {
	ID []int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_contacts_setBlocked struct {
	MyStoriesFrom bool
	ID            []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Limit         int32
}

// Returns contacts.ContactBirthdays: TL_contacts_contactBirthdays
type TL_contacts_getBirthdays struct {
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getMessages struct {
	ID []TL // InputMessage: TL_inputMessageID | TL_inputMessageReplyTo | TL_inputMessagePinned | TL_inputMessageCallbackQuery
}

// Returns messages.Dialogs: TL_messages_dialogs | TL_messages_dialogsSlice | TL_messages_dialogsNotModified
type TL_messages_getDialogs struct {
	ExcludePinned bool
	FolderID      *int32 // (optional)
	OffsetDate    int32
	OffsetID      int32
	OffsetPeer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Limit         int32
	Hash          int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getHistory struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID   int32
	OffsetDate int32
	AddOffset  int32
	Limit      int32
	MaxID      int32
	MinID      int32
	Hash       int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_search struct {
	Peer          TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Q             string
	FromID        TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	SavedPeerID   TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	SavedReaction []TL   // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
	TopMsgID      *int32 // (optional)
	Filter        TL     // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterURL | TL_inputMessagesFilterGIF | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	MinDate       int32
	MaxDate       int32
	OffsetID      int32
	AddOffset     int32
	Limit         int32
	MaxID         int32
	MinID         int32
	Hash          int64
}

// Returns messages.AffectedMessages: TL_messages_affectedMessages
type TL_messages_readHistory struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MaxID int32
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_messages_deleteHistory struct {
	JustClear bool
	Revoke    bool
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MaxID     int32
	MinDate   *int32 // (optional)
	MaxDate   *int32 // (optional)
}

// Returns messages.AffectedMessages: TL_messages_affectedMessages
type TL_messages_deleteMessages struct {
	Revoke bool
	ID     []int32
}

// Returns Vector<ReceivedNotifyMessage>: TL_receivedNotifyMessage
type TL_messages_receivedMessages struct {
	MaxID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setTyping struct {
	Peer     TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID *int32 // (optional)
	Action   TL     // SendMessageAction: TL_sendMessageTypingAction | TL_sendMessageCancelAction | TL_sendMessageRecordVideoAction | TL_sendMessageUploadVideoAction | TL_sendMessageRecordAudioAction | TL_sendMessageUploadAudioAction | TL_sendMessageUploadPhotoAction | TL_sendMessageUploadDocumentAction | TL_sendMessageGeoLocationAction | TL_sendMessageChooseContactAction | TL_sendMessageGamePlayAction | TL_sendMessageRecordRoundAction | TL_sendMessageUploadRoundAction | TL_speakingInGroupCallAction | TL_sendMessageHistoryImportAction | TL_sendMessageChooseStickerAction | TL_sendMessageEmojiInteraction | TL_sendMessageEmojiInteractionSeen
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendMessage struct {
	NoWebpage              bool
	Silent                 bool
	Background             bool
	ClearDraft             bool
	Noforwards             bool
	UpdateStickersetsOrder bool
	InvertMedia            bool
	Peer                   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo                TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	Message                string
	RandomID               int64
	ReplyMarkup            TL     // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities               []TL   // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ScheduleDate           *int32 // (optional)
	SendAs                 TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	QuickReplyShortcut     TL     // (optional) InputQuickReplyShortcut: TL_inputQuickReplyShortcut | TL_inputQuickReplyShortcutID
	Effect                 *int64 // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendMedia struct {
	Silent                 bool
	Background             bool
	ClearDraft             bool
	Noforwards             bool
	UpdateStickersetsOrder bool
	InvertMedia            bool
	Peer                   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo                TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	Media                  TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	Message                string
	RandomID               int64
	ReplyMarkup            TL     // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities               []TL   // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ScheduleDate           *int32 // (optional)
	SendAs                 TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	QuickReplyShortcut     TL     // (optional) InputQuickReplyShortcut: TL_inputQuickReplyShortcut | TL_inputQuickReplyShortcutID
	Effect                 *int64 // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_forwardMessages struct {
	Silent             bool
	Background         bool
	WithMyScore        bool
	DropAuthor         bool
	DropMediaCaptions  bool
	Noforwards         bool
	FromPeer           TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID                 []int32
	RandomID           []int64
	ToPeer             TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID           *int32 // (optional)
	ScheduleDate       *int32 // (optional)
	SendAs             TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	QuickReplyShortcut TL     // (optional) InputQuickReplyShortcut: TL_inputQuickReplyShortcut | TL_inputQuickReplyShortcutID
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reportSpam struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.PeerSettings: TL_messages_peerSettings
type TL_messages_getPeerSettings struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_report struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID      []int32
	Reason  TL // ReportReason: TL_inputReportReasonSpam | TL_inputReportReasonViolence | TL_inputReportReasonPornography | TL_inputReportReasonChildAbuse | TL_inputReportReasonOther | TL_inputReportReasonCopyright | TL_inputReportReasonGeoIrrelevant | TL_inputReportReasonFake | TL_inputReportReasonIllegalDrugs | TL_inputReportReasonPersonalDetails
	Message string
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_messages_getChats struct {
	ID []int64
}

// Returns messages.ChatFull: TL_messages_chatFull
type TL_messages_getFullChat struct {
	ChatID int64
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_editChatTitle struct {
	ChatID int64
	Title  string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_editChatPhoto struct {
	ChatID int64
	Photo  TL // InputChatPhoto: TL_inputChatPhotoEmpty | TL_inputChatUploadedPhoto | TL_inputChatPhoto
}

// Returns messages.InvitedUsers: TL_messages_invitedUsers
type TL_messages_addChatUser struct {
	ChatID   int64
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	FwdLimit int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_deleteChatUser struct {
	RevokeHistory bool
	ChatID        int64
	UserID        TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns messages.InvitedUsers: TL_messages_invitedUsers
type TL_messages_createChat struct {
	Users     []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Title     string
	TTLPeriod *int32 // (optional)
}

// Returns messages.DhConfig: TL_messages_dhConfigNotModified | TL_messages_dhConfig
type TL_messages_getDHConfig struct {
	Version      int32
	RandomLength int32
}

// Returns EncryptedChat: TL_encryptedChatEmpty | TL_encryptedChatWaiting | TL_encryptedChatRequested | TL_encryptedChat | TL_encryptedChatDiscarded
type TL_messages_requestEncryption struct {
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	RandomID int32
	GA       []byte
}

// Returns EncryptedChat: TL_encryptedChatEmpty | TL_encryptedChatWaiting | TL_encryptedChatRequested | TL_encryptedChat | TL_encryptedChatDiscarded
type TL_messages_acceptEncryption struct {
	Peer           TL_inputEncryptedChat
	GB             []byte
	KeyFingerprint int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_discardEncryption struct {
	DeleteHistory bool
	ChatID        int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setEncryptedTyping struct {
	Peer   TL_inputEncryptedChat
	Typing bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_readEncryptedHistory struct {
	Peer    TL_inputEncryptedChat
	MaxDate int32
}

// Returns messages.SentEncryptedMessage: TL_messages_sentEncryptedMessage | TL_messages_sentEncryptedFile
type TL_messages_sendEncrypted struct {
	Silent   bool
	Peer     TL_inputEncryptedChat
	RandomID int64
	Data     []byte
}

// Returns messages.SentEncryptedMessage: TL_messages_sentEncryptedMessage | TL_messages_sentEncryptedFile
type TL_messages_sendEncryptedFile struct {
	Silent   bool
	Peer     TL_inputEncryptedChat
	RandomID int64
	Data     []byte
	File     TL // InputEncryptedFile: TL_inputEncryptedFileEmpty | TL_inputEncryptedFileUploaded | TL_inputEncryptedFile | TL_inputEncryptedFileBigUploaded
}

// Returns messages.SentEncryptedMessage: TL_messages_sentEncryptedMessage | TL_messages_sentEncryptedFile
type TL_messages_sendEncryptedService struct {
	Peer     TL_inputEncryptedChat
	RandomID int64
	Data     []byte
}

// Returns Vector<long>:
type TL_messages_receivedQueue struct {
	MaxQTS int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reportEncryptedSpam struct {
	Peer TL_inputEncryptedChat
}

// Returns messages.AffectedMessages: TL_messages_affectedMessages
type TL_messages_readMessageContents struct {
	ID []int32
}

// Returns messages.Stickers: TL_messages_stickersNotModified | TL_messages_stickers
type TL_messages_getStickers struct {
	Emoticon string
	Hash     int64
}

// Returns messages.AllStickers: TL_messages_allStickersNotModified | TL_messages_allStickers
type TL_messages_getAllStickers struct {
	Hash int64
}

// Returns MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
type TL_messages_getWebPagePreview struct {
	Message  string
	Entities []TL // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Returns ExportedChatInvite: TL_chatInviteExported | TL_chatInvitePublicJoinRequests
type TL_messages_exportChatInvite struct {
	LegacyRevokePermanent bool
	RequestNeeded         bool
	Peer                  TL                           // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ExpireDate            *int32                       // (optional)
	UsageLimit            *int32                       // (optional)
	Title                 *string                      // (optional)
	SubscriptionPricing   *TL_starsSubscriptionPricing // (optional)
}

// Returns ChatInvite: TL_chatInviteAlready | TL_chatInvite | TL_chatInvitePeek
type TL_messages_checkChatInvite struct {
	Hash string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_importChatInvite struct {
	Hash string
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_messages_getStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	Hash       int32
}

// Returns messages.StickerSetInstallResult: TL_messages_stickerSetInstallResultSuccess | TL_messages_stickerSetInstallResultArchive
type TL_messages_installStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	Archived   bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_uninstallStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_startBot struct {
	Bot        TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	RandomID   int64
	StartParam string
}

// Returns messages.MessageViews: TL_messages_messageViews
type TL_messages_getMessagesViews struct {
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID        []int32
	Increment bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_editChatAdmin struct {
	ChatID  int64
	UserID  TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	IsAdmin bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_migrateChat struct {
	ChatID int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_searchGlobal struct {
	BroadcastsOnly bool
	FolderID       *int32 // (optional)
	Q              string
	Filter         TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterURL | TL_inputMessagesFilterGIF | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	MinDate        int32
	MaxDate        int32
	OffsetRate     int32
	OffsetPeer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID       int32
	Limit          int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reorderStickerSets struct {
	Masks  bool
	Emojis bool
	Order  []int64
}

// Returns Document: TL_documentEmpty | TL_document
type TL_messages_getDocumentByHash struct {
	Sha256   []byte
	Size     int64
	MIMEType string
}

// Returns messages.SavedGifs: TL_messages_savedGIFsNotModified | TL_messages_savedGIFs
type TL_messages_getSavedGIFs struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_saveGIF struct {
	ID     TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Unsave bool
}

// Returns messages.BotResults: TL_messages_botResults
type TL_messages_getInlineBotResults struct {
	Bot      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	GeoPoint TL // (optional) InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Query    string
	Offset   string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setInlineBotResults struct {
	Gallery       bool
	Private       bool
	QueryID       int64
	Results       []TL // InputBotInlineResult: TL_inputBotInlineResult | TL_inputBotInlineResultPhoto | TL_inputBotInlineResultDocument | TL_inputBotInlineResultGame
	CacheTime     int32
	NextOffset    *string               // (optional)
	SwitchPM      *TL_inlineBotSwitchPM // (optional)
	SwitchWebview *TL_inlineBotWebView  // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendInlineBotResult struct {
	Silent             bool
	Background         bool
	ClearDraft         bool
	HideVia            bool
	Peer               TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo            TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	RandomID           int64
	QueryID            int64
	ID                 string
	ScheduleDate       *int32 // (optional)
	SendAs             TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	QuickReplyShortcut TL     // (optional) InputQuickReplyShortcut: TL_inputQuickReplyShortcut | TL_inputQuickReplyShortcutID
}

// Returns messages.MessageEditData: TL_messages_messageEditData
type TL_messages_getMessageEditData struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_editMessage struct {
	NoWebpage            bool
	InvertMedia          bool
	Peer                 TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID                   int32
	Message              *string // (optional)
	Media                TL      // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	ReplyMarkup          TL      // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities             []TL    // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	ScheduleDate         *int32  // (optional)
	QuickReplyShortcutID *int32  // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_editInlineBotMessage struct {
	NoWebpage   bool
	InvertMedia bool
	ID          TL      // InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
	Message     *string // (optional)
	Media       TL      // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	ReplyMarkup TL      // (optional) ReplyMarkup: TL_replyKeyboardHide | TL_replyKeyboardForceReply | TL_replyKeyboardMarkup | TL_replyInlineMarkup
	Entities    []TL    // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Returns messages.BotCallbackAnswer: TL_messages_botCallbackAnswer
type TL_messages_getBotCallbackAnswer struct {
	Game     bool
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID    int32
	Data     []byte // (optional)
	Password TL     // (optional) InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setBotCallbackAnswer struct {
	Alert     bool
	QueryID   int64
	Message   *string // (optional)
	URL       *string // (optional)
	CacheTime int32
}

// Returns messages.PeerDialogs: TL_messages_peerDialogs
type TL_messages_getPeerDialogs struct {
	Peers []TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_saveDraft struct {
	NoWebpage   bool
	InvertMedia bool
	ReplyTo     TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Message     string
	Entities    []TL   // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	Media       TL     // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	Effect      *int64 // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_getAllDrafts struct {
}

// Returns messages.FeaturedStickers: TL_messages_featuredStickersNotModified | TL_messages_featuredStickers
type TL_messages_getFeaturedStickers struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_readFeaturedStickers struct {
	ID []int64
}

// Returns messages.RecentStickers: TL_messages_recentStickersNotModified | TL_messages_recentStickers
type TL_messages_getRecentStickers struct {
	Attached bool
	Hash     int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_saveRecentSticker struct {
	Attached bool
	ID       TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Unsave   bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_clearRecentStickers struct {
	Attached bool
}

// Returns messages.ArchivedStickers: TL_messages_archivedStickers
type TL_messages_getArchivedStickers struct {
	Masks    bool
	Emojis   bool
	OffsetID int64
	Limit    int32
}

// Returns messages.AllStickers: TL_messages_allStickersNotModified | TL_messages_allStickers
type TL_messages_getMaskStickers struct {
	Hash int64
}

// Returns Vector<StickerSetCovered>: TL_stickerSetCovered | TL_stickerSetMultiCovered | TL_stickerSetFullCovered | TL_stickerSetNoCovered
type TL_messages_getAttachedStickers struct {
	Media TL // InputStickeredMedia: TL_inputStickeredMediaPhoto | TL_inputStickeredMediaDocument
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setGameScore struct {
	EditMessage bool
	Force       bool
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID          int32
	UserID      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Score       int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setInlineGameScore struct {
	EditMessage bool
	Force       bool
	ID          TL // InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
	UserID      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Score       int32
}

// Returns messages.HighScores: TL_messages_highScores
type TL_messages_getGameHighScores struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID     int32
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns messages.HighScores: TL_messages_highScores
type TL_messages_getInlineGameHighScores struct {
	ID     TL // InputBotInlineMessageID: TL_inputBotInlineMessageID | TL_inputBotInlineMessageID64
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_messages_getCommonChats struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	MaxID  int64
	Limit  int32
}

// Returns messages.WebPage: TL_messages_webPage
type TL_messages_getWebPage struct {
	URL  string
	Hash int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_toggleDialogPIN struct {
	Pinned bool
	Peer   TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reorderPinnedDialogs struct {
	Force    bool
	FolderID int32
	Order    []TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns messages.PeerDialogs: TL_messages_peerDialogs
type TL_messages_getPinnedDialogs struct {
	FolderID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setBotShippingResults struct {
	QueryID         int64
	Error           *string             // (optional)
	ShippingOptions []TL_shippingOption // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setBotPrecheckoutResults struct {
	Success bool
	QueryID int64
	Error   *string // (optional)
}

// Returns MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
type TL_messages_uploadMedia struct {
	BusinessConnectionID *string // (optional)
	Peer                 TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Media                TL      // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendScreenshotNotification struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo  TL // InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	RandomID int64
}

// Returns messages.FavedStickers: TL_messages_favedStickersNotModified | TL_messages_favedStickers
type TL_messages_getFavedStickers struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_faveSticker struct {
	ID     TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Unfave bool
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getUnreadMentions struct {
	Peer      TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID  *int32 // (optional)
	OffsetID  int32
	AddOffset int32
	Limit     int32
	MaxID     int32
	MinID     int32
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_messages_readMentions struct {
	Peer     TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID *int32 // (optional)
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getRecentLocations struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Limit int32
	Hash  int64
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendMultiMedia struct {
	Silent                 bool
	Background             bool
	ClearDraft             bool
	Noforwards             bool
	UpdateStickersetsOrder bool
	InvertMedia            bool
	Peer                   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ReplyTo                TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	MultiMedia             []TL_inputSingleMedia
	ScheduleDate           *int32 // (optional)
	SendAs                 TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	QuickReplyShortcut     TL     // (optional) InputQuickReplyShortcut: TL_inputQuickReplyShortcut | TL_inputQuickReplyShortcutID
	Effect                 *int64 // (optional)
}

// Returns EncryptedFile: TL_encryptedFileEmpty | TL_encryptedFile
type TL_messages_uploadEncryptedFile struct {
	Peer TL_inputEncryptedChat
	File TL // InputEncryptedFile: TL_inputEncryptedFileEmpty | TL_inputEncryptedFileUploaded | TL_inputEncryptedFile | TL_inputEncryptedFileBigUploaded
}

// Returns messages.FoundStickerSets: TL_messages_foundStickerSetsNotModified | TL_messages_foundStickerSets
type TL_messages_searchStickerSets struct {
	ExcludeFeatured bool
	Q               string
	Hash            int64
}

// Returns Vector<MessageRange>: TL_messageRange
type TL_messages_getSplitRanges struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_markDialogUnread struct {
	Unread bool
	Peer   TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns Vector<DialogPeer>: TL_dialogPeer | TL_dialogPeerFolder
type TL_messages_getDialogUnreadMarks struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_clearAllDrafts struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_updatePinnedMessage struct {
	Silent    bool
	Unpin     bool
	PMOneside bool
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID        int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendVote struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID   int32
	Options [][]byte
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_getPollResults struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns ChatOnlines: TL_chatOnlines
type TL_messages_getOnlines struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_editChatAbout struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	About string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_editChatDefaultBannedRights struct {
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	BannedRights TL_chatBannedRights
}

// Returns EmojiKeywordsDifference: TL_emojiKeywordsDifference
type TL_messages_getEmojiKeywords struct {
	LangCode string
}

// Returns EmojiKeywordsDifference: TL_emojiKeywordsDifference
type TL_messages_getEmojiKeywordsDifference struct {
	LangCode    string
	FromVersion int32
}

// Returns Vector<EmojiLanguage>: TL_emojiLanguage
type TL_messages_getEmojiKeywordsLanguages struct {
	LangCodes []string
}

// Returns EmojiURL: TL_emojiURL
type TL_messages_getEmojiURL struct {
	LangCode string
}

// Returns Vector<messages.SearchCounter>: TL_messages_searchCounter
type TL_messages_getSearchCounters struct {
	Peer        TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	SavedPeerID TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID    *int32 // (optional)
	Filters     []TL   // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterURL | TL_inputMessagesFilterGIF | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
}

// Returns UrlAuthResult: TL_urlAuthResultRequest | TL_urlAuthResultAccepted | TL_urlAuthResultDefault
type TL_messages_requestURLAuth struct {
	Peer     TL      // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID    *int32  // (optional)
	ButtonID *int32  // (optional)
	URL      *string // (optional)
}

// Returns UrlAuthResult: TL_urlAuthResultRequest | TL_urlAuthResultAccepted | TL_urlAuthResultDefault
type TL_messages_acceptURLAuth struct {
	WriteAllowed bool
	Peer         TL      // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID        *int32  // (optional)
	ButtonID     *int32  // (optional)
	URL          *string // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_hidePeerSettingsBar struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getScheduledHistory struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Hash int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getScheduledMessages struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendScheduledMessages struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_deleteScheduledMessages struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns messages.VotesList: TL_messages_votesList
type TL_messages_getPollVotes struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID     int32
	Option []byte  // (optional)
	Offset *string // (optional)
	Limit  int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_toggleStickerSets struct {
	Uninstall   bool
	Archive     bool
	Unarchive   bool
	Stickersets []TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
}

// Returns messages.DialogFilters: TL_messages_dialogFilters
type TL_messages_getDialogFilters struct {
}

// Returns Vector<DialogFilterSuggested>: TL_dialogFilterSuggested
type TL_messages_getSuggestedDialogFilters struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_updateDialogFilter struct {
	ID     int32
	Filter TL // (optional) DialogFilter: TL_dialogFilter | TL_dialogFilterDefault | TL_dialogFilterChatlist
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_updateDialogFiltersOrder struct {
	Order []int32
}

// Returns messages.FeaturedStickers: TL_messages_featuredStickersNotModified | TL_messages_featuredStickers
type TL_messages_getOldFeaturedStickers struct {
	Offset int32
	Limit  int32
	Hash   int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getReplies struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID      int32
	OffsetID   int32
	OffsetDate int32
	AddOffset  int32
	Limit      int32
	MaxID      int32
	MinID      int32
	Hash       int64
}

// Returns messages.DiscussionMessage: TL_messages_discussionMessage
type TL_messages_getDiscussionMessage struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_readDiscussion struct {
	Peer      TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID     int32
	ReadMaxID int32
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_messages_unpinAllMessages struct {
	Peer     TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID *int32 // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_deleteChat struct {
	ChatID int64
}

// Returns messages.AffectedFoundMessages: TL_messages_affectedFoundMessages
type TL_messages_deletePhoneCallHistory struct {
	Revoke bool
}

// Returns messages.HistoryImportParsed: TL_messages_historyImportParsed
type TL_messages_checkHistoryImport struct {
	ImportHead string
}

// Returns messages.HistoryImport: TL_messages_historyImport
type TL_messages_initHistoryImport struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	File       TL // InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	MediaCount int32
}

// Returns MessageMedia: TL_messageMediaEmpty | TL_messageMediaPhoto | TL_messageMediaGeo | TL_messageMediaContact | TL_messageMediaUnsupported | TL_messageMediaDocument | TL_messageMediaWebPage | TL_messageMediaVenue | TL_messageMediaGame | TL_messageMediaInvoice | TL_messageMediaGeoLive | TL_messageMediaPoll | TL_messageMediaDice | TL_messageMediaStory | TL_messageMediaGiveaway | TL_messageMediaGiveawayResults | TL_messageMediaPaidMedia
type TL_messages_uploadImportedMedia struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ImportID int64
	FileName string
	Media    TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_startHistoryImport struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ImportID int64
}

// Returns messages.ExportedChatInvites: TL_messages_exportedChatInvites
type TL_messages_getExportedChatInvites struct {
	Revoked    bool
	Peer       TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	AdminID    TL      // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	OffsetDate *int32  // (optional)
	OffsetLink *string // (optional)
	Limit      int32
}

// Returns messages.ExportedChatInvite: TL_messages_exportedChatInvite | TL_messages_exportedChatInviteReplaced
type TL_messages_getExportedChatInvite struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link string
}

// Returns messages.ExportedChatInvite: TL_messages_exportedChatInvite | TL_messages_exportedChatInviteReplaced
type TL_messages_editExportedChatInvite struct {
	Revoked       bool
	Peer          TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link          string
	ExpireDate    *int32  // (optional)
	UsageLimit    *int32  // (optional)
	RequestNeeded *bool   // (optional)
	Title         *string // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_deleteRevokedExportedChatInvites struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	AdminID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_deleteExportedChatInvite struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link string
}

// Returns messages.ChatAdminsWithInvites: TL_messages_chatAdminsWithInvites
type TL_messages_getAdminsWithInvites struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.ChatInviteImporters: TL_messages_chatInviteImporters
type TL_messages_getChatInviteImporters struct {
	Requested           bool
	SubscriptionExpired bool
	Peer                TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link                *string // (optional)
	Q                   *string // (optional)
	OffsetDate          int32
	OffsetUser          TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Limit               int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setHistoryTTL struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Period int32
}

// Returns messages.CheckedHistoryImportPeer: TL_messages_checkedHistoryImportPeer
type TL_messages_checkHistoryImportPeer struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setChatTheme struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Emoticon string
}

// Returns Vector<ReadParticipantDate>: TL_readParticipantDate
type TL_messages_getMessageReadParticipants struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns messages.SearchResultsCalendar: TL_messages_searchResultsCalendar
type TL_messages_getSearchResultsCalendar struct {
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	SavedPeerID TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Filter      TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterURL | TL_inputMessagesFilterGIF | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	OffsetID    int32
	OffsetDate  int32
}

// Returns messages.SearchResultsPositions: TL_messages_searchResultsPositions
type TL_messages_getSearchResultsPositions struct {
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	SavedPeerID TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Filter      TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterURL | TL_inputMessagesFilterGIF | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	OffsetID    int32
	Limit       int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_hideChatJoinRequest struct {
	Approved bool
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_hideAllChatJoinRequests struct {
	Approved bool
	Peer     TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Link     *string // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_toggleNoForwards struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Enabled bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_saveDefaultSendAs struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	SendAs TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendReaction struct {
	Big         bool
	AddToRecent bool
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID       int32
	Reaction    []TL // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_getMessagesReactions struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns messages.MessageReactionsList: TL_messages_messageReactionsList
type TL_messages_getMessageReactionsList struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID       int32
	Reaction TL      // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
	Offset   *string // (optional)
	Limit    int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setChatAvailableReactions struct {
	Peer               TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	AvailableReactions TL     // ChatReactions: TL_chatReactionsNone | TL_chatReactionsAll | TL_chatReactionsSome
	ReactionsLimit     *int32 // (optional)
	PaidEnabled        *bool  // (optional)
}

// Returns messages.AvailableReactions: TL_messages_availableReactionsNotModified | TL_messages_availableReactions
type TL_messages_getAvailableReactions struct {
	Hash int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setDefaultReaction struct {
	Reaction TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Returns messages.TranslatedText: TL_messages_translateResult
type TL_messages_translateText struct {
	Peer   TL                    // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID     []int32               // (optional)
	Text   []TL_textWithEntities // (optional)
	ToLang string
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getUnreadReactions struct {
	Peer      TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID  *int32 // (optional)
	OffsetID  int32
	AddOffset int32
	Limit     int32
	MaxID     int32
	MinID     int32
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_messages_readReactions struct {
	Peer     TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	TopMsgID *int32 // (optional)
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_searchSentMedia struct {
	Q      string
	Filter TL // MessagesFilter: TL_inputMessagesFilterEmpty | TL_inputMessagesFilterPhotos | TL_inputMessagesFilterVideo | TL_inputMessagesFilterPhotoVideo | TL_inputMessagesFilterDocument | TL_inputMessagesFilterURL | TL_inputMessagesFilterGIF | TL_inputMessagesFilterVoice | TL_inputMessagesFilterMusic | TL_inputMessagesFilterChatPhotos | TL_inputMessagesFilterPhoneCalls | TL_inputMessagesFilterRoundVoice | TL_inputMessagesFilterRoundVideo | TL_inputMessagesFilterMyMentions | TL_inputMessagesFilterGeo | TL_inputMessagesFilterContacts | TL_inputMessagesFilterPinned
	Limit  int32
}

// Returns AttachMenuBots: TL_attachMenuBotsNotModified | TL_attachMenuBots
type TL_messages_getAttachMenuBots struct {
	Hash int64
}

// Returns AttachMenuBotsBot: TL_attachMenuBotsBot
type TL_messages_getAttachMenuBot struct {
	Bot TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_toggleBotInAttachMenu struct {
	WriteAllowed bool
	Bot          TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Enabled      bool
}

// Returns WebViewResult: TL_webViewResultURL
type TL_messages_requestWebView struct {
	FromBotMenu bool
	Silent      bool
	Compact     bool
	Peer        TL           // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Bot         TL           // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	URL         *string      // (optional)
	StartParam  *string      // (optional)
	ThemeParams *TL_dataJSON // (optional)
	Platform    string
	ReplyTo     TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	SendAs      TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_prolongWebView struct {
	Silent  bool
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Bot     TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	QueryID int64
	ReplyTo TL // (optional) InputReplyTo: TL_inputReplyToMessage | TL_inputReplyToStory
	SendAs  TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns WebViewResult: TL_webViewResultURL
type TL_messages_requestSimpleWebView struct {
	FromSwitchWebview bool
	FromSideMenu      bool
	Compact           bool
	Bot               TL           // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	URL               *string      // (optional)
	StartParam        *string      // (optional)
	ThemeParams       *TL_dataJSON // (optional)
	Platform          string
}

// Returns WebViewMessageSent: TL_webViewMessageSent
type TL_messages_sendWebViewResultMessage struct {
	BotQueryID string
	Result     TL // InputBotInlineResult: TL_inputBotInlineResult | TL_inputBotInlineResultPhoto | TL_inputBotInlineResultDocument | TL_inputBotInlineResultGame
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendWebViewData struct {
	Bot        TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	RandomID   int64
	ButtonText string
	Data       string
}

// Returns messages.TranscribedAudio: TL_messages_transcribedAudio
type TL_messages_transcribeAudio struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_rateTranscribedAudio struct {
	Peer            TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID           int32
	TranscriptionID int64
	Good            bool
}

// Returns Vector<Document>: TL_documentEmpty | TL_document
type TL_messages_getCustomEmojiDocuments struct {
	DocumentID []int64
}

// Returns messages.AllStickers: TL_messages_allStickersNotModified | TL_messages_allStickers
type TL_messages_getEmojiStickers struct {
	Hash int64
}

// Returns messages.FeaturedStickers: TL_messages_featuredStickersNotModified | TL_messages_featuredStickers
type TL_messages_getFeaturedEmojiStickers struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reportReaction struct {
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID           int32
	ReactionPeer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.Reactions: TL_messages_reactionsNotModified | TL_messages_reactions
type TL_messages_getTopReactions struct {
	Limit int32
	Hash  int64
}

// Returns messages.Reactions: TL_messages_reactionsNotModified | TL_messages_reactions
type TL_messages_getRecentReactions struct {
	Limit int32
	Hash  int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_clearRecentReactions struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_getExtendedMedia struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_setDefaultHistoryTTL struct {
	Period int32
}

// Returns DefaultHistoryTTL: TL_defaultHistoryTTL
type TL_messages_getDefaultHistoryTTL struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendBotRequestedPeer struct {
	Peer           TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID          int32
	ButtonID       int32
	RequestedPeers []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.EmojiGroups: TL_messages_emojiGroupsNotModified | TL_messages_emojiGroups
type TL_messages_getEmojiGroups struct {
	Hash int32
}

// Returns messages.EmojiGroups: TL_messages_emojiGroupsNotModified | TL_messages_emojiGroups
type TL_messages_getEmojiStatusGroups struct {
	Hash int32
}

// Returns messages.EmojiGroups: TL_messages_emojiGroupsNotModified | TL_messages_emojiGroups
type TL_messages_getEmojiProfilePhotoGroups struct {
	Hash int32
}

// Returns EmojiList: TL_emojiListNotModified | TL_emojiList
type TL_messages_searchCustomEmoji struct {
	Emoticon string
	Hash     int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_togglePeerTranslations struct {
	Disabled bool
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.BotApp: TL_messages_botApp
type TL_messages_getBotApp struct {
	App  TL // InputBotApp: TL_inputBotAppID | TL_inputBotAppShortName
	Hash int64
}

// Returns WebViewResult: TL_webViewResultURL
type TL_messages_requestAppWebView struct {
	WriteAllowed bool
	Compact      bool
	Peer         TL           // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	App          TL           // InputBotApp: TL_inputBotAppID | TL_inputBotAppShortName
	StartParam   *string      // (optional)
	ThemeParams  *TL_dataJSON // (optional)
	Platform     string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_setChatWallPaper struct {
	ForBoth   bool
	Revert    bool
	Peer      TL                    // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Wallpaper TL                    // (optional) InputWallPaper: TL_inputWallPaper | TL_inputWallPaperSlug | TL_inputWallPaperNoFile
	Settings  *TL_wallPaperSettings // (optional)
	ID        *int32                // (optional)
}

// Returns messages.FoundStickerSets: TL_messages_foundStickerSetsNotModified | TL_messages_foundStickerSets
type TL_messages_searchEmojiStickerSets struct {
	ExcludeFeatured bool
	Q               string
	Hash            int64
}

// Returns messages.SavedDialogs: TL_messages_savedDialogs | TL_messages_savedDialogsSlice | TL_messages_savedDialogsNotModified
type TL_messages_getSavedDialogs struct {
	ExcludePinned bool
	OffsetDate    int32
	OffsetID      int32
	OffsetPeer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Limit         int32
	Hash          int64
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getSavedHistory struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID   int32
	OffsetDate int32
	AddOffset  int32
	Limit      int32
	MaxID      int32
	MinID      int32
	Hash       int64
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_messages_deleteSavedHistory struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MaxID   int32
	MinDate *int32 // (optional)
	MaxDate *int32 // (optional)
}

// Returns messages.SavedDialogs: TL_messages_savedDialogs | TL_messages_savedDialogsSlice | TL_messages_savedDialogsNotModified
type TL_messages_getPinnedSavedDialogs struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_toggleSavedDialogPIN struct {
	Pinned bool
	Peer   TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reorderPinnedSavedDialogs struct {
	Force bool
	Order []TL // InputDialogPeer: TL_inputDialogPeer | TL_inputDialogPeerFolder
}

// Returns messages.SavedReactionTags: TL_messages_savedReactionTagsNotModified | TL_messages_savedReactionTags
type TL_messages_getSavedReactionTags struct {
	Peer TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_updateSavedReactionTag struct {
	Reaction TL      // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
	Title    *string // (optional)
}

// Returns messages.Reactions: TL_messages_reactionsNotModified | TL_messages_reactions
type TL_messages_getDefaultTagReactions struct {
	Hash int64
}

// Returns OutboxReadDate: TL_outboxReadDate
type TL_messages_getOutboxReadDate struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns messages.QuickReplies: TL_messages_quickReplies | TL_messages_quickRepliesNotModified
type TL_messages_getQuickReplies struct {
	Hash int64
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_reorderQuickReplies struct {
	Order []int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_checkQuickReplyShortcut struct {
	Shortcut string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_editQuickReplyShortcut struct {
	ShortcutID int32
	Shortcut   string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_deleteQuickReplyShortcut struct {
	ShortcutID int32
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_messages_getQuickReplyMessages struct {
	ShortcutID int32
	ID         []int32 // (optional)
	Hash       int64
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendQuickReplyMessages struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ShortcutID int32
	ID         []int32
	RandomID   []int64
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_deleteQuickReplyMessages struct {
	ShortcutID int32
	ID         []int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_toggleDialogFilterTags struct {
	Enabled bool
}

// Returns messages.MyStickers: TL_messages_myStickers
type TL_messages_getMyStickers struct {
	OffsetID int64
	Limit    int32
}

// Returns messages.EmojiGroups: TL_messages_emojiGroupsNotModified | TL_messages_emojiGroups
type TL_messages_getEmojiStickerGroups struct {
	Hash int32
}

// Returns messages.AvailableEffects: TL_messages_availableEffectsNotModified | TL_messages_availableEffects
type TL_messages_getAvailableEffects struct {
	Hash int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_editFactCheck struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
	Text  TL_textWithEntities
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_deleteFactCheck struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns Vector<FactCheck>: TL_factCheck
type TL_messages_getFactCheck struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID []int32
}

// Returns WebViewResult: TL_webViewResultURL
type TL_messages_requestMainWebView struct {
	Compact     bool
	Peer        TL           // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Bot         TL           // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	StartParam  *string      // (optional)
	ThemeParams *TL_dataJSON // (optional)
	Platform    string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_sendPaidReaction struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID    int32
	Count    int32
	RandomID int64
	Private  *bool // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_messages_togglePaidReactionPrivacy struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID   int32
	Private bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_messages_getPaidReactionPrivacy struct {
}

// Returns updates.State: TL_updates_state
type TL_updates_getState struct {
}

// Returns updates.Difference: TL_updates_differenceEmpty | TL_updates_difference | TL_updates_differenceSlice | TL_updates_differenceTooLong
type TL_updates_getDifference struct {
	PTS           int32
	PTSLimit      *int32 // (optional)
	PTSTotalLimit *int32 // (optional)
	Date          int32
	QTS           int32
	QTSLimit      *int32 // (optional)
}

// Returns updates.ChannelDifference: TL_updates_channelDifferenceEmpty | TL_updates_channelDifferenceTooLong | TL_updates_channelDifference
type TL_updates_getChannelDifference struct {
	Force   bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Filter  TL // ChannelMessagesFilter: TL_channelMessagesFilterEmpty | TL_channelMessagesFilter
	PTS     int32
	Limit   int32
}

// Returns photos.Photo: TL_photos_photo
type TL_photos_updateProfilePhoto struct {
	Fallback bool
	Bot      TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	ID       TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
}

// Returns photos.Photo: TL_photos_photo
type TL_photos_uploadProfilePhoto struct {
	Fallback         bool
	Bot              TL       // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	File             TL       // (optional) InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	Video            TL       // (optional) InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	VideoStartTS     *float64 // (optional)
	VideoEmojiMarkup TL       // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
}

// Returns Vector<long>:
type TL_photos_deletePhotos struct {
	ID []TL // InputPhoto: TL_inputPhotoEmpty | TL_inputPhoto
}

// Returns photos.Photos: TL_photos_photos | TL_photos_photosSlice
type TL_photos_getUserPhotos struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Offset int32
	MaxID  int64
	Limit  int32
}

// Returns photos.Photo: TL_photos_photo
type TL_photos_uploadContactProfilePhoto struct {
	Suggest          bool
	Save             bool
	UserID           TL       // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	File             TL       // (optional) InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	Video            TL       // (optional) InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
	VideoStartTS     *float64 // (optional)
	VideoEmojiMarkup TL       // (optional) VideoSize: TL_videoSize | TL_videoSizeEmojiMarkup | TL_videoSizeStickerMarkup
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_upload_saveFilePart struct {
	FileID   int64
	FilePart int32
	Bytes    []byte
}

// Returns upload.File: TL_upload_file | TL_upload_fileCDNRedirect
type TL_upload_getFile struct {
	Precise      bool
	CDNSupported bool
	Location     TL // InputFileLocation: TL_inputFileLocation | TL_inputEncryptedFileLocation | TL_inputDocumentFileLocation | TL_inputSecureFileLocation | TL_inputTakeoutFileLocation | TL_inputPhotoFileLocation | TL_inputPhotoLegacyFileLocation | TL_inputPeerPhotoFileLocation | TL_inputStickerSetThumb | TL_inputGroupCallStream
	Offset       int64
	Limit        int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_upload_saveBigFilePart struct {
	FileID         int64
	FilePart       int32
	FileTotalParts int32
	Bytes          []byte
}

// Returns upload.WebFile: TL_upload_webFile
type TL_upload_getWebFile struct {
	Location TL // InputWebFileLocation: TL_inputWebFileLocation | TL_inputWebFileGeoPointLocation | TL_inputWebFileAudioAlbumThumbLocation
	Offset   int32
	Limit    int32
}

// Returns upload.CdnFile: TL_upload_cdnFileReuploadNeeded | TL_upload_cdnFile
type TL_upload_getCDNFile struct {
	FileToken []byte
	Offset    int64
	Limit     int32
}

// Returns Vector<FileHash>: TL_fileHash
type TL_upload_reuploadCDNFile struct {
	FileToken    []byte
	RequestToken []byte
}

// Returns Vector<FileHash>: TL_fileHash
type TL_upload_getCDNFileHashes struct {
	FileToken []byte
	Offset    int64
}

// Returns Vector<FileHash>: TL_fileHash
type TL_upload_getFileHashes struct {
	Location TL // InputFileLocation: TL_inputFileLocation | TL_inputEncryptedFileLocation | TL_inputDocumentFileLocation | TL_inputSecureFileLocation | TL_inputTakeoutFileLocation | TL_inputPhotoFileLocation | TL_inputPhotoLegacyFileLocation | TL_inputPeerPhotoFileLocation | TL_inputStickerSetThumb | TL_inputGroupCallStream
	Offset   int64
}

// Returns Config: TL_config
type TL_help_getConfig struct {
}

// Returns NearestDc: TL_nearestDC
type TL_help_getNearestDC struct {
}

// Returns help.AppUpdate: TL_help_appUpdate | TL_help_noAppUpdate
type TL_help_getAppUpdate struct {
	Source string
}

// Returns help.InviteText: TL_help_inviteText
type TL_help_getInviteText struct {
}

// Returns help.Support: TL_help_support
type TL_help_getSupport struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_setBotUpdatesStatus struct {
	PendingUpdatesCount int32
	Message             string
}

// Returns CdnConfig: TL_cdnConfig
type TL_help_getCDNConfig struct {
}

// Returns help.RecentMeUrls: TL_help_recentMeURLs
type TL_help_getRecentMeURLs struct {
	Referer string
}

// Returns help.TermsOfServiceUpdate: TL_help_termsOfServiceUpdateEmpty | TL_help_termsOfServiceUpdate
type TL_help_getTermsOfServiceUpdate struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_acceptTermsOfService struct {
	ID TL_dataJSON
}

// Returns help.DeepLinkInfo: TL_help_deepLinkInfoEmpty | TL_help_deepLinkInfo
type TL_help_getDeepLinkInfo struct {
	Path string
}

// Returns help.AppConfig: TL_help_appConfigNotModified | TL_help_appConfig
type TL_help_getAppConfig struct {
	Hash int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_saveAppLog struct {
	Events []TL_inputAppEvent
}

// Returns help.PassportConfig: TL_help_passportConfigNotModified | TL_help_passportConfig
type TL_help_getPassportConfig struct {
	Hash int32
}

// Returns help.SupportName: TL_help_supportName
type TL_help_getSupportName struct {
}

// Returns help.UserInfo: TL_help_userInfoEmpty | TL_help_userInfo
type TL_help_getUserInfo struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns help.UserInfo: TL_help_userInfoEmpty | TL_help_userInfo
type TL_help_editUserInfo struct {
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Message  string
	Entities []TL // MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
}

// Returns help.PromoData: TL_help_promoDataEmpty | TL_help_promoData
type TL_help_getPromoData struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_hidePromoData struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_help_dismissSuggestion struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Suggestion string
}

// Returns help.CountriesList: TL_help_countriesListNotModified | TL_help_countriesList
type TL_help_getCountriesList struct {
	LangCode string
	Hash     int32
}

// Returns help.PremiumPromo: TL_help_premiumPromo
type TL_help_getPremiumPromo struct {
}

// Returns help.PeerColors: TL_help_peerColorsNotModified | TL_help_peerColors
type TL_help_getPeerColors struct {
	Hash int32
}

// Returns help.PeerColors: TL_help_peerColorsNotModified | TL_help_peerColors
type TL_help_getPeerProfileColors struct {
	Hash int32
}

// Returns help.TimezonesList: TL_help_timezonesListNotModified | TL_help_timezonesList
type TL_help_getTimezonesList struct {
	Hash int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_readHistory struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MaxID   int32
}

// Returns messages.AffectedMessages: TL_messages_affectedMessages
type TL_channels_deleteMessages struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	ID      []int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_reportSpam struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Participant TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID          []int32
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_channels_getMessages struct {
	Channel TL   // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	ID      []TL // InputMessage: TL_inputMessageID | TL_inputMessageReplyTo | TL_inputMessagePinned | TL_inputMessageCallbackQuery
}

// Returns channels.ChannelParticipants: TL_channels_channelParticipants | TL_channels_channelParticipantsNotModified
type TL_channels_getParticipants struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Filter  TL // ChannelParticipantsFilter: TL_channelParticipantsRecent | TL_channelParticipantsAdmins | TL_channelParticipantsKicked | TL_channelParticipantsBots | TL_channelParticipantsBanned | TL_channelParticipantsSearch | TL_channelParticipantsContacts | TL_channelParticipantsMentions
	Offset  int32
	Limit   int32
	Hash    int64
}

// Returns channels.ChannelParticipant: TL_channels_channelParticipant
type TL_channels_getParticipant struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Participant TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_channels_getChannels struct {
	ID []TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns messages.ChatFull: TL_messages_chatFull
type TL_channels_getFullChannel struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_createChannel struct {
	Broadcast bool
	Megagroup bool
	ForImport bool
	Forum     bool
	Title     string
	About     string
	GeoPoint  TL      // (optional) InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Address   *string // (optional)
	TTLPeriod *int32  // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editAdmin struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	UserID      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	AdminRights TL_chatAdminRights
	Rank        string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editTitle struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Title   string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editPhoto struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Photo   TL // InputChatPhoto: TL_inputChatPhotoEmpty | TL_inputChatUploadedPhoto | TL_inputChatPhoto
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_checkUsername struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Username string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_updateUsername struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Username string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_joinChannel struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_leaveChannel struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns messages.InvitedUsers: TL_messages_invitedUsers
type TL_channels_inviteToChannel struct {
	Channel TL   // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Users   []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_deleteChannel struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns ExportedMessageLink: TL_exportedMessageLink
type TL_channels_exportMessageLink struct {
	Grouped bool
	Thread  bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	ID      int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleSignatures struct {
	SignaturesEnabled bool
	ProfilesEnabled   bool
	Channel           TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_channels_getAdminedPublicChannels struct {
	ByLocation  bool
	CheckLimit  bool
	ForPersonal bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editBanned struct {
	Channel      TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Participant  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	BannedRights TL_chatBannedRights
}

// Returns channels.AdminLogResults: TL_channels_adminLogResults
type TL_channels_getAdminLog struct {
	Channel      TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Q            string
	EventsFilter *TL_channelAdminLogEventsFilter // (optional)
	Admins       []TL                            // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	MaxID        int64
	MinID        int64
	Limit        int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_setStickers struct {
	Channel    TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_readMessageContents struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	ID      []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_deleteHistory struct {
	ForEveryone bool
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MaxID       int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_togglePreHistoryHidden struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_channels_getLeftChannels struct {
	Offset int32
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_channels_getGroupsForDiscussion struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_setDiscussionGroup struct {
	Broadcast TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Group     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editCreator struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_editLocation struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	GeoPoint TL // InputGeoPoint: TL_inputGeoPointEmpty | TL_inputGeoPoint
	Address  string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleSlowMode struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Seconds int32
}

// Returns messages.InactiveChats: TL_messages_inactiveChats
type TL_channels_getInactiveChannels struct {
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_convertToGigagroup struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_viewSponsoredMessage struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	RandomID []byte
}

// Returns messages.SponsoredMessages: TL_messages_sponsoredMessages | TL_messages_sponsoredMessagesEmpty
type TL_channels_getSponsoredMessages struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns channels.SendAsPeers: TL_channels_sendAsPeers
type TL_channels_getSendAs struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_channels_deleteParticipantHistory struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Participant TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleJoinToSend struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleJoinRequest struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_reorderUsernames struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Order   []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_toggleUsername struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Username string
	Active   bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_deactivateAllUsernames struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleForum struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_createForumTopic struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Title       string
	IconColor   *int32 // (optional)
	IconEmojiID *int64 // (optional)
	RandomID    int64
	SendAs      TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.ForumTopics: TL_messages_forumTopics
type TL_channels_getForumTopics struct {
	Channel     TL      // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Q           *string // (optional)
	OffsetDate  int32
	OffsetID    int32
	OffsetTopic int32
	Limit       int32
}

// Returns messages.ForumTopics: TL_messages_forumTopics
type TL_channels_getForumTopicsByID struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Topics  []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_editForumTopic struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	TopicID     int32
	Title       *string // (optional)
	IconEmojiID *int64  // (optional)
	Closed      *bool   // (optional)
	Hidden      *bool   // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_updatePinnedForumTopic struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	TopicID int32
	Pinned  bool
}

// Returns messages.AffectedHistory: TL_messages_affectedHistory
type TL_channels_deleteTopicHistory struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	TopMsgID int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_reorderPinnedForumTopics struct {
	Force   bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Order   []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleAntiSpam struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_reportAntiSpamFalsePositive struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MsgID   int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleParticipantsHidden struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_clickSponsoredMessage struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	RandomID []byte
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_updateColor struct {
	ForProfile        bool
	Channel           TL     // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Color             *int32 // (optional)
	BackgroundEmojiID *int64 // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_toggleViewForumAsMessages struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Enabled bool
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_channels_getChannelRecommendations struct {
	Channel TL // (optional) InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_updateEmojiStatus struct {
	Channel     TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	EmojiStatus TL // EmojiStatus: TL_emojiStatusEmpty | TL_emojiStatus | TL_emojiStatusUntil
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_setBoostsToUnblockRestrictions struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Boosts  int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_channels_setEmojiStickers struct {
	Channel    TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
}

// Returns channels.SponsoredMessageReportResult: TL_channels_sponsoredMessageReportResultChooseOption | TL_channels_sponsoredMessageReportResultAdsHidden | TL_channels_sponsoredMessageReportResultReported
type TL_channels_reportSponsoredMessage struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	RandomID []byte
	Option   []byte
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_channels_restrictSponsoredMessages struct {
	Channel    TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Restricted bool
}

// Returns messages.Messages: TL_messages_messages | TL_messages_messagesSlice | TL_messages_channelMessages | TL_messages_messagesNotModified
type TL_channels_searchPosts struct {
	Hashtag    string
	OffsetRate int32
	OffsetPeer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID   int32
	Limit      int32
}

// Returns DataJSON: TL_dataJSON
type TL_bots_sendCustomRequest struct {
	CustomMethod string
	Params       TL_dataJSON
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_answerWebhookJSONQuery struct {
	QueryID int64
	Data    TL_dataJSON
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotCommands struct {
	Scope    TL // BotCommandScope: TL_botCommandScopeDefault | TL_botCommandScopeUsers | TL_botCommandScopeChats | TL_botCommandScopeChatAdmins | TL_botCommandScopePeer | TL_botCommandScopePeerAdmins | TL_botCommandScopePeerUser
	LangCode string
	Commands []TL_botCommand
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_resetBotCommands struct {
	Scope    TL // BotCommandScope: TL_botCommandScopeDefault | TL_botCommandScopeUsers | TL_botCommandScopeChats | TL_botCommandScopeChatAdmins | TL_botCommandScopePeer | TL_botCommandScopePeerAdmins | TL_botCommandScopePeerUser
	LangCode string
}

// Returns Vector<BotCommand>: TL_botCommand
type TL_bots_getBotCommands struct {
	Scope    TL // BotCommandScope: TL_botCommandScopeDefault | TL_botCommandScopeUsers | TL_botCommandScopeChats | TL_botCommandScopeChatAdmins | TL_botCommandScopePeer | TL_botCommandScopePeerAdmins | TL_botCommandScopePeerUser
	LangCode string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotMenuButton struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Button TL // BotMenuButton: TL_botMenuButtonDefault | TL_botMenuButtonCommands | TL_botMenuButton
}

// Returns BotMenuButton: TL_botMenuButtonDefault | TL_botMenuButtonCommands | TL_botMenuButton
type TL_bots_getBotMenuButton struct {
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotBroadcastDefaultAdminRights struct {
	AdminRights TL_chatAdminRights
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotGroupDefaultAdminRights struct {
	AdminRights TL_chatAdminRights
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_setBotInfo struct {
	Bot         TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	LangCode    string
	Name        *string // (optional)
	About       *string // (optional)
	Description *string // (optional)
}

// Returns bots.BotInfo: TL_bots_botInfo
type TL_bots_getBotInfo struct {
	Bot      TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	LangCode string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_reorderUsernames struct {
	Bot   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Order []string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_toggleUsername struct {
	Bot      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Username string
	Active   bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_canSendMessage struct {
	Bot TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_bots_allowSendMessage struct {
	Bot TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns DataJSON: TL_dataJSON
type TL_bots_invokeWebViewCustomMethod struct {
	Bot          TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	CustomMethod string
	Params       TL_dataJSON
}

// Returns bots.PopularAppBots: TL_bots_popularAppBots
type TL_bots_getPopularAppBots struct {
	Offset string
	Limit  int32
}

// Returns BotPreviewMedia: TL_botPreviewMedia
type TL_bots_addPreviewMedia struct {
	Bot      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	LangCode string
	Media    TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
}

// Returns BotPreviewMedia: TL_botPreviewMedia
type TL_bots_editPreviewMedia struct {
	Bot      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	LangCode string
	Media    TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	NewMedia TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_deletePreviewMedia struct {
	Bot      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	LangCode string
	Media    []TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_bots_reorderPreviewMedias struct {
	Bot      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	LangCode string
	Order    []TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
}

// Returns bots.PreviewInfo: TL_bots_previewInfo
type TL_bots_getPreviewInfo struct {
	Bot      TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	LangCode string
}

// Returns Vector<BotPreviewMedia>: TL_botPreviewMedia
type TL_bots_getPreviewMedias struct {
	Bot TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns payments.PaymentForm: TL_payments_paymentForm | TL_payments_paymentFormStars
type TL_payments_getPaymentForm struct {
	Invoice     TL           // InputInvoice: TL_inputInvoiceMessage | TL_inputInvoiceSlug | TL_inputInvoicePremiumGiftCode | TL_inputInvoiceStars | TL_inputInvoiceChatInviteSubscription
	ThemeParams *TL_dataJSON // (optional)
}

// Returns payments.PaymentReceipt: TL_payments_paymentReceipt | TL_payments_paymentReceiptStars
type TL_payments_getPaymentReceipt struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns payments.ValidatedRequestedInfo: TL_payments_validatedRequestedInfo
type TL_payments_validateRequestedInfo struct {
	Save    bool
	Invoice TL // InputInvoice: TL_inputInvoiceMessage | TL_inputInvoiceSlug | TL_inputInvoicePremiumGiftCode | TL_inputInvoiceStars | TL_inputInvoiceChatInviteSubscription
	Info    TL_paymentRequestedInfo
}

// Returns payments.PaymentResult: TL_payments_paymentResult | TL_payments_paymentVerificationNeeded
type TL_payments_sendPaymentForm struct {
	FormID           int64
	Invoice          TL      // InputInvoice: TL_inputInvoiceMessage | TL_inputInvoiceSlug | TL_inputInvoicePremiumGiftCode | TL_inputInvoiceStars | TL_inputInvoiceChatInviteSubscription
	RequestedInfoID  *string // (optional)
	ShippingOptionID *string // (optional)
	Credentials      TL      // InputPaymentCredentials: TL_inputPaymentCredentialsSaved | TL_inputPaymentCredentials | TL_inputPaymentCredentialsApplePay | TL_inputPaymentCredentialsGooglePay
	TipAmount        *int64  // (optional)
}

// Returns payments.SavedInfo: TL_payments_savedInfo
type TL_payments_getSavedInfo struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_payments_clearSavedInfo struct {
	Credentials bool
	Info        bool
}

// Returns payments.BankCardData: TL_payments_bankCardData
type TL_payments_getBankCardData struct {
	Number string
}

// Returns payments.ExportedInvoice: TL_payments_exportedInvoice
type TL_payments_exportInvoice struct {
	InvoiceMedia TL // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_payments_assignAppStoreTransaction struct {
	Receipt []byte
	Purpose TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway | TL_inputStorePaymentStarsTopup | TL_inputStorePaymentStarsGift | TL_inputStorePaymentStarsGiveaway
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_payments_assignPlayMarketTransaction struct {
	Receipt TL_dataJSON
	Purpose TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway | TL_inputStorePaymentStarsTopup | TL_inputStorePaymentStarsGift | TL_inputStorePaymentStarsGiveaway
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_payments_canPurchasePremium struct {
	Purpose TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway | TL_inputStorePaymentStarsTopup | TL_inputStorePaymentStarsGift | TL_inputStorePaymentStarsGiveaway
}

// Returns Vector<PremiumGiftCodeOption>: TL_premiumGiftCodeOption
type TL_payments_getPremiumGiftCodeOptions struct {
	BoostPeer TL // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns payments.CheckedGiftCode: TL_payments_checkedGiftCode
type TL_payments_checkGiftCode struct {
	Slug string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_payments_applyGiftCode struct {
	Slug string
}

// Returns payments.GiveawayInfo: TL_payments_giveawayInfo | TL_payments_giveawayInfoResults
type TL_payments_getGiveawayInfo struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MsgID int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_payments_launchPrepaidGiveaway struct {
	Peer       TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	GiveawayID int64
	Purpose    TL // InputStorePaymentPurpose: TL_inputStorePaymentPremiumSubscription | TL_inputStorePaymentGiftPremium | TL_inputStorePaymentPremiumGiftCode | TL_inputStorePaymentPremiumGiveaway | TL_inputStorePaymentStarsTopup | TL_inputStorePaymentStarsGift | TL_inputStorePaymentStarsGiveaway
}

// Returns Vector<StarsTopupOption>: TL_starsTopupOption
type TL_payments_getStarsTopupOptions struct {
}

// Returns payments.StarsStatus: TL_payments_starsStatus
type TL_payments_getStarsStatus struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns payments.StarsStatus: TL_payments_starsStatus
type TL_payments_getStarsTransactions struct {
	Inbound        bool
	Outbound       bool
	Ascending      bool
	SubscriptionID *string // (optional)
	Peer           TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Offset         string
	Limit          int32
}

// Returns payments.PaymentResult: TL_payments_paymentResult | TL_payments_paymentVerificationNeeded
type TL_payments_sendStarsForm struct {
	FormID  int64
	Invoice TL // InputInvoice: TL_inputInvoiceMessage | TL_inputInvoiceSlug | TL_inputInvoicePremiumGiftCode | TL_inputInvoiceStars | TL_inputInvoiceChatInviteSubscription
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_payments_refundStarsCharge struct {
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	ChargeID string
}

// Returns payments.StarsRevenueStats: TL_payments_starsRevenueStats
type TL_payments_getStarsRevenueStats struct {
	Dark bool
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns payments.StarsRevenueWithdrawalUrl: TL_payments_starsRevenueWithdrawalURL
type TL_payments_getStarsRevenueWithdrawalURL struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Stars    int64
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns payments.StarsRevenueAdsAccountUrl: TL_payments_starsRevenueAdsAccountURL
type TL_payments_getStarsRevenueAdsAccountURL struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns payments.StarsStatus: TL_payments_starsStatus
type TL_payments_getStarsTransactionsByID struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []TL_inputStarsTransaction
}

// Returns Vector<StarsGiftOption>: TL_starsGiftOption
type TL_payments_getStarsGiftOptions struct {
	UserID TL // (optional) InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns payments.StarsStatus: TL_payments_starsStatus
type TL_payments_getStarsSubscriptions struct {
	MissingBalance bool
	Peer           TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Offset         string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_payments_changeStarsSubscription struct {
	Peer           TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	SubscriptionID string
	Canceled       *bool // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_payments_fulfillStarsSubscription struct {
	Peer           TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	SubscriptionID string
}

// Returns Vector<StarsGiveawayOption>: TL_starsGiveawayOption
type TL_payments_getStarsGiveawayOptions struct {
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_createStickerSet struct {
	Masks     bool
	Emojis    bool
	TextColor bool
	UserID    TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	Title     string
	ShortName string
	Thumb     TL // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Stickers  []TL_inputStickerSetItem
	Software  *string // (optional)
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_removeStickerFromSet struct {
	Sticker TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_changeStickerPosition struct {
	Sticker  TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Position int32
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_addStickerToSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	Sticker    TL_inputStickerSetItem
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_setStickerSetThumb struct {
	Stickerset      TL     // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	Thumb           TL     // (optional) InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	ThumbDocumentID *int64 // (optional)
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stickers_checkShortName struct {
	ShortName string
}

// Returns stickers.SuggestedShortName: TL_stickers_suggestedShortName
type TL_stickers_suggestShortName struct {
	Title string
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_changeSticker struct {
	Sticker    TL             // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	Emoji      *string        // (optional)
	MaskCoords *TL_maskCoords // (optional)
	Keywords   *string        // (optional)
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_renameStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
	Title      string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stickers_deleteStickerSet struct {
	Stickerset TL // InputStickerSet: TL_inputStickerSetEmpty | TL_inputStickerSetID | TL_inputStickerSetShortName | TL_inputStickerSetAnimatedEmoji | TL_inputStickerSetDice | TL_inputStickerSetAnimatedEmojiAnimations | TL_inputStickerSetPremiumGifts | TL_inputStickerSetEmojiGenericAnimations | TL_inputStickerSetEmojiDefaultStatuses | TL_inputStickerSetEmojiDefaultTopicIcons | TL_inputStickerSetEmojiChannelDefaultStatuses
}

// Returns messages.StickerSet: TL_messages_stickerSet | TL_messages_stickerSetNotModified
type TL_stickers_replaceSticker struct {
	Sticker    TL // InputDocument: TL_inputDocumentEmpty | TL_inputDocument
	NewSticker TL_inputStickerSetItem
}

// Returns DataJSON: TL_dataJSON
type TL_phone_getCallConfig struct {
}

// Returns phone.PhoneCall: TL_phone_phoneCall
type TL_phone_requestCall struct {
	Video    bool
	UserID   TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
	RandomID int32
	GAHash   []byte
	Protocol TL_phoneCallProtocol
}

// Returns phone.PhoneCall: TL_phone_phoneCall
type TL_phone_acceptCall struct {
	Peer     TL_inputPhoneCall
	GB       []byte
	Protocol TL_phoneCallProtocol
}

// Returns phone.PhoneCall: TL_phone_phoneCall
type TL_phone_confirmCall struct {
	Peer           TL_inputPhoneCall
	GA             []byte
	KeyFingerprint int64
	Protocol       TL_phoneCallProtocol
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_receivedCall struct {
	Peer TL_inputPhoneCall
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_discardCall struct {
	Video        bool
	Peer         TL_inputPhoneCall
	Duration     int32
	Reason       TL // PhoneCallDiscardReason: TL_phoneCallDiscardReasonMissed | TL_phoneCallDiscardReasonDisconnect | TL_phoneCallDiscardReasonHangup | TL_phoneCallDiscardReasonBusy
	ConnectionID int64
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_setCallRating struct {
	UserInitiative bool
	Peer           TL_inputPhoneCall
	Rating         int32
	Comment        string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_saveCallDebug struct {
	Peer  TL_inputPhoneCall
	Debug TL_dataJSON
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_sendSignalingData struct {
	Peer TL_inputPhoneCall
	Data []byte
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_createGroupCall struct {
	RTMPStream   bool
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	RandomID     int32
	Title        *string // (optional)
	ScheduleDate *int32  // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_joinGroupCall struct {
	Muted        bool
	VideoStopped bool
	Call         TL_inputGroupCall
	JoinAs       TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	InviteHash   *string // (optional)
	Params       TL_dataJSON
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_leaveGroupCall struct {
	Call   TL_inputGroupCall
	Source int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_inviteToGroupCall struct {
	Call  TL_inputGroupCall
	Users []TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_discardGroupCall struct {
	Call TL_inputGroupCall
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_toggleGroupCallSettings struct {
	ResetInviteHash bool
	Call            TL_inputGroupCall
	JoinMuted       *bool // (optional)
}

// Returns phone.GroupCall: TL_phone_groupCall
type TL_phone_getGroupCall struct {
	Call  TL_inputGroupCall
	Limit int32
}

// Returns phone.GroupParticipants: TL_phone_groupParticipants
type TL_phone_getGroupParticipants struct {
	Call    TL_inputGroupCall
	IDs     []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Sources []int32
	Offset  string
	Limit   int32
}

// Returns Vector<int>:
type TL_phone_checkGroupCall struct {
	Call    TL_inputGroupCall
	Sources []int32
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_toggleGroupCallRecord struct {
	Start         bool
	Video         bool
	Call          TL_inputGroupCall
	Title         *string // (optional)
	VideoPortrait *bool   // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_editGroupCallParticipant struct {
	Call               TL_inputGroupCall
	Participant        TL     // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Muted              *bool  // (optional)
	Volume             *int32 // (optional)
	RaiseHand          *bool  // (optional)
	VideoStopped       *bool  // (optional)
	VideoPaused        *bool  // (optional)
	PresentationPaused *bool  // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_editGroupCallTitle struct {
	Call  TL_inputGroupCall
	Title string
}

// Returns phone.JoinAsPeers: TL_phone_joinAsPeers
type TL_phone_getGroupCallJoinAs struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns phone.ExportedGroupCallInvite: TL_phone_exportedGroupCallInvite
type TL_phone_exportGroupCallInvite struct {
	CanSelfUnmute bool
	Call          TL_inputGroupCall
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_toggleGroupCallStartSubscription struct {
	Call       TL_inputGroupCall
	Subscribed bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_startScheduledGroupCall struct {
	Call TL_inputGroupCall
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_saveDefaultGroupCallJoinAs struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	JoinAs TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_joinGroupCallPresentation struct {
	Call   TL_inputGroupCall
	Params TL_dataJSON
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_phone_leaveGroupCallPresentation struct {
	Call TL_inputGroupCall
}

// Returns phone.GroupCallStreamChannels: TL_phone_groupCallStreamChannels
type TL_phone_getGroupCallStreamChannels struct {
	Call TL_inputGroupCall
}

// Returns phone.GroupCallStreamRtmpUrl: TL_phone_groupCallStreamRTMPURL
type TL_phone_getGroupCallStreamRTMPURL struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Revoke bool
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_phone_saveCallLog struct {
	Peer TL_inputPhoneCall
	File TL // InputFile: TL_inputFile | TL_inputFileBig | TL_inputFileStoryDocument
}

// Returns LangPackDifference: TL_langPackDifference
type TL_langpack_getLangPack struct {
	LangPack string
	LangCode string
}

// Returns Vector<LangPackString>: TL_langPackString | TL_langPackStringPluralized | TL_langPackStringDeleted
type TL_langpack_getStrings struct {
	LangPack string
	LangCode string
	Keys     []string
}

// Returns LangPackDifference: TL_langPackDifference
type TL_langpack_getDifference struct {
	LangPack    string
	LangCode    string
	FromVersion int32
}

// Returns Vector<LangPackLanguage>: TL_langPackLanguage
type TL_langpack_getLanguages struct {
	LangPack string
}

// Returns LangPackLanguage: TL_langPackLanguage
type TL_langpack_getLanguage struct {
	LangPack string
	LangCode string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_folders_editPeerFolders struct {
	FolderPeers []TL_inputFolderPeer
}

// Returns stats.BroadcastStats: TL_stats_broadcastStats
type TL_stats_getBroadcastStats struct {
	Dark    bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns StatsGraph: TL_statsGraphAsync | TL_statsGraphError | TL_statsGraph
type TL_stats_loadAsyncGraph struct {
	Token string
	X     *int64 // (optional)
}

// Returns stats.MegagroupStats: TL_stats_megagroupStats
type TL_stats_getMegagroupStats struct {
	Dark    bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns stats.PublicForwards: TL_stats_publicForwards
type TL_stats_getMessagePublicForwards struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MsgID   int32
	Offset  string
	Limit   int32
}

// Returns stats.MessageStats: TL_stats_messageStats
type TL_stats_getMessageStats struct {
	Dark    bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	MsgID   int32
}

// Returns stats.StoryStats: TL_stats_storyStats
type TL_stats_getStoryStats struct {
	Dark bool
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   int32
}

// Returns stats.PublicForwards: TL_stats_publicForwards
type TL_stats_getStoryPublicForwards struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID     int32
	Offset string
	Limit  int32
}

// Returns stats.BroadcastRevenueStats: TL_stats_broadcastRevenueStats
type TL_stats_getBroadcastRevenueStats struct {
	Dark    bool
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
}

// Returns stats.BroadcastRevenueWithdrawalUrl: TL_stats_broadcastRevenueWithdrawalURL
type TL_stats_getBroadcastRevenueWithdrawalURL struct {
	Channel  TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Password TL // InputCheckPasswordSRP: TL_inputCheckPasswordEmpty | TL_inputCheckPasswordSRP
}

// Returns stats.BroadcastRevenueTransactions: TL_stats_broadcastRevenueTransactions
type TL_stats_getBroadcastRevenueTransactions struct {
	Channel TL // InputChannel: TL_inputChannelEmpty | TL_inputChannel | TL_inputChannelFromMessage
	Offset  int32
	Limit   int32
}

// Returns chatlists.ExportedChatlistInvite: TL_chatlists_exportedChatlistInvite
type TL_chatlists_exportChatlistInvite struct {
	Chatlist TL_inputChatlistDialogFilter
	Title    string
	Peers    []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_chatlists_deleteExportedInvite struct {
	Chatlist TL_inputChatlistDialogFilter
	Slug     string
}

// Returns ExportedChatlistInvite: TL_exportedChatlistInvite
type TL_chatlists_editExportedInvite struct {
	Chatlist TL_inputChatlistDialogFilter
	Slug     string
	Title    *string // (optional)
	Peers    []TL    // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns chatlists.ExportedInvites: TL_chatlists_exportedInvites
type TL_chatlists_getExportedInvites struct {
	Chatlist TL_inputChatlistDialogFilter
}

// Returns chatlists.ChatlistInvite: TL_chatlists_chatlistInviteAlready | TL_chatlists_chatlistInvite
type TL_chatlists_checkChatlistInvite struct {
	Slug string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_chatlists_joinChatlistInvite struct {
	Slug  string
	Peers []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns chatlists.ChatlistUpdates: TL_chatlists_chatlistUpdates
type TL_chatlists_getChatlistUpdates struct {
	Chatlist TL_inputChatlistDialogFilter
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_chatlists_joinChatlistUpdates struct {
	Chatlist TL_inputChatlistDialogFilter
	Peers    []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_chatlists_hideChatlistUpdates struct {
	Chatlist TL_inputChatlistDialogFilter
}

// Returns Vector<Peer>: TL_peerUser | TL_peerChat | TL_peerChannel
type TL_chatlists_getLeaveChatlistSuggestions struct {
	Chatlist TL_inputChatlistDialogFilter
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_chatlists_leaveChatlist struct {
	Chatlist TL_inputChatlistDialogFilter
	Peers    []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_canSendStory struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_sendStory struct {
	Pinned       bool
	Noforwards   bool
	FwdModified  bool
	Peer         TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Media        TL      // InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	MediaAreas   []TL    // (optional) MediaArea: TL_mediaAreaVenue | TL_inputMediaAreaVenue | TL_mediaAreaGeoPoint | TL_mediaAreaSuggestedReaction | TL_mediaAreaChannelPost | TL_inputMediaAreaChannelPost | TL_mediaAreaURL | TL_mediaAreaWeather
	Caption      *string // (optional)
	Entities     []TL    // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	PrivacyRules []TL    // InputPrivacyRule: TL_inputPrivacyValueAllowContacts | TL_inputPrivacyValueAllowAll | TL_inputPrivacyValueAllowUsers | TL_inputPrivacyValueDisallowContacts | TL_inputPrivacyValueDisallowAll | TL_inputPrivacyValueDisallowUsers | TL_inputPrivacyValueAllowChatParticipants | TL_inputPrivacyValueDisallowChatParticipants | TL_inputPrivacyValueAllowCloseFriends | TL_inputPrivacyValueAllowPremium
	RandomID     int64
	Period       *int32 // (optional)
	FwdFromID    TL     // (optional) InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	FwdFromStory *int32 // (optional)
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_editStory struct {
	Peer         TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID           int32
	Media        TL      // (optional) InputMedia: TL_inputMediaEmpty | TL_inputMediaUploadedPhoto | TL_inputMediaPhoto | TL_inputMediaGeoPoint | TL_inputMediaContact | TL_inputMediaUploadedDocument | TL_inputMediaDocument | TL_inputMediaVenue | TL_inputMediaPhotoExternal | TL_inputMediaDocumentExternal | TL_inputMediaGame | TL_inputMediaInvoice | TL_inputMediaGeoLive | TL_inputMediaPoll | TL_inputMediaDice | TL_inputMediaStory | TL_inputMediaWebPage | TL_inputMediaPaidMedia
	MediaAreas   []TL    // (optional) MediaArea: TL_mediaAreaVenue | TL_inputMediaAreaVenue | TL_mediaAreaGeoPoint | TL_mediaAreaSuggestedReaction | TL_mediaAreaChannelPost | TL_inputMediaAreaChannelPost | TL_mediaAreaURL | TL_mediaAreaWeather
	Caption      *string // (optional)
	Entities     []TL    // (optional) MessageEntity: TL_messageEntityUnknown | TL_messageEntityMention | TL_messageEntityHashtag | TL_messageEntityBotCommand | TL_messageEntityURL | TL_messageEntityEmail | TL_messageEntityBold | TL_messageEntityItalic | TL_messageEntityCode | TL_messageEntityPre | TL_messageEntityTextURL | TL_messageEntityMentionName | TL_inputMessageEntityMentionName | TL_messageEntityPhone | TL_messageEntityCashtag | TL_messageEntityUnderline | TL_messageEntityStrike | TL_messageEntityBankCard | TL_messageEntitySpoiler | TL_messageEntityCustomEmoji | TL_messageEntityBlockquote
	PrivacyRules []TL    // (optional) InputPrivacyRule: TL_inputPrivacyValueAllowContacts | TL_inputPrivacyValueAllowAll | TL_inputPrivacyValueAllowUsers | TL_inputPrivacyValueDisallowContacts | TL_inputPrivacyValueDisallowAll | TL_inputPrivacyValueDisallowUsers | TL_inputPrivacyValueAllowChatParticipants | TL_inputPrivacyValueDisallowChatParticipants | TL_inputPrivacyValueAllowCloseFriends | TL_inputPrivacyValueAllowPremium
}

// Returns Vector<int>:
type TL_stories_deleteStories struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Vector<int>:
type TL_stories_togglePinned struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID     []int32
	Pinned bool
}

// Returns stories.AllStories: TL_stories_allStoriesNotModified | TL_stories_allStories
type TL_stories_getAllStories struct {
	Next   bool
	Hidden bool
	State  *string // (optional)
}

// Returns stories.Stories: TL_stories_stories
type TL_stories_getPinnedStories struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID int32
	Limit    int32
}

// Returns stories.Stories: TL_stories_stories
type TL_stories_getStoriesArchive struct {
	Peer     TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	OffsetID int32
	Limit    int32
}

// Returns stories.Stories: TL_stories_stories
type TL_stories_getStoriesByID struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_toggleAllStoriesHidden struct {
	Hidden bool
}

// Returns Vector<int>:
type TL_stories_readStories struct {
	Peer  TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	MaxID int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_incrementStoryViews struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns stories.StoryViewsList: TL_stories_storyViewsList
type TL_stories_getStoryViewsList struct {
	JustContacts   bool
	ReactionsFirst bool
	ForwardsFirst  bool
	Peer           TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Q              *string // (optional)
	ID             int32
	Offset         string
	Limit          int32
}

// Returns stories.StoryViews: TL_stories_storyViews
type TL_stories_getStoriesViews struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns ExportedStoryLink: TL_exportedStoryLink
type TL_stories_exportStoryLink struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_report struct {
	Peer    TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID      []int32
	Reason  TL // ReportReason: TL_inputReportReasonSpam | TL_inputReportReasonViolence | TL_inputReportReasonPornography | TL_inputReportReasonChildAbuse | TL_inputReportReasonOther | TL_inputReportReasonCopyright | TL_inputReportReasonGeoIrrelevant | TL_inputReportReasonFake | TL_inputReportReasonIllegalDrugs | TL_inputReportReasonPersonalDetails
	Message string
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_activateStealthMode struct {
	Past   bool
	Future bool
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_sendReaction struct {
	AddToRecent bool
	Peer        TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	StoryID     int32
	Reaction    TL // Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
}

// Returns stories.PeerStories: TL_stories_peerStories
type TL_stories_getPeerStories struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns Updates: TL_updatesTooLong | TL_updateShortMessage | TL_updateShortChatMessage | TL_updateShort | TL_updatesCombined | TL_updates | TL_updateShortSentMessage
type TL_stories_getAllReadPeerStories struct {
}

// Returns Vector<int>:
type TL_stories_getPeerMaxIDs struct {
	ID []TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns messages.Chats: TL_messages_chats | TL_messages_chatsSlice
type TL_stories_getChatsToSend struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_togglePeerStoriesHidden struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Hidden bool
}

// Returns stories.StoryReactionsList: TL_stories_storyReactionsList
type TL_stories_getStoryReactionsList struct {
	ForwardsFirst bool
	Peer          TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID            int32
	Reaction      TL      // (optional) Reaction: TL_reactionEmpty | TL_reactionEmoji | TL_reactionCustomEmoji | TL_reactionPaid
	Offset        *string // (optional)
	Limit         int32
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_stories_togglePinnedToTop struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	ID   []int32
}

// Returns stories.FoundStories: TL_stories_foundStories
type TL_stories_searchPosts struct {
	Hashtag *string // (optional)
	Area    TL      // (optional) MediaArea: TL_mediaAreaVenue | TL_inputMediaAreaVenue | TL_mediaAreaGeoPoint | TL_mediaAreaSuggestedReaction | TL_mediaAreaChannelPost | TL_inputMediaAreaChannelPost | TL_mediaAreaURL | TL_mediaAreaWeather
	Offset  string
	Limit   int32
}

// Returns premium.BoostsList: TL_premium_boostsList
type TL_premium_getBoostsList struct {
	Gifts  bool
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	Offset string
	Limit  int32
}

// Returns premium.MyBoosts: TL_premium_myBoosts
type TL_premium_getMyBoosts struct {
}

// Returns premium.MyBoosts: TL_premium_myBoosts
type TL_premium_applyBoost struct {
	Slots []int32 // (optional)
	Peer  TL      // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns premium.BoostsStatus: TL_premium_boostsStatus
type TL_premium_getBoostsStatus struct {
	Peer TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
}

// Returns premium.BoostsList: TL_premium_boostsList
type TL_premium_getUserBoosts struct {
	Peer   TL // InputPeer: TL_inputPeerEmpty | TL_inputPeerSelf | TL_inputPeerChat | TL_inputPeerUser | TL_inputPeerChannel | TL_inputPeerUserFromMessage | TL_inputPeerChannelFromMessage
	UserID TL // InputUser: TL_inputUserEmpty | TL_inputUserSelf | TL_inputUser | TL_inputUserFromMessage
}

// Returns smsjobs.EligibilityToJoin: TL_smsjobs_eligibleToJoin
type TL_smsjobs_isEligibleToJoin struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_smsjobs_join struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_smsjobs_leave struct {
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_smsjobs_updateSettings struct {
	AllowInternational bool
}

// Returns smsjobs.Status: TL_smsjobs_status
type TL_smsjobs_getStatus struct {
}

// Returns SmsJob: TL_smsJob
type TL_smsjobs_getSMSJob struct {
	JobID string
}

// Returns Bool: TL_boolFalse | TL_boolTrue
type TL_smsjobs_finishJob struct {
	JobID string
	Error *string // (optional)
}

// Returns fragment.CollectibleInfo: TL_fragment_collectibleInfo
type TL_fragment_getCollectibleInfo struct {
	Collectible TL // InputCollectible: TL_inputCollectibleUsername | TL_inputCollectiblePhone
}

func (e TL_resPQ) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_resPQ)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.String(e.PQ)
	x.VectorLong(e.ServerPublicKeyFingerprints)
	return x.buf
}

func (e TL_pqInnerData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pqInnerData)
	x.String(e.PQ)
	x.String(e.P)
	x.String(e.Q)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes32(e.NewNonce)
	return x.buf
}

func (e TL_pqInnerDataDC) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pqInnerDataDC)
	x.String(e.PQ)
	x.String(e.P)
	x.String(e.Q)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes32(e.NewNonce)
	x.Int(e.DC)
	return x.buf
}

func (e TL_pqInnerDataTemp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pqInnerDataTemp)
	x.String(e.PQ)
	x.String(e.P)
	x.String(e.Q)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes32(e.NewNonce)
	x.Int(e.ExpiresIn)
	return x.buf
}

func (e TL_pqInnerDataTempDC) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pqInnerDataTempDC)
	x.String(e.PQ)
	x.String(e.P)
	x.String(e.Q)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes32(e.NewNonce)
	x.Int(e.DC)
	x.Int(e.ExpiresIn)
	return x.buf
}

func (e TL_bindAuthKeyInner) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bindAuthKeyInner)
	x.Long(e.Nonce)
	x.Long(e.TempAuthKeyID)
	x.Long(e.PermAuthKeyID)
	x.Long(e.TempSessionID)
	x.Int(e.ExpiresAt)
	return x.buf
}

func (e TL_serverDHParamsFail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_serverDHParamsFail)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes16(e.NewNonceHash)
	return x.buf
}

func (e TL_serverDHParamsOK) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_serverDHParamsOK)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.String(e.EncryptedAnswer)
	return x.buf
}

func (e TL_serverDHInnerData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_serverDHInnerData)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Int(e.G)
	x.String(e.DHPrime)
	x.String(e.GA)
	x.Int(e.ServerTime)
	return x.buf
}

func (e TL_clientDHInnerData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_clientDHInnerData)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Long(e.RetryID)
	x.String(e.GB)
	return x.buf
}

func (e TL_dhGenOK) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dhGenOK)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes16(e.NewNonceHash1)
	return x.buf
}

func (e TL_dhGenRetry) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dhGenRetry)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes16(e.NewNonceHash2)
	return x.buf
}

func (e TL_dhGenFail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dhGenFail)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.Bytes16(e.NewNonceHash3)
	return x.buf
}

func (e TL_destroyAuthKeyOK) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroyAuthKeyOK)
	return x.buf
}

func (e TL_destroyAuthKeyNone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroyAuthKeyNone)
	return x.buf
}

func (e TL_destroyAuthKeyFail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroyAuthKeyFail)
	return x.buf
}

func (e TL_reqPQ) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reqPQ)
	x.Bytes16(e.Nonce)
	return x.buf
}

func (e TL_reqPQMulti) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reqPQMulti)
	x.Bytes16(e.Nonce)
	return x.buf
}

func (e TL_reqDHParams) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reqDHParams)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.String(e.P)
	x.String(e.Q)
	x.Long(e.PublicKeyFingerprint)
	x.String(e.EncryptedData)
	return x.buf
}

func (e TL_setClientDHParams) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_setClientDHParams)
	x.Bytes16(e.Nonce)
	x.Bytes16(e.ServerNonce)
	x.String(e.EncryptedData)
	return x.buf
}

func (e TL_destroyAuthKey) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroyAuthKey)
	return x.buf
}

func (e TL_msgsACK) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgsACK)
	x.VectorLong(e.MsgIDs)
	return x.buf
}

func (e TL_badMsgNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_badMsgNotification)
	x.Long(e.BadMsgID)
	x.Int(e.BadMsgSeqno)
	x.Int(e.ErrorCode)
	return x.buf
}

func (e TL_badServerSalt) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_badServerSalt)
	x.Long(e.BadMsgID)
	x.Int(e.BadMsgSeqno)
	x.Int(e.ErrorCode)
	x.Long(e.NewServerSalt)
	return x.buf
}

func (e TL_msgsStateReq) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgsStateReq)
	x.VectorLong(e.MsgIDs)
	return x.buf
}

func (e TL_msgsStateInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgsStateInfo)
	x.Long(e.ReqMsgID)
	x.String(e.Info)
	return x.buf
}

func (e TL_msgsAllInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgsAllInfo)
	x.VectorLong(e.MsgIDs)
	x.String(e.Info)
	return x.buf
}

func (e TL_msgDetailedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgDetailedInfo)
	x.Long(e.MsgID)
	x.Long(e.AnswerMsgID)
	x.Int(e.Bytes)
	x.Int(e.Status)
	return x.buf
}

func (e TL_msgNewDetailedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgNewDetailedInfo)
	x.Long(e.AnswerMsgID)
	x.Int(e.Bytes)
	x.Int(e.Status)
	return x.buf
}

func (e TL_msgResendReq) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_msgResendReq)
	x.VectorLong(e.MsgIDs)
	return x.buf
}

func (e TL_rpcError) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpcError)
	x.Int(e.ErrorCode)
	x.String(e.ErrorMessage)
	return x.buf
}

func (e TL_rpcAnswerUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpcAnswerUnknown)
	return x.buf
}

func (e TL_rpcAnswerDroppedRunning) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpcAnswerDroppedRunning)
	return x.buf
}

func (e TL_rpcAnswerDropped) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpcAnswerDropped)
	x.Long(e.MsgID)
	x.Int(e.SeqNo)
	x.Int(e.Bytes)
	return x.buf
}

func (e TL_futureSalt) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_futureSalt)
	x.Int(e.ValidSince)
	x.Int(e.ValidUntil)
	x.Long(e.Salt)
	return x.buf
}

func (e TL_futureSalts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_futureSalts)
	x.Long(e.ReqMsgID)
	x.Int(e.Now)
	EncodeBuf_GenericVector(x, e.Salts)
	return x.buf
}

func (e TL_pong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pong)
	x.Long(e.MsgID)
	x.Long(e.PingID)
	return x.buf
}

func (e TL_destroySessionOK) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroySessionOK)
	x.Long(e.SessionID)
	return x.buf
}

func (e TL_destroySessionNone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroySessionNone)
	x.Long(e.SessionID)
	return x.buf
}

func (e TL_newSessionCreated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_newSessionCreated)
	x.Long(e.FirstMsgID)
	x.Long(e.UniqueID)
	x.Long(e.ServerSalt)
	return x.buf
}

func (e TL_httpWait) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_httpWait)
	x.Int(e.MaxDelay)
	x.Int(e.WaitAfter)
	x.Int(e.MaxWait)
	return x.buf
}

func (e TL_ipPort) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_ipPort)
	x.Int(e.IPv4)
	x.Int(e.Port)
	return x.buf
}

func (e TL_ipPortSecret) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_ipPortSecret)
	x.Int(e.IPv4)
	x.Int(e.Port)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_accessPointRule) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_accessPointRule)
	x.String(e.PhonePrefixRules)
	x.Int(e.DCID)
	EncodeBuf_GenericVector(x, e.IPs)
	return x.buf
}

func (e TL_help_configSimple) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_configSimple)
	x.Int(e.Date)
	x.Int(e.Expires)
	EncodeBuf_GenericVector(x, e.Rules)
	return x.buf
}

func (e TL_tlsClientHello) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsClientHello)
	EncodeBuf_GenericVector(x, e.Blocks)
	return x.buf
}

func (e TL_tlsBlockString) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockString)
	x.String(e.Data)
	return x.buf
}

func (e TL_tlsBlockRandom) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockRandom)
	x.Int(e.Length)
	return x.buf
}

func (e TL_tlsBlockZero) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockZero)
	x.Int(e.Length)
	return x.buf
}

func (e TL_tlsBlockDomain) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockDomain)
	return x.buf
}

func (e TL_tlsBlockGrease) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockGrease)
	x.Int(e.Seed)
	return x.buf
}

func (e TL_tlsBlockPublicKey) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockPublicKey)
	return x.buf
}

func (e TL_tlsBlockScope) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockScope)
	EncodeBuf_GenericVector(x, e.Entries)
	return x.buf
}

func (e TL_tlsBlockPermutation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_tlsBlockPermutation)
	x.Vector2d(e.Entries)
	return x.buf
}

func (e TL_rpcDropAnswer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_rpcDropAnswer)
	x.Long(e.ReqMsgID)
	return x.buf
}

func (e TL_getFutureSalts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_getFutureSalts)
	x.Int(e.Num)
	return x.buf
}

func (e TL_ping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_ping)
	x.Long(e.PingID)
	return x.buf
}

func (e TL_pingDelayDisconnect) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pingDelayDisconnect)
	x.Long(e.PingID)
	x.Int(e.DisconnectDelay)
	return x.buf
}

func (e TL_destroySession) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_destroySession)
	x.Long(e.SessionID)
	return x.buf
}

func (e TL_boolFalse) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_boolFalse)
	return x.buf
}

func (e TL_boolTrue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_boolTrue)
	return x.buf
}

func (e TL_true) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_true)
	return x.buf
}

func (e TL_error) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_error)
	x.Int(e.Code)
	x.String(e.Text)
	return x.buf
}

func (e TL_null) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_null)
	return x.buf
}

func (e TL_inputPeerEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerEmpty)
	return x.buf
}

func (e TL_inputPeerSelf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerSelf)
	return x.buf
}

func (e TL_inputPeerChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_inputPeerUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerUser)
	x.Long(e.UserID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputPeerChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerChannel)
	x.Long(e.ChannelID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputPeerUserFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerUserFromMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_inputPeerChannelFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerChannelFromMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_inputUserEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputUserEmpty)
	return x.buf
}

func (e TL_inputUserSelf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputUserSelf)
	return x.buf
}

func (e TL_inputUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputUser)
	x.Long(e.UserID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputUserFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputUserFromMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_inputPhoneContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhoneContact)
	x.Long(e.ClientID)
	x.String(e.Phone)
	x.String(e.FirstName)
	x.String(e.LastName)
	return x.buf
}

func (e TL_inputFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputFile)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.String(e.Name)
	x.String(e.MD5Checksum)
	return x.buf
}

func (e TL_inputFileBig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputFileBig)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.String(e.Name)
	return x.buf
}

func (e TL_inputFileStoryDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputFileStoryDocument)
	x.Object(e.ID)
	return x.buf
}

func (e TL_inputMediaEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaEmpty)
	return x.buf
}

func (e TL_inputMediaUploadedPhoto) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 2)
	}
	if e.Stickers != nil {
		flags |= (1 << 0)
	}
	if e.TTLSeconds != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaUploadedPhoto)
	x.Int(flags)
	x.Object(e.File)
	if e.Stickers != nil {
		EncodeBuf_GenericVector(x, e.Stickers)
	}
	if e.TTLSeconds != nil {
		x.Int(*e.TTLSeconds)
	}
	return x.buf
}

func (e TL_inputMediaPhoto) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 1)
	}
	if e.TTLSeconds != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaPhoto)
	x.Int(flags)
	x.Object(e.ID)
	if e.TTLSeconds != nil {
		x.Int(*e.TTLSeconds)
	}
	return x.buf
}

func (e TL_inputMediaGeoPoint) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaGeoPoint)
	x.Object(e.GeoPoint)
	return x.buf
}

func (e TL_inputMediaContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaContact)
	x.String(e.PhoneNumber)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Vcard)
	return x.buf
}

func (e TL_inputMediaUploadedDocument) encode() []byte {
	var flags int32
	if e.NosoundVideo {
		flags |= (1 << 3)
	}
	if e.ForceFile {
		flags |= (1 << 4)
	}
	if e.Spoiler {
		flags |= (1 << 5)
	}
	if e.Thumb != nil {
		flags |= (1 << 2)
	}
	if e.Stickers != nil {
		flags |= (1 << 0)
	}
	if e.TTLSeconds != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaUploadedDocument)
	x.Int(flags)
	x.Object(e.File)
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	x.String(e.MIMEType)
	EncodeBuf_GenericVector(x, e.Attributes)
	if e.Stickers != nil {
		EncodeBuf_GenericVector(x, e.Stickers)
	}
	if e.TTLSeconds != nil {
		x.Int(*e.TTLSeconds)
	}
	return x.buf
}

func (e TL_inputMediaDocument) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 2)
	}
	if e.TTLSeconds != nil {
		flags |= (1 << 0)
	}
	if e.Query != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaDocument)
	x.Int(flags)
	x.Object(e.ID)
	if e.TTLSeconds != nil {
		x.Int(*e.TTLSeconds)
	}
	if e.Query != nil {
		x.String(*e.Query)
	}
	return x.buf
}

func (e TL_inputMediaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaVenue)
	x.Object(e.GeoPoint)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	return x.buf
}

func (e TL_inputMediaPhotoExternal) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 1)
	}
	if e.TTLSeconds != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaPhotoExternal)
	x.Int(flags)
	x.String(e.URL)
	if e.TTLSeconds != nil {
		x.Int(*e.TTLSeconds)
	}
	return x.buf
}

func (e TL_inputMediaDocumentExternal) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 1)
	}
	if e.TTLSeconds != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaDocumentExternal)
	x.Int(flags)
	x.String(e.URL)
	if e.TTLSeconds != nil {
		x.Int(*e.TTLSeconds)
	}
	return x.buf
}

func (e TL_inputMediaGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaGame)
	x.Object(e.ID)
	return x.buf
}

func (e TL_inputMediaInvoice) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.Provider != nil {
		flags |= (1 << 3)
	}
	if e.StartParam != nil {
		flags |= (1 << 1)
	}
	if e.ExtendedMedia != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaInvoice)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	x.StringBytes(e.Payload)
	if e.Provider != nil {
		x.String(*e.Provider)
	}
	x.Object(e.ProviderData)
	if e.StartParam != nil {
		x.String(*e.StartParam)
	}
	if e.ExtendedMedia != nil {
		x.Object(e.ExtendedMedia)
	}
	return x.buf
}

func (e TL_inputMediaGeoLive) encode() []byte {
	var flags int32
	if e.Stopped {
		flags |= (1 << 0)
	}
	if e.Heading != nil {
		flags |= (1 << 2)
	}
	if e.Period != nil {
		flags |= (1 << 1)
	}
	if e.ProximityNotificationRadius != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaGeoLive)
	x.Int(flags)
	x.Object(e.GeoPoint)
	if e.Heading != nil {
		x.Int(*e.Heading)
	}
	if e.Period != nil {
		x.Int(*e.Period)
	}
	if e.ProximityNotificationRadius != nil {
		x.Int(*e.ProximityNotificationRadius)
	}
	return x.buf
}

func (e TL_inputMediaPoll) encode() []byte {
	var flags int32
	if e.CorrectAnswers != nil {
		flags |= (1 << 0)
	}
	if e.Solution != nil {
		flags |= (1 << 1)
	}
	if e.SolutionEntities != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaPoll)
	x.Int(flags)
	x.Object(e.Poll)
	if e.CorrectAnswers != nil {
		x.VectorBytes(e.CorrectAnswers)
	}
	if e.Solution != nil {
		x.String(*e.Solution)
	}
	if e.SolutionEntities != nil {
		EncodeBuf_GenericVector(x, e.SolutionEntities)
	}
	return x.buf
}

func (e TL_inputMediaDice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaDice)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_inputMediaStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaStory)
	x.Object(e.Peer)
	x.Int(e.ID)
	return x.buf
}

func (e TL_inputMediaWebPage) encode() []byte {
	var flags int32
	if e.ForceLargeMedia {
		flags |= (1 << 0)
	}
	if e.ForceSmallMedia {
		flags |= (1 << 1)
	}
	if e.Optional {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaWebPage)
	x.Int(flags)
	x.String(e.URL)
	return x.buf
}

func (e TL_inputMediaPaidMedia) encode() []byte {
	var flags int32
	if e.Payload != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaPaidMedia)
	x.Int(flags)
	x.Long(e.StarsAmount)
	EncodeBuf_GenericVector(x, e.ExtendedMedia)
	if e.Payload != nil {
		x.String(*e.Payload)
	}
	return x.buf
}

func (e TL_inputChatPhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChatPhotoEmpty)
	return x.buf
}

func (e TL_inputChatUploadedPhoto) encode() []byte {
	var flags int32
	if e.File != nil {
		flags |= (1 << 0)
	}
	if e.Video != nil {
		flags |= (1 << 1)
	}
	if e.VideoStartTS != nil {
		flags |= (1 << 2)
	}
	if e.VideoEmojiMarkup != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChatUploadedPhoto)
	x.Int(flags)
	if e.File != nil {
		x.Object(e.File)
	}
	if e.Video != nil {
		x.Object(e.Video)
	}
	if e.VideoStartTS != nil {
		x.Double(*e.VideoStartTS)
	}
	if e.VideoEmojiMarkup != nil {
		x.Object(e.VideoEmojiMarkup)
	}
	return x.buf
}

func (e TL_inputChatPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChatPhoto)
	x.Object(e.ID)
	return x.buf
}

func (e TL_inputGeoPointEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGeoPointEmpty)
	return x.buf
}

func (e TL_inputGeoPoint) encode() []byte {
	var flags int32
	if e.AccuracyRadius != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGeoPoint)
	x.Int(flags)
	x.Double(e.Lat)
	x.Double(e.Long)
	if e.AccuracyRadius != nil {
		x.Int(*e.AccuracyRadius)
	}
	return x.buf
}

func (e TL_inputPhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhotoEmpty)
	return x.buf
}

func (e TL_inputPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhoto)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	return x.buf
}

func (e TL_inputFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputFileLocation)
	x.Long(e.VolumeID)
	x.Int(e.LocalID)
	x.Long(e.Secret)
	x.StringBytes(e.FileReference)
	return x.buf
}

func (e TL_inputEncryptedFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputDocumentFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDocumentFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.String(e.ThumbSize)
	return x.buf
}

func (e TL_inputSecureFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSecureFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputTakeoutFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputTakeoutFileLocation)
	return x.buf
}

func (e TL_inputPhotoFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhotoFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.String(e.ThumbSize)
	return x.buf
}

func (e TL_inputPhotoLegacyFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhotoLegacyFileLocation)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.Long(e.VolumeID)
	x.Int(e.LocalID)
	x.Long(e.Secret)
	return x.buf
}

func (e TL_inputPeerPhotoFileLocation) encode() []byte {
	var flags int32
	if e.Big {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerPhotoFileLocation)
	x.Int(flags)
	x.Object(e.Peer)
	x.Long(e.PhotoID)
	return x.buf
}

func (e TL_inputStickerSetThumb) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetThumb)
	x.Object(e.Stickerset)
	x.Int(e.ThumbVersion)
	return x.buf
}

func (e TL_inputGroupCallStream) encode() []byte {
	var flags int32
	if e.VideoChannel != nil {
		flags |= (1 << 0)
	}
	if e.VideoQuality != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGroupCallStream)
	x.Int(flags)
	x.Object(e.Call)
	x.Long(e.TimeMS)
	x.Int(e.Scale)
	if e.VideoChannel != nil {
		x.Int(*e.VideoChannel)
	}
	if e.VideoQuality != nil {
		x.Int(*e.VideoQuality)
	}
	return x.buf
}

func (e TL_peerUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerUser)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_peerChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_peerChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerChannel)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_storage_fileUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileUnknown)
	return x.buf
}

func (e TL_storage_filePartial) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_filePartial)
	return x.buf
}

func (e TL_storage_fileJPEG) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileJPEG)
	return x.buf
}

func (e TL_storage_fileGIF) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileGIF)
	return x.buf
}

func (e TL_storage_filePNG) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_filePNG)
	return x.buf
}

func (e TL_storage_filePDF) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_filePDF)
	return x.buf
}

func (e TL_storage_fileMP3) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileMP3)
	return x.buf
}

func (e TL_storage_fileMOV) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileMOV)
	return x.buf
}

func (e TL_storage_fileMP4) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileMP4)
	return x.buf
}

func (e TL_storage_fileWEBP) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storage_fileWEBP)
	return x.buf
}

func (e TL_userEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_user) encode() []byte {
	var flags, flags2 int32
	if e.Self {
		flags |= (1 << 10)
	}
	if e.Contact {
		flags |= (1 << 11)
	}
	if e.MutualContact {
		flags |= (1 << 12)
	}
	if e.Deleted {
		flags |= (1 << 13)
	}
	if e.Bot {
		flags |= (1 << 14)
	}
	if e.BotChatHistory {
		flags |= (1 << 15)
	}
	if e.BotNochats {
		flags |= (1 << 16)
	}
	if e.Verified {
		flags |= (1 << 17)
	}
	if e.Restricted {
		flags |= (1 << 18)
	}
	if e.Min {
		flags |= (1 << 20)
	}
	if e.BotInlineGeo {
		flags |= (1 << 21)
	}
	if e.Support {
		flags |= (1 << 23)
	}
	if e.Scam {
		flags |= (1 << 24)
	}
	if e.ApplyMinPhoto {
		flags |= (1 << 25)
	}
	if e.Fake {
		flags |= (1 << 26)
	}
	if e.BotAttachMenu {
		flags |= (1 << 27)
	}
	if e.Premium {
		flags |= (1 << 28)
	}
	if e.AttachMenuEnabled {
		flags |= (1 << 29)
	}
	if e.BotCanEdit {
		flags2 |= (1 << 1)
	}
	if e.CloseFriend {
		flags2 |= (1 << 2)
	}
	if e.StoriesHidden {
		flags2 |= (1 << 3)
	}
	if e.StoriesUnavailable {
		flags2 |= (1 << 4)
	}
	if e.ContactRequirePremium {
		flags2 |= (1 << 10)
	}
	if e.BotBusiness {
		flags2 |= (1 << 11)
	}
	if e.BotHasMainApp {
		flags2 |= (1 << 13)
	}
	if e.AccessHash != nil {
		flags |= (1 << 0)
	}
	if e.FirstName != nil {
		flags |= (1 << 1)
	}
	if e.LastName != nil {
		flags |= (1 << 2)
	}
	if e.Username != nil {
		flags |= (1 << 3)
	}
	if e.Phone != nil {
		flags |= (1 << 4)
	}
	if e.Photo != nil {
		flags |= (1 << 5)
	}
	if e.Status != nil {
		flags |= (1 << 6)
	}
	if e.BotInfoVersion != nil {
		flags |= (1 << 14)
	}
	if e.RestrictionReason != nil {
		flags |= (1 << 18)
	}
	if e.BotInlinePlaceholder != nil {
		flags |= (1 << 19)
	}
	if e.LangCode != nil {
		flags |= (1 << 22)
	}
	if e.EmojiStatus != nil {
		flags |= (1 << 30)
	}
	if e.Usernames != nil {
		flags2 |= (1 << 0)
	}
	if e.StoriesMaxID != nil {
		flags2 |= (1 << 5)
	}
	if e.Color != nil {
		flags2 |= (1 << 8)
	}
	if e.ProfileColor != nil {
		flags2 |= (1 << 9)
	}
	if e.BotActiveUsers != nil {
		flags2 |= (1 << 12)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_user)
	x.Int(flags)
	x.Int(flags2)
	x.Long(e.ID)
	if e.AccessHash != nil {
		x.Long(*e.AccessHash)
	}
	if e.FirstName != nil {
		x.String(*e.FirstName)
	}
	if e.LastName != nil {
		x.String(*e.LastName)
	}
	if e.Username != nil {
		x.String(*e.Username)
	}
	if e.Phone != nil {
		x.String(*e.Phone)
	}
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.Status != nil {
		x.Object(e.Status)
	}
	if e.BotInfoVersion != nil {
		x.Int(*e.BotInfoVersion)
	}
	if e.RestrictionReason != nil {
		EncodeBuf_GenericVector(x, e.RestrictionReason)
	}
	if e.BotInlinePlaceholder != nil {
		x.String(*e.BotInlinePlaceholder)
	}
	if e.LangCode != nil {
		x.String(*e.LangCode)
	}
	if e.EmojiStatus != nil {
		x.Object(e.EmojiStatus)
	}
	if e.Usernames != nil {
		EncodeBuf_GenericVector(x, e.Usernames)
	}
	if e.StoriesMaxID != nil {
		x.Int(*e.StoriesMaxID)
	}
	if e.Color != nil {
		x.Object(e.Color)
	}
	if e.ProfileColor != nil {
		x.Object(e.ProfileColor)
	}
	if e.BotActiveUsers != nil {
		x.Int(*e.BotActiveUsers)
	}
	return x.buf
}

func (e TL_userProfilePhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userProfilePhotoEmpty)
	return x.buf
}

func (e TL_userProfilePhoto) encode() []byte {
	var flags int32
	if e.HasVideo {
		flags |= (1 << 0)
	}
	if e.Personal {
		flags |= (1 << 2)
	}
	if e.StrippedThumb != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_userProfilePhoto)
	x.Int(flags)
	x.Long(e.PhotoID)
	if e.StrippedThumb != nil {
		x.StringBytes(e.StrippedThumb)
	}
	x.Int(e.DCID)
	return x.buf
}

func (e TL_userStatusEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusEmpty)
	return x.buf
}

func (e TL_userStatusOnline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusOnline)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_userStatusOffline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusOffline)
	x.Int(e.WasOnline)
	return x.buf
}

func (e TL_userStatusRecently) encode() []byte {
	var flags int32
	if e.ByMe {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusRecently)
	x.Int(flags)
	return x.buf
}

func (e TL_userStatusLastWeek) encode() []byte {
	var flags int32
	if e.ByMe {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusLastWeek)
	x.Int(flags)
	return x.buf
}

func (e TL_userStatusLastMonth) encode() []byte {
	var flags int32
	if e.ByMe {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_userStatusLastMonth)
	x.Int(flags)
	return x.buf
}

func (e TL_chatEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_chat) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.Left {
		flags |= (1 << 2)
	}
	if e.Deactivated {
		flags |= (1 << 5)
	}
	if e.CallActive {
		flags |= (1 << 23)
	}
	if e.CallNotEmpty {
		flags |= (1 << 24)
	}
	if e.Noforwards {
		flags |= (1 << 25)
	}
	if e.MigratedTo != nil {
		flags |= (1 << 6)
	}
	if e.AdminRights != nil {
		flags |= (1 << 14)
	}
	if e.DefaultBannedRights != nil {
		flags |= (1 << 18)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chat)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.Title)
	x.Object(e.Photo)
	x.Int(e.ParticipantsCount)
	x.Int(e.Date)
	x.Int(e.Version)
	if e.MigratedTo != nil {
		x.Object(e.MigratedTo)
	}
	if e.AdminRights != nil {
		x.Object(e.AdminRights)
	}
	if e.DefaultBannedRights != nil {
		x.Object(e.DefaultBannedRights)
	}
	return x.buf
}

func (e TL_chatForbidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatForbidden)
	x.Long(e.ID)
	x.String(e.Title)
	return x.buf
}

func (e TL_channel) encode() []byte {
	var flags, flags2 int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.Left {
		flags |= (1 << 2)
	}
	if e.Broadcast {
		flags |= (1 << 5)
	}
	if e.Verified {
		flags |= (1 << 7)
	}
	if e.Megagroup {
		flags |= (1 << 8)
	}
	if e.Restricted {
		flags |= (1 << 9)
	}
	if e.Signatures {
		flags |= (1 << 11)
	}
	if e.Min {
		flags |= (1 << 12)
	}
	if e.Scam {
		flags |= (1 << 19)
	}
	if e.HasLink {
		flags |= (1 << 20)
	}
	if e.HasGeo {
		flags |= (1 << 21)
	}
	if e.SlowmodeEnabled {
		flags |= (1 << 22)
	}
	if e.CallActive {
		flags |= (1 << 23)
	}
	if e.CallNotEmpty {
		flags |= (1 << 24)
	}
	if e.Fake {
		flags |= (1 << 25)
	}
	if e.Gigagroup {
		flags |= (1 << 26)
	}
	if e.Noforwards {
		flags |= (1 << 27)
	}
	if e.JoinToSend {
		flags |= (1 << 28)
	}
	if e.JoinRequest {
		flags |= (1 << 29)
	}
	if e.Forum {
		flags |= (1 << 30)
	}
	if e.StoriesHidden {
		flags2 |= (1 << 1)
	}
	if e.StoriesHiddenMin {
		flags2 |= (1 << 2)
	}
	if e.StoriesUnavailable {
		flags2 |= (1 << 3)
	}
	if e.SignatureProfiles {
		flags2 |= (1 << 12)
	}
	if e.AccessHash != nil {
		flags |= (1 << 13)
	}
	if e.Username != nil {
		flags |= (1 << 6)
	}
	if e.RestrictionReason != nil {
		flags |= (1 << 9)
	}
	if e.AdminRights != nil {
		flags |= (1 << 14)
	}
	if e.BannedRights != nil {
		flags |= (1 << 15)
	}
	if e.DefaultBannedRights != nil {
		flags |= (1 << 18)
	}
	if e.ParticipantsCount != nil {
		flags |= (1 << 17)
	}
	if e.Usernames != nil {
		flags2 |= (1 << 0)
	}
	if e.StoriesMaxID != nil {
		flags2 |= (1 << 4)
	}
	if e.Color != nil {
		flags2 |= (1 << 7)
	}
	if e.ProfileColor != nil {
		flags2 |= (1 << 8)
	}
	if e.EmojiStatus != nil {
		flags2 |= (1 << 9)
	}
	if e.Level != nil {
		flags2 |= (1 << 10)
	}
	if e.SubscriptionUntilDate != nil {
		flags2 |= (1 << 11)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channel)
	x.Int(flags)
	x.Int(flags2)
	x.Long(e.ID)
	if e.AccessHash != nil {
		x.Long(*e.AccessHash)
	}
	x.String(e.Title)
	if e.Username != nil {
		x.String(*e.Username)
	}
	x.Object(e.Photo)
	x.Int(e.Date)
	if e.RestrictionReason != nil {
		EncodeBuf_GenericVector(x, e.RestrictionReason)
	}
	if e.AdminRights != nil {
		x.Object(e.AdminRights)
	}
	if e.BannedRights != nil {
		x.Object(e.BannedRights)
	}
	if e.DefaultBannedRights != nil {
		x.Object(e.DefaultBannedRights)
	}
	if e.ParticipantsCount != nil {
		x.Int(*e.ParticipantsCount)
	}
	if e.Usernames != nil {
		EncodeBuf_GenericVector(x, e.Usernames)
	}
	if e.StoriesMaxID != nil {
		x.Int(*e.StoriesMaxID)
	}
	if e.Color != nil {
		x.Object(e.Color)
	}
	if e.ProfileColor != nil {
		x.Object(e.ProfileColor)
	}
	if e.EmojiStatus != nil {
		x.Object(e.EmojiStatus)
	}
	if e.Level != nil {
		x.Int(*e.Level)
	}
	if e.SubscriptionUntilDate != nil {
		x.Int(*e.SubscriptionUntilDate)
	}
	return x.buf
}

func (e TL_channelForbidden) encode() []byte {
	var flags int32
	if e.Broadcast {
		flags |= (1 << 5)
	}
	if e.Megagroup {
		flags |= (1 << 8)
	}
	if e.UntilDate != nil {
		flags |= (1 << 16)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelForbidden)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.Title)
	if e.UntilDate != nil {
		x.Int(*e.UntilDate)
	}
	return x.buf
}

func (e TL_chatFull) encode() []byte {
	var flags int32
	if e.CanSetUsername {
		flags |= (1 << 7)
	}
	if e.HasScheduled {
		flags |= (1 << 8)
	}
	if e.TranslationsDisabled {
		flags |= (1 << 19)
	}
	if e.ChatPhoto != nil {
		flags |= (1 << 2)
	}
	if e.ExportedInvite != nil {
		flags |= (1 << 13)
	}
	if e.BotInfo != nil {
		flags |= (1 << 3)
	}
	if e.PinnedMsgID != nil {
		flags |= (1 << 6)
	}
	if e.FolderID != nil {
		flags |= (1 << 11)
	}
	if e.Call != nil {
		flags |= (1 << 12)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 14)
	}
	if e.GroupcallDefaultJoinAs != nil {
		flags |= (1 << 15)
	}
	if e.ThemeEmoticon != nil {
		flags |= (1 << 16)
	}
	if e.RequestsPending != nil {
		flags |= (1 << 17)
	}
	if e.RecentRequesters != nil {
		flags |= (1 << 17)
	}
	if e.AvailableReactions != nil {
		flags |= (1 << 18)
	}
	if e.ReactionsLimit != nil {
		flags |= (1 << 20)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatFull)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.About)
	x.Object(e.Participants)
	if e.ChatPhoto != nil {
		x.Object(e.ChatPhoto)
	}
	x.Object(e.NotifySettings)
	if e.ExportedInvite != nil {
		x.Object(e.ExportedInvite)
	}
	if e.BotInfo != nil {
		EncodeBuf_GenericVector(x, e.BotInfo)
	}
	if e.PinnedMsgID != nil {
		x.Int(*e.PinnedMsgID)
	}
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	if e.Call != nil {
		x.Object(e.Call)
	}
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	if e.GroupcallDefaultJoinAs != nil {
		x.Object(e.GroupcallDefaultJoinAs)
	}
	if e.ThemeEmoticon != nil {
		x.String(*e.ThemeEmoticon)
	}
	if e.RequestsPending != nil {
		x.Int(*e.RequestsPending)
	}
	if e.RecentRequesters != nil {
		x.VectorLong(e.RecentRequesters)
	}
	if e.AvailableReactions != nil {
		x.Object(e.AvailableReactions)
	}
	if e.ReactionsLimit != nil {
		x.Int(*e.ReactionsLimit)
	}
	return x.buf
}

func (e TL_channelFull) encode() []byte {
	var flags, flags2 int32
	if e.CanViewParticipants {
		flags |= (1 << 3)
	}
	if e.CanSetUsername {
		flags |= (1 << 6)
	}
	if e.CanSetStickers {
		flags |= (1 << 7)
	}
	if e.HiddenPrehistory {
		flags |= (1 << 10)
	}
	if e.CanSetLocation {
		flags |= (1 << 16)
	}
	if e.HasScheduled {
		flags |= (1 << 19)
	}
	if e.CanViewStats {
		flags |= (1 << 20)
	}
	if e.Blocked {
		flags |= (1 << 22)
	}
	if e.CanDeleteChannel {
		flags2 |= (1 << 0)
	}
	if e.Antispam {
		flags2 |= (1 << 1)
	}
	if e.ParticipantsHidden {
		flags2 |= (1 << 2)
	}
	if e.TranslationsDisabled {
		flags2 |= (1 << 3)
	}
	if e.StoriesPinnedAvailable {
		flags2 |= (1 << 5)
	}
	if e.ViewForumAsMessages {
		flags2 |= (1 << 6)
	}
	if e.RestrictedSponsored {
		flags2 |= (1 << 11)
	}
	if e.CanViewRevenue {
		flags2 |= (1 << 12)
	}
	if e.PaidMediaAllowed {
		flags2 |= (1 << 14)
	}
	if e.CanViewStarsRevenue {
		flags2 |= (1 << 15)
	}
	if e.PaidReactionsAvailable {
		flags2 |= (1 << 16)
	}
	if e.ParticipantsCount != nil {
		flags |= (1 << 0)
	}
	if e.AdminsCount != nil {
		flags |= (1 << 1)
	}
	if e.KickedCount != nil {
		flags |= (1 << 2)
	}
	if e.BannedCount != nil {
		flags |= (1 << 2)
	}
	if e.OnlineCount != nil {
		flags |= (1 << 13)
	}
	if e.ExportedInvite != nil {
		flags |= (1 << 23)
	}
	if e.MigratedFromChatID != nil {
		flags |= (1 << 4)
	}
	if e.MigratedFromMaxID != nil {
		flags |= (1 << 4)
	}
	if e.PinnedMsgID != nil {
		flags |= (1 << 5)
	}
	if e.Stickerset != nil {
		flags |= (1 << 8)
	}
	if e.AvailableMinID != nil {
		flags |= (1 << 9)
	}
	if e.FolderID != nil {
		flags |= (1 << 11)
	}
	if e.LinkedChatID != nil {
		flags |= (1 << 14)
	}
	if e.Location != nil {
		flags |= (1 << 15)
	}
	if e.SlowmodeSeconds != nil {
		flags |= (1 << 17)
	}
	if e.SlowmodeNextSendDate != nil {
		flags |= (1 << 18)
	}
	if e.StatsDC != nil {
		flags |= (1 << 12)
	}
	if e.Call != nil {
		flags |= (1 << 21)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 24)
	}
	if e.PendingSuggestions != nil {
		flags |= (1 << 25)
	}
	if e.GroupcallDefaultJoinAs != nil {
		flags |= (1 << 26)
	}
	if e.ThemeEmoticon != nil {
		flags |= (1 << 27)
	}
	if e.RequestsPending != nil {
		flags |= (1 << 28)
	}
	if e.RecentRequesters != nil {
		flags |= (1 << 28)
	}
	if e.DefaultSendAs != nil {
		flags |= (1 << 29)
	}
	if e.AvailableReactions != nil {
		flags |= (1 << 30)
	}
	if e.ReactionsLimit != nil {
		flags2 |= (1 << 13)
	}
	if e.Stories != nil {
		flags2 |= (1 << 4)
	}
	if e.Wallpaper != nil {
		flags2 |= (1 << 7)
	}
	if e.BoostsApplied != nil {
		flags2 |= (1 << 8)
	}
	if e.BoostsUnrestrict != nil {
		flags2 |= (1 << 9)
	}
	if e.Emojiset != nil {
		flags2 |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelFull)
	x.Int(flags)
	x.Int(flags2)
	x.Long(e.ID)
	x.String(e.About)
	if e.ParticipantsCount != nil {
		x.Int(*e.ParticipantsCount)
	}
	if e.AdminsCount != nil {
		x.Int(*e.AdminsCount)
	}
	if e.KickedCount != nil {
		x.Int(*e.KickedCount)
	}
	if e.BannedCount != nil {
		x.Int(*e.BannedCount)
	}
	if e.OnlineCount != nil {
		x.Int(*e.OnlineCount)
	}
	x.Int(e.ReadInboxMaxID)
	x.Int(e.ReadOutboxMaxID)
	x.Int(e.UnreadCount)
	x.Object(e.ChatPhoto)
	x.Object(e.NotifySettings)
	if e.ExportedInvite != nil {
		x.Object(e.ExportedInvite)
	}
	EncodeBuf_GenericVector(x, e.BotInfo)
	if e.MigratedFromChatID != nil {
		x.Long(*e.MigratedFromChatID)
	}
	if e.MigratedFromMaxID != nil {
		x.Int(*e.MigratedFromMaxID)
	}
	if e.PinnedMsgID != nil {
		x.Int(*e.PinnedMsgID)
	}
	if e.Stickerset != nil {
		x.Object(e.Stickerset)
	}
	if e.AvailableMinID != nil {
		x.Int(*e.AvailableMinID)
	}
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	if e.LinkedChatID != nil {
		x.Long(*e.LinkedChatID)
	}
	if e.Location != nil {
		x.Object(e.Location)
	}
	if e.SlowmodeSeconds != nil {
		x.Int(*e.SlowmodeSeconds)
	}
	if e.SlowmodeNextSendDate != nil {
		x.Int(*e.SlowmodeNextSendDate)
	}
	if e.StatsDC != nil {
		x.Int(*e.StatsDC)
	}
	x.Int(e.PTS)
	if e.Call != nil {
		x.Object(e.Call)
	}
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	if e.PendingSuggestions != nil {
		x.VectorString(e.PendingSuggestions)
	}
	if e.GroupcallDefaultJoinAs != nil {
		x.Object(e.GroupcallDefaultJoinAs)
	}
	if e.ThemeEmoticon != nil {
		x.String(*e.ThemeEmoticon)
	}
	if e.RequestsPending != nil {
		x.Int(*e.RequestsPending)
	}
	if e.RecentRequesters != nil {
		x.VectorLong(e.RecentRequesters)
	}
	if e.DefaultSendAs != nil {
		x.Object(e.DefaultSendAs)
	}
	if e.AvailableReactions != nil {
		x.Object(e.AvailableReactions)
	}
	if e.ReactionsLimit != nil {
		x.Int(*e.ReactionsLimit)
	}
	if e.Stories != nil {
		x.Object(e.Stories)
	}
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	if e.BoostsApplied != nil {
		x.Int(*e.BoostsApplied)
	}
	if e.BoostsUnrestrict != nil {
		x.Int(*e.BoostsUnrestrict)
	}
	if e.Emojiset != nil {
		x.Object(e.Emojiset)
	}
	return x.buf
}

func (e TL_chatParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipant)
	x.Long(e.UserID)
	x.Long(e.InviterID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_chatParticipantCreator) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipantCreator)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_chatParticipantAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipantAdmin)
	x.Long(e.UserID)
	x.Long(e.InviterID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_chatParticipantsForbidden) encode() []byte {
	var flags int32
	if e.SelfParticipant != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipantsForbidden)
	x.Int(flags)
	x.Long(e.ChatID)
	if e.SelfParticipant != nil {
		x.Object(e.SelfParticipant)
	}
	return x.buf
}

func (e TL_chatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatParticipants)
	x.Long(e.ChatID)
	EncodeBuf_GenericVector(x, e.Participants)
	x.Int(e.Version)
	return x.buf
}

func (e TL_chatPhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatPhotoEmpty)
	return x.buf
}

func (e TL_chatPhoto) encode() []byte {
	var flags int32
	if e.HasVideo {
		flags |= (1 << 0)
	}
	if e.StrippedThumb != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatPhoto)
	x.Int(flags)
	x.Long(e.PhotoID)
	if e.StrippedThumb != nil {
		x.StringBytes(e.StrippedThumb)
	}
	x.Int(e.DCID)
	return x.buf
}

func (e TL_messageEmpty) encode() []byte {
	var flags int32
	if e.PeerID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEmpty)
	x.Int(flags)
	x.Int(e.ID)
	if e.PeerID != nil {
		x.Object(e.PeerID)
	}
	return x.buf
}

func (e TL_message) encode() []byte {
	var flags, flags2 int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Mentioned {
		flags |= (1 << 4)
	}
	if e.MediaUnread {
		flags |= (1 << 5)
	}
	if e.Silent {
		flags |= (1 << 13)
	}
	if e.Post {
		flags |= (1 << 14)
	}
	if e.FromScheduled {
		flags |= (1 << 18)
	}
	if e.Legacy {
		flags |= (1 << 19)
	}
	if e.EditHide {
		flags |= (1 << 21)
	}
	if e.Pinned {
		flags |= (1 << 24)
	}
	if e.Noforwards {
		flags |= (1 << 26)
	}
	if e.InvertMedia {
		flags |= (1 << 27)
	}
	if e.Offline {
		flags2 |= (1 << 1)
	}
	if e.FromID != nil {
		flags |= (1 << 8)
	}
	if e.FromBoostsApplied != nil {
		flags |= (1 << 29)
	}
	if e.SavedPeerID != nil {
		flags |= (1 << 28)
	}
	if e.FwdFrom != nil {
		flags |= (1 << 2)
	}
	if e.ViaBotID != nil {
		flags |= (1 << 11)
	}
	if e.ViaBusinessBotID != nil {
		flags2 |= (1 << 0)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 3)
	}
	if e.Media != nil {
		flags |= (1 << 9)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 6)
	}
	if e.Entities != nil {
		flags |= (1 << 7)
	}
	if e.Views != nil {
		flags |= (1 << 10)
	}
	if e.Forwards != nil {
		flags |= (1 << 10)
	}
	if e.Replies != nil {
		flags |= (1 << 23)
	}
	if e.EditDate != nil {
		flags |= (1 << 15)
	}
	if e.PostAuthor != nil {
		flags |= (1 << 16)
	}
	if e.GroupedID != nil {
		flags |= (1 << 17)
	}
	if e.Reactions != nil {
		flags |= (1 << 20)
	}
	if e.RestrictionReason != nil {
		flags |= (1 << 22)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 25)
	}
	if e.QuickReplyShortcutID != nil {
		flags |= (1 << 30)
	}
	if e.Effect != nil {
		flags2 |= (1 << 2)
	}
	if e.Factcheck != nil {
		flags2 |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_message)
	x.Int(flags)
	x.Int(flags2)
	x.Int(e.ID)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	if e.FromBoostsApplied != nil {
		x.Int(*e.FromBoostsApplied)
	}
	x.Object(e.PeerID)
	if e.SavedPeerID != nil {
		x.Object(e.SavedPeerID)
	}
	if e.FwdFrom != nil {
		x.Object(e.FwdFrom)
	}
	if e.ViaBotID != nil {
		x.Long(*e.ViaBotID)
	}
	if e.ViaBusinessBotID != nil {
		x.Long(*e.ViaBusinessBotID)
	}
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Int(e.Date)
	x.String(e.Message)
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.Views != nil {
		x.Int(*e.Views)
	}
	if e.Forwards != nil {
		x.Int(*e.Forwards)
	}
	if e.Replies != nil {
		x.Object(e.Replies)
	}
	if e.EditDate != nil {
		x.Int(*e.EditDate)
	}
	if e.PostAuthor != nil {
		x.String(*e.PostAuthor)
	}
	if e.GroupedID != nil {
		x.Long(*e.GroupedID)
	}
	if e.Reactions != nil {
		x.Object(e.Reactions)
	}
	if e.RestrictionReason != nil {
		EncodeBuf_GenericVector(x, e.RestrictionReason)
	}
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	if e.QuickReplyShortcutID != nil {
		x.Int(*e.QuickReplyShortcutID)
	}
	if e.Effect != nil {
		x.Long(*e.Effect)
	}
	if e.Factcheck != nil {
		x.Object(e.Factcheck)
	}
	return x.buf
}

func (e TL_messageService) encode() []byte {
	var flags int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Mentioned {
		flags |= (1 << 4)
	}
	if e.MediaUnread {
		flags |= (1 << 5)
	}
	if e.Silent {
		flags |= (1 << 13)
	}
	if e.Post {
		flags |= (1 << 14)
	}
	if e.Legacy {
		flags |= (1 << 19)
	}
	if e.FromID != nil {
		flags |= (1 << 8)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 3)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageService)
	x.Int(flags)
	x.Int(e.ID)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	x.Object(e.PeerID)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Int(e.Date)
	x.Object(e.Action)
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	return x.buf
}

func (e TL_messageMediaEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaEmpty)
	return x.buf
}

func (e TL_messageMediaPhoto) encode() []byte {
	var flags int32
	if e.Spoiler {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.TTLSeconds != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaPhoto)
	x.Int(flags)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.TTLSeconds != nil {
		x.Int(*e.TTLSeconds)
	}
	return x.buf
}

func (e TL_messageMediaGeo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaGeo)
	x.Object(e.Geo)
	return x.buf
}

func (e TL_messageMediaContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaContact)
	x.String(e.PhoneNumber)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Vcard)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_messageMediaUnsupported) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaUnsupported)
	return x.buf
}

func (e TL_messageMediaDocument) encode() []byte {
	var flags int32
	if e.Nopremium {
		flags |= (1 << 3)
	}
	if e.Spoiler {
		flags |= (1 << 4)
	}
	if e.Video {
		flags |= (1 << 6)
	}
	if e.Round {
		flags |= (1 << 7)
	}
	if e.Voice {
		flags |= (1 << 8)
	}
	if e.Document != nil {
		flags |= (1 << 0)
	}
	if e.AltDocument != nil {
		flags |= (1 << 5)
	}
	if e.TTLSeconds != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaDocument)
	x.Int(flags)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.AltDocument != nil {
		x.Object(e.AltDocument)
	}
	if e.TTLSeconds != nil {
		x.Int(*e.TTLSeconds)
	}
	return x.buf
}

func (e TL_messageMediaWebPage) encode() []byte {
	var flags int32
	if e.ForceLargeMedia {
		flags |= (1 << 0)
	}
	if e.ForceSmallMedia {
		flags |= (1 << 1)
	}
	if e.Manual {
		flags |= (1 << 3)
	}
	if e.Safe {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaWebPage)
	x.Int(flags)
	x.Object(e.Webpage)
	return x.buf
}

func (e TL_messageMediaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaVenue)
	x.Object(e.Geo)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	return x.buf
}

func (e TL_messageMediaGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaGame)
	x.Object(e.Game)
	return x.buf
}

func (e TL_messageMediaInvoice) encode() []byte {
	var flags int32
	if e.ShippingAddressRequested {
		flags |= (1 << 1)
	}
	if e.Test {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.ReceiptMsgID != nil {
		flags |= (1 << 2)
	}
	if e.ExtendedMedia != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaInvoice)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.ReceiptMsgID != nil {
		x.Int(*e.ReceiptMsgID)
	}
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	x.String(e.StartParam)
	if e.ExtendedMedia != nil {
		x.Object(e.ExtendedMedia)
	}
	return x.buf
}

func (e TL_messageMediaGeoLive) encode() []byte {
	var flags int32
	if e.Heading != nil {
		flags |= (1 << 0)
	}
	if e.ProximityNotificationRadius != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaGeoLive)
	x.Int(flags)
	x.Object(e.Geo)
	if e.Heading != nil {
		x.Int(*e.Heading)
	}
	x.Int(e.Period)
	if e.ProximityNotificationRadius != nil {
		x.Int(*e.ProximityNotificationRadius)
	}
	return x.buf
}

func (e TL_messageMediaPoll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaPoll)
	x.Object(e.Poll)
	x.Object(e.Results)
	return x.buf
}

func (e TL_messageMediaDice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaDice)
	x.Int(e.Value)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_messageMediaStory) encode() []byte {
	var flags int32
	if e.ViaMention {
		flags |= (1 << 1)
	}
	if e.Story != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaStory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Story != nil {
		x.Object(e.Story)
	}
	return x.buf
}

func (e TL_messageMediaGiveaway) encode() []byte {
	var flags int32
	if e.OnlyNewSubscribers {
		flags |= (1 << 0)
	}
	if e.WinnersAreVisible {
		flags |= (1 << 2)
	}
	if e.CountriesISO2 != nil {
		flags |= (1 << 1)
	}
	if e.PrizeDescription != nil {
		flags |= (1 << 3)
	}
	if e.Months != nil {
		flags |= (1 << 4)
	}
	if e.Stars != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaGiveaway)
	x.Int(flags)
	x.VectorLong(e.Channels)
	if e.CountriesISO2 != nil {
		x.VectorString(e.CountriesISO2)
	}
	if e.PrizeDescription != nil {
		x.String(*e.PrizeDescription)
	}
	x.Int(e.Quantity)
	if e.Months != nil {
		x.Int(*e.Months)
	}
	if e.Stars != nil {
		x.Long(*e.Stars)
	}
	x.Int(e.UntilDate)
	return x.buf
}

func (e TL_messageMediaGiveawayResults) encode() []byte {
	var flags int32
	if e.OnlyNewSubscribers {
		flags |= (1 << 0)
	}
	if e.Refunded {
		flags |= (1 << 2)
	}
	if e.AdditionalPeersCount != nil {
		flags |= (1 << 3)
	}
	if e.Months != nil {
		flags |= (1 << 4)
	}
	if e.Stars != nil {
		flags |= (1 << 5)
	}
	if e.PrizeDescription != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaGiveawayResults)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.AdditionalPeersCount != nil {
		x.Int(*e.AdditionalPeersCount)
	}
	x.Int(e.LaunchMsgID)
	x.Int(e.WinnersCount)
	x.Int(e.UnclaimedCount)
	x.VectorLong(e.Winners)
	if e.Months != nil {
		x.Int(*e.Months)
	}
	if e.Stars != nil {
		x.Long(*e.Stars)
	}
	if e.PrizeDescription != nil {
		x.String(*e.PrizeDescription)
	}
	x.Int(e.UntilDate)
	return x.buf
}

func (e TL_messageMediaPaidMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageMediaPaidMedia)
	x.Long(e.StarsAmount)
	EncodeBuf_GenericVector(x, e.ExtendedMedia)
	return x.buf
}

func (e TL_messageActionEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionEmpty)
	return x.buf
}

func (e TL_messageActionChatCreate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatCreate)
	x.String(e.Title)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_messageActionChatEditTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatEditTitle)
	x.String(e.Title)
	return x.buf
}

func (e TL_messageActionChatEditPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatEditPhoto)
	x.Object(e.Photo)
	return x.buf
}

func (e TL_messageActionChatDeletePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatDeletePhoto)
	return x.buf
}

func (e TL_messageActionChatAddUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatAddUser)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_messageActionChatDeleteUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatDeleteUser)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_messageActionChatJoinedByLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatJoinedByLink)
	x.Long(e.InviterID)
	return x.buf
}

func (e TL_messageActionChannelCreate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChannelCreate)
	x.String(e.Title)
	return x.buf
}

func (e TL_messageActionChatMigrateTo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatMigrateTo)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_messageActionChannelMigrateFrom) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChannelMigrateFrom)
	x.String(e.Title)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_messageActionPINMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPINMessage)
	return x.buf
}

func (e TL_messageActionHistoryClear) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionHistoryClear)
	return x.buf
}

func (e TL_messageActionGameScore) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGameScore)
	x.Long(e.GameID)
	x.Int(e.Score)
	return x.buf
}

func (e TL_messageActionPaymentSentMe) encode() []byte {
	var flags int32
	if e.RecurringInit {
		flags |= (1 << 2)
	}
	if e.RecurringUsed {
		flags |= (1 << 3)
	}
	if e.Info != nil {
		flags |= (1 << 0)
	}
	if e.ShippingOptionID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPaymentSentMe)
	x.Int(flags)
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	x.StringBytes(e.Payload)
	if e.Info != nil {
		x.Object(e.Info)
	}
	if e.ShippingOptionID != nil {
		x.String(*e.ShippingOptionID)
	}
	x.Object(e.Charge)
	return x.buf
}

func (e TL_messageActionPaymentSent) encode() []byte {
	var flags int32
	if e.RecurringInit {
		flags |= (1 << 2)
	}
	if e.RecurringUsed {
		flags |= (1 << 3)
	}
	if e.InvoiceSlug != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPaymentSent)
	x.Int(flags)
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	if e.InvoiceSlug != nil {
		x.String(*e.InvoiceSlug)
	}
	return x.buf
}

func (e TL_messageActionPhoneCall) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 2)
	}
	if e.Reason != nil {
		flags |= (1 << 0)
	}
	if e.Duration != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPhoneCall)
	x.Int(flags)
	x.Long(e.CallID)
	if e.Reason != nil {
		x.Object(e.Reason)
	}
	if e.Duration != nil {
		x.Int(*e.Duration)
	}
	return x.buf
}

func (e TL_messageActionScreenshotTaken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionScreenshotTaken)
	return x.buf
}

func (e TL_messageActionCustomAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionCustomAction)
	x.String(e.Message)
	return x.buf
}

func (e TL_messageActionBotAllowed) encode() []byte {
	var flags int32
	if e.AttachMenu {
		flags |= (1 << 1)
	}
	if e.FromRequest {
		flags |= (1 << 3)
	}
	if e.Domain != nil {
		flags |= (1 << 0)
	}
	if e.App != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionBotAllowed)
	x.Int(flags)
	if e.Domain != nil {
		x.String(*e.Domain)
	}
	if e.App != nil {
		x.Object(e.App)
	}
	return x.buf
}

func (e TL_messageActionSecureValuesSentMe) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSecureValuesSentMe)
	EncodeBuf_GenericVector(x, e.Values)
	x.Object(e.Credentials)
	return x.buf
}

func (e TL_messageActionSecureValuesSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSecureValuesSent)
	EncodeBuf_GenericVector(x, e.Types)
	return x.buf
}

func (e TL_messageActionContactSignUp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionContactSignUp)
	return x.buf
}

func (e TL_messageActionGeoProximityReached) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGeoProximityReached)
	x.Object(e.FromID)
	x.Object(e.ToID)
	x.Int(e.Distance)
	return x.buf
}

func (e TL_messageActionGroupCall) encode() []byte {
	var flags int32
	if e.Duration != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGroupCall)
	x.Int(flags)
	x.Object(e.Call)
	if e.Duration != nil {
		x.Int(*e.Duration)
	}
	return x.buf
}

func (e TL_messageActionInviteToGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionInviteToGroupCall)
	x.Object(e.Call)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_messageActionSetMessagesTTL) encode() []byte {
	var flags int32
	if e.AutoSettingFrom != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSetMessagesTTL)
	x.Int(flags)
	x.Int(e.Period)
	if e.AutoSettingFrom != nil {
		x.Long(*e.AutoSettingFrom)
	}
	return x.buf
}

func (e TL_messageActionGroupCallScheduled) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGroupCallScheduled)
	x.Object(e.Call)
	x.Int(e.ScheduleDate)
	return x.buf
}

func (e TL_messageActionSetChatTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSetChatTheme)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_messageActionChatJoinedByRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionChatJoinedByRequest)
	return x.buf
}

func (e TL_messageActionWebViewDataSentMe) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionWebViewDataSentMe)
	x.String(e.Text)
	x.String(e.Data)
	return x.buf
}

func (e TL_messageActionWebViewDataSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionWebViewDataSent)
	x.String(e.Text)
	return x.buf
}

func (e TL_messageActionGiftPremium) encode() []byte {
	var flags int32
	if e.CryptoCurrency != nil {
		flags |= (1 << 0)
	}
	if e.CryptoAmount != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGiftPremium)
	x.Int(flags)
	x.String(e.Currency)
	x.Long(e.Amount)
	x.Int(e.Months)
	if e.CryptoCurrency != nil {
		x.String(*e.CryptoCurrency)
	}
	if e.CryptoAmount != nil {
		x.Long(*e.CryptoAmount)
	}
	return x.buf
}

func (e TL_messageActionTopicCreate) encode() []byte {
	var flags int32
	if e.IconEmojiID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionTopicCreate)
	x.Int(flags)
	x.String(e.Title)
	x.Int(e.IconColor)
	if e.IconEmojiID != nil {
		x.Long(*e.IconEmojiID)
	}
	return x.buf
}

func (e TL_messageActionTopicEdit) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 0)
	}
	if e.IconEmojiID != nil {
		flags |= (1 << 1)
	}
	if e.Closed != nil {
		flags |= (1 << 2)
	}
	if e.Hidden != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionTopicEdit)
	x.Int(flags)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.IconEmojiID != nil {
		x.Long(*e.IconEmojiID)
	}
	if e.Closed != nil {
		x.Bool(*e.Closed)
	}
	if e.Hidden != nil {
		x.Bool(*e.Hidden)
	}
	return x.buf
}

func (e TL_messageActionSuggestProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSuggestProfilePhoto)
	x.Object(e.Photo)
	return x.buf
}

func (e TL_messageActionRequestedPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionRequestedPeer)
	x.Int(e.ButtonID)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_messageActionSetChatWallPaper) encode() []byte {
	var flags int32
	if e.Same {
		flags |= (1 << 0)
	}
	if e.ForBoth {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionSetChatWallPaper)
	x.Int(flags)
	x.Object(e.Wallpaper)
	return x.buf
}

func (e TL_messageActionGiftCode) encode() []byte {
	var flags int32
	if e.ViaGiveaway {
		flags |= (1 << 0)
	}
	if e.Unclaimed {
		flags |= (1 << 2)
	}
	if e.BoostPeer != nil {
		flags |= (1 << 1)
	}
	if e.Currency != nil {
		flags |= (1 << 2)
	}
	if e.Amount != nil {
		flags |= (1 << 2)
	}
	if e.CryptoCurrency != nil {
		flags |= (1 << 3)
	}
	if e.CryptoAmount != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGiftCode)
	x.Int(flags)
	if e.BoostPeer != nil {
		x.Object(e.BoostPeer)
	}
	x.Int(e.Months)
	x.String(e.Slug)
	if e.Currency != nil {
		x.String(*e.Currency)
	}
	if e.Amount != nil {
		x.Long(*e.Amount)
	}
	if e.CryptoCurrency != nil {
		x.String(*e.CryptoCurrency)
	}
	if e.CryptoAmount != nil {
		x.Long(*e.CryptoAmount)
	}
	return x.buf
}

func (e TL_messageActionGiveawayLaunch) encode() []byte {
	var flags int32
	if e.Stars != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGiveawayLaunch)
	x.Int(flags)
	if e.Stars != nil {
		x.Long(*e.Stars)
	}
	return x.buf
}

func (e TL_messageActionGiveawayResults) encode() []byte {
	var flags int32
	if e.Stars {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGiveawayResults)
	x.Int(flags)
	x.Int(e.WinnersCount)
	x.Int(e.UnclaimedCount)
	return x.buf
}

func (e TL_messageActionBoostApply) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionBoostApply)
	x.Int(e.Boosts)
	return x.buf
}

func (e TL_messageActionRequestedPeerSentMe) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionRequestedPeerSentMe)
	x.Int(e.ButtonID)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_messageActionPaymentRefunded) encode() []byte {
	var flags int32
	if e.Payload != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPaymentRefunded)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	if e.Payload != nil {
		x.StringBytes(e.Payload)
	}
	x.Object(e.Charge)
	return x.buf
}

func (e TL_messageActionGiftStars) encode() []byte {
	var flags int32
	if e.CryptoCurrency != nil {
		flags |= (1 << 0)
	}
	if e.CryptoAmount != nil {
		flags |= (1 << 0)
	}
	if e.TransactionID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionGiftStars)
	x.Int(flags)
	x.String(e.Currency)
	x.Long(e.Amount)
	x.Long(e.Stars)
	if e.CryptoCurrency != nil {
		x.String(*e.CryptoCurrency)
	}
	if e.CryptoAmount != nil {
		x.Long(*e.CryptoAmount)
	}
	if e.TransactionID != nil {
		x.String(*e.TransactionID)
	}
	return x.buf
}

func (e TL_messageActionPrizeStars) encode() []byte {
	var flags int32
	if e.Unclaimed {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageActionPrizeStars)
	x.Int(flags)
	x.Long(e.Stars)
	x.String(e.TransactionID)
	x.Object(e.BoostPeer)
	x.Int(e.GiveawayMsgID)
	return x.buf
}

func (e TL_dialog) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 2)
	}
	if e.UnreadMark {
		flags |= (1 << 3)
	}
	if e.ViewForumAsMessages {
		flags |= (1 << 6)
	}
	if e.PTS != nil {
		flags |= (1 << 0)
	}
	if e.Draft != nil {
		flags |= (1 << 1)
	}
	if e.FolderID != nil {
		flags |= (1 << 4)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialog)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.TopMessage)
	x.Int(e.ReadInboxMaxID)
	x.Int(e.ReadOutboxMaxID)
	x.Int(e.UnreadCount)
	x.Int(e.UnreadMentionsCount)
	x.Int(e.UnreadReactionsCount)
	x.Object(e.NotifySettings)
	if e.PTS != nil {
		x.Int(*e.PTS)
	}
	if e.Draft != nil {
		x.Object(e.Draft)
	}
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	return x.buf
}

func (e TL_dialogFolder) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFolder)
	x.Int(flags)
	x.Object(e.Folder)
	x.Object(e.Peer)
	x.Int(e.TopMessage)
	x.Int(e.UnreadMutedPeersCount)
	x.Int(e.UnreadUnmutedPeersCount)
	x.Int(e.UnreadMutedMessagesCount)
	x.Int(e.UnreadUnmutedMessagesCount)
	return x.buf
}

func (e TL_photoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_photo) encode() []byte {
	var flags int32
	if e.HasStickers {
		flags |= (1 << 0)
	}
	if e.VideoSizes != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_photo)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.Int(e.Date)
	EncodeBuf_GenericVector(x, e.Sizes)
	if e.VideoSizes != nil {
		EncodeBuf_GenericVector(x, e.VideoSizes)
	}
	x.Int(e.DCID)
	return x.buf
}

func (e TL_photoSizeEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoSizeEmpty)
	x.String(e.Type)
	return x.buf
}

func (e TL_photoSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoSize)
	x.String(e.Type)
	x.Int(e.W)
	x.Int(e.H)
	x.Int(e.Size)
	return x.buf
}

func (e TL_photoCachedSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoCachedSize)
	x.String(e.Type)
	x.Int(e.W)
	x.Int(e.H)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_photoStrippedSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoStrippedSize)
	x.String(e.Type)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_photoSizeProgressive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoSizeProgressive)
	x.String(e.Type)
	x.Int(e.W)
	x.Int(e.H)
	x.VectorInt(e.Sizes)
	return x.buf
}

func (e TL_photoPathSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photoPathSize)
	x.String(e.Type)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_geoPointEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_geoPointEmpty)
	return x.buf
}

func (e TL_geoPoint) encode() []byte {
	var flags int32
	if e.AccuracyRadius != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_geoPoint)
	x.Int(flags)
	x.Double(e.Long)
	x.Double(e.Lat)
	x.Long(e.AccessHash)
	if e.AccuracyRadius != nil {
		x.Int(*e.AccuracyRadius)
	}
	return x.buf
}

func (e TL_auth_sentCode) encode() []byte {
	var flags int32
	if e.NextType != nil {
		flags |= (1 << 1)
	}
	if e.Timeout != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCode)
	x.Int(flags)
	x.Object(e.Type)
	x.String(e.PhoneCodeHash)
	if e.NextType != nil {
		x.Object(e.NextType)
	}
	if e.Timeout != nil {
		x.Int(*e.Timeout)
	}
	return x.buf
}

func (e TL_auth_sentCodeSuccess) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeSuccess)
	x.Object(e.Authorization)
	return x.buf
}

func (e TL_auth_authorization) encode() []byte {
	var flags int32
	if e.SetupPasswordRequired {
		flags |= (1 << 1)
	}
	if e.OtherwiseReloginDays != nil {
		flags |= (1 << 1)
	}
	if e.TmpSessions != nil {
		flags |= (1 << 0)
	}
	if e.FutureAuthToken != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_authorization)
	x.Int(flags)
	if e.OtherwiseReloginDays != nil {
		x.Int(*e.OtherwiseReloginDays)
	}
	if e.TmpSessions != nil {
		x.Int(*e.TmpSessions)
	}
	if e.FutureAuthToken != nil {
		x.StringBytes(e.FutureAuthToken)
	}
	x.Object(e.User)
	return x.buf
}

func (e TL_auth_authorizationSignUpRequired) encode() []byte {
	var flags int32
	if e.TermsOfService != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_authorizationSignUpRequired)
	x.Int(flags)
	if e.TermsOfService != nil {
		x.Object(e.TermsOfService)
	}
	return x.buf
}

func (e TL_auth_exportedAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_exportedAuthorization)
	x.Long(e.ID)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_inputNotifyPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_inputNotifyUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyUsers)
	return x.buf
}

func (e TL_inputNotifyChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyChats)
	return x.buf
}

func (e TL_inputNotifyBroadcasts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyBroadcasts)
	return x.buf
}

func (e TL_inputNotifyForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputNotifyForumTopic)
	x.Object(e.Peer)
	x.Int(e.TopMsgID)
	return x.buf
}

func (e TL_inputPeerNotifySettings) encode() []byte {
	var flags int32
	if e.ShowPreviews != nil {
		flags |= (1 << 0)
	}
	if e.Silent != nil {
		flags |= (1 << 1)
	}
	if e.MuteUntil != nil {
		flags |= (1 << 2)
	}
	if e.Sound != nil {
		flags |= (1 << 3)
	}
	if e.StoriesMuted != nil {
		flags |= (1 << 6)
	}
	if e.StoriesHideSender != nil {
		flags |= (1 << 7)
	}
	if e.StoriesSound != nil {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPeerNotifySettings)
	x.Int(flags)
	if e.ShowPreviews != nil {
		x.Bool(*e.ShowPreviews)
	}
	if e.Silent != nil {
		x.Bool(*e.Silent)
	}
	if e.MuteUntil != nil {
		x.Int(*e.MuteUntil)
	}
	if e.Sound != nil {
		x.Object(e.Sound)
	}
	if e.StoriesMuted != nil {
		x.Bool(*e.StoriesMuted)
	}
	if e.StoriesHideSender != nil {
		x.Bool(*e.StoriesHideSender)
	}
	if e.StoriesSound != nil {
		x.Object(e.StoriesSound)
	}
	return x.buf
}

func (e TL_peerNotifySettings) encode() []byte {
	var flags int32
	if e.ShowPreviews != nil {
		flags |= (1 << 0)
	}
	if e.Silent != nil {
		flags |= (1 << 1)
	}
	if e.MuteUntil != nil {
		flags |= (1 << 2)
	}
	if e.IOSSound != nil {
		flags |= (1 << 3)
	}
	if e.AndroidSound != nil {
		flags |= (1 << 4)
	}
	if e.OtherSound != nil {
		flags |= (1 << 5)
	}
	if e.StoriesMuted != nil {
		flags |= (1 << 6)
	}
	if e.StoriesHideSender != nil {
		flags |= (1 << 7)
	}
	if e.StoriesIOSSound != nil {
		flags |= (1 << 8)
	}
	if e.StoriesAndroidSound != nil {
		flags |= (1 << 9)
	}
	if e.StoriesOtherSound != nil {
		flags |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerNotifySettings)
	x.Int(flags)
	if e.ShowPreviews != nil {
		x.Bool(*e.ShowPreviews)
	}
	if e.Silent != nil {
		x.Bool(*e.Silent)
	}
	if e.MuteUntil != nil {
		x.Int(*e.MuteUntil)
	}
	if e.IOSSound != nil {
		x.Object(e.IOSSound)
	}
	if e.AndroidSound != nil {
		x.Object(e.AndroidSound)
	}
	if e.OtherSound != nil {
		x.Object(e.OtherSound)
	}
	if e.StoriesMuted != nil {
		x.Bool(*e.StoriesMuted)
	}
	if e.StoriesHideSender != nil {
		x.Bool(*e.StoriesHideSender)
	}
	if e.StoriesIOSSound != nil {
		x.Object(e.StoriesIOSSound)
	}
	if e.StoriesAndroidSound != nil {
		x.Object(e.StoriesAndroidSound)
	}
	if e.StoriesOtherSound != nil {
		x.Object(e.StoriesOtherSound)
	}
	return x.buf
}

func (e TL_peerSettings) encode() []byte {
	var flags int32
	if e.ReportSpam {
		flags |= (1 << 0)
	}
	if e.AddContact {
		flags |= (1 << 1)
	}
	if e.BlockContact {
		flags |= (1 << 2)
	}
	if e.ShareContact {
		flags |= (1 << 3)
	}
	if e.NeedContactsException {
		flags |= (1 << 4)
	}
	if e.ReportGeo {
		flags |= (1 << 5)
	}
	if e.Autoarchived {
		flags |= (1 << 7)
	}
	if e.InviteMembers {
		flags |= (1 << 8)
	}
	if e.RequestChatBroadcast {
		flags |= (1 << 10)
	}
	if e.BusinessBotPaused {
		flags |= (1 << 11)
	}
	if e.BusinessBotCanReply {
		flags |= (1 << 12)
	}
	if e.GeoDistance != nil {
		flags |= (1 << 6)
	}
	if e.RequestChatTitle != nil {
		flags |= (1 << 9)
	}
	if e.RequestChatDate != nil {
		flags |= (1 << 9)
	}
	if e.BusinessBotID != nil {
		flags |= (1 << 13)
	}
	if e.BusinessBotManageURL != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerSettings)
	x.Int(flags)
	if e.GeoDistance != nil {
		x.Int(*e.GeoDistance)
	}
	if e.RequestChatTitle != nil {
		x.String(*e.RequestChatTitle)
	}
	if e.RequestChatDate != nil {
		x.Int(*e.RequestChatDate)
	}
	if e.BusinessBotID != nil {
		x.Long(*e.BusinessBotID)
	}
	if e.BusinessBotManageURL != nil {
		x.String(*e.BusinessBotManageURL)
	}
	return x.buf
}

func (e TL_wallPaper) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.Default {
		flags |= (1 << 1)
	}
	if e.Pattern {
		flags |= (1 << 3)
	}
	if e.Dark {
		flags |= (1 << 4)
	}
	if e.Settings != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_wallPaper)
	x.Long(e.ID)
	x.Int(flags)
	x.Long(e.AccessHash)
	x.String(e.Slug)
	x.Object(e.Document)
	if e.Settings != nil {
		x.Object(e.Settings)
	}
	return x.buf
}

func (e TL_wallPaperNoFile) encode() []byte {
	var flags int32
	if e.Default {
		flags |= (1 << 1)
	}
	if e.Dark {
		flags |= (1 << 4)
	}
	if e.Settings != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_wallPaperNoFile)
	x.Long(e.ID)
	x.Int(flags)
	if e.Settings != nil {
		x.Object(e.Settings)
	}
	return x.buf
}

func (e TL_inputReportReasonSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonSpam)
	return x.buf
}

func (e TL_inputReportReasonViolence) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonViolence)
	return x.buf
}

func (e TL_inputReportReasonPornography) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonPornography)
	return x.buf
}

func (e TL_inputReportReasonChildAbuse) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonChildAbuse)
	return x.buf
}

func (e TL_inputReportReasonOther) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonOther)
	return x.buf
}

func (e TL_inputReportReasonCopyright) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonCopyright)
	return x.buf
}

func (e TL_inputReportReasonGeoIrrelevant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonGeoIrrelevant)
	return x.buf
}

func (e TL_inputReportReasonFake) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonFake)
	return x.buf
}

func (e TL_inputReportReasonIllegalDrugs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonIllegalDrugs)
	return x.buf
}

func (e TL_inputReportReasonPersonalDetails) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReportReasonPersonalDetails)
	return x.buf
}

func (e TL_userFull) encode() []byte {
	var flags, flags2 int32
	if e.Blocked {
		flags |= (1 << 0)
	}
	if e.PhoneCallsAvailable {
		flags |= (1 << 4)
	}
	if e.PhoneCallsPrivate {
		flags |= (1 << 5)
	}
	if e.CanPINMessage {
		flags |= (1 << 7)
	}
	if e.HasScheduled {
		flags |= (1 << 12)
	}
	if e.VideoCallsAvailable {
		flags |= (1 << 13)
	}
	if e.VoiceMessagesForbidden {
		flags |= (1 << 20)
	}
	if e.TranslationsDisabled {
		flags |= (1 << 23)
	}
	if e.StoriesPinnedAvailable {
		flags |= (1 << 26)
	}
	if e.BlockedMyStoriesFrom {
		flags |= (1 << 27)
	}
	if e.WallpaperOverridden {
		flags |= (1 << 28)
	}
	if e.ContactRequirePremium {
		flags |= (1 << 29)
	}
	if e.ReadDatesPrivate {
		flags |= (1 << 30)
	}
	if e.SponsoredEnabled {
		flags2 |= (1 << 7)
	}
	if e.About != nil {
		flags |= (1 << 1)
	}
	if e.PersonalPhoto != nil {
		flags |= (1 << 21)
	}
	if e.ProfilePhoto != nil {
		flags |= (1 << 2)
	}
	if e.FallbackPhoto != nil {
		flags |= (1 << 22)
	}
	if e.BotInfo != nil {
		flags |= (1 << 3)
	}
	if e.PinnedMsgID != nil {
		flags |= (1 << 6)
	}
	if e.FolderID != nil {
		flags |= (1 << 11)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 14)
	}
	if e.ThemeEmoticon != nil {
		flags |= (1 << 15)
	}
	if e.PrivateForwardName != nil {
		flags |= (1 << 16)
	}
	if e.BotGroupAdminRights != nil {
		flags |= (1 << 17)
	}
	if e.BotBroadcastAdminRights != nil {
		flags |= (1 << 18)
	}
	if e.PremiumGifts != nil {
		flags |= (1 << 19)
	}
	if e.Wallpaper != nil {
		flags |= (1 << 24)
	}
	if e.Stories != nil {
		flags |= (1 << 25)
	}
	if e.BusinessWorkHours != nil {
		flags2 |= (1 << 0)
	}
	if e.BusinessLocation != nil {
		flags2 |= (1 << 1)
	}
	if e.BusinessGreetingMessage != nil {
		flags2 |= (1 << 2)
	}
	if e.BusinessAwayMessage != nil {
		flags2 |= (1 << 3)
	}
	if e.BusinessIntro != nil {
		flags2 |= (1 << 4)
	}
	if e.Birthday != nil {
		flags2 |= (1 << 5)
	}
	if e.PersonalChannelID != nil {
		flags2 |= (1 << 6)
	}
	if e.PersonalChannelMessage != nil {
		flags2 |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_userFull)
	x.Int(flags)
	x.Int(flags2)
	x.Long(e.ID)
	if e.About != nil {
		x.String(*e.About)
	}
	x.Object(e.Settings)
	if e.PersonalPhoto != nil {
		x.Object(e.PersonalPhoto)
	}
	if e.ProfilePhoto != nil {
		x.Object(e.ProfilePhoto)
	}
	if e.FallbackPhoto != nil {
		x.Object(e.FallbackPhoto)
	}
	x.Object(e.NotifySettings)
	if e.BotInfo != nil {
		x.Object(e.BotInfo)
	}
	if e.PinnedMsgID != nil {
		x.Int(*e.PinnedMsgID)
	}
	x.Int(e.CommonChatsCount)
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	if e.ThemeEmoticon != nil {
		x.String(*e.ThemeEmoticon)
	}
	if e.PrivateForwardName != nil {
		x.String(*e.PrivateForwardName)
	}
	if e.BotGroupAdminRights != nil {
		x.Object(e.BotGroupAdminRights)
	}
	if e.BotBroadcastAdminRights != nil {
		x.Object(e.BotBroadcastAdminRights)
	}
	if e.PremiumGifts != nil {
		EncodeBuf_GenericVector(x, e.PremiumGifts)
	}
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	if e.Stories != nil {
		x.Object(e.Stories)
	}
	if e.BusinessWorkHours != nil {
		x.Object(e.BusinessWorkHours)
	}
	if e.BusinessLocation != nil {
		x.Object(e.BusinessLocation)
	}
	if e.BusinessGreetingMessage != nil {
		x.Object(e.BusinessGreetingMessage)
	}
	if e.BusinessAwayMessage != nil {
		x.Object(e.BusinessAwayMessage)
	}
	if e.BusinessIntro != nil {
		x.Object(e.BusinessIntro)
	}
	if e.Birthday != nil {
		x.Object(e.Birthday)
	}
	if e.PersonalChannelID != nil {
		x.Long(*e.PersonalChannelID)
	}
	if e.PersonalChannelMessage != nil {
		x.Int(*e.PersonalChannelMessage)
	}
	return x.buf
}

func (e TL_contact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contact)
	x.Long(e.UserID)
	x.Bool(e.Mutual)
	return x.buf
}

func (e TL_importedContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_importedContact)
	x.Long(e.UserID)
	x.Long(e.ClientID)
	return x.buf
}

func (e TL_contactStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contactStatus)
	x.Long(e.UserID)
	x.Object(e.Status)
	return x.buf
}

func (e TL_contacts_contactsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_contactsNotModified)
	return x.buf
}

func (e TL_contacts_contacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_contacts)
	EncodeBuf_GenericVector(x, e.Contacts)
	x.Int(e.SavedCount)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_contacts_importedContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_importedContacts)
	EncodeBuf_GenericVector(x, e.Imported)
	EncodeBuf_GenericVector(x, e.PopularInvites)
	x.VectorLong(e.RetryContacts)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_contacts_blocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_blocked)
	EncodeBuf_GenericVector(x, e.Blocked)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_contacts_blockedSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_blockedSlice)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Blocked)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_dialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dialogs)
	EncodeBuf_GenericVector(x, e.Dialogs)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_dialogsSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dialogsSlice)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Dialogs)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_dialogsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dialogsNotModified)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messages_messages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messages)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_messagesSlice) encode() []byte {
	var flags int32
	if e.Inexact {
		flags |= (1 << 1)
	}
	if e.NextRate != nil {
		flags |= (1 << 0)
	}
	if e.OffsetIDOffset != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messagesSlice)
	x.Int(flags)
	x.Int(e.Count)
	if e.NextRate != nil {
		x.Int(*e.NextRate)
	}
	if e.OffsetIDOffset != nil {
		x.Int(*e.OffsetIDOffset)
	}
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_channelMessages) encode() []byte {
	var flags int32
	if e.Inexact {
		flags |= (1 << 1)
	}
	if e.OffsetIDOffset != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_channelMessages)
	x.Int(flags)
	x.Int(e.PTS)
	x.Int(e.Count)
	if e.OffsetIDOffset != nil {
		x.Int(*e.OffsetIDOffset)
	}
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Topics)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_messagesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messagesNotModified)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messages_chats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chats)
	EncodeBuf_GenericVector(x, e.Chats)
	return x.buf
}

func (e TL_messages_chatsSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chatsSlice)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Chats)
	return x.buf
}

func (e TL_messages_chatFull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chatFull)
	x.Object(e.FullChat)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_affectedHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_affectedHistory)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	x.Int(e.Offset)
	return x.buf
}

func (e TL_inputMessagesFilterEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterEmpty)
	return x.buf
}

func (e TL_inputMessagesFilterPhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterPhotos)
	return x.buf
}

func (e TL_inputMessagesFilterVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterVideo)
	return x.buf
}

func (e TL_inputMessagesFilterPhotoVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterPhotoVideo)
	return x.buf
}

func (e TL_inputMessagesFilterDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterDocument)
	return x.buf
}

func (e TL_inputMessagesFilterURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterURL)
	return x.buf
}

func (e TL_inputMessagesFilterGIF) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterGIF)
	return x.buf
}

func (e TL_inputMessagesFilterVoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterVoice)
	return x.buf
}

func (e TL_inputMessagesFilterMusic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterMusic)
	return x.buf
}

func (e TL_inputMessagesFilterChatPhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterChatPhotos)
	return x.buf
}

func (e TL_inputMessagesFilterPhoneCalls) encode() []byte {
	var flags int32
	if e.Missed {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterPhoneCalls)
	x.Int(flags)
	return x.buf
}

func (e TL_inputMessagesFilterRoundVoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterRoundVoice)
	return x.buf
}

func (e TL_inputMessagesFilterRoundVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterRoundVideo)
	return x.buf
}

func (e TL_inputMessagesFilterMyMentions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterMyMentions)
	return x.buf
}

func (e TL_inputMessagesFilterGeo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterGeo)
	return x.buf
}

func (e TL_inputMessagesFilterContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterContacts)
	return x.buf
}

func (e TL_inputMessagesFilterPinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagesFilterPinned)
	return x.buf
}

func (e TL_updateNewMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewMessage)
	x.Object(e.Message)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateMessageID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessageID)
	x.Int(e.ID)
	x.Long(e.RandomID)
	return x.buf
}

func (e TL_updateDeleteMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDeleteMessages)
	x.VectorInt(e.Messages)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateUserTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserTyping)
	x.Long(e.UserID)
	x.Object(e.Action)
	return x.buf
}

func (e TL_updateChatUserTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatUserTyping)
	x.Long(e.ChatID)
	x.Object(e.FromID)
	x.Object(e.Action)
	return x.buf
}

func (e TL_updateChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipants)
	x.Object(e.Participants)
	return x.buf
}

func (e TL_updateUserStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserStatus)
	x.Long(e.UserID)
	x.Object(e.Status)
	return x.buf
}

func (e TL_updateUserName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserName)
	x.Long(e.UserID)
	x.String(e.FirstName)
	x.String(e.LastName)
	EncodeBuf_GenericVector(x, e.Usernames)
	return x.buf
}

func (e TL_updateNewAuthorization) encode() []byte {
	var flags int32
	if e.Unconfirmed {
		flags |= (1 << 0)
	}
	if e.Date != nil {
		flags |= (1 << 0)
	}
	if e.Device != nil {
		flags |= (1 << 0)
	}
	if e.Location != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewAuthorization)
	x.Int(flags)
	x.Long(e.Hash)
	if e.Date != nil {
		x.Int(*e.Date)
	}
	if e.Device != nil {
		x.String(*e.Device)
	}
	if e.Location != nil {
		x.String(*e.Location)
	}
	return x.buf
}

func (e TL_updateNewEncryptedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewEncryptedMessage)
	x.Object(e.Message)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateEncryptedChatTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEncryptedChatTyping)
	x.Int(e.ChatID)
	return x.buf
}

func (e TL_updateEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEncryption)
	x.Object(e.Chat)
	x.Int(e.Date)
	return x.buf
}

func (e TL_updateEncryptedMessagesRead) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEncryptedMessagesRead)
	x.Int(e.ChatID)
	x.Int(e.MaxDate)
	x.Int(e.Date)
	return x.buf
}

func (e TL_updateChatParticipantAdd) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipantAdd)
	x.Long(e.ChatID)
	x.Long(e.UserID)
	x.Long(e.InviterID)
	x.Int(e.Date)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateChatParticipantDelete) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipantDelete)
	x.Long(e.ChatID)
	x.Long(e.UserID)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateDCOptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDCOptions)
	EncodeBuf_GenericVector(x, e.DCOptions)
	return x.buf
}

func (e TL_updateNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNotifySettings)
	x.Object(e.Peer)
	x.Object(e.NotifySettings)
	return x.buf
}

func (e TL_updateServiceNotification) encode() []byte {
	var flags int32
	if e.Popup {
		flags |= (1 << 0)
	}
	if e.InvertMedia {
		flags |= (1 << 2)
	}
	if e.InboxDate != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateServiceNotification)
	x.Int(flags)
	if e.InboxDate != nil {
		x.Int(*e.InboxDate)
	}
	x.String(e.Type)
	x.String(e.Message)
	x.Object(e.Media)
	EncodeBuf_GenericVector(x, e.Entities)
	return x.buf
}

func (e TL_updatePrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePrivacy)
	x.Object(e.Key)
	EncodeBuf_GenericVector(x, e.Rules)
	return x.buf
}

func (e TL_updateUserPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserPhone)
	x.Long(e.UserID)
	x.String(e.Phone)
	return x.buf
}

func (e TL_updateReadHistoryInbox) encode() []byte {
	var flags int32
	if e.FolderID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadHistoryInbox)
	x.Int(flags)
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	x.Object(e.Peer)
	x.Int(e.MaxID)
	x.Int(e.StillUnreadCount)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateReadHistoryOutbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadHistoryOutbox)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateWebPage)
	x.Object(e.Webpage)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateReadMessagesContents) encode() []byte {
	var flags int32
	if e.Date != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadMessagesContents)
	x.Int(flags)
	x.VectorInt(e.Messages)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	if e.Date != nil {
		x.Int(*e.Date)
	}
	return x.buf
}

func (e TL_updateChannelTooLong) encode() []byte {
	var flags int32
	if e.PTS != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelTooLong)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.PTS != nil {
		x.Int(*e.PTS)
	}
	return x.buf
}

func (e TL_updateChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannel)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_updateNewChannelMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewChannelMessage)
	x.Object(e.Message)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateReadChannelInbox) encode() []byte {
	var flags int32
	if e.FolderID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadChannelInbox)
	x.Int(flags)
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	x.Long(e.ChannelID)
	x.Int(e.MaxID)
	x.Int(e.StillUnreadCount)
	x.Int(e.PTS)
	return x.buf
}

func (e TL_updateDeleteChannelMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDeleteChannelMessages)
	x.Long(e.ChannelID)
	x.VectorInt(e.Messages)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateChannelMessageViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelMessageViews)
	x.Long(e.ChannelID)
	x.Int(e.ID)
	x.Int(e.Views)
	return x.buf
}

func (e TL_updateChatParticipantAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipantAdmin)
	x.Long(e.ChatID)
	x.Long(e.UserID)
	x.Bool(e.IsAdmin)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateNewStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewStickerSet)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_updateStickerSetsOrder) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStickerSetsOrder)
	x.Int(flags)
	x.VectorLong(e.Order)
	return x.buf
}

func (e TL_updateStickerSets) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStickerSets)
	x.Int(flags)
	return x.buf
}

func (e TL_updateSavedGIFs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateSavedGIFs)
	return x.buf
}

func (e TL_updateBotInlineQuery) encode() []byte {
	var flags int32
	if e.Geo != nil {
		flags |= (1 << 0)
	}
	if e.PeerType != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotInlineQuery)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.String(e.Query)
	if e.Geo != nil {
		x.Object(e.Geo)
	}
	if e.PeerType != nil {
		x.Object(e.PeerType)
	}
	x.String(e.Offset)
	return x.buf
}

func (e TL_updateBotInlineSend) encode() []byte {
	var flags int32
	if e.Geo != nil {
		flags |= (1 << 0)
	}
	if e.MsgID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotInlineSend)
	x.Int(flags)
	x.Long(e.UserID)
	x.String(e.Query)
	if e.Geo != nil {
		x.Object(e.Geo)
	}
	x.String(e.ID)
	if e.MsgID != nil {
		x.Object(e.MsgID)
	}
	return x.buf
}

func (e TL_updateEditChannelMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEditChannelMessage)
	x.Object(e.Message)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateBotCallbackQuery) encode() []byte {
	var flags int32
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.GameShortName != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotCallbackQuery)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.ChatInstance)
	if e.Data != nil {
		x.StringBytes(e.Data)
	}
	if e.GameShortName != nil {
		x.String(*e.GameShortName)
	}
	return x.buf
}

func (e TL_updateEditMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateEditMessage)
	x.Object(e.Message)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateInlineBotCallbackQuery) encode() []byte {
	var flags int32
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.GameShortName != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateInlineBotCallbackQuery)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.Object(e.MsgID)
	x.Long(e.ChatInstance)
	if e.Data != nil {
		x.StringBytes(e.Data)
	}
	if e.GameShortName != nil {
		x.String(*e.GameShortName)
	}
	return x.buf
}

func (e TL_updateReadChannelOutbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadChannelOutbox)
	x.Long(e.ChannelID)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_updateDraftMessage) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDraftMessage)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	x.Object(e.Draft)
	return x.buf
}

func (e TL_updateReadFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadFeaturedStickers)
	return x.buf
}

func (e TL_updateRecentStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateRecentStickers)
	return x.buf
}

func (e TL_updateConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateConfig)
	return x.buf
}

func (e TL_updatePTSChanged) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePTSChanged)
	return x.buf
}

func (e TL_updateChannelWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelWebPage)
	x.Long(e.ChannelID)
	x.Object(e.Webpage)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateDialogPinned) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	if e.FolderID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogPinned)
	x.Int(flags)
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	x.Object(e.Peer)
	return x.buf
}

func (e TL_updatePinnedDialogs) encode() []byte {
	var flags int32
	if e.FolderID != nil {
		flags |= (1 << 1)
	}
	if e.Order != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePinnedDialogs)
	x.Int(flags)
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	if e.Order != nil {
		EncodeBuf_GenericVector(x, e.Order)
	}
	return x.buf
}

func (e TL_updateBotWebhookJSON) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotWebhookJSON)
	x.Object(e.Data)
	return x.buf
}

func (e TL_updateBotWebhookJSONQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotWebhookJSONQuery)
	x.Long(e.QueryID)
	x.Object(e.Data)
	x.Int(e.Timeout)
	return x.buf
}

func (e TL_updateBotShippingQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotShippingQuery)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.StringBytes(e.Payload)
	x.Object(e.ShippingAddress)
	return x.buf
}

func (e TL_updateBotPrecheckoutQuery) encode() []byte {
	var flags int32
	if e.Info != nil {
		flags |= (1 << 0)
	}
	if e.ShippingOptionID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotPrecheckoutQuery)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.StringBytes(e.Payload)
	if e.Info != nil {
		x.Object(e.Info)
	}
	if e.ShippingOptionID != nil {
		x.String(*e.ShippingOptionID)
	}
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	return x.buf
}

func (e TL_updatePhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePhoneCall)
	x.Object(e.PhoneCall)
	return x.buf
}

func (e TL_updateLangPackTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateLangPackTooLong)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_updateLangPack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateLangPack)
	x.Object(e.Difference)
	return x.buf
}

func (e TL_updateFavedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateFavedStickers)
	return x.buf
}

func (e TL_updateChannelReadMessagesContents) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelReadMessagesContents)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	x.VectorInt(e.Messages)
	return x.buf
}

func (e TL_updateContactsReset) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateContactsReset)
	return x.buf
}

func (e TL_updateChannelAvailableMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelAvailableMessages)
	x.Long(e.ChannelID)
	x.Int(e.AvailableMinID)
	return x.buf
}

func (e TL_updateDialogUnreadMark) encode() []byte {
	var flags int32
	if e.Unread {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogUnreadMark)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_updateMessagePoll) encode() []byte {
	var flags int32
	if e.Poll != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessagePoll)
	x.Int(flags)
	x.Long(e.PollID)
	if e.Poll != nil {
		x.Object(e.Poll)
	}
	x.Object(e.Results)
	return x.buf
}

func (e TL_updateChatDefaultBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatDefaultBannedRights)
	x.Object(e.Peer)
	x.Object(e.DefaultBannedRights)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateFolderPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateFolderPeers)
	EncodeBuf_GenericVector(x, e.FolderPeers)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updatePeerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePeerSettings)
	x.Object(e.Peer)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_updatePeerLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePeerLocated)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_updateNewScheduledMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewScheduledMessage)
	x.Object(e.Message)
	return x.buf
}

func (e TL_updateDeleteScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDeleteScheduledMessages)
	x.Object(e.Peer)
	x.VectorInt(e.Messages)
	return x.buf
}

func (e TL_updateTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateTheme)
	x.Object(e.Theme)
	return x.buf
}

func (e TL_updateGeoLiveViewed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateGeoLiveViewed)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_updateLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateLoginToken)
	return x.buf
}

func (e TL_updateMessagePollVote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessagePollVote)
	x.Long(e.PollID)
	x.Object(e.Peer)
	x.VectorBytes(e.Options)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateDialogFilter) encode() []byte {
	var flags int32
	if e.Filter != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogFilter)
	x.Int(flags)
	x.Int(e.ID)
	if e.Filter != nil {
		x.Object(e.Filter)
	}
	return x.buf
}

func (e TL_updateDialogFilterOrder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogFilterOrder)
	x.VectorInt(e.Order)
	return x.buf
}

func (e TL_updateDialogFilters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDialogFilters)
	return x.buf
}

func (e TL_updatePhoneCallSignalingData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePhoneCallSignalingData)
	x.Long(e.PhoneCallID)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_updateChannelMessageForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelMessageForwards)
	x.Long(e.ChannelID)
	x.Int(e.ID)
	x.Int(e.Forwards)
	return x.buf
}

func (e TL_updateReadChannelDiscussionInbox) encode() []byte {
	var flags int32
	if e.BroadcastID != nil {
		flags |= (1 << 0)
	}
	if e.BroadcastPost != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadChannelDiscussionInbox)
	x.Int(flags)
	x.Long(e.ChannelID)
	x.Int(e.TopMsgID)
	x.Int(e.ReadMaxID)
	if e.BroadcastID != nil {
		x.Long(*e.BroadcastID)
	}
	if e.BroadcastPost != nil {
		x.Int(*e.BroadcastPost)
	}
	return x.buf
}

func (e TL_updateReadChannelDiscussionOutbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadChannelDiscussionOutbox)
	x.Long(e.ChannelID)
	x.Int(e.TopMsgID)
	x.Int(e.ReadMaxID)
	return x.buf
}

func (e TL_updatePeerBlocked) encode() []byte {
	var flags int32
	if e.Blocked {
		flags |= (1 << 0)
	}
	if e.BlockedMyStoriesFrom {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePeerBlocked)
	x.Int(flags)
	x.Object(e.PeerID)
	return x.buf
}

func (e TL_updateChannelUserTyping) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelUserTyping)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	x.Object(e.FromID)
	x.Object(e.Action)
	return x.buf
}

func (e TL_updatePinnedMessages) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePinnedMessages)
	x.Int(flags)
	x.Object(e.Peer)
	x.VectorInt(e.Messages)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updatePinnedChannelMessages) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePinnedChannelMessages)
	x.Int(flags)
	x.Long(e.ChannelID)
	x.VectorInt(e.Messages)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_updateChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_updateGroupCallParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateGroupCallParticipants)
	x.Object(e.Call)
	EncodeBuf_GenericVector(x, e.Participants)
	x.Int(e.Version)
	return x.buf
}

func (e TL_updateGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateGroupCall)
	x.Long(e.ChatID)
	x.Object(e.Call)
	return x.buf
}

func (e TL_updatePeerHistoryTTL) encode() []byte {
	var flags int32
	if e.TTLPeriod != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePeerHistoryTTL)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	return x.buf
}

func (e TL_updateChatParticipant) encode() []byte {
	var flags int32
	if e.PrevParticipant != nil {
		flags |= (1 << 0)
	}
	if e.NewParticipant != nil {
		flags |= (1 << 1)
	}
	if e.Invite != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChatParticipant)
	x.Int(flags)
	x.Long(e.ChatID)
	x.Int(e.Date)
	x.Long(e.ActorID)
	x.Long(e.UserID)
	if e.PrevParticipant != nil {
		x.Object(e.PrevParticipant)
	}
	if e.NewParticipant != nil {
		x.Object(e.NewParticipant)
	}
	if e.Invite != nil {
		x.Object(e.Invite)
	}
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateChannelParticipant) encode() []byte {
	var flags int32
	if e.ViaChatlist {
		flags |= (1 << 3)
	}
	if e.PrevParticipant != nil {
		flags |= (1 << 0)
	}
	if e.NewParticipant != nil {
		flags |= (1 << 1)
	}
	if e.Invite != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelParticipant)
	x.Int(flags)
	x.Long(e.ChannelID)
	x.Int(e.Date)
	x.Long(e.ActorID)
	x.Long(e.UserID)
	if e.PrevParticipant != nil {
		x.Object(e.PrevParticipant)
	}
	if e.NewParticipant != nil {
		x.Object(e.NewParticipant)
	}
	if e.Invite != nil {
		x.Object(e.Invite)
	}
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateBotStopped) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotStopped)
	x.Long(e.UserID)
	x.Int(e.Date)
	x.Bool(e.Stopped)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateGroupCallConnection) encode() []byte {
	var flags int32
	if e.Presentation {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateGroupCallConnection)
	x.Int(flags)
	x.Object(e.Params)
	return x.buf
}

func (e TL_updateBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotCommands)
	x.Object(e.Peer)
	x.Long(e.BotID)
	EncodeBuf_GenericVector(x, e.Commands)
	return x.buf
}

func (e TL_updatePendingJoinRequests) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePendingJoinRequests)
	x.Object(e.Peer)
	x.Int(e.RequestsPending)
	x.VectorLong(e.RecentRequesters)
	return x.buf
}

func (e TL_updateBotChatInviteRequester) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotChatInviteRequester)
	x.Object(e.Peer)
	x.Int(e.Date)
	x.Long(e.UserID)
	x.String(e.About)
	x.Object(e.Invite)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateMessageReactions) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessageReactions)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	x.Object(e.Reactions)
	return x.buf
}

func (e TL_updateAttachMenuBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateAttachMenuBots)
	return x.buf
}

func (e TL_updateWebViewResultSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateWebViewResultSent)
	x.Long(e.QueryID)
	return x.buf
}

func (e TL_updateBotMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotMenuButton)
	x.Long(e.BotID)
	x.Object(e.Button)
	return x.buf
}

func (e TL_updateSavedRingtones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateSavedRingtones)
	return x.buf
}

func (e TL_updateTranscribedAudio) encode() []byte {
	var flags int32
	if e.Pending {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateTranscribedAudio)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.TranscriptionID)
	x.String(e.Text)
	return x.buf
}

func (e TL_updateReadFeaturedEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadFeaturedEmojiStickers)
	return x.buf
}

func (e TL_updateUserEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUserEmojiStatus)
	x.Long(e.UserID)
	x.Object(e.EmojiStatus)
	return x.buf
}

func (e TL_updateRecentEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateRecentEmojiStatuses)
	return x.buf
}

func (e TL_updateRecentReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateRecentReactions)
	return x.buf
}

func (e TL_updateMoveStickerSetToTop) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMoveStickerSetToTop)
	x.Int(flags)
	x.Long(e.Stickerset)
	return x.buf
}

func (e TL_updateMessageExtendedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateMessageExtendedMedia)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	EncodeBuf_GenericVector(x, e.ExtendedMedia)
	return x.buf
}

func (e TL_updateChannelPinnedTopic) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelPinnedTopic)
	x.Int(flags)
	x.Long(e.ChannelID)
	x.Int(e.TopicID)
	return x.buf
}

func (e TL_updateChannelPinnedTopics) encode() []byte {
	var flags int32
	if e.Order != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelPinnedTopics)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.Order != nil {
		x.VectorInt(e.Order)
	}
	return x.buf
}

func (e TL_updateUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateUser)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_updateAutoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateAutoSaveSettings)
	return x.buf
}

func (e TL_updateStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStory)
	x.Object(e.Peer)
	x.Object(e.Story)
	return x.buf
}

func (e TL_updateReadStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateReadStories)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_updateStoryID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStoryID)
	x.Int(e.ID)
	x.Long(e.RandomID)
	return x.buf
}

func (e TL_updateStoriesStealthMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStoriesStealthMode)
	x.Object(e.StealthMode)
	return x.buf
}

func (e TL_updateSentStoryReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateSentStoryReaction)
	x.Object(e.Peer)
	x.Int(e.StoryID)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_updateBotChatBoost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotChatBoost)
	x.Object(e.Peer)
	x.Object(e.Boost)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateChannelViewForumAsMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateChannelViewForumAsMessages)
	x.Long(e.ChannelID)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_updatePeerWallpaper) encode() []byte {
	var flags int32
	if e.WallpaperOverridden {
		flags |= (1 << 1)
	}
	if e.Wallpaper != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePeerWallpaper)
	x.Int(flags)
	x.Object(e.Peer)
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	return x.buf
}

func (e TL_updateBotMessageReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotMessageReaction)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Int(e.Date)
	x.Object(e.Actor)
	EncodeBuf_GenericVector(x, e.OldReactions)
	EncodeBuf_GenericVector(x, e.NewReactions)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateBotMessageReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotMessageReactions)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Int(e.Date)
	EncodeBuf_GenericVector(x, e.Reactions)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateSavedDialogPinned) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateSavedDialogPinned)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_updatePinnedSavedDialogs) encode() []byte {
	var flags int32
	if e.Order != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePinnedSavedDialogs)
	x.Int(flags)
	if e.Order != nil {
		EncodeBuf_GenericVector(x, e.Order)
	}
	return x.buf
}

func (e TL_updateSavedReactionTags) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateSavedReactionTags)
	return x.buf
}

func (e TL_updateSMSJob) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateSMSJob)
	x.String(e.JobID)
	return x.buf
}

func (e TL_updateQuickReplies) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateQuickReplies)
	EncodeBuf_GenericVector(x, e.QuickReplies)
	return x.buf
}

func (e TL_updateNewQuickReply) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewQuickReply)
	x.Object(e.QuickReply)
	return x.buf
}

func (e TL_updateDeleteQuickReply) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDeleteQuickReply)
	x.Int(e.ShortcutID)
	return x.buf
}

func (e TL_updateQuickReplyMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateQuickReplyMessage)
	x.Object(e.Message)
	return x.buf
}

func (e TL_updateDeleteQuickReplyMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateDeleteQuickReplyMessages)
	x.Int(e.ShortcutID)
	x.VectorInt(e.Messages)
	return x.buf
}

func (e TL_updateBotBusinessConnect) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotBusinessConnect)
	x.Object(e.Connection)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateBotNewBusinessMessage) encode() []byte {
	var flags int32
	if e.ReplyToMessage != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotNewBusinessMessage)
	x.Int(flags)
	x.String(e.ConnectionID)
	x.Object(e.Message)
	if e.ReplyToMessage != nil {
		x.Object(e.ReplyToMessage)
	}
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateBotEditBusinessMessage) encode() []byte {
	var flags int32
	if e.ReplyToMessage != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotEditBusinessMessage)
	x.Int(flags)
	x.String(e.ConnectionID)
	x.Object(e.Message)
	if e.ReplyToMessage != nil {
		x.Object(e.ReplyToMessage)
	}
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateBotDeleteBusinessMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotDeleteBusinessMessage)
	x.String(e.ConnectionID)
	x.Object(e.Peer)
	x.VectorInt(e.Messages)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updateNewStoryReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateNewStoryReaction)
	x.Int(e.StoryID)
	x.Object(e.Peer)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_updateBroadcastRevenueTransactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBroadcastRevenueTransactions)
	x.Object(e.Peer)
	x.Object(e.Balances)
	return x.buf
}

func (e TL_updateStarsBalance) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStarsBalance)
	x.Long(e.Balance)
	return x.buf
}

func (e TL_updateBusinessBotCallbackQuery) encode() []byte {
	var flags int32
	if e.ReplyToMessage != nil {
		flags |= (1 << 2)
	}
	if e.Data != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBusinessBotCallbackQuery)
	x.Int(flags)
	x.Long(e.QueryID)
	x.Long(e.UserID)
	x.String(e.ConnectionID)
	x.Object(e.Message)
	if e.ReplyToMessage != nil {
		x.Object(e.ReplyToMessage)
	}
	x.Long(e.ChatInstance)
	if e.Data != nil {
		x.StringBytes(e.Data)
	}
	return x.buf
}

func (e TL_updateStarsRevenueStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateStarsRevenueStatus)
	x.Object(e.Peer)
	x.Object(e.Status)
	return x.buf
}

func (e TL_updateBotPurchasedPaidMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateBotPurchasedPaidMedia)
	x.Long(e.UserID)
	x.String(e.Payload)
	x.Int(e.QTS)
	return x.buf
}

func (e TL_updatePaidReactionPrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatePaidReactionPrivacy)
	x.Bool(e.Private)
	return x.buf
}

func (e TL_updates_state) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_state)
	x.Int(e.PTS)
	x.Int(e.QTS)
	x.Int(e.Date)
	x.Int(e.Seq)
	x.Int(e.UnreadCount)
	return x.buf
}

func (e TL_updates_differenceEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_differenceEmpty)
	x.Int(e.Date)
	x.Int(e.Seq)
	return x.buf
}

func (e TL_updates_difference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_difference)
	EncodeBuf_GenericVector(x, e.NewMessages)
	EncodeBuf_GenericVector(x, e.NewEncryptedMessages)
	EncodeBuf_GenericVector(x, e.OtherUpdates)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	x.Object(e.State)
	return x.buf
}

func (e TL_updates_differenceSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_differenceSlice)
	EncodeBuf_GenericVector(x, e.NewMessages)
	EncodeBuf_GenericVector(x, e.NewEncryptedMessages)
	EncodeBuf_GenericVector(x, e.OtherUpdates)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	x.Object(e.IntermediateState)
	return x.buf
}

func (e TL_updates_differenceTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_differenceTooLong)
	x.Int(e.PTS)
	return x.buf
}

func (e TL_updatesTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatesTooLong)
	return x.buf
}

func (e TL_updateShortMessage) encode() []byte {
	var flags int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Mentioned {
		flags |= (1 << 4)
	}
	if e.MediaUnread {
		flags |= (1 << 5)
	}
	if e.Silent {
		flags |= (1 << 13)
	}
	if e.FwdFrom != nil {
		flags |= (1 << 2)
	}
	if e.ViaBotID != nil {
		flags |= (1 << 11)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 7)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateShortMessage)
	x.Int(flags)
	x.Int(e.ID)
	x.Long(e.UserID)
	x.String(e.Message)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	x.Int(e.Date)
	if e.FwdFrom != nil {
		x.Object(e.FwdFrom)
	}
	if e.ViaBotID != nil {
		x.Long(*e.ViaBotID)
	}
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	return x.buf
}

func (e TL_updateShortChatMessage) encode() []byte {
	var flags int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Mentioned {
		flags |= (1 << 4)
	}
	if e.MediaUnread {
		flags |= (1 << 5)
	}
	if e.Silent {
		flags |= (1 << 13)
	}
	if e.FwdFrom != nil {
		flags |= (1 << 2)
	}
	if e.ViaBotID != nil {
		flags |= (1 << 11)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 7)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateShortChatMessage)
	x.Int(flags)
	x.Int(e.ID)
	x.Long(e.FromID)
	x.Long(e.ChatID)
	x.String(e.Message)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	x.Int(e.Date)
	if e.FwdFrom != nil {
		x.Object(e.FwdFrom)
	}
	if e.ViaBotID != nil {
		x.Long(*e.ViaBotID)
	}
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	return x.buf
}

func (e TL_updateShort) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateShort)
	x.Object(e.Update)
	x.Int(e.Date)
	return x.buf
}

func (e TL_updatesCombined) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updatesCombined)
	EncodeBuf_GenericVector(x, e.Updates)
	EncodeBuf_GenericVector(x, e.Users)
	EncodeBuf_GenericVector(x, e.Chats)
	x.Int(e.Date)
	x.Int(e.SeqStart)
	x.Int(e.Seq)
	return x.buf
}

func (e TL_updates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates)
	EncodeBuf_GenericVector(x, e.Updates)
	EncodeBuf_GenericVector(x, e.Users)
	EncodeBuf_GenericVector(x, e.Chats)
	x.Int(e.Date)
	x.Int(e.Seq)
	return x.buf
}

func (e TL_updateShortSentMessage) encode() []byte {
	var flags int32
	if e.Out {
		flags |= (1 << 1)
	}
	if e.Media != nil {
		flags |= (1 << 9)
	}
	if e.Entities != nil {
		flags |= (1 << 7)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updateShortSentMessage)
	x.Int(flags)
	x.Int(e.ID)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	x.Int(e.Date)
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	return x.buf
}

func (e TL_photos_photos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_photos)
	EncodeBuf_GenericVector(x, e.Photos)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_photos_photosSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_photosSlice)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Photos)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_photos_photo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_photo)
	x.Object(e.Photo)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_upload_file) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_file)
	x.Object(e.Type)
	x.Int(e.Mtime)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_upload_fileCDNRedirect) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_fileCDNRedirect)
	x.Int(e.DCID)
	x.StringBytes(e.FileToken)
	x.StringBytes(e.EncryptionKey)
	x.StringBytes(e.EncryptionIV)
	EncodeBuf_GenericVector(x, e.FileHashes)
	return x.buf
}

func (e TL_dcOption) encode() []byte {
	var flags int32
	if e.IPv6 {
		flags |= (1 << 0)
	}
	if e.MediaOnly {
		flags |= (1 << 1)
	}
	if e.TCPOOnly {
		flags |= (1 << 2)
	}
	if e.CDN {
		flags |= (1 << 3)
	}
	if e.Static {
		flags |= (1 << 4)
	}
	if e.ThisPortOnly {
		flags |= (1 << 5)
	}
	if e.Secret != nil {
		flags |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dcOption)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.IPAddress)
	x.Int(e.Port)
	if e.Secret != nil {
		x.StringBytes(e.Secret)
	}
	return x.buf
}

func (e TL_config) encode() []byte {
	var flags int32
	if e.DefaultP2PContacts {
		flags |= (1 << 3)
	}
	if e.PreloadFeaturedStickers {
		flags |= (1 << 4)
	}
	if e.RevokePMInbox {
		flags |= (1 << 6)
	}
	if e.BlockedMode {
		flags |= (1 << 8)
	}
	if e.ForceTryIPv6 {
		flags |= (1 << 14)
	}
	if e.TmpSessions != nil {
		flags |= (1 << 0)
	}
	if e.AutoupdateURLPrefix != nil {
		flags |= (1 << 7)
	}
	if e.GIFSearchUsername != nil {
		flags |= (1 << 9)
	}
	if e.VenueSearchUsername != nil {
		flags |= (1 << 10)
	}
	if e.ImgSearchUsername != nil {
		flags |= (1 << 11)
	}
	if e.StaticMapsProvider != nil {
		flags |= (1 << 12)
	}
	if e.SuggestedLangCode != nil {
		flags |= (1 << 2)
	}
	if e.LangPackVersion != nil {
		flags |= (1 << 2)
	}
	if e.BaseLangPackVersion != nil {
		flags |= (1 << 2)
	}
	if e.ReactionsDefault != nil {
		flags |= (1 << 15)
	}
	if e.AutologinToken != nil {
		flags |= (1 << 16)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_config)
	x.Int(flags)
	x.Int(e.Date)
	x.Int(e.Expires)
	x.Bool(e.TestMode)
	x.Int(e.ThisDC)
	EncodeBuf_GenericVector(x, e.DCOptions)
	x.String(e.DCTXTDomainName)
	x.Int(e.ChatSizeMax)
	x.Int(e.MegagroupSizeMax)
	x.Int(e.ForwardedCountMax)
	x.Int(e.OnlineUpdatePeriodMS)
	x.Int(e.OfflineBlurTimeoutMS)
	x.Int(e.OfflineIdleTimeoutMS)
	x.Int(e.OnlineCloudTimeoutMS)
	x.Int(e.NotifyCloudDelayMS)
	x.Int(e.NotifyDefaultDelayMS)
	x.Int(e.PushChatPeriodMS)
	x.Int(e.PushChatLimit)
	x.Int(e.EditTimeLimit)
	x.Int(e.RevokeTimeLimit)
	x.Int(e.RevokePMTimeLimit)
	x.Int(e.RatingEDecay)
	x.Int(e.StickersRecentLimit)
	x.Int(e.ChannelsReadMediaPeriod)
	if e.TmpSessions != nil {
		x.Int(*e.TmpSessions)
	}
	x.Int(e.CallReceiveTimeoutMS)
	x.Int(e.CallRingTimeoutMS)
	x.Int(e.CallConnectTimeoutMS)
	x.Int(e.CallPacketTimeoutMS)
	x.String(e.MeURLPrefix)
	if e.AutoupdateURLPrefix != nil {
		x.String(*e.AutoupdateURLPrefix)
	}
	if e.GIFSearchUsername != nil {
		x.String(*e.GIFSearchUsername)
	}
	if e.VenueSearchUsername != nil {
		x.String(*e.VenueSearchUsername)
	}
	if e.ImgSearchUsername != nil {
		x.String(*e.ImgSearchUsername)
	}
	if e.StaticMapsProvider != nil {
		x.String(*e.StaticMapsProvider)
	}
	x.Int(e.CaptionLengthMax)
	x.Int(e.MessageLengthMax)
	x.Int(e.WebfileDCID)
	if e.SuggestedLangCode != nil {
		x.String(*e.SuggestedLangCode)
	}
	if e.LangPackVersion != nil {
		x.Int(*e.LangPackVersion)
	}
	if e.BaseLangPackVersion != nil {
		x.Int(*e.BaseLangPackVersion)
	}
	if e.ReactionsDefault != nil {
		x.Object(e.ReactionsDefault)
	}
	if e.AutologinToken != nil {
		x.String(*e.AutologinToken)
	}
	return x.buf
}

func (e TL_nearestDC) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_nearestDC)
	x.String(e.Country)
	x.Int(e.ThisDC)
	x.Int(e.NearestDC)
	return x.buf
}

func (e TL_help_appUpdate) encode() []byte {
	var flags int32
	if e.CanNotSkip {
		flags |= (1 << 0)
	}
	if e.Document != nil {
		flags |= (1 << 1)
	}
	if e.URL != nil {
		flags |= (1 << 2)
	}
	if e.Sticker != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_appUpdate)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.Version)
	x.String(e.Text)
	EncodeBuf_GenericVector(x, e.Entities)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.URL != nil {
		x.String(*e.URL)
	}
	if e.Sticker != nil {
		x.Object(e.Sticker)
	}
	return x.buf
}

func (e TL_help_noAppUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_noAppUpdate)
	return x.buf
}

func (e TL_help_inviteText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_inviteText)
	x.String(e.Message)
	return x.buf
}

func (e TL_encryptedChatEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChatEmpty)
	x.Int(e.ID)
	return x.buf
}

func (e TL_encryptedChatWaiting) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChatWaiting)
	x.Int(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	return x.buf
}

func (e TL_encryptedChatRequested) encode() []byte {
	var flags int32
	if e.FolderID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChatRequested)
	x.Int(flags)
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	x.Int(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GA)
	return x.buf
}

func (e TL_encryptedChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChat)
	x.Int(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GAOrB)
	x.Long(e.KeyFingerprint)
	return x.buf
}

func (e TL_encryptedChatDiscarded) encode() []byte {
	var flags int32
	if e.HistoryDeleted {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedChatDiscarded)
	x.Int(flags)
	x.Int(e.ID)
	return x.buf
}

func (e TL_inputEncryptedChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedChat)
	x.Int(e.ChatID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_encryptedFileEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedFileEmpty)
	return x.buf
}

func (e TL_encryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedFile)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Long(e.Size)
	x.Int(e.DCID)
	x.Int(e.KeyFingerprint)
	return x.buf
}

func (e TL_inputEncryptedFileEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFileEmpty)
	return x.buf
}

func (e TL_inputEncryptedFileUploaded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFileUploaded)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.String(e.MD5Checksum)
	x.Int(e.KeyFingerprint)
	return x.buf
}

func (e TL_inputEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFile)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputEncryptedFileBigUploaded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputEncryptedFileBigUploaded)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.Int(e.KeyFingerprint)
	return x.buf
}

func (e TL_encryptedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedMessage)
	x.Long(e.RandomID)
	x.Int(e.ChatID)
	x.Int(e.Date)
	x.StringBytes(e.Bytes)
	x.Object(e.File)
	return x.buf
}

func (e TL_encryptedMessageService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_encryptedMessageService)
	x.Long(e.RandomID)
	x.Int(e.ChatID)
	x.Int(e.Date)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_messages_dhConfigNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dhConfigNotModified)
	x.StringBytes(e.Random)
	return x.buf
}

func (e TL_messages_dhConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dhConfig)
	x.Int(e.G)
	x.StringBytes(e.P)
	x.Int(e.Version)
	x.StringBytes(e.Random)
	return x.buf
}

func (e TL_messages_sentEncryptedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sentEncryptedMessage)
	x.Int(e.Date)
	return x.buf
}

func (e TL_messages_sentEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sentEncryptedFile)
	x.Int(e.Date)
	x.Object(e.File)
	return x.buf
}

func (e TL_inputDocumentEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDocumentEmpty)
	return x.buf
}

func (e TL_inputDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDocument)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	return x.buf
}

func (e TL_documentEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_document) encode() []byte {
	var flags int32
	if e.Thumbs != nil {
		flags |= (1 << 0)
	}
	if e.VideoThumbs != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_document)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.StringBytes(e.FileReference)
	x.Int(e.Date)
	x.String(e.MIMEType)
	x.Long(e.Size)
	if e.Thumbs != nil {
		EncodeBuf_GenericVector(x, e.Thumbs)
	}
	if e.VideoThumbs != nil {
		EncodeBuf_GenericVector(x, e.VideoThumbs)
	}
	x.Int(e.DCID)
	EncodeBuf_GenericVector(x, e.Attributes)
	return x.buf
}

func (e TL_help_support) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_support)
	x.String(e.PhoneNumber)
	x.Object(e.User)
	return x.buf
}

func (e TL_notifyPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_notifyUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyUsers)
	return x.buf
}

func (e TL_notifyChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyChats)
	return x.buf
}

func (e TL_notifyBroadcasts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyBroadcasts)
	return x.buf
}

func (e TL_notifyForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notifyForumTopic)
	x.Object(e.Peer)
	x.Int(e.TopMsgID)
	return x.buf
}

func (e TL_sendMessageTypingAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageTypingAction)
	return x.buf
}

func (e TL_sendMessageCancelAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageCancelAction)
	return x.buf
}

func (e TL_sendMessageRecordVideoAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageRecordVideoAction)
	return x.buf
}

func (e TL_sendMessageUploadVideoAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadVideoAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageRecordAudioAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageRecordAudioAction)
	return x.buf
}

func (e TL_sendMessageUploadAudioAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadAudioAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageUploadPhotoAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadPhotoAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageUploadDocumentAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadDocumentAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageGeoLocationAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageGeoLocationAction)
	return x.buf
}

func (e TL_sendMessageChooseContactAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageChooseContactAction)
	return x.buf
}

func (e TL_sendMessageGamePlayAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageGamePlayAction)
	return x.buf
}

func (e TL_sendMessageRecordRoundAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageRecordRoundAction)
	return x.buf
}

func (e TL_sendMessageUploadRoundAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageUploadRoundAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_speakingInGroupCallAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_speakingInGroupCallAction)
	return x.buf
}

func (e TL_sendMessageHistoryImportAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageHistoryImportAction)
	x.Int(e.Progress)
	return x.buf
}

func (e TL_sendMessageChooseStickerAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageChooseStickerAction)
	return x.buf
}

func (e TL_sendMessageEmojiInteraction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageEmojiInteraction)
	x.String(e.Emoticon)
	x.Int(e.MsgID)
	x.Object(e.Interaction)
	return x.buf
}

func (e TL_sendMessageEmojiInteractionSeen) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendMessageEmojiInteractionSeen)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_contacts_found) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_found)
	EncodeBuf_GenericVector(x, e.MyResults)
	EncodeBuf_GenericVector(x, e.Results)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_inputPrivacyKeyStatusTimestamp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyStatusTimestamp)
	return x.buf
}

func (e TL_inputPrivacyKeyChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyChatInvite)
	return x.buf
}

func (e TL_inputPrivacyKeyPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyPhoneCall)
	return x.buf
}

func (e TL_inputPrivacyKeyPhoneP2P) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyPhoneP2P)
	return x.buf
}

func (e TL_inputPrivacyKeyForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyForwards)
	return x.buf
}

func (e TL_inputPrivacyKeyProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyProfilePhoto)
	return x.buf
}

func (e TL_inputPrivacyKeyPhoneNumber) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyPhoneNumber)
	return x.buf
}

func (e TL_inputPrivacyKeyAddedByPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyAddedByPhone)
	return x.buf
}

func (e TL_inputPrivacyKeyVoiceMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyVoiceMessages)
	return x.buf
}

func (e TL_inputPrivacyKeyAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyAbout)
	return x.buf
}

func (e TL_inputPrivacyKeyBirthday) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyKeyBirthday)
	return x.buf
}

func (e TL_privacyKeyStatusTimestamp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyStatusTimestamp)
	return x.buf
}

func (e TL_privacyKeyChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyChatInvite)
	return x.buf
}

func (e TL_privacyKeyPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyPhoneCall)
	return x.buf
}

func (e TL_privacyKeyPhoneP2P) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyPhoneP2P)
	return x.buf
}

func (e TL_privacyKeyForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyForwards)
	return x.buf
}

func (e TL_privacyKeyProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyProfilePhoto)
	return x.buf
}

func (e TL_privacyKeyPhoneNumber) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyPhoneNumber)
	return x.buf
}

func (e TL_privacyKeyAddedByPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyAddedByPhone)
	return x.buf
}

func (e TL_privacyKeyVoiceMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyVoiceMessages)
	return x.buf
}

func (e TL_privacyKeyAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyAbout)
	return x.buf
}

func (e TL_privacyKeyBirthday) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyKeyBirthday)
	return x.buf
}

func (e TL_inputPrivacyValueAllowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowContacts)
	return x.buf
}

func (e TL_inputPrivacyValueAllowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowAll)
	return x.buf
}

func (e TL_inputPrivacyValueAllowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowUsers)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueDisallowContacts)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueDisallowAll)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueDisallowUsers)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_inputPrivacyValueAllowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowChatParticipants)
	x.VectorLong(e.Chats)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueDisallowChatParticipants)
	x.VectorLong(e.Chats)
	return x.buf
}

func (e TL_inputPrivacyValueAllowCloseFriends) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowCloseFriends)
	return x.buf
}

func (e TL_inputPrivacyValueAllowPremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPrivacyValueAllowPremium)
	return x.buf
}

func (e TL_privacyValueAllowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowContacts)
	return x.buf
}

func (e TL_privacyValueAllowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowAll)
	return x.buf
}

func (e TL_privacyValueAllowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowUsers)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_privacyValueDisallowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueDisallowContacts)
	return x.buf
}

func (e TL_privacyValueDisallowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueDisallowAll)
	return x.buf
}

func (e TL_privacyValueDisallowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueDisallowUsers)
	x.VectorLong(e.Users)
	return x.buf
}

func (e TL_privacyValueAllowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowChatParticipants)
	x.VectorLong(e.Chats)
	return x.buf
}

func (e TL_privacyValueDisallowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueDisallowChatParticipants)
	x.VectorLong(e.Chats)
	return x.buf
}

func (e TL_privacyValueAllowCloseFriends) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowCloseFriends)
	return x.buf
}

func (e TL_privacyValueAllowPremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_privacyValueAllowPremium)
	return x.buf
}

func (e TL_account_privacyRules) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_privacyRules)
	EncodeBuf_GenericVector(x, e.Rules)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_accountDaysTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_accountDaysTTL)
	x.Int(e.Days)
	return x.buf
}

func (e TL_documentAttributeImageSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeImageSize)
	x.Int(e.W)
	x.Int(e.H)
	return x.buf
}

func (e TL_documentAttributeAnimated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeAnimated)
	return x.buf
}

func (e TL_documentAttributeSticker) encode() []byte {
	var flags int32
	if e.Mask {
		flags |= (1 << 1)
	}
	if e.MaskCoords != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeSticker)
	x.Int(flags)
	x.String(e.Alt)
	x.Object(e.Stickerset)
	if e.MaskCoords != nil {
		x.Object(e.MaskCoords)
	}
	return x.buf
}

func (e TL_documentAttributeVideo) encode() []byte {
	var flags int32
	if e.RoundMessage {
		flags |= (1 << 0)
	}
	if e.SupportsStreaming {
		flags |= (1 << 1)
	}
	if e.Nosound {
		flags |= (1 << 3)
	}
	if e.PreloadPrefixSize != nil {
		flags |= (1 << 2)
	}
	if e.VideoStartTS != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeVideo)
	x.Int(flags)
	x.Double(e.Duration)
	x.Int(e.W)
	x.Int(e.H)
	if e.PreloadPrefixSize != nil {
		x.Int(*e.PreloadPrefixSize)
	}
	if e.VideoStartTS != nil {
		x.Double(*e.VideoStartTS)
	}
	return x.buf
}

func (e TL_documentAttributeAudio) encode() []byte {
	var flags int32
	if e.Voice {
		flags |= (1 << 10)
	}
	if e.Title != nil {
		flags |= (1 << 0)
	}
	if e.Performer != nil {
		flags |= (1 << 1)
	}
	if e.Waveform != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeAudio)
	x.Int(flags)
	x.Int(e.Duration)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Performer != nil {
		x.String(*e.Performer)
	}
	if e.Waveform != nil {
		x.StringBytes(e.Waveform)
	}
	return x.buf
}

func (e TL_documentAttributeFilename) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeFilename)
	x.String(e.FileName)
	return x.buf
}

func (e TL_documentAttributeHasStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeHasStickers)
	return x.buf
}

func (e TL_documentAttributeCustomEmoji) encode() []byte {
	var flags int32
	if e.Free {
		flags |= (1 << 0)
	}
	if e.TextColor {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_documentAttributeCustomEmoji)
	x.Int(flags)
	x.String(e.Alt)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_messages_stickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickersNotModified)
	return x.buf
}

func (e TL_messages_stickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickers)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Stickers)
	return x.buf
}

func (e TL_stickerPack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerPack)
	x.String(e.Emoticon)
	x.VectorLong(e.Documents)
	return x.buf
}

func (e TL_messages_allStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_allStickersNotModified)
	return x.buf
}

func (e TL_messages_allStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_allStickers)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Sets)
	return x.buf
}

func (e TL_messages_affectedMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_affectedMessages)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	return x.buf
}

func (e TL_webPageEmpty) encode() []byte {
	var flags int32
	if e.URL != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPageEmpty)
	x.Int(flags)
	x.Long(e.ID)
	if e.URL != nil {
		x.String(*e.URL)
	}
	return x.buf
}

func (e TL_webPagePending) encode() []byte {
	var flags int32
	if e.URL != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPagePending)
	x.Int(flags)
	x.Long(e.ID)
	if e.URL != nil {
		x.String(*e.URL)
	}
	x.Int(e.Date)
	return x.buf
}

func (e TL_webPage) encode() []byte {
	var flags int32
	if e.HasLargeMedia {
		flags |= (1 << 13)
	}
	if e.Type != nil {
		flags |= (1 << 0)
	}
	if e.SiteName != nil {
		flags |= (1 << 1)
	}
	if e.Title != nil {
		flags |= (1 << 2)
	}
	if e.Description != nil {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 4)
	}
	if e.EmbedURL != nil {
		flags |= (1 << 5)
	}
	if e.EmbedType != nil {
		flags |= (1 << 5)
	}
	if e.EmbedWidth != nil {
		flags |= (1 << 6)
	}
	if e.EmbedHeight != nil {
		flags |= (1 << 6)
	}
	if e.Duration != nil {
		flags |= (1 << 7)
	}
	if e.Author != nil {
		flags |= (1 << 8)
	}
	if e.Document != nil {
		flags |= (1 << 9)
	}
	if e.CachedPage != nil {
		flags |= (1 << 10)
	}
	if e.Attributes != nil {
		flags |= (1 << 12)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPage)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.URL)
	x.String(e.DisplayURL)
	x.Int(e.Hash)
	if e.Type != nil {
		x.String(*e.Type)
	}
	if e.SiteName != nil {
		x.String(*e.SiteName)
	}
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Description != nil {
		x.String(*e.Description)
	}
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.EmbedURL != nil {
		x.String(*e.EmbedURL)
	}
	if e.EmbedType != nil {
		x.String(*e.EmbedType)
	}
	if e.EmbedWidth != nil {
		x.Int(*e.EmbedWidth)
	}
	if e.EmbedHeight != nil {
		x.Int(*e.EmbedHeight)
	}
	if e.Duration != nil {
		x.Int(*e.Duration)
	}
	if e.Author != nil {
		x.String(*e.Author)
	}
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.CachedPage != nil {
		x.Object(e.CachedPage)
	}
	if e.Attributes != nil {
		EncodeBuf_GenericVector(x, e.Attributes)
	}
	return x.buf
}

func (e TL_webPageNotModified) encode() []byte {
	var flags int32
	if e.CachedPageViews != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPageNotModified)
	x.Int(flags)
	if e.CachedPageViews != nil {
		x.Int(*e.CachedPageViews)
	}
	return x.buf
}

func (e TL_authorization) encode() []byte {
	var flags int32
	if e.Current {
		flags |= (1 << 0)
	}
	if e.OfficialApp {
		flags |= (1 << 1)
	}
	if e.PasswordPending {
		flags |= (1 << 2)
	}
	if e.EncryptedRequestsDisabled {
		flags |= (1 << 3)
	}
	if e.CallRequestsDisabled {
		flags |= (1 << 4)
	}
	if e.Unconfirmed {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_authorization)
	x.Int(flags)
	x.Long(e.Hash)
	x.String(e.DeviceModel)
	x.String(e.Platform)
	x.String(e.SystemVersion)
	x.Int(e.APIID)
	x.String(e.AppName)
	x.String(e.AppVersion)
	x.Int(e.DateCreated)
	x.Int(e.DateActive)
	x.String(e.IP)
	x.String(e.Country)
	x.String(e.Region)
	return x.buf
}

func (e TL_account_authorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_authorizations)
	x.Int(e.AuthorizationTTLDays)
	EncodeBuf_GenericVector(x, e.Authorizations)
	return x.buf
}

func (e TL_account_password) encode() []byte {
	var flags int32
	if e.HasRecovery {
		flags |= (1 << 0)
	}
	if e.HasSecureValues {
		flags |= (1 << 1)
	}
	if e.HasPassword {
		flags |= (1 << 2)
	}
	if e.CurrentAlgo != nil {
		flags |= (1 << 2)
	}
	if e.SrpB != nil {
		flags |= (1 << 2)
	}
	if e.SrpID != nil {
		flags |= (1 << 2)
	}
	if e.Hint != nil {
		flags |= (1 << 3)
	}
	if e.EmailUnconfirmedPattern != nil {
		flags |= (1 << 4)
	}
	if e.PendingResetDate != nil {
		flags |= (1 << 5)
	}
	if e.LoginEmailPattern != nil {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_password)
	x.Int(flags)
	if e.CurrentAlgo != nil {
		x.Object(e.CurrentAlgo)
	}
	if e.SrpB != nil {
		x.StringBytes(e.SrpB)
	}
	if e.SrpID != nil {
		x.Long(*e.SrpID)
	}
	if e.Hint != nil {
		x.String(*e.Hint)
	}
	if e.EmailUnconfirmedPattern != nil {
		x.String(*e.EmailUnconfirmedPattern)
	}
	x.Object(e.NewAlgo)
	x.Object(e.NewSecureAlgo)
	x.StringBytes(e.SecureRandom)
	if e.PendingResetDate != nil {
		x.Int(*e.PendingResetDate)
	}
	if e.LoginEmailPattern != nil {
		x.String(*e.LoginEmailPattern)
	}
	return x.buf
}

func (e TL_account_passwordSettings) encode() []byte {
	var flags int32
	if e.Email != nil {
		flags |= (1 << 0)
	}
	if e.SecureSettings != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_passwordSettings)
	x.Int(flags)
	if e.Email != nil {
		x.String(*e.Email)
	}
	if e.SecureSettings != nil {
		x.Object(e.SecureSettings)
	}
	return x.buf
}

func (e TL_account_passwordInputSettings) encode() []byte {
	var flags int32
	if e.NewAlgo != nil {
		flags |= (1 << 0)
	}
	if e.NewPasswordHash != nil {
		flags |= (1 << 0)
	}
	if e.Hint != nil {
		flags |= (1 << 0)
	}
	if e.Email != nil {
		flags |= (1 << 1)
	}
	if e.NewSecureSettings != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_passwordInputSettings)
	x.Int(flags)
	if e.NewAlgo != nil {
		x.Object(e.NewAlgo)
	}
	if e.NewPasswordHash != nil {
		x.StringBytes(e.NewPasswordHash)
	}
	if e.Hint != nil {
		x.String(*e.Hint)
	}
	if e.Email != nil {
		x.String(*e.Email)
	}
	if e.NewSecureSettings != nil {
		x.Object(e.NewSecureSettings)
	}
	return x.buf
}

func (e TL_auth_passwordRecovery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_passwordRecovery)
	x.String(e.EmailPattern)
	return x.buf
}

func (e TL_receivedNotifyMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_receivedNotifyMessage)
	x.Int(e.ID)
	x.Int(e.Flags)
	return x.buf
}

func (e TL_chatInviteExported) encode() []byte {
	var flags int32
	if e.Revoked {
		flags |= (1 << 0)
	}
	if e.Permanent {
		flags |= (1 << 5)
	}
	if e.RequestNeeded {
		flags |= (1 << 6)
	}
	if e.StartDate != nil {
		flags |= (1 << 4)
	}
	if e.ExpireDate != nil {
		flags |= (1 << 1)
	}
	if e.UsageLimit != nil {
		flags |= (1 << 2)
	}
	if e.Usage != nil {
		flags |= (1 << 3)
	}
	if e.Requested != nil {
		flags |= (1 << 7)
	}
	if e.SubscriptionExpired != nil {
		flags |= (1 << 10)
	}
	if e.Title != nil {
		flags |= (1 << 8)
	}
	if e.SubscriptionPricing != nil {
		flags |= (1 << 9)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInviteExported)
	x.Int(flags)
	x.String(e.Link)
	x.Long(e.AdminID)
	x.Int(e.Date)
	if e.StartDate != nil {
		x.Int(*e.StartDate)
	}
	if e.ExpireDate != nil {
		x.Int(*e.ExpireDate)
	}
	if e.UsageLimit != nil {
		x.Int(*e.UsageLimit)
	}
	if e.Usage != nil {
		x.Int(*e.Usage)
	}
	if e.Requested != nil {
		x.Int(*e.Requested)
	}
	if e.SubscriptionExpired != nil {
		x.Int(*e.SubscriptionExpired)
	}
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.SubscriptionPricing != nil {
		x.Object(e.SubscriptionPricing)
	}
	return x.buf
}

func (e TL_chatInvitePublicJoinRequests) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInvitePublicJoinRequests)
	return x.buf
}

func (e TL_chatInviteAlready) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInviteAlready)
	x.Object(e.Chat)
	return x.buf
}

func (e TL_chatInvite) encode() []byte {
	var flags int32
	if e.Channel {
		flags |= (1 << 0)
	}
	if e.Broadcast {
		flags |= (1 << 1)
	}
	if e.Public {
		flags |= (1 << 2)
	}
	if e.Megagroup {
		flags |= (1 << 3)
	}
	if e.RequestNeeded {
		flags |= (1 << 6)
	}
	if e.Verified {
		flags |= (1 << 7)
	}
	if e.Scam {
		flags |= (1 << 8)
	}
	if e.Fake {
		flags |= (1 << 9)
	}
	if e.CanRefulfillSubscription {
		flags |= (1 << 11)
	}
	if e.About != nil {
		flags |= (1 << 5)
	}
	if e.Participants != nil {
		flags |= (1 << 4)
	}
	if e.SubscriptionPricing != nil {
		flags |= (1 << 10)
	}
	if e.SubscriptionFormID != nil {
		flags |= (1 << 12)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInvite)
	x.Int(flags)
	x.String(e.Title)
	if e.About != nil {
		x.String(*e.About)
	}
	x.Object(e.Photo)
	x.Int(e.ParticipantsCount)
	if e.Participants != nil {
		EncodeBuf_GenericVector(x, e.Participants)
	}
	x.Int(e.Color)
	if e.SubscriptionPricing != nil {
		x.Object(e.SubscriptionPricing)
	}
	if e.SubscriptionFormID != nil {
		x.Long(*e.SubscriptionFormID)
	}
	return x.buf
}

func (e TL_chatInvitePeek) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInvitePeek)
	x.Object(e.Chat)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_inputStickerSetEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetEmpty)
	return x.buf
}

func (e TL_inputStickerSetID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetID)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputStickerSetShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetShortName)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_inputStickerSetAnimatedEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetAnimatedEmoji)
	return x.buf
}

func (e TL_inputStickerSetDice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetDice)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_inputStickerSetAnimatedEmojiAnimations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetAnimatedEmojiAnimations)
	return x.buf
}

func (e TL_inputStickerSetPremiumGifts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetPremiumGifts)
	return x.buf
}

func (e TL_inputStickerSetEmojiGenericAnimations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetEmojiGenericAnimations)
	return x.buf
}

func (e TL_inputStickerSetEmojiDefaultStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetEmojiDefaultStatuses)
	return x.buf
}

func (e TL_inputStickerSetEmojiDefaultTopicIcons) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetEmojiDefaultTopicIcons)
	return x.buf
}

func (e TL_inputStickerSetEmojiChannelDefaultStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetEmojiChannelDefaultStatuses)
	return x.buf
}

func (e TL_stickerSet) encode() []byte {
	var flags int32
	if e.Archived {
		flags |= (1 << 1)
	}
	if e.Official {
		flags |= (1 << 2)
	}
	if e.Masks {
		flags |= (1 << 3)
	}
	if e.Emojis {
		flags |= (1 << 7)
	}
	if e.TextColor {
		flags |= (1 << 9)
	}
	if e.ChannelEmojiStatus {
		flags |= (1 << 10)
	}
	if e.Creator {
		flags |= (1 << 11)
	}
	if e.InstalledDate != nil {
		flags |= (1 << 0)
	}
	if e.Thumbs != nil {
		flags |= (1 << 4)
	}
	if e.ThumbDCID != nil {
		flags |= (1 << 4)
	}
	if e.ThumbVersion != nil {
		flags |= (1 << 4)
	}
	if e.ThumbDocumentID != nil {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSet)
	x.Int(flags)
	if e.InstalledDate != nil {
		x.Int(*e.InstalledDate)
	}
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.Title)
	x.String(e.ShortName)
	if e.Thumbs != nil {
		EncodeBuf_GenericVector(x, e.Thumbs)
	}
	if e.ThumbDCID != nil {
		x.Int(*e.ThumbDCID)
	}
	if e.ThumbVersion != nil {
		x.Int(*e.ThumbVersion)
	}
	if e.ThumbDocumentID != nil {
		x.Long(*e.ThumbDocumentID)
	}
	x.Int(e.Count)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_stickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickerSet)
	x.Object(e.Set)
	EncodeBuf_GenericVector(x, e.Packs)
	EncodeBuf_GenericVector(x, e.Keywords)
	EncodeBuf_GenericVector(x, e.Documents)
	return x.buf
}

func (e TL_messages_stickerSetNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickerSetNotModified)
	return x.buf
}

func (e TL_botCommand) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommand)
	x.String(e.Command)
	x.String(e.Description)
	return x.buf
}

func (e TL_botInfo) encode() []byte {
	var flags int32
	if e.HasPreviewMedias {
		flags |= (1 << 6)
	}
	if e.UserID != nil {
		flags |= (1 << 0)
	}
	if e.Description != nil {
		flags |= (1 << 1)
	}
	if e.DescriptionPhoto != nil {
		flags |= (1 << 4)
	}
	if e.DescriptionDocument != nil {
		flags |= (1 << 5)
	}
	if e.Commands != nil {
		flags |= (1 << 2)
	}
	if e.MenuButton != nil {
		flags |= (1 << 3)
	}
	if e.PrivacyPolicyURL != nil {
		flags |= (1 << 7)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInfo)
	x.Int(flags)
	if e.UserID != nil {
		x.Long(*e.UserID)
	}
	if e.Description != nil {
		x.String(*e.Description)
	}
	if e.DescriptionPhoto != nil {
		x.Object(e.DescriptionPhoto)
	}
	if e.DescriptionDocument != nil {
		x.Object(e.DescriptionDocument)
	}
	if e.Commands != nil {
		EncodeBuf_GenericVector(x, e.Commands)
	}
	if e.MenuButton != nil {
		x.Object(e.MenuButton)
	}
	if e.PrivacyPolicyURL != nil {
		x.String(*e.PrivacyPolicyURL)
	}
	return x.buf
}

func (e TL_keyboardButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButton)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonURL)
	x.String(e.Text)
	x.String(e.URL)
	return x.buf
}

func (e TL_keyboardButtonCallback) encode() []byte {
	var flags int32
	if e.RequiresPassword {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonCallback)
	x.Int(flags)
	x.String(e.Text)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_keyboardButtonRequestPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRequestPhone)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonRequestGeoLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRequestGeoLocation)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonSwitchInline) encode() []byte {
	var flags int32
	if e.SamePeer {
		flags |= (1 << 0)
	}
	if e.PeerTypes != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonSwitchInline)
	x.Int(flags)
	x.String(e.Text)
	x.String(e.Query)
	if e.PeerTypes != nil {
		EncodeBuf_GenericVector(x, e.PeerTypes)
	}
	return x.buf
}

func (e TL_keyboardButtonGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonGame)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonBuy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonBuy)
	x.String(e.Text)
	return x.buf
}

func (e TL_keyboardButtonURLAuth) encode() []byte {
	var flags int32
	if e.FwdText != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonURLAuth)
	x.Int(flags)
	x.String(e.Text)
	if e.FwdText != nil {
		x.String(*e.FwdText)
	}
	x.String(e.URL)
	x.Int(e.ButtonID)
	return x.buf
}

func (e TL_inputKeyboardButtonURLAuth) encode() []byte {
	var flags int32
	if e.RequestWriteAccess {
		flags |= (1 << 0)
	}
	if e.FwdText != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputKeyboardButtonURLAuth)
	x.Int(flags)
	x.String(e.Text)
	if e.FwdText != nil {
		x.String(*e.FwdText)
	}
	x.String(e.URL)
	x.Object(e.Bot)
	return x.buf
}

func (e TL_keyboardButtonRequestPoll) encode() []byte {
	var flags int32
	if e.Quiz != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRequestPoll)
	x.Int(flags)
	if e.Quiz != nil {
		x.Bool(*e.Quiz)
	}
	x.String(e.Text)
	return x.buf
}

func (e TL_inputKeyboardButtonUserProfile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputKeyboardButtonUserProfile)
	x.String(e.Text)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_keyboardButtonUserProfile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonUserProfile)
	x.String(e.Text)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_keyboardButtonWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonWebView)
	x.String(e.Text)
	x.String(e.URL)
	return x.buf
}

func (e TL_keyboardButtonSimpleWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonSimpleWebView)
	x.String(e.Text)
	x.String(e.URL)
	return x.buf
}

func (e TL_keyboardButtonRequestPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRequestPeer)
	x.String(e.Text)
	x.Int(e.ButtonID)
	x.Object(e.PeerType)
	x.Int(e.MaxQuantity)
	return x.buf
}

func (e TL_inputKeyboardButtonRequestPeer) encode() []byte {
	var flags int32
	if e.NameRequested {
		flags |= (1 << 0)
	}
	if e.UsernameRequested {
		flags |= (1 << 1)
	}
	if e.PhotoRequested {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputKeyboardButtonRequestPeer)
	x.Int(flags)
	x.String(e.Text)
	x.Int(e.ButtonID)
	x.Object(e.PeerType)
	x.Int(e.MaxQuantity)
	return x.buf
}

func (e TL_keyboardButtonRow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_keyboardButtonRow)
	EncodeBuf_GenericVector(x, e.Buttons)
	return x.buf
}

func (e TL_replyKeyboardHide) encode() []byte {
	var flags int32
	if e.Selective {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_replyKeyboardHide)
	x.Int(flags)
	return x.buf
}

func (e TL_replyKeyboardForceReply) encode() []byte {
	var flags int32
	if e.SingleUse {
		flags |= (1 << 1)
	}
	if e.Selective {
		flags |= (1 << 2)
	}
	if e.Placeholder != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_replyKeyboardForceReply)
	x.Int(flags)
	if e.Placeholder != nil {
		x.String(*e.Placeholder)
	}
	return x.buf
}

func (e TL_replyKeyboardMarkup) encode() []byte {
	var flags int32
	if e.Resize {
		flags |= (1 << 0)
	}
	if e.SingleUse {
		flags |= (1 << 1)
	}
	if e.Selective {
		flags |= (1 << 2)
	}
	if e.Persistent {
		flags |= (1 << 4)
	}
	if e.Placeholder != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_replyKeyboardMarkup)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Rows)
	if e.Placeholder != nil {
		x.String(*e.Placeholder)
	}
	return x.buf
}

func (e TL_replyInlineMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_replyInlineMarkup)
	EncodeBuf_GenericVector(x, e.Rows)
	return x.buf
}

func (e TL_messageEntityUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityUnknown)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityMention) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityMention)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityHashtag) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityHashtag)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityBotCommand) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityBotCommand)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityURL)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityEmail)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityBold) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityBold)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityItalic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityItalic)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityCode)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityPre) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityPre)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.String(e.Language)
	return x.buf
}

func (e TL_messageEntityTextURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityTextURL)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.String(e.URL)
	return x.buf
}

func (e TL_messageEntityMentionName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityMentionName)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_inputMessageEntityMentionName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessageEntityMentionName)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messageEntityPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityPhone)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityCashtag) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityCashtag)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityUnderline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityUnderline)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityStrike) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityStrike)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityBankCard) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityBankCard)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntitySpoiler) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntitySpoiler)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_messageEntityCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityCustomEmoji)
	x.Int(e.Offset)
	x.Int(e.Length)
	x.Long(e.DocumentID)
	return x.buf
}

func (e TL_messageEntityBlockquote) encode() []byte {
	var flags int32
	if e.Collapsed {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageEntityBlockquote)
	x.Int(flags)
	x.Int(e.Offset)
	x.Int(e.Length)
	return x.buf
}

func (e TL_inputChannelEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChannelEmpty)
	return x.buf
}

func (e TL_inputChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChannel)
	x.Long(e.ChannelID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputChannelFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChannelFromMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.ChannelID)
	return x.buf
}

func (e TL_contacts_resolvedPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resolvedPeer)
	x.Object(e.Peer)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messageRange) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageRange)
	x.Int(e.MinID)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_updates_channelDifferenceEmpty) encode() []byte {
	var flags int32
	if e.Final {
		flags |= (1 << 0)
	}
	if e.Timeout != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_channelDifferenceEmpty)
	x.Int(flags)
	x.Int(e.PTS)
	if e.Timeout != nil {
		x.Int(*e.Timeout)
	}
	return x.buf
}

func (e TL_updates_channelDifferenceTooLong) encode() []byte {
	var flags int32
	if e.Final {
		flags |= (1 << 0)
	}
	if e.Timeout != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_channelDifferenceTooLong)
	x.Int(flags)
	if e.Timeout != nil {
		x.Int(*e.Timeout)
	}
	x.Object(e.Dialog)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_updates_channelDifference) encode() []byte {
	var flags int32
	if e.Final {
		flags |= (1 << 0)
	}
	if e.Timeout != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_channelDifference)
	x.Int(flags)
	x.Int(e.PTS)
	if e.Timeout != nil {
		x.Int(*e.Timeout)
	}
	EncodeBuf_GenericVector(x, e.NewMessages)
	EncodeBuf_GenericVector(x, e.OtherUpdates)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_channelMessagesFilterEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelMessagesFilterEmpty)
	return x.buf
}

func (e TL_channelMessagesFilter) encode() []byte {
	var flags int32
	if e.ExcludeNewMessages {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelMessagesFilter)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Ranges)
	return x.buf
}

func (e TL_channelParticipant) encode() []byte {
	var flags int32
	if e.SubscriptionUntilDate != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipant)
	x.Int(flags)
	x.Long(e.UserID)
	x.Int(e.Date)
	if e.SubscriptionUntilDate != nil {
		x.Int(*e.SubscriptionUntilDate)
	}
	return x.buf
}

func (e TL_channelParticipantSelf) encode() []byte {
	var flags int32
	if e.ViaRequest {
		flags |= (1 << 0)
	}
	if e.SubscriptionUntilDate != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantSelf)
	x.Int(flags)
	x.Long(e.UserID)
	x.Long(e.InviterID)
	x.Int(e.Date)
	if e.SubscriptionUntilDate != nil {
		x.Int(*e.SubscriptionUntilDate)
	}
	return x.buf
}

func (e TL_channelParticipantCreator) encode() []byte {
	var flags int32
	if e.Rank != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantCreator)
	x.Int(flags)
	x.Long(e.UserID)
	x.Object(e.AdminRights)
	if e.Rank != nil {
		x.String(*e.Rank)
	}
	return x.buf
}

func (e TL_channelParticipantAdmin) encode() []byte {
	var flags int32
	if e.CanEdit {
		flags |= (1 << 0)
	}
	if e.Self {
		flags |= (1 << 1)
	}
	if e.InviterID != nil {
		flags |= (1 << 1)
	}
	if e.Rank != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantAdmin)
	x.Int(flags)
	x.Long(e.UserID)
	if e.InviterID != nil {
		x.Long(*e.InviterID)
	}
	x.Long(e.PromotedBy)
	x.Int(e.Date)
	x.Object(e.AdminRights)
	if e.Rank != nil {
		x.String(*e.Rank)
	}
	return x.buf
}

func (e TL_channelParticipantBanned) encode() []byte {
	var flags int32
	if e.Left {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantBanned)
	x.Int(flags)
	x.Object(e.Peer)
	x.Long(e.KickedBy)
	x.Int(e.Date)
	x.Object(e.BannedRights)
	return x.buf
}

func (e TL_channelParticipantLeft) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantLeft)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_channelParticipantsRecent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsRecent)
	return x.buf
}

func (e TL_channelParticipantsAdmins) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsAdmins)
	return x.buf
}

func (e TL_channelParticipantsKicked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsKicked)
	x.String(e.Q)
	return x.buf
}

func (e TL_channelParticipantsBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsBots)
	return x.buf
}

func (e TL_channelParticipantsBanned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsBanned)
	x.String(e.Q)
	return x.buf
}

func (e TL_channelParticipantsSearch) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsSearch)
	x.String(e.Q)
	return x.buf
}

func (e TL_channelParticipantsContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsContacts)
	x.String(e.Q)
	return x.buf
}

func (e TL_channelParticipantsMentions) encode() []byte {
	var flags int32
	if e.Q != nil {
		flags |= (1 << 0)
	}
	if e.TopMsgID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelParticipantsMentions)
	x.Int(flags)
	if e.Q != nil {
		x.String(*e.Q)
	}
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	return x.buf
}

func (e TL_channels_channelParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_channelParticipants)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Participants)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_channels_channelParticipantsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_channelParticipantsNotModified)
	return x.buf
}

func (e TL_channels_channelParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_channelParticipant)
	x.Object(e.Participant)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_help_termsOfService) encode() []byte {
	var flags int32
	if e.Popup {
		flags |= (1 << 0)
	}
	if e.MinAgeConfirm != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_termsOfService)
	x.Int(flags)
	x.Object(e.ID)
	x.String(e.Text)
	EncodeBuf_GenericVector(x, e.Entities)
	if e.MinAgeConfirm != nil {
		x.Int(*e.MinAgeConfirm)
	}
	return x.buf
}

func (e TL_messages_savedGIFsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_savedGIFsNotModified)
	return x.buf
}

func (e TL_messages_savedGIFs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_savedGIFs)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.GIFs)
	return x.buf
}

func (e TL_inputBotInlineMessageMediaAuto) encode() []byte {
	var flags int32
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaAuto)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageText) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 0)
	}
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageText)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaGeo) encode() []byte {
	var flags int32
	if e.Heading != nil {
		flags |= (1 << 0)
	}
	if e.Period != nil {
		flags |= (1 << 1)
	}
	if e.ProximityNotificationRadius != nil {
		flags |= (1 << 3)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaGeo)
	x.Int(flags)
	x.Object(e.GeoPoint)
	if e.Heading != nil {
		x.Int(*e.Heading)
	}
	if e.Period != nil {
		x.Int(*e.Period)
	}
	if e.ProximityNotificationRadius != nil {
		x.Int(*e.ProximityNotificationRadius)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaVenue) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaVenue)
	x.Int(flags)
	x.Object(e.GeoPoint)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaContact) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaContact)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Vcard)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageGame) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageGame)
	x.Int(flags)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaInvoice) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaInvoice)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	x.StringBytes(e.Payload)
	x.String(e.Provider)
	x.Object(e.ProviderData)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaWebPage) encode() []byte {
	var flags int32
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.ForceLargeMedia {
		flags |= (1 << 4)
	}
	if e.ForceSmallMedia {
		flags |= (1 << 5)
	}
	if e.Optional {
		flags |= (1 << 6)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageMediaWebPage)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	x.String(e.URL)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_inputBotInlineResult) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 1)
	}
	if e.Description != nil {
		flags |= (1 << 2)
	}
	if e.URL != nil {
		flags |= (1 << 3)
	}
	if e.Thumb != nil {
		flags |= (1 << 4)
	}
	if e.Content != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineResult)
	x.Int(flags)
	x.String(e.ID)
	x.String(e.Type)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Description != nil {
		x.String(*e.Description)
	}
	if e.URL != nil {
		x.String(*e.URL)
	}
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	if e.Content != nil {
		x.Object(e.Content)
	}
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_inputBotInlineResultPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineResultPhoto)
	x.String(e.ID)
	x.String(e.Type)
	x.Object(e.Photo)
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_inputBotInlineResultDocument) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 1)
	}
	if e.Description != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineResultDocument)
	x.Int(flags)
	x.String(e.ID)
	x.String(e.Type)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Description != nil {
		x.String(*e.Description)
	}
	x.Object(e.Document)
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_inputBotInlineResultGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineResultGame)
	x.String(e.ID)
	x.String(e.ShortName)
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_botInlineMessageMediaAuto) encode() []byte {
	var flags int32
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaAuto)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageText) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 0)
	}
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageText)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaGeo) encode() []byte {
	var flags int32
	if e.Heading != nil {
		flags |= (1 << 0)
	}
	if e.Period != nil {
		flags |= (1 << 1)
	}
	if e.ProximityNotificationRadius != nil {
		flags |= (1 << 3)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaGeo)
	x.Int(flags)
	x.Object(e.Geo)
	if e.Heading != nil {
		x.Int(*e.Heading)
	}
	if e.Period != nil {
		x.Int(*e.Period)
	}
	if e.ProximityNotificationRadius != nil {
		x.Int(*e.ProximityNotificationRadius)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaVenue) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaVenue)
	x.Int(flags)
	x.Object(e.Geo)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaContact) encode() []byte {
	var flags int32
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaContact)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Vcard)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaInvoice) encode() []byte {
	var flags int32
	if e.ShippingAddressRequested {
		flags |= (1 << 1)
	}
	if e.Test {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaInvoice)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineMessageMediaWebPage) encode() []byte {
	var flags int32
	if e.InvertMedia {
		flags |= (1 << 3)
	}
	if e.ForceLargeMedia {
		flags |= (1 << 4)
	}
	if e.ForceSmallMedia {
		flags |= (1 << 5)
	}
	if e.Manual {
		flags |= (1 << 7)
	}
	if e.Safe {
		flags |= (1 << 8)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMessageMediaWebPage)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	x.String(e.URL)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	return x.buf
}

func (e TL_botInlineResult) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 1)
	}
	if e.Description != nil {
		flags |= (1 << 2)
	}
	if e.URL != nil {
		flags |= (1 << 3)
	}
	if e.Thumb != nil {
		flags |= (1 << 4)
	}
	if e.Content != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineResult)
	x.Int(flags)
	x.String(e.ID)
	x.String(e.Type)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Description != nil {
		x.String(*e.Description)
	}
	if e.URL != nil {
		x.String(*e.URL)
	}
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	if e.Content != nil {
		x.Object(e.Content)
	}
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_botInlineMediaResult) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 0)
	}
	if e.Document != nil {
		flags |= (1 << 1)
	}
	if e.Title != nil {
		flags |= (1 << 2)
	}
	if e.Description != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botInlineMediaResult)
	x.Int(flags)
	x.String(e.ID)
	x.String(e.Type)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Description != nil {
		x.String(*e.Description)
	}
	x.Object(e.SendMessage)
	return x.buf
}

func (e TL_messages_botResults) encode() []byte {
	var flags int32
	if e.Gallery {
		flags |= (1 << 0)
	}
	if e.NextOffset != nil {
		flags |= (1 << 1)
	}
	if e.SwitchPM != nil {
		flags |= (1 << 2)
	}
	if e.SwitchWebview != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_botResults)
	x.Int(flags)
	x.Long(e.QueryID)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	if e.SwitchPM != nil {
		x.Object(e.SwitchPM)
	}
	if e.SwitchWebview != nil {
		x.Object(e.SwitchWebview)
	}
	EncodeBuf_GenericVector(x, e.Results)
	x.Int(e.CacheTime)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_exportedMessageLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_exportedMessageLink)
	x.String(e.Link)
	x.String(e.HTML)
	return x.buf
}

func (e TL_messageFwdHeader) encode() []byte {
	var flags int32
	if e.Imported {
		flags |= (1 << 7)
	}
	if e.SavedOut {
		flags |= (1 << 11)
	}
	if e.FromID != nil {
		flags |= (1 << 0)
	}
	if e.FromName != nil {
		flags |= (1 << 5)
	}
	if e.ChannelPost != nil {
		flags |= (1 << 2)
	}
	if e.PostAuthor != nil {
		flags |= (1 << 3)
	}
	if e.SavedFromPeer != nil {
		flags |= (1 << 4)
	}
	if e.SavedFromMsgID != nil {
		flags |= (1 << 4)
	}
	if e.SavedFromID != nil {
		flags |= (1 << 8)
	}
	if e.SavedFromName != nil {
		flags |= (1 << 9)
	}
	if e.SavedDate != nil {
		flags |= (1 << 10)
	}
	if e.PSAType != nil {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageFwdHeader)
	x.Int(flags)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	if e.FromName != nil {
		x.String(*e.FromName)
	}
	x.Int(e.Date)
	if e.ChannelPost != nil {
		x.Int(*e.ChannelPost)
	}
	if e.PostAuthor != nil {
		x.String(*e.PostAuthor)
	}
	if e.SavedFromPeer != nil {
		x.Object(e.SavedFromPeer)
	}
	if e.SavedFromMsgID != nil {
		x.Int(*e.SavedFromMsgID)
	}
	if e.SavedFromID != nil {
		x.Object(e.SavedFromID)
	}
	if e.SavedFromName != nil {
		x.String(*e.SavedFromName)
	}
	if e.SavedDate != nil {
		x.Int(*e.SavedDate)
	}
	if e.PSAType != nil {
		x.String(*e.PSAType)
	}
	return x.buf
}

func (e TL_auth_codeTypeSMS) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeSMS)
	return x.buf
}

func (e TL_auth_codeTypeCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeCall)
	return x.buf
}

func (e TL_auth_codeTypeFlashCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeFlashCall)
	return x.buf
}

func (e TL_auth_codeTypeMissedCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeMissedCall)
	return x.buf
}

func (e TL_auth_codeTypeFragmentSMS) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_codeTypeFragmentSMS)
	return x.buf
}

func (e TL_auth_sentCodeTypeApp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeApp)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeSMS) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeSMS)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeCall)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeFlashCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeFlashCall)
	x.String(e.Pattern)
	return x.buf
}

func (e TL_auth_sentCodeTypeMissedCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeMissedCall)
	x.String(e.Prefix)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeEmailCode) encode() []byte {
	var flags int32
	if e.AppleSigninAllowed {
		flags |= (1 << 0)
	}
	if e.GoogleSigninAllowed {
		flags |= (1 << 1)
	}
	if e.ResetAvailablePeriod != nil {
		flags |= (1 << 3)
	}
	if e.ResetPendingDate != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeEmailCode)
	x.Int(flags)
	x.String(e.EmailPattern)
	x.Int(e.Length)
	if e.ResetAvailablePeriod != nil {
		x.Int(*e.ResetAvailablePeriod)
	}
	if e.ResetPendingDate != nil {
		x.Int(*e.ResetPendingDate)
	}
	return x.buf
}

func (e TL_auth_sentCodeTypeSetUpEmailRequired) encode() []byte {
	var flags int32
	if e.AppleSigninAllowed {
		flags |= (1 << 0)
	}
	if e.GoogleSigninAllowed {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeSetUpEmailRequired)
	x.Int(flags)
	return x.buf
}

func (e TL_auth_sentCodeTypeFragmentSMS) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeFragmentSMS)
	x.String(e.URL)
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeFirebaseSMS) encode() []byte {
	var flags int32
	if e.Nonce != nil {
		flags |= (1 << 0)
	}
	if e.PlayIntegrityProjectID != nil {
		flags |= (1 << 2)
	}
	if e.PlayIntegrityNonce != nil {
		flags |= (1 << 2)
	}
	if e.Receipt != nil {
		flags |= (1 << 1)
	}
	if e.PushTimeout != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeFirebaseSMS)
	x.Int(flags)
	if e.Nonce != nil {
		x.StringBytes(e.Nonce)
	}
	if e.PlayIntegrityProjectID != nil {
		x.Long(*e.PlayIntegrityProjectID)
	}
	if e.PlayIntegrityNonce != nil {
		x.StringBytes(e.PlayIntegrityNonce)
	}
	if e.Receipt != nil {
		x.String(*e.Receipt)
	}
	if e.PushTimeout != nil {
		x.Int(*e.PushTimeout)
	}
	x.Int(e.Length)
	return x.buf
}

func (e TL_auth_sentCodeTypeSMSWord) encode() []byte {
	var flags int32
	if e.Beginning != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeSMSWord)
	x.Int(flags)
	if e.Beginning != nil {
		x.String(*e.Beginning)
	}
	return x.buf
}

func (e TL_auth_sentCodeTypeSMSPhrase) encode() []byte {
	var flags int32
	if e.Beginning != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sentCodeTypeSMSPhrase)
	x.Int(flags)
	if e.Beginning != nil {
		x.String(*e.Beginning)
	}
	return x.buf
}

func (e TL_messages_botCallbackAnswer) encode() []byte {
	var flags int32
	if e.Alert {
		flags |= (1 << 1)
	}
	if e.HasURL {
		flags |= (1 << 3)
	}
	if e.NativeUI {
		flags |= (1 << 4)
	}
	if e.Message != nil {
		flags |= (1 << 0)
	}
	if e.URL != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_botCallbackAnswer)
	x.Int(flags)
	if e.Message != nil {
		x.String(*e.Message)
	}
	if e.URL != nil {
		x.String(*e.URL)
	}
	x.Int(e.CacheTime)
	return x.buf
}

func (e TL_messages_messageEditData) encode() []byte {
	var flags int32
	if e.Caption {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messageEditData)
	x.Int(flags)
	return x.buf
}

func (e TL_inputBotInlineMessageID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageID)
	x.Int(e.DCID)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputBotInlineMessageID64) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotInlineMessageID64)
	x.Int(e.DCID)
	x.Long(e.OwnerID)
	x.Int(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inlineBotSwitchPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineBotSwitchPM)
	x.String(e.Text)
	x.String(e.StartParam)
	return x.buf
}

func (e TL_messages_peerDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_peerDialogs)
	EncodeBuf_GenericVector(x, e.Dialogs)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	x.Object(e.State)
	return x.buf
}

func (e TL_topPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeer)
	x.Object(e.Peer)
	x.Double(e.Rating)
	return x.buf
}

func (e TL_topPeerCategoryBotsPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryBotsPM)
	return x.buf
}

func (e TL_topPeerCategoryBotsInline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryBotsInline)
	return x.buf
}

func (e TL_topPeerCategoryCorrespondents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryCorrespondents)
	return x.buf
}

func (e TL_topPeerCategoryGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryGroups)
	return x.buf
}

func (e TL_topPeerCategoryChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryChannels)
	return x.buf
}

func (e TL_topPeerCategoryPhoneCalls) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryPhoneCalls)
	return x.buf
}

func (e TL_topPeerCategoryForwardUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryForwardUsers)
	return x.buf
}

func (e TL_topPeerCategoryForwardChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryForwardChats)
	return x.buf
}

func (e TL_topPeerCategoryBotsApp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryBotsApp)
	return x.buf
}

func (e TL_topPeerCategoryPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_topPeerCategoryPeers)
	x.Object(e.Category)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_contacts_topPeersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_topPeersNotModified)
	return x.buf
}

func (e TL_contacts_topPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_topPeers)
	EncodeBuf_GenericVector(x, e.Categories)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_contacts_topPeersDisabled) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_topPeersDisabled)
	return x.buf
}

func (e TL_draftMessageEmpty) encode() []byte {
	var flags int32
	if e.Date != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_draftMessageEmpty)
	x.Int(flags)
	if e.Date != nil {
		x.Int(*e.Date)
	}
	return x.buf
}

func (e TL_draftMessage) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.InvertMedia {
		flags |= (1 << 6)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 4)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.Media != nil {
		flags |= (1 << 5)
	}
	if e.Effect != nil {
		flags |= (1 << 7)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_draftMessage)
	x.Int(flags)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.Media != nil {
		x.Object(e.Media)
	}
	x.Int(e.Date)
	if e.Effect != nil {
		x.Long(*e.Effect)
	}
	return x.buf
}

func (e TL_messages_featuredStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_featuredStickersNotModified)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messages_featuredStickers) encode() []byte {
	var flags int32
	if e.Premium {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_featuredStickers)
	x.Int(flags)
	x.Long(e.Hash)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Sets)
	x.VectorLong(e.Unread)
	return x.buf
}

func (e TL_messages_recentStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_recentStickersNotModified)
	return x.buf
}

func (e TL_messages_recentStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_recentStickers)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Packs)
	EncodeBuf_GenericVector(x, e.Stickers)
	x.VectorInt(e.Dates)
	return x.buf
}

func (e TL_messages_archivedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_archivedStickers)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Sets)
	return x.buf
}

func (e TL_messages_stickerSetInstallResultSuccess) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickerSetInstallResultSuccess)
	return x.buf
}

func (e TL_messages_stickerSetInstallResultArchive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_stickerSetInstallResultArchive)
	EncodeBuf_GenericVector(x, e.Sets)
	return x.buf
}

func (e TL_stickerSetCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSetCovered)
	x.Object(e.Set)
	x.Object(e.Cover)
	return x.buf
}

func (e TL_stickerSetMultiCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSetMultiCovered)
	x.Object(e.Set)
	EncodeBuf_GenericVector(x, e.Covers)
	return x.buf
}

func (e TL_stickerSetFullCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSetFullCovered)
	x.Object(e.Set)
	EncodeBuf_GenericVector(x, e.Packs)
	EncodeBuf_GenericVector(x, e.Keywords)
	EncodeBuf_GenericVector(x, e.Documents)
	return x.buf
}

func (e TL_stickerSetNoCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerSetNoCovered)
	x.Object(e.Set)
	return x.buf
}

func (e TL_maskCoords) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_maskCoords)
	x.Int(e.N)
	x.Double(e.X)
	x.Double(e.Y)
	x.Double(e.Zoom)
	return x.buf
}

func (e TL_inputStickeredMediaPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickeredMediaPhoto)
	x.Object(e.ID)
	return x.buf
}

func (e TL_inputStickeredMediaDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickeredMediaDocument)
	x.Object(e.ID)
	return x.buf
}

func (e TL_game) encode() []byte {
	var flags int32
	if e.Document != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_game)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.ShortName)
	x.String(e.Title)
	x.String(e.Description)
	x.Object(e.Photo)
	if e.Document != nil {
		x.Object(e.Document)
	}
	return x.buf
}

func (e TL_inputGameID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGameID)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputGameShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGameShortName)
	x.Object(e.BotID)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_highScore) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_highScore)
	x.Int(e.Pos)
	x.Long(e.UserID)
	x.Int(e.Score)
	return x.buf
}

func (e TL_messages_highScores) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_highScores)
	EncodeBuf_GenericVector(x, e.Scores)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_textEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textEmpty)
	return x.buf
}

func (e TL_textPlain) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textPlain)
	x.String(e.Text)
	return x.buf
}

func (e TL_textBold) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textBold)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textItalic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textItalic)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textUnderline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textUnderline)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textStrike) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textStrike)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textFixed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textFixed)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textURL)
	x.Object(e.Text)
	x.String(e.URL)
	x.Long(e.WebpageID)
	return x.buf
}

func (e TL_textEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textEmail)
	x.Object(e.Text)
	x.String(e.Email)
	return x.buf
}

func (e TL_textConcat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textConcat)
	EncodeBuf_GenericVector(x, e.Texts)
	return x.buf
}

func (e TL_textSubscript) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textSubscript)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textSuperscript) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textSuperscript)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textMarked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textMarked)
	x.Object(e.Text)
	return x.buf
}

func (e TL_textPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textPhone)
	x.Object(e.Text)
	x.String(e.Phone)
	return x.buf
}

func (e TL_textImage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textImage)
	x.Long(e.DocumentID)
	x.Int(e.W)
	x.Int(e.H)
	return x.buf
}

func (e TL_textAnchor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textAnchor)
	x.Object(e.Text)
	x.String(e.Name)
	return x.buf
}

func (e TL_pageBlockUnsupported) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockUnsupported)
	return x.buf
}

func (e TL_pageBlockTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockTitle)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockSubtitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockSubtitle)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockAuthorDate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockAuthorDate)
	x.Object(e.Author)
	x.Int(e.PublishedDate)
	return x.buf
}

func (e TL_pageBlockHeader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockHeader)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockSubheader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockSubheader)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockParagraph) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockParagraph)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockPreformatted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockPreformatted)
	x.Object(e.Text)
	x.String(e.Language)
	return x.buf
}

func (e TL_pageBlockFooter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockFooter)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockDivider) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockDivider)
	return x.buf
}

func (e TL_pageBlockAnchor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockAnchor)
	x.String(e.Name)
	return x.buf
}

func (e TL_pageBlockList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockList)
	EncodeBuf_GenericVector(x, e.Items)
	return x.buf
}

func (e TL_pageBlockBlockquote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockBlockquote)
	x.Object(e.Text)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockPullquote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockPullquote)
	x.Object(e.Text)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockPhoto) encode() []byte {
	var flags int32
	if e.URL != nil {
		flags |= (1 << 0)
	}
	if e.WebpageID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockPhoto)
	x.Int(flags)
	x.Long(e.PhotoID)
	x.Object(e.Caption)
	if e.URL != nil {
		x.String(*e.URL)
	}
	if e.WebpageID != nil {
		x.Long(*e.WebpageID)
	}
	return x.buf
}

func (e TL_pageBlockVideo) encode() []byte {
	var flags int32
	if e.Autoplay {
		flags |= (1 << 0)
	}
	if e.Loop {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockVideo)
	x.Int(flags)
	x.Long(e.VideoID)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockCover) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockCover)
	x.Object(e.Cover)
	return x.buf
}

func (e TL_pageBlockEmbed) encode() []byte {
	var flags int32
	if e.FullWidth {
		flags |= (1 << 0)
	}
	if e.AllowScrolling {
		flags |= (1 << 3)
	}
	if e.URL != nil {
		flags |= (1 << 1)
	}
	if e.HTML != nil {
		flags |= (1 << 2)
	}
	if e.PosterPhotoID != nil {
		flags |= (1 << 4)
	}
	if e.W != nil {
		flags |= (1 << 5)
	}
	if e.H != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockEmbed)
	x.Int(flags)
	if e.URL != nil {
		x.String(*e.URL)
	}
	if e.HTML != nil {
		x.String(*e.HTML)
	}
	if e.PosterPhotoID != nil {
		x.Long(*e.PosterPhotoID)
	}
	if e.W != nil {
		x.Int(*e.W)
	}
	if e.H != nil {
		x.Int(*e.H)
	}
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockEmbedPost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockEmbedPost)
	x.String(e.URL)
	x.Long(e.WebpageID)
	x.Long(e.AuthorPhotoID)
	x.String(e.Author)
	x.Int(e.Date)
	EncodeBuf_GenericVector(x, e.Blocks)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockCollage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockCollage)
	EncodeBuf_GenericVector(x, e.Items)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockSlideshow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockSlideshow)
	EncodeBuf_GenericVector(x, e.Items)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_pageBlockAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockAudio)
	x.Long(e.AudioID)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_pageBlockKicker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockKicker)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageBlockTable) encode() []byte {
	var flags int32
	if e.Bordered {
		flags |= (1 << 0)
	}
	if e.Striped {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockTable)
	x.Int(flags)
	x.Object(e.Title)
	EncodeBuf_GenericVector(x, e.Rows)
	return x.buf
}

func (e TL_pageBlockOrderedList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockOrderedList)
	EncodeBuf_GenericVector(x, e.Items)
	return x.buf
}

func (e TL_pageBlockDetails) encode() []byte {
	var flags int32
	if e.Open {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockDetails)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Blocks)
	x.Object(e.Title)
	return x.buf
}

func (e TL_pageBlockRelatedArticles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockRelatedArticles)
	x.Object(e.Title)
	EncodeBuf_GenericVector(x, e.Articles)
	return x.buf
}

func (e TL_pageBlockMap) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageBlockMap)
	x.Object(e.Geo)
	x.Int(e.Zoom)
	x.Int(e.W)
	x.Int(e.H)
	x.Object(e.Caption)
	return x.buf
}

func (e TL_phoneCallDiscardReasonMissed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscardReasonMissed)
	return x.buf
}

func (e TL_phoneCallDiscardReasonDisconnect) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscardReasonDisconnect)
	return x.buf
}

func (e TL_phoneCallDiscardReasonHangup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscardReasonHangup)
	return x.buf
}

func (e TL_phoneCallDiscardReasonBusy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscardReasonBusy)
	return x.buf
}

func (e TL_dataJSON) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dataJSON)
	x.String(e.Data)
	return x.buf
}

func (e TL_labeledPrice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_labeledPrice)
	x.String(e.Label)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_invoice) encode() []byte {
	var flags int32
	if e.Test {
		flags |= (1 << 0)
	}
	if e.NameRequested {
		flags |= (1 << 1)
	}
	if e.PhoneRequested {
		flags |= (1 << 2)
	}
	if e.EmailRequested {
		flags |= (1 << 3)
	}
	if e.ShippingAddressRequested {
		flags |= (1 << 4)
	}
	if e.Flexible {
		flags |= (1 << 5)
	}
	if e.PhoneToProvider {
		flags |= (1 << 6)
	}
	if e.EmailToProvider {
		flags |= (1 << 7)
	}
	if e.Recurring {
		flags |= (1 << 9)
	}
	if e.MaxTipAmount != nil {
		flags |= (1 << 8)
	}
	if e.SuggestedTipAmounts != nil {
		flags |= (1 << 8)
	}
	if e.TermsURL != nil {
		flags |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_invoice)
	x.Int(flags)
	x.String(e.Currency)
	EncodeBuf_GenericVector(x, e.Prices)
	if e.MaxTipAmount != nil {
		x.Long(*e.MaxTipAmount)
	}
	if e.SuggestedTipAmounts != nil {
		x.VectorLong(e.SuggestedTipAmounts)
	}
	if e.TermsURL != nil {
		x.String(*e.TermsURL)
	}
	return x.buf
}

func (e TL_paymentCharge) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_paymentCharge)
	x.String(e.ID)
	x.String(e.ProviderChargeID)
	return x.buf
}

func (e TL_postAddress) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_postAddress)
	x.String(e.StreetLine1)
	x.String(e.StreetLine2)
	x.String(e.City)
	x.String(e.State)
	x.String(e.CountryISO2)
	x.String(e.PostCode)
	return x.buf
}

func (e TL_paymentRequestedInfo) encode() []byte {
	var flags int32
	if e.Name != nil {
		flags |= (1 << 0)
	}
	if e.Phone != nil {
		flags |= (1 << 1)
	}
	if e.Email != nil {
		flags |= (1 << 2)
	}
	if e.ShippingAddress != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_paymentRequestedInfo)
	x.Int(flags)
	if e.Name != nil {
		x.String(*e.Name)
	}
	if e.Phone != nil {
		x.String(*e.Phone)
	}
	if e.Email != nil {
		x.String(*e.Email)
	}
	if e.ShippingAddress != nil {
		x.Object(e.ShippingAddress)
	}
	return x.buf
}

func (e TL_paymentSavedCredentialsCard) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_paymentSavedCredentialsCard)
	x.String(e.ID)
	x.String(e.Title)
	return x.buf
}

func (e TL_webDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_webDocument)
	x.String(e.URL)
	x.Long(e.AccessHash)
	x.Int(e.Size)
	x.String(e.MIMEType)
	EncodeBuf_GenericVector(x, e.Attributes)
	return x.buf
}

func (e TL_webDocumentNoProxy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_webDocumentNoProxy)
	x.String(e.URL)
	x.Int(e.Size)
	x.String(e.MIMEType)
	EncodeBuf_GenericVector(x, e.Attributes)
	return x.buf
}

func (e TL_inputWebDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWebDocument)
	x.String(e.URL)
	x.Int(e.Size)
	x.String(e.MIMEType)
	EncodeBuf_GenericVector(x, e.Attributes)
	return x.buf
}

func (e TL_inputWebFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWebFileLocation)
	x.String(e.URL)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputWebFileGeoPointLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWebFileGeoPointLocation)
	x.Object(e.GeoPoint)
	x.Long(e.AccessHash)
	x.Int(e.W)
	x.Int(e.H)
	x.Int(e.Zoom)
	x.Int(e.Scale)
	return x.buf
}

func (e TL_inputWebFileAudioAlbumThumbLocation) encode() []byte {
	var flags int32
	if e.Small {
		flags |= (1 << 2)
	}
	if e.Document != nil {
		flags |= (1 << 0)
	}
	if e.Title != nil {
		flags |= (1 << 1)
	}
	if e.Performer != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWebFileAudioAlbumThumbLocation)
	x.Int(flags)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Performer != nil {
		x.String(*e.Performer)
	}
	return x.buf
}

func (e TL_upload_webFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_webFile)
	x.Int(e.Size)
	x.String(e.MIMEType)
	x.Object(e.FileType)
	x.Int(e.Mtime)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_payments_paymentForm) encode() []byte {
	var flags int32
	if e.CanSaveCredentials {
		flags |= (1 << 2)
	}
	if e.PasswordMissing {
		flags |= (1 << 3)
	}
	if e.Photo != nil {
		flags |= (1 << 5)
	}
	if e.NativeProvider != nil {
		flags |= (1 << 4)
	}
	if e.NativeParams != nil {
		flags |= (1 << 4)
	}
	if e.AdditionalMethods != nil {
		flags |= (1 << 6)
	}
	if e.SavedInfo != nil {
		flags |= (1 << 0)
	}
	if e.SavedCredentials != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentForm)
	x.Int(flags)
	x.Long(e.FormID)
	x.Long(e.BotID)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	x.Long(e.ProviderID)
	x.String(e.URL)
	if e.NativeProvider != nil {
		x.String(*e.NativeProvider)
	}
	if e.NativeParams != nil {
		x.Object(e.NativeParams)
	}
	if e.AdditionalMethods != nil {
		EncodeBuf_GenericVector(x, e.AdditionalMethods)
	}
	if e.SavedInfo != nil {
		x.Object(e.SavedInfo)
	}
	if e.SavedCredentials != nil {
		EncodeBuf_GenericVector(x, e.SavedCredentials)
	}
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_payments_paymentFormStars) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentFormStars)
	x.Int(flags)
	x.Long(e.FormID)
	x.Long(e.BotID)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_payments_validatedRequestedInfo) encode() []byte {
	var flags int32
	if e.ID != nil {
		flags |= (1 << 0)
	}
	if e.ShippingOptions != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_validatedRequestedInfo)
	x.Int(flags)
	if e.ID != nil {
		x.String(*e.ID)
	}
	if e.ShippingOptions != nil {
		EncodeBuf_GenericVector(x, e.ShippingOptions)
	}
	return x.buf
}

func (e TL_payments_paymentResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentResult)
	x.Object(e.Updates)
	return x.buf
}

func (e TL_payments_paymentVerificationNeeded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentVerificationNeeded)
	x.String(e.URL)
	return x.buf
}

func (e TL_payments_paymentReceipt) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 2)
	}
	if e.Info != nil {
		flags |= (1 << 0)
	}
	if e.Shipping != nil {
		flags |= (1 << 1)
	}
	if e.TipAmount != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentReceipt)
	x.Int(flags)
	x.Int(e.Date)
	x.Long(e.BotID)
	x.Long(e.ProviderID)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	if e.Info != nil {
		x.Object(e.Info)
	}
	if e.Shipping != nil {
		x.Object(e.Shipping)
	}
	if e.TipAmount != nil {
		x.Long(*e.TipAmount)
	}
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	x.String(e.CredentialsTitle)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_payments_paymentReceiptStars) encode() []byte {
	var flags int32
	if e.Photo != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_paymentReceiptStars)
	x.Int(flags)
	x.Int(e.Date)
	x.Long(e.BotID)
	x.String(e.Title)
	x.String(e.Description)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	x.Object(e.Invoice)
	x.String(e.Currency)
	x.Long(e.TotalAmount)
	x.String(e.TransactionID)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_payments_savedInfo) encode() []byte {
	var flags int32
	if e.HasSavedCredentials {
		flags |= (1 << 1)
	}
	if e.SavedInfo != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_savedInfo)
	x.Int(flags)
	if e.SavedInfo != nil {
		x.Object(e.SavedInfo)
	}
	return x.buf
}

func (e TL_inputPaymentCredentialsSaved) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPaymentCredentialsSaved)
	x.String(e.ID)
	x.StringBytes(e.TmpPassword)
	return x.buf
}

func (e TL_inputPaymentCredentials) encode() []byte {
	var flags int32
	if e.Save {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPaymentCredentials)
	x.Int(flags)
	x.Object(e.Data)
	return x.buf
}

func (e TL_inputPaymentCredentialsApplePay) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPaymentCredentialsApplePay)
	x.Object(e.PaymentData)
	return x.buf
}

func (e TL_inputPaymentCredentialsGooglePay) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPaymentCredentialsGooglePay)
	x.Object(e.PaymentToken)
	return x.buf
}

func (e TL_account_tmpPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_tmpPassword)
	x.StringBytes(e.TmpPassword)
	x.Int(e.ValidUntil)
	return x.buf
}

func (e TL_shippingOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_shippingOption)
	x.String(e.ID)
	x.String(e.Title)
	EncodeBuf_GenericVector(x, e.Prices)
	return x.buf
}

func (e TL_inputStickerSetItem) encode() []byte {
	var flags int32
	if e.MaskCoords != nil {
		flags |= (1 << 0)
	}
	if e.Keywords != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStickerSetItem)
	x.Int(flags)
	x.Object(e.Document)
	x.String(e.Emoji)
	if e.MaskCoords != nil {
		x.Object(e.MaskCoords)
	}
	if e.Keywords != nil {
		x.String(*e.Keywords)
	}
	return x.buf
}

func (e TL_inputPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputPhoneCall)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_phoneCallEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallEmpty)
	x.Long(e.ID)
	return x.buf
}

func (e TL_phoneCallWaiting) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 6)
	}
	if e.ReceiveDate != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallWaiting)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.Object(e.Protocol)
	if e.ReceiveDate != nil {
		x.Int(*e.ReceiveDate)
	}
	return x.buf
}

func (e TL_phoneCallRequested) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallRequested)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GAHash)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phoneCallAccepted) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallAccepted)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GB)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phoneCall) encode() []byte {
	var flags int32
	if e.P2PAllowed {
		flags |= (1 << 5)
	}
	if e.Video {
		flags |= (1 << 6)
	}
	if e.CustomParameters != nil {
		flags |= (1 << 7)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCall)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Date)
	x.Long(e.AdminID)
	x.Long(e.ParticipantID)
	x.StringBytes(e.GAOrB)
	x.Long(e.KeyFingerprint)
	x.Object(e.Protocol)
	EncodeBuf_GenericVector(x, e.Connections)
	x.Int(e.StartDate)
	if e.CustomParameters != nil {
		x.Object(e.CustomParameters)
	}
	return x.buf
}

func (e TL_phoneCallDiscarded) encode() []byte {
	var flags int32
	if e.NeedRating {
		flags |= (1 << 2)
	}
	if e.NeedDebug {
		flags |= (1 << 3)
	}
	if e.Video {
		flags |= (1 << 6)
	}
	if e.Reason != nil {
		flags |= (1 << 0)
	}
	if e.Duration != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallDiscarded)
	x.Int(flags)
	x.Long(e.ID)
	if e.Reason != nil {
		x.Object(e.Reason)
	}
	if e.Duration != nil {
		x.Int(*e.Duration)
	}
	return x.buf
}

func (e TL_phoneConnection) encode() []byte {
	var flags int32
	if e.TCP {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneConnection)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.IP)
	x.String(e.IPv6)
	x.Int(e.Port)
	x.StringBytes(e.PeerTag)
	return x.buf
}

func (e TL_phoneConnectionWebrtc) encode() []byte {
	var flags int32
	if e.Turn {
		flags |= (1 << 0)
	}
	if e.STUN {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneConnectionWebrtc)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.IP)
	x.String(e.IPv6)
	x.Int(e.Port)
	x.String(e.Username)
	x.String(e.Password)
	return x.buf
}

func (e TL_phoneCallProtocol) encode() []byte {
	var flags int32
	if e.UDPP2P {
		flags |= (1 << 0)
	}
	if e.UDPReflector {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phoneCallProtocol)
	x.Int(flags)
	x.Int(e.MinLayer)
	x.Int(e.MaxLayer)
	x.VectorString(e.LibraryVersions)
	return x.buf
}

func (e TL_phone_phoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_phoneCall)
	x.Object(e.PhoneCall)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_upload_cdnFileReuploadNeeded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_cdnFileReuploadNeeded)
	x.StringBytes(e.RequestToken)
	return x.buf
}

func (e TL_upload_cdnFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_cdnFile)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_cdnPublicKey) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_cdnPublicKey)
	x.Int(e.DCID)
	x.String(e.PublicKey)
	return x.buf
}

func (e TL_cdnConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_cdnConfig)
	EncodeBuf_GenericVector(x, e.PublicKeys)
	return x.buf
}

func (e TL_langPackString) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackString)
	x.String(e.Key)
	x.String(e.Value)
	return x.buf
}

func (e TL_langPackStringPluralized) encode() []byte {
	var flags int32
	if e.ZeroValue != nil {
		flags |= (1 << 0)
	}
	if e.OneValue != nil {
		flags |= (1 << 1)
	}
	if e.TwoValue != nil {
		flags |= (1 << 2)
	}
	if e.FewValue != nil {
		flags |= (1 << 3)
	}
	if e.ManyValue != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackStringPluralized)
	x.Int(flags)
	x.String(e.Key)
	if e.ZeroValue != nil {
		x.String(*e.ZeroValue)
	}
	if e.OneValue != nil {
		x.String(*e.OneValue)
	}
	if e.TwoValue != nil {
		x.String(*e.TwoValue)
	}
	if e.FewValue != nil {
		x.String(*e.FewValue)
	}
	if e.ManyValue != nil {
		x.String(*e.ManyValue)
	}
	x.String(e.OtherValue)
	return x.buf
}

func (e TL_langPackStringDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackStringDeleted)
	x.String(e.Key)
	return x.buf
}

func (e TL_langPackDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackDifference)
	x.String(e.LangCode)
	x.Int(e.FromVersion)
	x.Int(e.Version)
	EncodeBuf_GenericVector(x, e.Strings)
	return x.buf
}

func (e TL_langPackLanguage) encode() []byte {
	var flags int32
	if e.Official {
		flags |= (1 << 0)
	}
	if e.RTL {
		flags |= (1 << 2)
	}
	if e.Beta {
		flags |= (1 << 3)
	}
	if e.BaseLangCode != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_langPackLanguage)
	x.Int(flags)
	x.String(e.Name)
	x.String(e.NativeName)
	x.String(e.LangCode)
	if e.BaseLangCode != nil {
		x.String(*e.BaseLangCode)
	}
	x.String(e.PluralCode)
	x.Int(e.StringsCount)
	x.Int(e.TranslatedCount)
	x.String(e.TranslationsURL)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeTitle)
	x.String(e.PrevValue)
	x.String(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeAbout)
	x.String(e.PrevValue)
	x.String(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeUsername)
	x.String(e.PrevValue)
	x.String(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangePhoto)
	x.Object(e.PrevPhoto)
	x.Object(e.NewPhoto)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleInvites)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleSignatures) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleSignatures)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionUpdatePinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionUpdatePinned)
	x.Object(e.Message)
	return x.buf
}

func (e TL_channelAdminLogEventActionEditMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionEditMessage)
	x.Object(e.PrevMessage)
	x.Object(e.NewMessage)
	return x.buf
}

func (e TL_channelAdminLogEventActionDeleteMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionDeleteMessage)
	x.Object(e.Message)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantJoin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantJoin)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantLeave) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantLeave)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantInvite)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantToggleBan) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantToggleBan)
	x.Object(e.PrevParticipant)
	x.Object(e.NewParticipant)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantToggleAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantToggleAdmin)
	x.Object(e.PrevParticipant)
	x.Object(e.NewParticipant)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeStickerSet)
	x.Object(e.PrevStickerset)
	x.Object(e.NewStickerset)
	return x.buf
}

func (e TL_channelAdminLogEventActionTogglePreHistoryHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionTogglePreHistoryHidden)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionDefaultBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionDefaultBannedRights)
	x.Object(e.PrevBannedRights)
	x.Object(e.NewBannedRights)
	return x.buf
}

func (e TL_channelAdminLogEventActionStopPoll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionStopPoll)
	x.Object(e.Message)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeLinkedChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeLinkedChat)
	x.Long(e.PrevValue)
	x.Long(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeLocation)
	x.Object(e.PrevValue)
	x.Object(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleSlowMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleSlowMode)
	x.Int(e.PrevValue)
	x.Int(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionStartGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionStartGroupCall)
	x.Object(e.Call)
	return x.buf
}

func (e TL_channelAdminLogEventActionDiscardGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionDiscardGroupCall)
	x.Object(e.Call)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantMute) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantMute)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantUnmute) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantUnmute)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleGroupCallSetting) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleGroupCallSetting)
	x.Bool(e.JoinMuted)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantJoinByInvite) encode() []byte {
	var flags int32
	if e.ViaChatlist {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantJoinByInvite)
	x.Int(flags)
	x.Object(e.Invite)
	return x.buf
}

func (e TL_channelAdminLogEventActionExportedInviteDelete) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionExportedInviteDelete)
	x.Object(e.Invite)
	return x.buf
}

func (e TL_channelAdminLogEventActionExportedInviteRevoke) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionExportedInviteRevoke)
	x.Object(e.Invite)
	return x.buf
}

func (e TL_channelAdminLogEventActionExportedInviteEdit) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionExportedInviteEdit)
	x.Object(e.PrevInvite)
	x.Object(e.NewInvite)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantVolume) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantVolume)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeHistoryTTL)
	x.Int(e.PrevValue)
	x.Int(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantJoinByRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantJoinByRequest)
	x.Object(e.Invite)
	x.Long(e.ApprovedBy)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleNoForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleNoForwards)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionSendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionSendMessage)
	x.Object(e.Message)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeAvailableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeAvailableReactions)
	x.Object(e.PrevValue)
	x.Object(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeUsernames)
	x.VectorString(e.PrevValue)
	x.VectorString(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleForum) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleForum)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionCreateTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionCreateTopic)
	x.Object(e.Topic)
	return x.buf
}

func (e TL_channelAdminLogEventActionEditTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionEditTopic)
	x.Object(e.PrevTopic)
	x.Object(e.NewTopic)
	return x.buf
}

func (e TL_channelAdminLogEventActionDeleteTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionDeleteTopic)
	x.Object(e.Topic)
	return x.buf
}

func (e TL_channelAdminLogEventActionPINTopic) encode() []byte {
	var flags int32
	if e.PrevTopic != nil {
		flags |= (1 << 0)
	}
	if e.NewTopic != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionPINTopic)
	x.Int(flags)
	if e.PrevTopic != nil {
		x.Object(e.PrevTopic)
	}
	if e.NewTopic != nil {
		x.Object(e.NewTopic)
	}
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleAntiSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleAntiSpam)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangePeerColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangePeerColor)
	x.Object(e.PrevValue)
	x.Object(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeProfilePeerColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeProfilePeerColor)
	x.Object(e.PrevValue)
	x.Object(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeWallpaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeWallpaper)
	x.Object(e.PrevValue)
	x.Object(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeEmojiStatus)
	x.Object(e.PrevValue)
	x.Object(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeEmojiStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionChangeEmojiStickerSet)
	x.Object(e.PrevStickerset)
	x.Object(e.NewStickerset)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleSignatureProfiles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionToggleSignatureProfiles)
	x.Bool(e.NewValue)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantSubExtend) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventActionParticipantSubExtend)
	x.Object(e.PrevParticipant)
	x.Object(e.NewParticipant)
	return x.buf
}

func (e TL_channelAdminLogEvent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEvent)
	x.Long(e.ID)
	x.Int(e.Date)
	x.Long(e.UserID)
	x.Object(e.Action)
	return x.buf
}

func (e TL_channels_adminLogResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_adminLogResults)
	EncodeBuf_GenericVector(x, e.Events)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_channelAdminLogEventsFilter) encode() []byte {
	var flags int32
	if e.Join {
		flags |= (1 << 0)
	}
	if e.Leave {
		flags |= (1 << 1)
	}
	if e.Invite {
		flags |= (1 << 2)
	}
	if e.Ban {
		flags |= (1 << 3)
	}
	if e.Unban {
		flags |= (1 << 4)
	}
	if e.Kick {
		flags |= (1 << 5)
	}
	if e.Unkick {
		flags |= (1 << 6)
	}
	if e.Promote {
		flags |= (1 << 7)
	}
	if e.Demote {
		flags |= (1 << 8)
	}
	if e.Info {
		flags |= (1 << 9)
	}
	if e.Settings {
		flags |= (1 << 10)
	}
	if e.Pinned {
		flags |= (1 << 11)
	}
	if e.Edit {
		flags |= (1 << 12)
	}
	if e.Delete {
		flags |= (1 << 13)
	}
	if e.GroupCall {
		flags |= (1 << 14)
	}
	if e.Invites {
		flags |= (1 << 15)
	}
	if e.Send {
		flags |= (1 << 16)
	}
	if e.Forums {
		flags |= (1 << 17)
	}
	if e.SubExtend {
		flags |= (1 << 18)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelAdminLogEventsFilter)
	x.Int(flags)
	return x.buf
}

func (e TL_popularContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_popularContact)
	x.Long(e.ClientID)
	x.Int(e.Importers)
	return x.buf
}

func (e TL_messages_favedStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_favedStickersNotModified)
	return x.buf
}

func (e TL_messages_favedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_favedStickers)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Packs)
	EncodeBuf_GenericVector(x, e.Stickers)
	return x.buf
}

func (e TL_recentMeURLUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeURLUnknown)
	x.String(e.URL)
	return x.buf
}

func (e TL_recentMeURLUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeURLUser)
	x.String(e.URL)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_recentMeURLChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeURLChat)
	x.String(e.URL)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_recentMeURLChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeURLChatInvite)
	x.String(e.URL)
	x.Object(e.ChatInvite)
	return x.buf
}

func (e TL_recentMeURLStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_recentMeURLStickerSet)
	x.String(e.URL)
	x.Object(e.Set)
	return x.buf
}

func (e TL_help_recentMeURLs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_recentMeURLs)
	EncodeBuf_GenericVector(x, e.URLs)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_inputSingleMedia) encode() []byte {
	var flags int32
	if e.Entities != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSingleMedia)
	x.Int(flags)
	x.Object(e.Media)
	x.Long(e.RandomID)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	return x.buf
}

func (e TL_webAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_webAuthorization)
	x.Long(e.Hash)
	x.Long(e.BotID)
	x.String(e.Domain)
	x.String(e.Browser)
	x.String(e.Platform)
	x.Int(e.DateCreated)
	x.Int(e.DateActive)
	x.String(e.IP)
	x.String(e.Region)
	return x.buf
}

func (e TL_account_webAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_webAuthorizations)
	EncodeBuf_GenericVector(x, e.Authorizations)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_inputMessageID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessageID)
	x.Int(e.ID)
	return x.buf
}

func (e TL_inputMessageReplyTo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessageReplyTo)
	x.Int(e.ID)
	return x.buf
}

func (e TL_inputMessagePinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessagePinned)
	return x.buf
}

func (e TL_inputMessageCallbackQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMessageCallbackQuery)
	x.Int(e.ID)
	x.Long(e.QueryID)
	return x.buf
}

func (e TL_inputDialogPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDialogPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_inputDialogPeerFolder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputDialogPeerFolder)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_dialogPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_dialogPeerFolder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogPeerFolder)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_messages_foundStickerSetsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_foundStickerSetsNotModified)
	return x.buf
}

func (e TL_messages_foundStickerSets) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_foundStickerSets)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Sets)
	return x.buf
}

func (e TL_fileHash) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_fileHash)
	x.Long(e.Offset)
	x.Int(e.Limit)
	x.StringBytes(e.Hash)
	return x.buf
}

func (e TL_inputClientProxy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputClientProxy)
	x.String(e.Address)
	x.Int(e.Port)
	return x.buf
}

func (e TL_help_termsOfServiceUpdateEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_termsOfServiceUpdateEmpty)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_help_termsOfServiceUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_termsOfServiceUpdate)
	x.Int(e.Expires)
	x.Object(e.TermsOfService)
	return x.buf
}

func (e TL_inputSecureFileUploaded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSecureFileUploaded)
	x.Long(e.ID)
	x.Int(e.Parts)
	x.String(e.MD5Checksum)
	x.StringBytes(e.FileHash)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_inputSecureFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSecureFile)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_secureFileEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureFileEmpty)
	return x.buf
}

func (e TL_secureFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureFile)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Long(e.Size)
	x.Int(e.DCID)
	x.Int(e.Date)
	x.StringBytes(e.FileHash)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_secureData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureData)
	x.StringBytes(e.Data)
	x.StringBytes(e.DataHash)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_securePlainPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePlainPhone)
	x.String(e.Phone)
	return x.buf
}

func (e TL_securePlainEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePlainEmail)
	x.String(e.Email)
	return x.buf
}

func (e TL_secureValueTypePersonalDetails) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypePersonalDetails)
	return x.buf
}

func (e TL_secureValueTypePassport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypePassport)
	return x.buf
}

func (e TL_secureValueTypeDriverLicense) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeDriverLicense)
	return x.buf
}

func (e TL_secureValueTypeIdentityCard) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeIdentityCard)
	return x.buf
}

func (e TL_secureValueTypeInternalPassport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeInternalPassport)
	return x.buf
}

func (e TL_secureValueTypeAddress) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeAddress)
	return x.buf
}

func (e TL_secureValueTypeUtilityBill) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeUtilityBill)
	return x.buf
}

func (e TL_secureValueTypeBankStatement) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeBankStatement)
	return x.buf
}

func (e TL_secureValueTypeRentalAgreement) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeRentalAgreement)
	return x.buf
}

func (e TL_secureValueTypePassportRegistration) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypePassportRegistration)
	return x.buf
}

func (e TL_secureValueTypeTemporaryRegistration) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeTemporaryRegistration)
	return x.buf
}

func (e TL_secureValueTypePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypePhone)
	return x.buf
}

func (e TL_secureValueTypeEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueTypeEmail)
	return x.buf
}

func (e TL_secureValue) encode() []byte {
	var flags int32
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.FrontSide != nil {
		flags |= (1 << 1)
	}
	if e.ReverseSide != nil {
		flags |= (1 << 2)
	}
	if e.Selfie != nil {
		flags |= (1 << 3)
	}
	if e.Translation != nil {
		flags |= (1 << 6)
	}
	if e.Files != nil {
		flags |= (1 << 4)
	}
	if e.PlainData != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValue)
	x.Int(flags)
	x.Object(e.Type)
	if e.Data != nil {
		x.Object(e.Data)
	}
	if e.FrontSide != nil {
		x.Object(e.FrontSide)
	}
	if e.ReverseSide != nil {
		x.Object(e.ReverseSide)
	}
	if e.Selfie != nil {
		x.Object(e.Selfie)
	}
	if e.Translation != nil {
		EncodeBuf_GenericVector(x, e.Translation)
	}
	if e.Files != nil {
		EncodeBuf_GenericVector(x, e.Files)
	}
	if e.PlainData != nil {
		x.Object(e.PlainData)
	}
	x.StringBytes(e.Hash)
	return x.buf
}

func (e TL_inputSecureValue) encode() []byte {
	var flags int32
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.FrontSide != nil {
		flags |= (1 << 1)
	}
	if e.ReverseSide != nil {
		flags |= (1 << 2)
	}
	if e.Selfie != nil {
		flags |= (1 << 3)
	}
	if e.Translation != nil {
		flags |= (1 << 6)
	}
	if e.Files != nil {
		flags |= (1 << 4)
	}
	if e.PlainData != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputSecureValue)
	x.Int(flags)
	x.Object(e.Type)
	if e.Data != nil {
		x.Object(e.Data)
	}
	if e.FrontSide != nil {
		x.Object(e.FrontSide)
	}
	if e.ReverseSide != nil {
		x.Object(e.ReverseSide)
	}
	if e.Selfie != nil {
		x.Object(e.Selfie)
	}
	if e.Translation != nil {
		EncodeBuf_GenericVector(x, e.Translation)
	}
	if e.Files != nil {
		EncodeBuf_GenericVector(x, e.Files)
	}
	if e.PlainData != nil {
		x.Object(e.PlainData)
	}
	return x.buf
}

func (e TL_secureValueHash) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueHash)
	x.Object(e.Type)
	x.StringBytes(e.Hash)
	return x.buf
}

func (e TL_secureValueErrorData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorData)
	x.Object(e.Type)
	x.StringBytes(e.DataHash)
	x.String(e.Field)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorFrontSide) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorFrontSide)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorReverseSide) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorReverseSide)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorSelfie) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorSelfie)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorFile)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorFiles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorFiles)
	x.Object(e.Type)
	x.VectorBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueError) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueError)
	x.Object(e.Type)
	x.StringBytes(e.Hash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorTranslationFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorTranslationFile)
	x.Object(e.Type)
	x.StringBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureValueErrorTranslationFiles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureValueErrorTranslationFiles)
	x.Object(e.Type)
	x.VectorBytes(e.FileHash)
	x.String(e.Text)
	return x.buf
}

func (e TL_secureCredentialsEncrypted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureCredentialsEncrypted)
	x.StringBytes(e.Data)
	x.StringBytes(e.Hash)
	x.StringBytes(e.Secret)
	return x.buf
}

func (e TL_account_authorizationForm) encode() []byte {
	var flags int32
	if e.PrivacyPolicyURL != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_authorizationForm)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.RequiredTypes)
	EncodeBuf_GenericVector(x, e.Values)
	EncodeBuf_GenericVector(x, e.Errors)
	EncodeBuf_GenericVector(x, e.Users)
	if e.PrivacyPolicyURL != nil {
		x.String(*e.PrivacyPolicyURL)
	}
	return x.buf
}

func (e TL_account_sentEmailCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sentEmailCode)
	x.String(e.EmailPattern)
	x.Int(e.Length)
	return x.buf
}

func (e TL_help_deepLinkInfoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_deepLinkInfoEmpty)
	return x.buf
}

func (e TL_help_deepLinkInfo) encode() []byte {
	var flags int32
	if e.UpdateApp {
		flags |= (1 << 0)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_deepLinkInfo)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	return x.buf
}

func (e TL_savedPhoneContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_savedPhoneContact)
	x.String(e.Phone)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.Int(e.Date)
	return x.buf
}

func (e TL_account_takeout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_takeout)
	x.Long(e.ID)
	return x.buf
}

func (e TL_passwordKDFAlgoUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_passwordKDFAlgoUnknown)
	return x.buf
}

func (e TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)
	x.StringBytes(e.Salt1)
	x.StringBytes(e.Salt2)
	x.Int(e.G)
	x.StringBytes(e.P)
	return x.buf
}

func (e TL_securePasswordKDFAlgoUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePasswordKDFAlgoUnknown)
	return x.buf
}

func (e TL_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000)
	x.StringBytes(e.Salt)
	return x.buf
}

func (e TL_securePasswordKDFAlgoSHA512) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_securePasswordKDFAlgoSHA512)
	x.StringBytes(e.Salt)
	return x.buf
}

func (e TL_secureSecretSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureSecretSettings)
	x.Object(e.SecureAlgo)
	x.StringBytes(e.SecureSecret)
	x.Long(e.SecureSecretID)
	return x.buf
}

func (e TL_inputCheckPasswordEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputCheckPasswordEmpty)
	return x.buf
}

func (e TL_inputCheckPasswordSRP) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputCheckPasswordSRP)
	x.Long(e.SrpID)
	x.StringBytes(e.A)
	x.StringBytes(e.M1)
	return x.buf
}

func (e TL_secureRequiredType) encode() []byte {
	var flags int32
	if e.NativeNames {
		flags |= (1 << 0)
	}
	if e.SelfieRequired {
		flags |= (1 << 1)
	}
	if e.TranslationRequired {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureRequiredType)
	x.Int(flags)
	x.Object(e.Type)
	return x.buf
}

func (e TL_secureRequiredTypeOneOf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_secureRequiredTypeOneOf)
	EncodeBuf_GenericVector(x, e.Types)
	return x.buf
}

func (e TL_help_passportConfigNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_passportConfigNotModified)
	return x.buf
}

func (e TL_help_passportConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_passportConfig)
	x.Int(e.Hash)
	x.Object(e.CountriesLangs)
	return x.buf
}

func (e TL_inputAppEvent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputAppEvent)
	x.Double(e.Time)
	x.String(e.Type)
	x.Long(e.Peer)
	x.Object(e.Data)
	return x.buf
}

func (e TL_jsonObjectValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonObjectValue)
	x.String(e.Key)
	x.Object(e.Value)
	return x.buf
}

func (e TL_jsonNull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonNull)
	return x.buf
}

func (e TL_jsonBool) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonBool)
	x.Bool(e.Value)
	return x.buf
}

func (e TL_jsonNumber) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonNumber)
	x.Double(e.Value)
	return x.buf
}

func (e TL_jsonString) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonString)
	x.String(e.Value)
	return x.buf
}

func (e TL_jsonArray) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonArray)
	EncodeBuf_GenericVector(x, e.Value)
	return x.buf
}

func (e TL_jsonObject) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_jsonObject)
	EncodeBuf_GenericVector(x, e.Value)
	return x.buf
}

func (e TL_pageTableCell) encode() []byte {
	var flags int32
	if e.Header {
		flags |= (1 << 0)
	}
	if e.AlignCenter {
		flags |= (1 << 3)
	}
	if e.AlignRight {
		flags |= (1 << 4)
	}
	if e.ValignMiddle {
		flags |= (1 << 5)
	}
	if e.ValignBottom {
		flags |= (1 << 6)
	}
	if e.Text != nil {
		flags |= (1 << 7)
	}
	if e.Colspan != nil {
		flags |= (1 << 1)
	}
	if e.Rowspan != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageTableCell)
	x.Int(flags)
	if e.Text != nil {
		x.Object(e.Text)
	}
	if e.Colspan != nil {
		x.Int(*e.Colspan)
	}
	if e.Rowspan != nil {
		x.Int(*e.Rowspan)
	}
	return x.buf
}

func (e TL_pageTableRow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageTableRow)
	EncodeBuf_GenericVector(x, e.Cells)
	return x.buf
}

func (e TL_pageCaption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageCaption)
	x.Object(e.Text)
	x.Object(e.Credit)
	return x.buf
}

func (e TL_pageListItemText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageListItemText)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageListItemBlocks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageListItemBlocks)
	EncodeBuf_GenericVector(x, e.Blocks)
	return x.buf
}

func (e TL_pageListOrderedItemText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageListOrderedItemText)
	x.String(e.Num)
	x.Object(e.Text)
	return x.buf
}

func (e TL_pageListOrderedItemBlocks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageListOrderedItemBlocks)
	x.String(e.Num)
	EncodeBuf_GenericVector(x, e.Blocks)
	return x.buf
}

func (e TL_pageRelatedArticle) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 0)
	}
	if e.Description != nil {
		flags |= (1 << 1)
	}
	if e.PhotoID != nil {
		flags |= (1 << 2)
	}
	if e.Author != nil {
		flags |= (1 << 3)
	}
	if e.PublishedDate != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pageRelatedArticle)
	x.Int(flags)
	x.String(e.URL)
	x.Long(e.WebpageID)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Description != nil {
		x.String(*e.Description)
	}
	if e.PhotoID != nil {
		x.Long(*e.PhotoID)
	}
	if e.Author != nil {
		x.String(*e.Author)
	}
	if e.PublishedDate != nil {
		x.Int(*e.PublishedDate)
	}
	return x.buf
}

func (e TL_page) encode() []byte {
	var flags int32
	if e.Part {
		flags |= (1 << 0)
	}
	if e.RTL {
		flags |= (1 << 1)
	}
	if e.V2 {
		flags |= (1 << 2)
	}
	if e.Views != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_page)
	x.Int(flags)
	x.String(e.URL)
	EncodeBuf_GenericVector(x, e.Blocks)
	EncodeBuf_GenericVector(x, e.Photos)
	EncodeBuf_GenericVector(x, e.Documents)
	if e.Views != nil {
		x.Int(*e.Views)
	}
	return x.buf
}

func (e TL_help_supportName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_supportName)
	x.String(e.Name)
	return x.buf
}

func (e TL_help_userInfoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_userInfoEmpty)
	return x.buf
}

func (e TL_help_userInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_userInfo)
	x.String(e.Message)
	EncodeBuf_GenericVector(x, e.Entities)
	x.String(e.Author)
	x.Int(e.Date)
	return x.buf
}

func (e TL_pollAnswer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_pollAnswer)
	x.Object(e.Text)
	x.StringBytes(e.Option)
	return x.buf
}

func (e TL_poll) encode() []byte {
	var flags int32
	if e.Closed {
		flags |= (1 << 0)
	}
	if e.PublicVoters {
		flags |= (1 << 1)
	}
	if e.MultipleChoice {
		flags |= (1 << 2)
	}
	if e.Quiz {
		flags |= (1 << 3)
	}
	if e.ClosePeriod != nil {
		flags |= (1 << 4)
	}
	if e.CloseDate != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_poll)
	x.Long(e.ID)
	x.Int(flags)
	x.Object(e.Question)
	EncodeBuf_GenericVector(x, e.Answers)
	if e.ClosePeriod != nil {
		x.Int(*e.ClosePeriod)
	}
	if e.CloseDate != nil {
		x.Int(*e.CloseDate)
	}
	return x.buf
}

func (e TL_pollAnswerVoters) encode() []byte {
	var flags int32
	if e.Chosen {
		flags |= (1 << 0)
	}
	if e.Correct {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pollAnswerVoters)
	x.Int(flags)
	x.StringBytes(e.Option)
	x.Int(e.Voters)
	return x.buf
}

func (e TL_pollResults) encode() []byte {
	var flags int32
	if e.Min {
		flags |= (1 << 0)
	}
	if e.Results != nil {
		flags |= (1 << 1)
	}
	if e.TotalVoters != nil {
		flags |= (1 << 2)
	}
	if e.RecentVoters != nil {
		flags |= (1 << 3)
	}
	if e.Solution != nil {
		flags |= (1 << 4)
	}
	if e.SolutionEntities != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_pollResults)
	x.Int(flags)
	if e.Results != nil {
		EncodeBuf_GenericVector(x, e.Results)
	}
	if e.TotalVoters != nil {
		x.Int(*e.TotalVoters)
	}
	if e.RecentVoters != nil {
		EncodeBuf_GenericVector(x, e.RecentVoters)
	}
	if e.Solution != nil {
		x.String(*e.Solution)
	}
	if e.SolutionEntities != nil {
		EncodeBuf_GenericVector(x, e.SolutionEntities)
	}
	return x.buf
}

func (e TL_chatOnlines) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatOnlines)
	x.Int(e.Onlines)
	return x.buf
}

func (e TL_statsURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsURL)
	x.String(e.URL)
	return x.buf
}

func (e TL_chatAdminRights) encode() []byte {
	var flags int32
	if e.ChangeInfo {
		flags |= (1 << 0)
	}
	if e.PostMessages {
		flags |= (1 << 1)
	}
	if e.EditMessages {
		flags |= (1 << 2)
	}
	if e.DeleteMessages {
		flags |= (1 << 3)
	}
	if e.BanUsers {
		flags |= (1 << 4)
	}
	if e.InviteUsers {
		flags |= (1 << 5)
	}
	if e.PINMessages {
		flags |= (1 << 7)
	}
	if e.AddAdmins {
		flags |= (1 << 9)
	}
	if e.Anonymous {
		flags |= (1 << 10)
	}
	if e.ManageCall {
		flags |= (1 << 11)
	}
	if e.Other {
		flags |= (1 << 12)
	}
	if e.ManageTopics {
		flags |= (1 << 13)
	}
	if e.PostStories {
		flags |= (1 << 14)
	}
	if e.EditStories {
		flags |= (1 << 15)
	}
	if e.DeleteStories {
		flags |= (1 << 16)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatAdminRights)
	x.Int(flags)
	return x.buf
}

func (e TL_chatBannedRights) encode() []byte {
	var flags int32
	if e.ViewMessages {
		flags |= (1 << 0)
	}
	if e.SendMessages {
		flags |= (1 << 1)
	}
	if e.SendMedia {
		flags |= (1 << 2)
	}
	if e.SendStickers {
		flags |= (1 << 3)
	}
	if e.SendGIFs {
		flags |= (1 << 4)
	}
	if e.SendGames {
		flags |= (1 << 5)
	}
	if e.SendInline {
		flags |= (1 << 6)
	}
	if e.EmbedLinks {
		flags |= (1 << 7)
	}
	if e.SendPolls {
		flags |= (1 << 8)
	}
	if e.ChangeInfo {
		flags |= (1 << 10)
	}
	if e.InviteUsers {
		flags |= (1 << 15)
	}
	if e.PINMessages {
		flags |= (1 << 17)
	}
	if e.ManageTopics {
		flags |= (1 << 18)
	}
	if e.SendPhotos {
		flags |= (1 << 19)
	}
	if e.SendVideos {
		flags |= (1 << 20)
	}
	if e.SendRoundvideos {
		flags |= (1 << 21)
	}
	if e.SendAudios {
		flags |= (1 << 22)
	}
	if e.SendVoices {
		flags |= (1 << 23)
	}
	if e.SendDocs {
		flags |= (1 << 24)
	}
	if e.SendPlain {
		flags |= (1 << 25)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatBannedRights)
	x.Int(flags)
	x.Int(e.UntilDate)
	return x.buf
}

func (e TL_inputWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWallPaper)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputWallPaperSlug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWallPaperSlug)
	x.String(e.Slug)
	return x.buf
}

func (e TL_inputWallPaperNoFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputWallPaperNoFile)
	x.Long(e.ID)
	return x.buf
}

func (e TL_account_wallPapersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_wallPapersNotModified)
	return x.buf
}

func (e TL_account_wallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_wallPapers)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Wallpapers)
	return x.buf
}

func (e TL_codeSettings) encode() []byte {
	var flags int32
	if e.AllowFlashcall {
		flags |= (1 << 0)
	}
	if e.CurrentNumber {
		flags |= (1 << 1)
	}
	if e.AllowAppHash {
		flags |= (1 << 4)
	}
	if e.AllowMissedCall {
		flags |= (1 << 5)
	}
	if e.AllowFirebase {
		flags |= (1 << 7)
	}
	if e.UnknownNumber {
		flags |= (1 << 9)
	}
	if e.LogoutTokens != nil {
		flags |= (1 << 6)
	}
	if e.Token != nil {
		flags |= (1 << 8)
	}
	if e.AppSandbox != nil {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_codeSettings)
	x.Int(flags)
	if e.LogoutTokens != nil {
		x.VectorBytes(e.LogoutTokens)
	}
	if e.Token != nil {
		x.String(*e.Token)
	}
	if e.AppSandbox != nil {
		x.Bool(*e.AppSandbox)
	}
	return x.buf
}

func (e TL_wallPaperSettings) encode() []byte {
	var flags int32
	if e.Blur {
		flags |= (1 << 1)
	}
	if e.Motion {
		flags |= (1 << 2)
	}
	if e.BackgroundColor != nil {
		flags |= (1 << 0)
	}
	if e.SecondBackgroundColor != nil {
		flags |= (1 << 4)
	}
	if e.ThirdBackgroundColor != nil {
		flags |= (1 << 5)
	}
	if e.FourthBackgroundColor != nil {
		flags |= (1 << 6)
	}
	if e.Intensity != nil {
		flags |= (1 << 3)
	}
	if e.Rotation != nil {
		flags |= (1 << 4)
	}
	if e.Emoticon != nil {
		flags |= (1 << 7)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_wallPaperSettings)
	x.Int(flags)
	if e.BackgroundColor != nil {
		x.Int(*e.BackgroundColor)
	}
	if e.SecondBackgroundColor != nil {
		x.Int(*e.SecondBackgroundColor)
	}
	if e.ThirdBackgroundColor != nil {
		x.Int(*e.ThirdBackgroundColor)
	}
	if e.FourthBackgroundColor != nil {
		x.Int(*e.FourthBackgroundColor)
	}
	if e.Intensity != nil {
		x.Int(*e.Intensity)
	}
	if e.Rotation != nil {
		x.Int(*e.Rotation)
	}
	if e.Emoticon != nil {
		x.String(*e.Emoticon)
	}
	return x.buf
}

func (e TL_autoDownloadSettings) encode() []byte {
	var flags int32
	if e.Disabled {
		flags |= (1 << 0)
	}
	if e.VideoPreloadLarge {
		flags |= (1 << 1)
	}
	if e.AudioPreloadNext {
		flags |= (1 << 2)
	}
	if e.PhonecallsLessData {
		flags |= (1 << 3)
	}
	if e.StoriesPreload {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_autoDownloadSettings)
	x.Int(flags)
	x.Int(e.PhotoSizeMax)
	x.Long(e.VideoSizeMax)
	x.Long(e.FileSizeMax)
	x.Int(e.VideoUploadMaxbitrate)
	x.Int(e.SmallQueueActiveOperationsMax)
	x.Int(e.LargeQueueActiveOperationsMax)
	return x.buf
}

func (e TL_account_autoDownloadSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_autoDownloadSettings)
	x.Object(e.Low)
	x.Object(e.Medium)
	x.Object(e.High)
	return x.buf
}

func (e TL_emojiKeyword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiKeyword)
	x.String(e.Keyword)
	x.VectorString(e.Emoticons)
	return x.buf
}

func (e TL_emojiKeywordDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiKeywordDeleted)
	x.String(e.Keyword)
	x.VectorString(e.Emoticons)
	return x.buf
}

func (e TL_emojiKeywordsDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiKeywordsDifference)
	x.String(e.LangCode)
	x.Int(e.FromVersion)
	x.Int(e.Version)
	EncodeBuf_GenericVector(x, e.Keywords)
	return x.buf
}

func (e TL_emojiURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiURL)
	x.String(e.URL)
	return x.buf
}

func (e TL_emojiLanguage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiLanguage)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_folder) encode() []byte {
	var flags int32
	if e.AutofillNewBroadcasts {
		flags |= (1 << 0)
	}
	if e.AutofillPublicGroups {
		flags |= (1 << 1)
	}
	if e.AutofillNewCorrespondents {
		flags |= (1 << 2)
	}
	if e.Photo != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_folder)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.Title)
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	return x.buf
}

func (e TL_inputFolderPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputFolderPeer)
	x.Object(e.Peer)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_folderPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_folderPeer)
	x.Object(e.Peer)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_messages_searchCounter) encode() []byte {
	var flags int32
	if e.Inexact {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchCounter)
	x.Int(flags)
	x.Object(e.Filter)
	x.Int(e.Count)
	return x.buf
}

func (e TL_urlAuthResultRequest) encode() []byte {
	var flags int32
	if e.RequestWriteAccess {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_urlAuthResultRequest)
	x.Int(flags)
	x.Object(e.Bot)
	x.String(e.Domain)
	return x.buf
}

func (e TL_urlAuthResultAccepted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_urlAuthResultAccepted)
	x.String(e.URL)
	return x.buf
}

func (e TL_urlAuthResultDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_urlAuthResultDefault)
	return x.buf
}

func (e TL_channelLocationEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelLocationEmpty)
	return x.buf
}

func (e TL_channelLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channelLocation)
	x.Object(e.GeoPoint)
	x.String(e.Address)
	return x.buf
}

func (e TL_peerLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerLocated)
	x.Object(e.Peer)
	x.Int(e.Expires)
	x.Int(e.Distance)
	return x.buf
}

func (e TL_peerSelfLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerSelfLocated)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_restrictionReason) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_restrictionReason)
	x.String(e.Platform)
	x.String(e.Reason)
	x.String(e.Text)
	return x.buf
}

func (e TL_inputTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputTheme)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputThemeSlug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputThemeSlug)
	x.String(e.Slug)
	return x.buf
}

func (e TL_theme) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.Default {
		flags |= (1 << 1)
	}
	if e.ForChat {
		flags |= (1 << 5)
	}
	if e.Document != nil {
		flags |= (1 << 2)
	}
	if e.Settings != nil {
		flags |= (1 << 3)
	}
	if e.Emoticon != nil {
		flags |= (1 << 6)
	}
	if e.InstallsCount != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_theme)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.Slug)
	x.String(e.Title)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Settings != nil {
		EncodeBuf_GenericVector(x, e.Settings)
	}
	if e.Emoticon != nil {
		x.String(*e.Emoticon)
	}
	if e.InstallsCount != nil {
		x.Int(*e.InstallsCount)
	}
	return x.buf
}

func (e TL_account_themesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_themesNotModified)
	return x.buf
}

func (e TL_account_themes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_themes)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Themes)
	return x.buf
}

func (e TL_auth_loginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_loginToken)
	x.Int(e.Expires)
	x.StringBytes(e.Token)
	return x.buf
}

func (e TL_auth_loginTokenMigrateTo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_loginTokenMigrateTo)
	x.Int(e.DCID)
	x.StringBytes(e.Token)
	return x.buf
}

func (e TL_auth_loginTokenSuccess) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_loginTokenSuccess)
	x.Object(e.Authorization)
	return x.buf
}

func (e TL_account_contentSettings) encode() []byte {
	var flags int32
	if e.SensitiveEnabled {
		flags |= (1 << 0)
	}
	if e.SensitiveCanChange {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_contentSettings)
	x.Int(flags)
	return x.buf
}

func (e TL_messages_inactiveChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_inactiveChats)
	x.VectorInt(e.Dates)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_baseThemeClassic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeClassic)
	return x.buf
}

func (e TL_baseThemeDay) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeDay)
	return x.buf
}

func (e TL_baseThemeNight) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeNight)
	return x.buf
}

func (e TL_baseThemeTinted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeTinted)
	return x.buf
}

func (e TL_baseThemeArctic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_baseThemeArctic)
	return x.buf
}

func (e TL_inputThemeSettings) encode() []byte {
	var flags int32
	if e.MessageColorsAnimated {
		flags |= (1 << 2)
	}
	if e.OutboxAccentColor != nil {
		flags |= (1 << 3)
	}
	if e.MessageColors != nil {
		flags |= (1 << 0)
	}
	if e.Wallpaper != nil {
		flags |= (1 << 1)
	}
	if e.WallpaperSettings != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputThemeSettings)
	x.Int(flags)
	x.Object(e.BaseTheme)
	x.Int(e.AccentColor)
	if e.OutboxAccentColor != nil {
		x.Int(*e.OutboxAccentColor)
	}
	if e.MessageColors != nil {
		x.VectorInt(e.MessageColors)
	}
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	if e.WallpaperSettings != nil {
		x.Object(e.WallpaperSettings)
	}
	return x.buf
}

func (e TL_themeSettings) encode() []byte {
	var flags int32
	if e.MessageColorsAnimated {
		flags |= (1 << 2)
	}
	if e.OutboxAccentColor != nil {
		flags |= (1 << 3)
	}
	if e.MessageColors != nil {
		flags |= (1 << 0)
	}
	if e.Wallpaper != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_themeSettings)
	x.Int(flags)
	x.Object(e.BaseTheme)
	x.Int(e.AccentColor)
	if e.OutboxAccentColor != nil {
		x.Int(*e.OutboxAccentColor)
	}
	if e.MessageColors != nil {
		x.VectorInt(e.MessageColors)
	}
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	return x.buf
}

func (e TL_webPageAttributeTheme) encode() []byte {
	var flags int32
	if e.Documents != nil {
		flags |= (1 << 0)
	}
	if e.Settings != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPageAttributeTheme)
	x.Int(flags)
	if e.Documents != nil {
		EncodeBuf_GenericVector(x, e.Documents)
	}
	if e.Settings != nil {
		x.Object(e.Settings)
	}
	return x.buf
}

func (e TL_webPageAttributeStory) encode() []byte {
	var flags int32
	if e.Story != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPageAttributeStory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Story != nil {
		x.Object(e.Story)
	}
	return x.buf
}

func (e TL_webPageAttributeStickerSet) encode() []byte {
	var flags int32
	if e.Emojis {
		flags |= (1 << 0)
	}
	if e.TextColor {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webPageAttributeStickerSet)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Stickers)
	return x.buf
}

func (e TL_messages_votesList) encode() []byte {
	var flags int32
	if e.NextOffset != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_votesList)
	x.Int(flags)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Votes)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	return x.buf
}

func (e TL_bankCardOpenURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bankCardOpenURL)
	x.String(e.URL)
	x.String(e.Name)
	return x.buf
}

func (e TL_payments_bankCardData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_bankCardData)
	x.String(e.Title)
	EncodeBuf_GenericVector(x, e.OpenURLs)
	return x.buf
}

func (e TL_dialogFilter) encode() []byte {
	var flags int32
	if e.Contacts {
		flags |= (1 << 0)
	}
	if e.NonContacts {
		flags |= (1 << 1)
	}
	if e.Groups {
		flags |= (1 << 2)
	}
	if e.Broadcasts {
		flags |= (1 << 3)
	}
	if e.Bots {
		flags |= (1 << 4)
	}
	if e.ExcludeMuted {
		flags |= (1 << 11)
	}
	if e.ExcludeRead {
		flags |= (1 << 12)
	}
	if e.ExcludeArchived {
		flags |= (1 << 13)
	}
	if e.Emoticon != nil {
		flags |= (1 << 25)
	}
	if e.Color != nil {
		flags |= (1 << 27)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFilter)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.Title)
	if e.Emoticon != nil {
		x.String(*e.Emoticon)
	}
	if e.Color != nil {
		x.Int(*e.Color)
	}
	EncodeBuf_GenericVector(x, e.PinnedPeers)
	EncodeBuf_GenericVector(x, e.IncludePeers)
	EncodeBuf_GenericVector(x, e.ExcludePeers)
	return x.buf
}

func (e TL_dialogFilterDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFilterDefault)
	return x.buf
}

func (e TL_dialogFilterChatlist) encode() []byte {
	var flags int32
	if e.HasMyInvites {
		flags |= (1 << 26)
	}
	if e.Emoticon != nil {
		flags |= (1 << 25)
	}
	if e.Color != nil {
		flags |= (1 << 27)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFilterChatlist)
	x.Int(flags)
	x.Int(e.ID)
	x.String(e.Title)
	if e.Emoticon != nil {
		x.String(*e.Emoticon)
	}
	if e.Color != nil {
		x.Int(*e.Color)
	}
	EncodeBuf_GenericVector(x, e.PinnedPeers)
	EncodeBuf_GenericVector(x, e.IncludePeers)
	return x.buf
}

func (e TL_dialogFilterSuggested) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_dialogFilterSuggested)
	x.Object(e.Filter)
	x.String(e.Description)
	return x.buf
}

func (e TL_statsDateRangeDays) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsDateRangeDays)
	x.Int(e.MinDate)
	x.Int(e.MaxDate)
	return x.buf
}

func (e TL_statsAbsValueAndPrev) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsAbsValueAndPrev)
	x.Double(e.Current)
	x.Double(e.Previous)
	return x.buf
}

func (e TL_statsPercentValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsPercentValue)
	x.Double(e.Part)
	x.Double(e.Total)
	return x.buf
}

func (e TL_statsGraphAsync) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGraphAsync)
	x.String(e.Token)
	return x.buf
}

func (e TL_statsGraphError) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGraphError)
	x.String(e.Error)
	return x.buf
}

func (e TL_statsGraph) encode() []byte {
	var flags int32
	if e.ZoomToken != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGraph)
	x.Int(flags)
	x.Object(e.JSON)
	if e.ZoomToken != nil {
		x.String(*e.ZoomToken)
	}
	return x.buf
}

func (e TL_stats_broadcastStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_broadcastStats)
	x.Object(e.Period)
	x.Object(e.Followers)
	x.Object(e.ViewsPerPost)
	x.Object(e.SharesPerPost)
	x.Object(e.ReactionsPerPost)
	x.Object(e.ViewsPerStory)
	x.Object(e.SharesPerStory)
	x.Object(e.ReactionsPerStory)
	x.Object(e.EnabledNotifications)
	x.Object(e.GrowthGraph)
	x.Object(e.FollowersGraph)
	x.Object(e.MuteGraph)
	x.Object(e.TopHoursGraph)
	x.Object(e.InteractionsGraph)
	x.Object(e.IVInteractionsGraph)
	x.Object(e.ViewsBySourceGraph)
	x.Object(e.NewFollowersBySourceGraph)
	x.Object(e.LanguagesGraph)
	x.Object(e.ReactionsByEmotionGraph)
	x.Object(e.StoryInteractionsGraph)
	x.Object(e.StoryReactionsByEmotionGraph)
	EncodeBuf_GenericVector(x, e.RecentPostsInteractions)
	return x.buf
}

func (e TL_help_promoDataEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_promoDataEmpty)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_help_promoData) encode() []byte {
	var flags int32
	if e.Proxy {
		flags |= (1 << 0)
	}
	if e.PSAType != nil {
		flags |= (1 << 1)
	}
	if e.PSAMessage != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_promoData)
	x.Int(flags)
	x.Int(e.Expires)
	x.Object(e.Peer)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	if e.PSAType != nil {
		x.String(*e.PSAType)
	}
	if e.PSAMessage != nil {
		x.String(*e.PSAMessage)
	}
	return x.buf
}

func (e TL_videoSize) encode() []byte {
	var flags int32
	if e.VideoStartTS != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_videoSize)
	x.Int(flags)
	x.String(e.Type)
	x.Int(e.W)
	x.Int(e.H)
	x.Int(e.Size)
	if e.VideoStartTS != nil {
		x.Double(*e.VideoStartTS)
	}
	return x.buf
}

func (e TL_videoSizeEmojiMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_videoSizeEmojiMarkup)
	x.Long(e.EmojiID)
	x.VectorInt(e.BackgroundColors)
	return x.buf
}

func (e TL_videoSizeStickerMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_videoSizeStickerMarkup)
	x.Object(e.Stickerset)
	x.Long(e.StickerID)
	x.VectorInt(e.BackgroundColors)
	return x.buf
}

func (e TL_statsGroupTopPoster) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGroupTopPoster)
	x.Long(e.UserID)
	x.Int(e.Messages)
	x.Int(e.AvgChars)
	return x.buf
}

func (e TL_statsGroupTopAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGroupTopAdmin)
	x.Long(e.UserID)
	x.Int(e.Deleted)
	x.Int(e.Kicked)
	x.Int(e.Banned)
	return x.buf
}

func (e TL_statsGroupTopInviter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_statsGroupTopInviter)
	x.Long(e.UserID)
	x.Int(e.Invitations)
	return x.buf
}

func (e TL_stats_megagroupStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_megagroupStats)
	x.Object(e.Period)
	x.Object(e.Members)
	x.Object(e.Messages)
	x.Object(e.Viewers)
	x.Object(e.Posters)
	x.Object(e.GrowthGraph)
	x.Object(e.MembersGraph)
	x.Object(e.NewMembersBySourceGraph)
	x.Object(e.LanguagesGraph)
	x.Object(e.MessagesGraph)
	x.Object(e.ActionsGraph)
	x.Object(e.TopHoursGraph)
	x.Object(e.WeekdaysGraph)
	EncodeBuf_GenericVector(x, e.TopPosters)
	EncodeBuf_GenericVector(x, e.TopAdmins)
	EncodeBuf_GenericVector(x, e.TopInviters)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_globalPrivacySettings) encode() []byte {
	var flags int32
	if e.ArchiveAndMuteNewNoncontactPeers {
		flags |= (1 << 0)
	}
	if e.KeepArchivedUnmuted {
		flags |= (1 << 1)
	}
	if e.KeepArchivedFolders {
		flags |= (1 << 2)
	}
	if e.HideReadMarks {
		flags |= (1 << 3)
	}
	if e.NewNoncontactPeersRequirePremium {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_globalPrivacySettings)
	x.Int(flags)
	return x.buf
}

func (e TL_help_countryCode) encode() []byte {
	var flags int32
	if e.Prefixes != nil {
		flags |= (1 << 0)
	}
	if e.Patterns != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_countryCode)
	x.Int(flags)
	x.String(e.CountryCode)
	if e.Prefixes != nil {
		x.VectorString(e.Prefixes)
	}
	if e.Patterns != nil {
		x.VectorString(e.Patterns)
	}
	return x.buf
}

func (e TL_help_country) encode() []byte {
	var flags int32
	if e.Hidden {
		flags |= (1 << 0)
	}
	if e.Name != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_country)
	x.Int(flags)
	x.String(e.ISO2)
	x.String(e.DefaultName)
	if e.Name != nil {
		x.String(*e.Name)
	}
	EncodeBuf_GenericVector(x, e.CountryCodes)
	return x.buf
}

func (e TL_help_countriesListNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_countriesListNotModified)
	return x.buf
}

func (e TL_help_countriesList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_countriesList)
	EncodeBuf_GenericVector(x, e.Countries)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messageViews) encode() []byte {
	var flags int32
	if e.Views != nil {
		flags |= (1 << 0)
	}
	if e.Forwards != nil {
		flags |= (1 << 1)
	}
	if e.Replies != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageViews)
	x.Int(flags)
	if e.Views != nil {
		x.Int(*e.Views)
	}
	if e.Forwards != nil {
		x.Int(*e.Forwards)
	}
	if e.Replies != nil {
		x.Object(e.Replies)
	}
	return x.buf
}

func (e TL_messages_messageViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messageViews)
	EncodeBuf_GenericVector(x, e.Views)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_discussionMessage) encode() []byte {
	var flags int32
	if e.MaxID != nil {
		flags |= (1 << 0)
	}
	if e.ReadInboxMaxID != nil {
		flags |= (1 << 1)
	}
	if e.ReadOutboxMaxID != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_discussionMessage)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Messages)
	if e.MaxID != nil {
		x.Int(*e.MaxID)
	}
	if e.ReadInboxMaxID != nil {
		x.Int(*e.ReadInboxMaxID)
	}
	if e.ReadOutboxMaxID != nil {
		x.Int(*e.ReadOutboxMaxID)
	}
	x.Int(e.UnreadCount)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messageReplyHeader) encode() []byte {
	var flags int32
	if e.ReplyToScheduled {
		flags |= (1 << 2)
	}
	if e.ForumTopic {
		flags |= (1 << 3)
	}
	if e.Quote {
		flags |= (1 << 9)
	}
	if e.ReplyToMsgID != nil {
		flags |= (1 << 4)
	}
	if e.ReplyToPeerID != nil {
		flags |= (1 << 0)
	}
	if e.ReplyFrom != nil {
		flags |= (1 << 5)
	}
	if e.ReplyMedia != nil {
		flags |= (1 << 8)
	}
	if e.ReplyToTopID != nil {
		flags |= (1 << 1)
	}
	if e.QuoteText != nil {
		flags |= (1 << 6)
	}
	if e.QuoteEntities != nil {
		flags |= (1 << 7)
	}
	if e.QuoteOffset != nil {
		flags |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageReplyHeader)
	x.Int(flags)
	if e.ReplyToMsgID != nil {
		x.Int(*e.ReplyToMsgID)
	}
	if e.ReplyToPeerID != nil {
		x.Object(e.ReplyToPeerID)
	}
	if e.ReplyFrom != nil {
		x.Object(e.ReplyFrom)
	}
	if e.ReplyMedia != nil {
		x.Object(e.ReplyMedia)
	}
	if e.ReplyToTopID != nil {
		x.Int(*e.ReplyToTopID)
	}
	if e.QuoteText != nil {
		x.String(*e.QuoteText)
	}
	if e.QuoteEntities != nil {
		EncodeBuf_GenericVector(x, e.QuoteEntities)
	}
	if e.QuoteOffset != nil {
		x.Int(*e.QuoteOffset)
	}
	return x.buf
}

func (e TL_messageReplyStoryHeader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageReplyStoryHeader)
	x.Object(e.Peer)
	x.Int(e.StoryID)
	return x.buf
}

func (e TL_messageReplies) encode() []byte {
	var flags int32
	if e.Comments {
		flags |= (1 << 0)
	}
	if e.RecentRepliers != nil {
		flags |= (1 << 1)
	}
	if e.ChannelID != nil {
		flags |= (1 << 0)
	}
	if e.MaxID != nil {
		flags |= (1 << 2)
	}
	if e.ReadMaxID != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageReplies)
	x.Int(flags)
	x.Int(e.Replies)
	x.Int(e.RepliesPTS)
	if e.RecentRepliers != nil {
		EncodeBuf_GenericVector(x, e.RecentRepliers)
	}
	if e.ChannelID != nil {
		x.Long(*e.ChannelID)
	}
	if e.MaxID != nil {
		x.Int(*e.MaxID)
	}
	if e.ReadMaxID != nil {
		x.Int(*e.ReadMaxID)
	}
	return x.buf
}

func (e TL_peerBlocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerBlocked)
	x.Object(e.PeerID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_stats_messageStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_messageStats)
	x.Object(e.ViewsGraph)
	x.Object(e.ReactionsByEmotionGraph)
	return x.buf
}

func (e TL_groupCallDiscarded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallDiscarded)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.Duration)
	return x.buf
}

func (e TL_groupCall) encode() []byte {
	var flags int32
	if e.JoinMuted {
		flags |= (1 << 1)
	}
	if e.CanChangeJoinMuted {
		flags |= (1 << 2)
	}
	if e.JoinDateAsc {
		flags |= (1 << 6)
	}
	if e.ScheduleStartSubscribed {
		flags |= (1 << 8)
	}
	if e.CanStartVideo {
		flags |= (1 << 9)
	}
	if e.RecordVideoActive {
		flags |= (1 << 11)
	}
	if e.RTMPStream {
		flags |= (1 << 12)
	}
	if e.ListenersHidden {
		flags |= (1 << 13)
	}
	if e.Title != nil {
		flags |= (1 << 3)
	}
	if e.StreamDCID != nil {
		flags |= (1 << 4)
	}
	if e.RecordStartDate != nil {
		flags |= (1 << 5)
	}
	if e.ScheduleDate != nil {
		flags |= (1 << 7)
	}
	if e.UnmutedVideoCount != nil {
		flags |= (1 << 10)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCall)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.Int(e.ParticipantsCount)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.StreamDCID != nil {
		x.Int(*e.StreamDCID)
	}
	if e.RecordStartDate != nil {
		x.Int(*e.RecordStartDate)
	}
	if e.ScheduleDate != nil {
		x.Int(*e.ScheduleDate)
	}
	if e.UnmutedVideoCount != nil {
		x.Int(*e.UnmutedVideoCount)
	}
	x.Int(e.UnmutedVideoLimit)
	x.Int(e.Version)
	return x.buf
}

func (e TL_inputGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputGroupCall)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_groupCallParticipant) encode() []byte {
	var flags int32
	if e.Muted {
		flags |= (1 << 0)
	}
	if e.Left {
		flags |= (1 << 1)
	}
	if e.CanSelfUnmute {
		flags |= (1 << 2)
	}
	if e.JustJoined {
		flags |= (1 << 4)
	}
	if e.Versioned {
		flags |= (1 << 5)
	}
	if e.Min {
		flags |= (1 << 8)
	}
	if e.MutedByYou {
		flags |= (1 << 9)
	}
	if e.VolumeByAdmin {
		flags |= (1 << 10)
	}
	if e.Self {
		flags |= (1 << 12)
	}
	if e.VideoJoined {
		flags |= (1 << 15)
	}
	if e.ActiveDate != nil {
		flags |= (1 << 3)
	}
	if e.Volume != nil {
		flags |= (1 << 7)
	}
	if e.About != nil {
		flags |= (1 << 11)
	}
	if e.RaiseHandRating != nil {
		flags |= (1 << 13)
	}
	if e.Video != nil {
		flags |= (1 << 6)
	}
	if e.Presentation != nil {
		flags |= (1 << 14)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallParticipant)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.Date)
	if e.ActiveDate != nil {
		x.Int(*e.ActiveDate)
	}
	x.Int(e.Source)
	if e.Volume != nil {
		x.Int(*e.Volume)
	}
	if e.About != nil {
		x.String(*e.About)
	}
	if e.RaiseHandRating != nil {
		x.Long(*e.RaiseHandRating)
	}
	if e.Video != nil {
		x.Object(e.Video)
	}
	if e.Presentation != nil {
		x.Object(e.Presentation)
	}
	return x.buf
}

func (e TL_phone_groupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_groupCall)
	x.Object(e.Call)
	EncodeBuf_GenericVector(x, e.Participants)
	x.String(e.ParticipantsNextOffset)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_phone_groupParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_groupParticipants)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Participants)
	x.String(e.NextOffset)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	x.Int(e.Version)
	return x.buf
}

func (e TL_inlineQueryPeerTypeSameBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeSameBotPM)
	return x.buf
}

func (e TL_inlineQueryPeerTypePM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypePM)
	return x.buf
}

func (e TL_inlineQueryPeerTypeChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeChat)
	return x.buf
}

func (e TL_inlineQueryPeerTypeMegagroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeMegagroup)
	return x.buf
}

func (e TL_inlineQueryPeerTypeBroadcast) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeBroadcast)
	return x.buf
}

func (e TL_inlineQueryPeerTypeBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineQueryPeerTypeBotPM)
	return x.buf
}

func (e TL_messages_historyImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_historyImport)
	x.Long(e.ID)
	return x.buf
}

func (e TL_messages_historyImportParsed) encode() []byte {
	var flags int32
	if e.PM {
		flags |= (1 << 0)
	}
	if e.Group {
		flags |= (1 << 1)
	}
	if e.Title != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_historyImportParsed)
	x.Int(flags)
	if e.Title != nil {
		x.String(*e.Title)
	}
	return x.buf
}

func (e TL_messages_affectedFoundMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_affectedFoundMessages)
	x.Int(e.PTS)
	x.Int(e.PTSCount)
	x.Int(e.Offset)
	x.VectorInt(e.Messages)
	return x.buf
}

func (e TL_chatInviteImporter) encode() []byte {
	var flags int32
	if e.Requested {
		flags |= (1 << 0)
	}
	if e.ViaChatlist {
		flags |= (1 << 3)
	}
	if e.About != nil {
		flags |= (1 << 2)
	}
	if e.ApprovedBy != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatInviteImporter)
	x.Int(flags)
	x.Long(e.UserID)
	x.Int(e.Date)
	if e.About != nil {
		x.String(*e.About)
	}
	if e.ApprovedBy != nil {
		x.Long(*e.ApprovedBy)
	}
	return x.buf
}

func (e TL_messages_exportedChatInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_exportedChatInvites)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Invites)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_exportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_exportedChatInvite)
	x.Object(e.Invite)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_exportedChatInviteReplaced) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_exportedChatInviteReplaced)
	x.Object(e.Invite)
	x.Object(e.NewInvite)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_chatInviteImporters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chatInviteImporters)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Importers)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_chatAdminWithInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatAdminWithInvites)
	x.Long(e.AdminID)
	x.Int(e.InvitesCount)
	x.Int(e.RevokedInvitesCount)
	return x.buf
}

func (e TL_messages_chatAdminsWithInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_chatAdminsWithInvites)
	EncodeBuf_GenericVector(x, e.Admins)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_checkedHistoryImportPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_checkedHistoryImportPeer)
	x.String(e.ConfirmText)
	return x.buf
}

func (e TL_phone_joinAsPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_joinAsPeers)
	EncodeBuf_GenericVector(x, e.Peers)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_phone_exportedGroupCallInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_exportedGroupCallInvite)
	x.String(e.Link)
	return x.buf
}

func (e TL_groupCallParticipantVideoSourceGroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallParticipantVideoSourceGroup)
	x.String(e.Semantics)
	x.VectorInt(e.Sources)
	return x.buf
}

func (e TL_groupCallParticipantVideo) encode() []byte {
	var flags int32
	if e.Paused {
		flags |= (1 << 0)
	}
	if e.AudioSource != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallParticipantVideo)
	x.Int(flags)
	x.String(e.Endpoint)
	EncodeBuf_GenericVector(x, e.SourceGroups)
	if e.AudioSource != nil {
		x.Int(*e.AudioSource)
	}
	return x.buf
}

func (e TL_stickers_suggestedShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_suggestedShortName)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_botCommandScopeDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopeDefault)
	return x.buf
}

func (e TL_botCommandScopeUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopeUsers)
	return x.buf
}

func (e TL_botCommandScopeChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopeChats)
	return x.buf
}

func (e TL_botCommandScopeChatAdmins) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopeChatAdmins)
	return x.buf
}

func (e TL_botCommandScopePeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopePeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_botCommandScopePeerAdmins) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopePeerAdmins)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_botCommandScopePeerUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botCommandScopePeerUser)
	x.Object(e.Peer)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_account_resetPasswordFailedWait) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetPasswordFailedWait)
	x.Int(e.RetryDate)
	return x.buf
}

func (e TL_account_resetPasswordRequestedWait) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetPasswordRequestedWait)
	x.Int(e.UntilDate)
	return x.buf
}

func (e TL_account_resetPasswordOK) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetPasswordOK)
	return x.buf
}

func (e TL_sponsoredMessage) encode() []byte {
	var flags int32
	if e.Recommended {
		flags |= (1 << 5)
	}
	if e.CanReport {
		flags |= (1 << 12)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.Photo != nil {
		flags |= (1 << 6)
	}
	if e.Media != nil {
		flags |= (1 << 14)
	}
	if e.Color != nil {
		flags |= (1 << 13)
	}
	if e.SponsorInfo != nil {
		flags |= (1 << 7)
	}
	if e.AdditionalInfo != nil {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_sponsoredMessage)
	x.Int(flags)
	x.StringBytes(e.RandomID)
	x.String(e.URL)
	x.String(e.Title)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.Color != nil {
		x.Object(e.Color)
	}
	x.String(e.ButtonText)
	if e.SponsorInfo != nil {
		x.String(*e.SponsorInfo)
	}
	if e.AdditionalInfo != nil {
		x.String(*e.AdditionalInfo)
	}
	return x.buf
}

func (e TL_messages_sponsoredMessages) encode() []byte {
	var flags int32
	if e.PostsBetween != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sponsoredMessages)
	x.Int(flags)
	if e.PostsBetween != nil {
		x.Int(*e.PostsBetween)
	}
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_sponsoredMessagesEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sponsoredMessagesEmpty)
	return x.buf
}

func (e TL_searchResultsCalendarPeriod) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_searchResultsCalendarPeriod)
	x.Int(e.Date)
	x.Int(e.MinMsgID)
	x.Int(e.MaxMsgID)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messages_searchResultsCalendar) encode() []byte {
	var flags int32
	if e.Inexact {
		flags |= (1 << 0)
	}
	if e.OffsetIDOffset != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchResultsCalendar)
	x.Int(flags)
	x.Int(e.Count)
	x.Int(e.MinDate)
	x.Int(e.MinMsgID)
	if e.OffsetIDOffset != nil {
		x.Int(*e.OffsetIDOffset)
	}
	EncodeBuf_GenericVector(x, e.Periods)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_searchResultPosition) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_searchResultPosition)
	x.Int(e.MsgID)
	x.Int(e.Date)
	x.Int(e.Offset)
	return x.buf
}

func (e TL_messages_searchResultsPositions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchResultsPositions)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Positions)
	return x.buf
}

func (e TL_channels_sendAsPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_sendAsPeers)
	EncodeBuf_GenericVector(x, e.Peers)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_users_userFull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_users_userFull)
	x.Object(e.FullUser)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_peerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_peerSettings)
	x.Object(e.Settings)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_auth_loggedOut) encode() []byte {
	var flags int32
	if e.FutureAuthToken != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_loggedOut)
	x.Int(flags)
	if e.FutureAuthToken != nil {
		x.StringBytes(e.FutureAuthToken)
	}
	return x.buf
}

func (e TL_reactionCount) encode() []byte {
	var flags int32
	if e.ChosenOrder != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionCount)
	x.Int(flags)
	if e.ChosenOrder != nil {
		x.Int(*e.ChosenOrder)
	}
	x.Object(e.Reaction)
	x.Int(e.Count)
	return x.buf
}

func (e TL_messageReactions) encode() []byte {
	var flags int32
	if e.Min {
		flags |= (1 << 0)
	}
	if e.CanSeeList {
		flags |= (1 << 2)
	}
	if e.ReactionsAsTags {
		flags |= (1 << 3)
	}
	if e.RecentReactions != nil {
		flags |= (1 << 1)
	}
	if e.TopReactors != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageReactions)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Results)
	if e.RecentReactions != nil {
		EncodeBuf_GenericVector(x, e.RecentReactions)
	}
	if e.TopReactors != nil {
		EncodeBuf_GenericVector(x, e.TopReactors)
	}
	return x.buf
}

func (e TL_messages_messageReactionsList) encode() []byte {
	var flags int32
	if e.NextOffset != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_messageReactionsList)
	x.Int(flags)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Reactions)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	return x.buf
}

func (e TL_availableReaction) encode() []byte {
	var flags int32
	if e.Inactive {
		flags |= (1 << 0)
	}
	if e.Premium {
		flags |= (1 << 2)
	}
	if e.AroundAnimation != nil {
		flags |= (1 << 1)
	}
	if e.CenterIcon != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_availableReaction)
	x.Int(flags)
	x.String(e.Reaction)
	x.String(e.Title)
	x.Object(e.StaticIcon)
	x.Object(e.AppearAnimation)
	x.Object(e.SelectAnimation)
	x.Object(e.ActivateAnimation)
	x.Object(e.EffectAnimation)
	if e.AroundAnimation != nil {
		x.Object(e.AroundAnimation)
	}
	if e.CenterIcon != nil {
		x.Object(e.CenterIcon)
	}
	return x.buf
}

func (e TL_messages_availableReactionsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_availableReactionsNotModified)
	return x.buf
}

func (e TL_messages_availableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_availableReactions)
	x.Int(e.Hash)
	EncodeBuf_GenericVector(x, e.Reactions)
	return x.buf
}

func (e TL_messagePeerReaction) encode() []byte {
	var flags int32
	if e.Big {
		flags |= (1 << 0)
	}
	if e.Unread {
		flags |= (1 << 1)
	}
	if e.My {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messagePeerReaction)
	x.Int(flags)
	x.Object(e.PeerID)
	x.Int(e.Date)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_groupCallStreamChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_groupCallStreamChannel)
	x.Int(e.Channel)
	x.Int(e.Scale)
	x.Long(e.LastTimestampMS)
	return x.buf
}

func (e TL_phone_groupCallStreamChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_groupCallStreamChannels)
	EncodeBuf_GenericVector(x, e.Channels)
	return x.buf
}

func (e TL_phone_groupCallStreamRTMPURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_groupCallStreamRTMPURL)
	x.String(e.URL)
	x.String(e.Key)
	return x.buf
}

func (e TL_attachMenuBotIconColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBotIconColor)
	x.String(e.Name)
	x.Int(e.Color)
	return x.buf
}

func (e TL_attachMenuBotIcon) encode() []byte {
	var flags int32
	if e.Colors != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBotIcon)
	x.Int(flags)
	x.String(e.Name)
	x.Object(e.Icon)
	if e.Colors != nil {
		EncodeBuf_GenericVector(x, e.Colors)
	}
	return x.buf
}

func (e TL_attachMenuBot) encode() []byte {
	var flags int32
	if e.Inactive {
		flags |= (1 << 0)
	}
	if e.HasSettings {
		flags |= (1 << 1)
	}
	if e.RequestWriteAccess {
		flags |= (1 << 2)
	}
	if e.ShowInAttachMenu {
		flags |= (1 << 3)
	}
	if e.ShowInSideMenu {
		flags |= (1 << 4)
	}
	if e.SideMenuDisclaimerNeeded {
		flags |= (1 << 5)
	}
	if e.PeerTypes != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBot)
	x.Int(flags)
	x.Long(e.BotID)
	x.String(e.ShortName)
	if e.PeerTypes != nil {
		EncodeBuf_GenericVector(x, e.PeerTypes)
	}
	EncodeBuf_GenericVector(x, e.Icons)
	return x.buf
}

func (e TL_attachMenuBotsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBotsNotModified)
	return x.buf
}

func (e TL_attachMenuBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBots)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Bots)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_attachMenuBotsBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuBotsBot)
	x.Object(e.Bot)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_webViewResultURL) encode() []byte {
	var flags int32
	if e.Fullsize {
		flags |= (1 << 1)
	}
	if e.QueryID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webViewResultURL)
	x.Int(flags)
	if e.QueryID != nil {
		x.Long(*e.QueryID)
	}
	x.String(e.URL)
	return x.buf
}

func (e TL_webViewMessageSent) encode() []byte {
	var flags int32
	if e.MsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_webViewMessageSent)
	x.Int(flags)
	if e.MsgID != nil {
		x.Object(e.MsgID)
	}
	return x.buf
}

func (e TL_botMenuButtonDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botMenuButtonDefault)
	return x.buf
}

func (e TL_botMenuButtonCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botMenuButtonCommands)
	return x.buf
}

func (e TL_botMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botMenuButton)
	x.String(e.Text)
	x.String(e.URL)
	return x.buf
}

func (e TL_account_savedRingtonesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_savedRingtonesNotModified)
	return x.buf
}

func (e TL_account_savedRingtones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_savedRingtones)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Ringtones)
	return x.buf
}

func (e TL_notificationSoundDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notificationSoundDefault)
	return x.buf
}

func (e TL_notificationSoundNone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notificationSoundNone)
	return x.buf
}

func (e TL_notificationSoundLocal) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notificationSoundLocal)
	x.String(e.Title)
	x.String(e.Data)
	return x.buf
}

func (e TL_notificationSoundRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_notificationSoundRingtone)
	x.Long(e.ID)
	return x.buf
}

func (e TL_account_savedRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_savedRingtone)
	return x.buf
}

func (e TL_account_savedRingtoneConverted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_savedRingtoneConverted)
	x.Object(e.Document)
	return x.buf
}

func (e TL_attachMenuPeerTypeSameBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypeSameBotPM)
	return x.buf
}

func (e TL_attachMenuPeerTypeBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypeBotPM)
	return x.buf
}

func (e TL_attachMenuPeerTypePM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypePM)
	return x.buf
}

func (e TL_attachMenuPeerTypeChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypeChat)
	return x.buf
}

func (e TL_attachMenuPeerTypeBroadcast) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_attachMenuPeerTypeBroadcast)
	return x.buf
}

func (e TL_inputInvoiceMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputInvoiceMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_inputInvoiceSlug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputInvoiceSlug)
	x.String(e.Slug)
	return x.buf
}

func (e TL_inputInvoicePremiumGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputInvoicePremiumGiftCode)
	x.Object(e.Purpose)
	x.Object(e.Option)
	return x.buf
}

func (e TL_inputInvoiceStars) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputInvoiceStars)
	x.Object(e.Purpose)
	return x.buf
}

func (e TL_inputInvoiceChatInviteSubscription) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputInvoiceChatInviteSubscription)
	x.String(e.Hash)
	return x.buf
}

func (e TL_payments_exportedInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_exportedInvoice)
	x.String(e.URL)
	return x.buf
}

func (e TL_messages_transcribedAudio) encode() []byte {
	var flags int32
	if e.Pending {
		flags |= (1 << 0)
	}
	if e.TrialRemainsNum != nil {
		flags |= (1 << 1)
	}
	if e.TrialRemainsUntilDate != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_transcribedAudio)
	x.Int(flags)
	x.Long(e.TranscriptionID)
	x.String(e.Text)
	if e.TrialRemainsNum != nil {
		x.Int(*e.TrialRemainsNum)
	}
	if e.TrialRemainsUntilDate != nil {
		x.Int(*e.TrialRemainsUntilDate)
	}
	return x.buf
}

func (e TL_help_premiumPromo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_premiumPromo)
	x.String(e.StatusText)
	EncodeBuf_GenericVector(x, e.StatusEntities)
	x.VectorString(e.VideoSections)
	EncodeBuf_GenericVector(x, e.Videos)
	EncodeBuf_GenericVector(x, e.PeriodOptions)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_inputStorePaymentPremiumSubscription) encode() []byte {
	var flags int32
	if e.Restore {
		flags |= (1 << 0)
	}
	if e.Upgrade {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentPremiumSubscription)
	x.Int(flags)
	return x.buf
}

func (e TL_inputStorePaymentGiftPremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentGiftPremium)
	x.Object(e.UserID)
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_inputStorePaymentPremiumGiftCode) encode() []byte {
	var flags int32
	if e.BoostPeer != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentPremiumGiftCode)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Users)
	if e.BoostPeer != nil {
		x.Object(e.BoostPeer)
	}
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_inputStorePaymentPremiumGiveaway) encode() []byte {
	var flags int32
	if e.OnlyNewSubscribers {
		flags |= (1 << 0)
	}
	if e.WinnersAreVisible {
		flags |= (1 << 3)
	}
	if e.AdditionalPeers != nil {
		flags |= (1 << 1)
	}
	if e.CountriesISO2 != nil {
		flags |= (1 << 2)
	}
	if e.PrizeDescription != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentPremiumGiveaway)
	x.Int(flags)
	x.Object(e.BoostPeer)
	if e.AdditionalPeers != nil {
		EncodeBuf_GenericVector(x, e.AdditionalPeers)
	}
	if e.CountriesISO2 != nil {
		x.VectorString(e.CountriesISO2)
	}
	if e.PrizeDescription != nil {
		x.String(*e.PrizeDescription)
	}
	x.Long(e.RandomID)
	x.Int(e.UntilDate)
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_inputStorePaymentStarsTopup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentStarsTopup)
	x.Long(e.Stars)
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_inputStorePaymentStarsGift) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentStarsGift)
	x.Object(e.UserID)
	x.Long(e.Stars)
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_inputStorePaymentStarsGiveaway) encode() []byte {
	var flags int32
	if e.OnlyNewSubscribers {
		flags |= (1 << 0)
	}
	if e.WinnersAreVisible {
		flags |= (1 << 3)
	}
	if e.AdditionalPeers != nil {
		flags |= (1 << 1)
	}
	if e.CountriesISO2 != nil {
		flags |= (1 << 2)
	}
	if e.PrizeDescription != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStorePaymentStarsGiveaway)
	x.Int(flags)
	x.Long(e.Stars)
	x.Object(e.BoostPeer)
	if e.AdditionalPeers != nil {
		EncodeBuf_GenericVector(x, e.AdditionalPeers)
	}
	if e.CountriesISO2 != nil {
		x.VectorString(e.CountriesISO2)
	}
	if e.PrizeDescription != nil {
		x.String(*e.PrizeDescription)
	}
	x.Long(e.RandomID)
	x.Int(e.UntilDate)
	x.String(e.Currency)
	x.Long(e.Amount)
	x.Int(e.Users)
	return x.buf
}

func (e TL_premiumGiftOption) encode() []byte {
	var flags int32
	if e.StoreProduct != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premiumGiftOption)
	x.Int(flags)
	x.Int(e.Months)
	x.String(e.Currency)
	x.Long(e.Amount)
	x.String(e.BotURL)
	if e.StoreProduct != nil {
		x.String(*e.StoreProduct)
	}
	return x.buf
}

func (e TL_paymentFormMethod) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_paymentFormMethod)
	x.String(e.URL)
	x.String(e.Title)
	return x.buf
}

func (e TL_emojiStatusEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiStatusEmpty)
	return x.buf
}

func (e TL_emojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiStatus)
	x.Long(e.DocumentID)
	return x.buf
}

func (e TL_emojiStatusUntil) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiStatusUntil)
	x.Long(e.DocumentID)
	x.Int(e.Until)
	return x.buf
}

func (e TL_account_emojiStatusesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_emojiStatusesNotModified)
	return x.buf
}

func (e TL_account_emojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_emojiStatuses)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Statuses)
	return x.buf
}

func (e TL_reactionEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionEmpty)
	return x.buf
}

func (e TL_reactionEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionEmoji)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_reactionCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionCustomEmoji)
	x.Long(e.DocumentID)
	return x.buf
}

func (e TL_reactionPaid) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionPaid)
	return x.buf
}

func (e TL_chatReactionsNone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatReactionsNone)
	return x.buf
}

func (e TL_chatReactionsAll) encode() []byte {
	var flags int32
	if e.AllowCustom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatReactionsAll)
	x.Int(flags)
	return x.buf
}

func (e TL_chatReactionsSome) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatReactionsSome)
	EncodeBuf_GenericVector(x, e.Reactions)
	return x.buf
}

func (e TL_messages_reactionsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reactionsNotModified)
	return x.buf
}

func (e TL_messages_reactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reactions)
	x.Long(e.Hash)
	EncodeBuf_GenericVector(x, e.Reactions)
	return x.buf
}

func (e TL_emailVerifyPurposeLoginSetup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerifyPurposeLoginSetup)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	return x.buf
}

func (e TL_emailVerifyPurposeLoginChange) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerifyPurposeLoginChange)
	return x.buf
}

func (e TL_emailVerifyPurposePassport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerifyPurposePassport)
	return x.buf
}

func (e TL_emailVerificationCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerificationCode)
	x.String(e.Code)
	return x.buf
}

func (e TL_emailVerificationGoogle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerificationGoogle)
	x.String(e.Token)
	return x.buf
}

func (e TL_emailVerificationApple) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emailVerificationApple)
	x.String(e.Token)
	return x.buf
}

func (e TL_account_emailVerified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_emailVerified)
	x.String(e.Email)
	return x.buf
}

func (e TL_account_emailVerifiedLogin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_emailVerifiedLogin)
	x.String(e.Email)
	x.Object(e.SentCode)
	return x.buf
}

func (e TL_premiumSubscriptionOption) encode() []byte {
	var flags int32
	if e.Current {
		flags |= (1 << 1)
	}
	if e.CanPurchaseUpgrade {
		flags |= (1 << 2)
	}
	if e.Transaction != nil {
		flags |= (1 << 3)
	}
	if e.StoreProduct != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premiumSubscriptionOption)
	x.Int(flags)
	if e.Transaction != nil {
		x.String(*e.Transaction)
	}
	x.Int(e.Months)
	x.String(e.Currency)
	x.Long(e.Amount)
	x.String(e.BotURL)
	if e.StoreProduct != nil {
		x.String(*e.StoreProduct)
	}
	return x.buf
}

func (e TL_sendAsPeer) encode() []byte {
	var flags int32
	if e.PremiumRequired {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_sendAsPeer)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messageExtendedMediaPreview) encode() []byte {
	var flags int32
	if e.W != nil {
		flags |= (1 << 0)
	}
	if e.H != nil {
		flags |= (1 << 0)
	}
	if e.Thumb != nil {
		flags |= (1 << 1)
	}
	if e.VideoDuration != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageExtendedMediaPreview)
	x.Int(flags)
	if e.W != nil {
		x.Int(*e.W)
	}
	if e.H != nil {
		x.Int(*e.H)
	}
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	if e.VideoDuration != nil {
		x.Int(*e.VideoDuration)
	}
	return x.buf
}

func (e TL_messageExtendedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageExtendedMedia)
	x.Object(e.Media)
	return x.buf
}

func (e TL_stickerKeyword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickerKeyword)
	x.Long(e.DocumentID)
	x.VectorString(e.Keyword)
	return x.buf
}

func (e TL_username) encode() []byte {
	var flags int32
	if e.Editable {
		flags |= (1 << 0)
	}
	if e.Active {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_username)
	x.Int(flags)
	x.String(e.Username)
	return x.buf
}

func (e TL_forumTopicDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_forumTopicDeleted)
	x.Int(e.ID)
	return x.buf
}

func (e TL_forumTopic) encode() []byte {
	var flags int32
	if e.My {
		flags |= (1 << 1)
	}
	if e.Closed {
		flags |= (1 << 2)
	}
	if e.Pinned {
		flags |= (1 << 3)
	}
	if e.Short {
		flags |= (1 << 5)
	}
	if e.Hidden {
		flags |= (1 << 6)
	}
	if e.IconEmojiID != nil {
		flags |= (1 << 0)
	}
	if e.Draft != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_forumTopic)
	x.Int(flags)
	x.Int(e.ID)
	x.Int(e.Date)
	x.String(e.Title)
	x.Int(e.IconColor)
	if e.IconEmojiID != nil {
		x.Long(*e.IconEmojiID)
	}
	x.Int(e.TopMessage)
	x.Int(e.ReadInboxMaxID)
	x.Int(e.ReadOutboxMaxID)
	x.Int(e.UnreadCount)
	x.Int(e.UnreadMentionsCount)
	x.Int(e.UnreadReactionsCount)
	x.Object(e.FromID)
	x.Object(e.NotifySettings)
	if e.Draft != nil {
		x.Object(e.Draft)
	}
	return x.buf
}

func (e TL_messages_forumTopics) encode() []byte {
	var flags int32
	if e.OrderByCreateDate {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_forumTopics)
	x.Int(flags)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Topics)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	x.Int(e.PTS)
	return x.buf
}

func (e TL_defaultHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_defaultHistoryTTL)
	x.Int(e.Period)
	return x.buf
}

func (e TL_exportedContactToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_exportedContactToken)
	x.String(e.URL)
	x.Int(e.Expires)
	return x.buf
}

func (e TL_requestPeerTypeUser) encode() []byte {
	var flags int32
	if e.Bot != nil {
		flags |= (1 << 0)
	}
	if e.Premium != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_requestPeerTypeUser)
	x.Int(flags)
	if e.Bot != nil {
		x.Bool(*e.Bot)
	}
	if e.Premium != nil {
		x.Bool(*e.Premium)
	}
	return x.buf
}

func (e TL_requestPeerTypeChat) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.BotParticipant {
		flags |= (1 << 5)
	}
	if e.HasUsername != nil {
		flags |= (1 << 3)
	}
	if e.Forum != nil {
		flags |= (1 << 4)
	}
	if e.UserAdminRights != nil {
		flags |= (1 << 1)
	}
	if e.BotAdminRights != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_requestPeerTypeChat)
	x.Int(flags)
	if e.HasUsername != nil {
		x.Bool(*e.HasUsername)
	}
	if e.Forum != nil {
		x.Bool(*e.Forum)
	}
	if e.UserAdminRights != nil {
		x.Object(e.UserAdminRights)
	}
	if e.BotAdminRights != nil {
		x.Object(e.BotAdminRights)
	}
	return x.buf
}

func (e TL_requestPeerTypeBroadcast) encode() []byte {
	var flags int32
	if e.Creator {
		flags |= (1 << 0)
	}
	if e.HasUsername != nil {
		flags |= (1 << 3)
	}
	if e.UserAdminRights != nil {
		flags |= (1 << 1)
	}
	if e.BotAdminRights != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_requestPeerTypeBroadcast)
	x.Int(flags)
	if e.HasUsername != nil {
		x.Bool(*e.HasUsername)
	}
	if e.UserAdminRights != nil {
		x.Object(e.UserAdminRights)
	}
	if e.BotAdminRights != nil {
		x.Object(e.BotAdminRights)
	}
	return x.buf
}

func (e TL_emojiListNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiListNotModified)
	return x.buf
}

func (e TL_emojiList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiList)
	x.Long(e.Hash)
	x.VectorLong(e.DocumentID)
	return x.buf
}

func (e TL_emojiGroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiGroup)
	x.String(e.Title)
	x.Long(e.IconEmojiID)
	x.VectorString(e.Emoticons)
	return x.buf
}

func (e TL_emojiGroupGreeting) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiGroupGreeting)
	x.String(e.Title)
	x.Long(e.IconEmojiID)
	x.VectorString(e.Emoticons)
	return x.buf
}

func (e TL_emojiGroupPremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_emojiGroupPremium)
	x.String(e.Title)
	x.Long(e.IconEmojiID)
	return x.buf
}

func (e TL_messages_emojiGroupsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_emojiGroupsNotModified)
	return x.buf
}

func (e TL_messages_emojiGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_emojiGroups)
	x.Int(e.Hash)
	EncodeBuf_GenericVector(x, e.Groups)
	return x.buf
}

func (e TL_textWithEntities) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_textWithEntities)
	x.String(e.Text)
	EncodeBuf_GenericVector(x, e.Entities)
	return x.buf
}

func (e TL_messages_translateResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_translateResult)
	EncodeBuf_GenericVector(x, e.Result)
	return x.buf
}

func (e TL_autoSaveSettings) encode() []byte {
	var flags int32
	if e.Photos {
		flags |= (1 << 0)
	}
	if e.Videos {
		flags |= (1 << 1)
	}
	if e.VideoMaxSize != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_autoSaveSettings)
	x.Int(flags)
	if e.VideoMaxSize != nil {
		x.Long(*e.VideoMaxSize)
	}
	return x.buf
}

func (e TL_autoSaveException) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_autoSaveException)
	x.Object(e.Peer)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_autoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_autoSaveSettings)
	x.Object(e.UsersSettings)
	x.Object(e.ChatsSettings)
	x.Object(e.BroadcastsSettings)
	EncodeBuf_GenericVector(x, e.Exceptions)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_help_appConfigNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_appConfigNotModified)
	return x.buf
}

func (e TL_help_appConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_appConfig)
	x.Int(e.Hash)
	x.Object(e.Config)
	return x.buf
}

func (e TL_inputBotAppID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotAppID)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	return x.buf
}

func (e TL_inputBotAppShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBotAppShortName)
	x.Object(e.BotID)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_botAppNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botAppNotModified)
	return x.buf
}

func (e TL_botApp) encode() []byte {
	var flags int32
	if e.Document != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botApp)
	x.Int(flags)
	x.Long(e.ID)
	x.Long(e.AccessHash)
	x.String(e.ShortName)
	x.String(e.Title)
	x.String(e.Description)
	x.Object(e.Photo)
	if e.Document != nil {
		x.Object(e.Document)
	}
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_botApp) encode() []byte {
	var flags int32
	if e.Inactive {
		flags |= (1 << 0)
	}
	if e.RequestWriteAccess {
		flags |= (1 << 1)
	}
	if e.HasSettings {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_botApp)
	x.Int(flags)
	x.Object(e.App)
	return x.buf
}

func (e TL_inlineBotWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inlineBotWebView)
	x.String(e.Text)
	x.String(e.URL)
	return x.buf
}

func (e TL_readParticipantDate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_readParticipantDate)
	x.Long(e.UserID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_inputChatlistDialogFilter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputChatlistDialogFilter)
	x.Int(e.FilterID)
	return x.buf
}

func (e TL_exportedChatlistInvite) encode() []byte {
	var flags int32
	x := NewEncodeBuf(512)
	x.UInt(CRC_exportedChatlistInvite)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.URL)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_chatlists_exportedChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_exportedChatlistInvite)
	x.Object(e.Filter)
	x.Object(e.Invite)
	return x.buf
}

func (e TL_chatlists_exportedInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_exportedInvites)
	EncodeBuf_GenericVector(x, e.Invites)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_chatlists_chatlistInviteAlready) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_chatlistInviteAlready)
	x.Int(e.FilterID)
	EncodeBuf_GenericVector(x, e.MissingPeers)
	EncodeBuf_GenericVector(x, e.AlreadyPeers)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_chatlists_chatlistInvite) encode() []byte {
	var flags int32
	if e.Emoticon != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_chatlistInvite)
	x.Int(flags)
	x.String(e.Title)
	if e.Emoticon != nil {
		x.String(*e.Emoticon)
	}
	EncodeBuf_GenericVector(x, e.Peers)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_chatlists_chatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_chatlistUpdates)
	EncodeBuf_GenericVector(x, e.MissingPeers)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_bots_botInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_botInfo)
	x.String(e.Name)
	x.String(e.About)
	x.String(e.Description)
	return x.buf
}

func (e TL_messagePeerVote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messagePeerVote)
	x.Object(e.Peer)
	x.StringBytes(e.Option)
	x.Int(e.Date)
	return x.buf
}

func (e TL_messagePeerVoteInputOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messagePeerVoteInputOption)
	x.Object(e.Peer)
	x.Int(e.Date)
	return x.buf
}

func (e TL_messagePeerVoteMultiple) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messagePeerVoteMultiple)
	x.Object(e.Peer)
	x.VectorBytes(e.Options)
	x.Int(e.Date)
	return x.buf
}

func (e TL_storyViews) encode() []byte {
	var flags int32
	if e.HasViewers {
		flags |= (1 << 1)
	}
	if e.ForwardsCount != nil {
		flags |= (1 << 2)
	}
	if e.Reactions != nil {
		flags |= (1 << 3)
	}
	if e.ReactionsCount != nil {
		flags |= (1 << 4)
	}
	if e.RecentViewers != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyViews)
	x.Int(flags)
	x.Int(e.ViewsCount)
	if e.ForwardsCount != nil {
		x.Int(*e.ForwardsCount)
	}
	if e.Reactions != nil {
		EncodeBuf_GenericVector(x, e.Reactions)
	}
	if e.ReactionsCount != nil {
		x.Int(*e.ReactionsCount)
	}
	if e.RecentViewers != nil {
		x.VectorLong(e.RecentViewers)
	}
	return x.buf
}

func (e TL_storyItemDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyItemDeleted)
	x.Int(e.ID)
	return x.buf
}

func (e TL_storyItemSkipped) encode() []byte {
	var flags int32
	if e.CloseFriends {
		flags |= (1 << 8)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyItemSkipped)
	x.Int(flags)
	x.Int(e.ID)
	x.Int(e.Date)
	x.Int(e.ExpireDate)
	return x.buf
}

func (e TL_storyItem) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 5)
	}
	if e.Public {
		flags |= (1 << 7)
	}
	if e.CloseFriends {
		flags |= (1 << 8)
	}
	if e.Min {
		flags |= (1 << 9)
	}
	if e.Noforwards {
		flags |= (1 << 10)
	}
	if e.Edited {
		flags |= (1 << 11)
	}
	if e.Contacts {
		flags |= (1 << 12)
	}
	if e.SelectedContacts {
		flags |= (1 << 13)
	}
	if e.Out {
		flags |= (1 << 16)
	}
	if e.FromID != nil {
		flags |= (1 << 18)
	}
	if e.FwdFrom != nil {
		flags |= (1 << 17)
	}
	if e.Caption != nil {
		flags |= (1 << 0)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.MediaAreas != nil {
		flags |= (1 << 14)
	}
	if e.Privacy != nil {
		flags |= (1 << 2)
	}
	if e.Views != nil {
		flags |= (1 << 3)
	}
	if e.SentReaction != nil {
		flags |= (1 << 15)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyItem)
	x.Int(flags)
	x.Int(e.ID)
	x.Int(e.Date)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	if e.FwdFrom != nil {
		x.Object(e.FwdFrom)
	}
	x.Int(e.ExpireDate)
	if e.Caption != nil {
		x.String(*e.Caption)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	x.Object(e.Media)
	if e.MediaAreas != nil {
		EncodeBuf_GenericVector(x, e.MediaAreas)
	}
	if e.Privacy != nil {
		EncodeBuf_GenericVector(x, e.Privacy)
	}
	if e.Views != nil {
		x.Object(e.Views)
	}
	if e.SentReaction != nil {
		x.Object(e.SentReaction)
	}
	return x.buf
}

func (e TL_stories_allStoriesNotModified) encode() []byte {
	var flags int32
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_allStoriesNotModified)
	x.Int(flags)
	x.String(e.State)
	x.Object(e.StealthMode)
	return x.buf
}

func (e TL_stories_allStories) encode() []byte {
	var flags int32
	if e.HasMore {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_allStories)
	x.Int(flags)
	x.Int(e.Count)
	x.String(e.State)
	EncodeBuf_GenericVector(x, e.PeerStories)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	x.Object(e.StealthMode)
	return x.buf
}

func (e TL_stories_stories) encode() []byte {
	var flags int32
	if e.PinnedToTop != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_stories)
	x.Int(flags)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Stories)
	if e.PinnedToTop != nil {
		x.VectorInt(e.PinnedToTop)
	}
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_storyView) encode() []byte {
	var flags int32
	if e.Blocked {
		flags |= (1 << 0)
	}
	if e.BlockedMyStoriesFrom {
		flags |= (1 << 1)
	}
	if e.Reaction != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyView)
	x.Int(flags)
	x.Long(e.UserID)
	x.Int(e.Date)
	if e.Reaction != nil {
		x.Object(e.Reaction)
	}
	return x.buf
}

func (e TL_storyViewPublicForward) encode() []byte {
	var flags int32
	if e.Blocked {
		flags |= (1 << 0)
	}
	if e.BlockedMyStoriesFrom {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyViewPublicForward)
	x.Int(flags)
	x.Object(e.Message)
	return x.buf
}

func (e TL_storyViewPublicRepost) encode() []byte {
	var flags int32
	if e.Blocked {
		flags |= (1 << 0)
	}
	if e.BlockedMyStoriesFrom {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyViewPublicRepost)
	x.Int(flags)
	x.Object(e.PeerID)
	x.Object(e.Story)
	return x.buf
}

func (e TL_stories_storyViewsList) encode() []byte {
	var flags int32
	if e.NextOffset != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_storyViewsList)
	x.Int(flags)
	x.Int(e.Count)
	x.Int(e.ViewsCount)
	x.Int(e.ForwardsCount)
	x.Int(e.ReactionsCount)
	EncodeBuf_GenericVector(x, e.Views)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	return x.buf
}

func (e TL_stories_storyViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_storyViews)
	EncodeBuf_GenericVector(x, e.Views)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_inputReplyToMessage) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	if e.ReplyToPeerID != nil {
		flags |= (1 << 1)
	}
	if e.QuoteText != nil {
		flags |= (1 << 2)
	}
	if e.QuoteEntities != nil {
		flags |= (1 << 3)
	}
	if e.QuoteOffset != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReplyToMessage)
	x.Int(flags)
	x.Int(e.ReplyToMsgID)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	if e.ReplyToPeerID != nil {
		x.Object(e.ReplyToPeerID)
	}
	if e.QuoteText != nil {
		x.String(*e.QuoteText)
	}
	if e.QuoteEntities != nil {
		EncodeBuf_GenericVector(x, e.QuoteEntities)
	}
	if e.QuoteOffset != nil {
		x.Int(*e.QuoteOffset)
	}
	return x.buf
}

func (e TL_inputReplyToStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputReplyToStory)
	x.Object(e.Peer)
	x.Int(e.StoryID)
	return x.buf
}

func (e TL_exportedStoryLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_exportedStoryLink)
	x.String(e.Link)
	return x.buf
}

func (e TL_storiesStealthMode) encode() []byte {
	var flags int32
	if e.ActiveUntilDate != nil {
		flags |= (1 << 0)
	}
	if e.CooldownUntilDate != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storiesStealthMode)
	x.Int(flags)
	if e.ActiveUntilDate != nil {
		x.Int(*e.ActiveUntilDate)
	}
	if e.CooldownUntilDate != nil {
		x.Int(*e.CooldownUntilDate)
	}
	return x.buf
}

func (e TL_mediaAreaCoordinates) encode() []byte {
	var flags int32
	if e.Radius != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaCoordinates)
	x.Int(flags)
	x.Double(e.X)
	x.Double(e.Y)
	x.Double(e.W)
	x.Double(e.H)
	x.Double(e.Rotation)
	if e.Radius != nil {
		x.Double(*e.Radius)
	}
	return x.buf
}

func (e TL_mediaAreaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaVenue)
	x.Object(e.Coordinates)
	x.Object(e.Geo)
	x.String(e.Title)
	x.String(e.Address)
	x.String(e.Provider)
	x.String(e.VenueID)
	x.String(e.VenueType)
	return x.buf
}

func (e TL_inputMediaAreaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaAreaVenue)
	x.Object(e.Coordinates)
	x.Long(e.QueryID)
	x.String(e.ResultID)
	return x.buf
}

func (e TL_mediaAreaGeoPoint) encode() []byte {
	var flags int32
	if e.Address != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaGeoPoint)
	x.Int(flags)
	x.Object(e.Coordinates)
	x.Object(e.Geo)
	if e.Address != nil {
		x.Object(e.Address)
	}
	return x.buf
}

func (e TL_mediaAreaSuggestedReaction) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	if e.Flipped {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaSuggestedReaction)
	x.Int(flags)
	x.Object(e.Coordinates)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_mediaAreaChannelPost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaChannelPost)
	x.Object(e.Coordinates)
	x.Long(e.ChannelID)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_inputMediaAreaChannelPost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputMediaAreaChannelPost)
	x.Object(e.Coordinates)
	x.Object(e.Channel)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_mediaAreaURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaURL)
	x.Object(e.Coordinates)
	x.String(e.URL)
	return x.buf
}

func (e TL_mediaAreaWeather) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_mediaAreaWeather)
	x.Object(e.Coordinates)
	x.String(e.Emoji)
	x.Double(e.TemperatureC)
	x.Int(e.Color)
	return x.buf
}

func (e TL_peerStories) encode() []byte {
	var flags int32
	if e.MaxReadID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerStories)
	x.Int(flags)
	x.Object(e.Peer)
	if e.MaxReadID != nil {
		x.Int(*e.MaxReadID)
	}
	EncodeBuf_GenericVector(x, e.Stories)
	return x.buf
}

func (e TL_stories_peerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_peerStories)
	x.Object(e.Stories)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_webPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_webPage)
	x.Object(e.Webpage)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_premiumGiftCodeOption) encode() []byte {
	var flags int32
	if e.StoreProduct != nil {
		flags |= (1 << 0)
	}
	if e.StoreQuantity != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premiumGiftCodeOption)
	x.Int(flags)
	x.Int(e.Users)
	x.Int(e.Months)
	if e.StoreProduct != nil {
		x.String(*e.StoreProduct)
	}
	if e.StoreQuantity != nil {
		x.Int(*e.StoreQuantity)
	}
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_payments_checkedGiftCode) encode() []byte {
	var flags int32
	if e.ViaGiveaway {
		flags |= (1 << 2)
	}
	if e.FromID != nil {
		flags |= (1 << 4)
	}
	if e.GiveawayMsgID != nil {
		flags |= (1 << 3)
	}
	if e.ToID != nil {
		flags |= (1 << 0)
	}
	if e.UsedDate != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_checkedGiftCode)
	x.Int(flags)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	if e.GiveawayMsgID != nil {
		x.Int(*e.GiveawayMsgID)
	}
	if e.ToID != nil {
		x.Long(*e.ToID)
	}
	x.Int(e.Date)
	x.Int(e.Months)
	if e.UsedDate != nil {
		x.Int(*e.UsedDate)
	}
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_payments_giveawayInfo) encode() []byte {
	var flags int32
	if e.Participating {
		flags |= (1 << 0)
	}
	if e.PreparingResults {
		flags |= (1 << 3)
	}
	if e.JoinedTooEarlyDate != nil {
		flags |= (1 << 1)
	}
	if e.AdminDisallowedChatID != nil {
		flags |= (1 << 2)
	}
	if e.DisallowedCountry != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_giveawayInfo)
	x.Int(flags)
	x.Int(e.StartDate)
	if e.JoinedTooEarlyDate != nil {
		x.Int(*e.JoinedTooEarlyDate)
	}
	if e.AdminDisallowedChatID != nil {
		x.Long(*e.AdminDisallowedChatID)
	}
	if e.DisallowedCountry != nil {
		x.String(*e.DisallowedCountry)
	}
	return x.buf
}

func (e TL_payments_giveawayInfoResults) encode() []byte {
	var flags int32
	if e.Winner {
		flags |= (1 << 0)
	}
	if e.Refunded {
		flags |= (1 << 1)
	}
	if e.GiftCodeSlug != nil {
		flags |= (1 << 3)
	}
	if e.StarsPrize != nil {
		flags |= (1 << 4)
	}
	if e.ActivatedCount != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_giveawayInfoResults)
	x.Int(flags)
	x.Int(e.StartDate)
	if e.GiftCodeSlug != nil {
		x.String(*e.GiftCodeSlug)
	}
	if e.StarsPrize != nil {
		x.Long(*e.StarsPrize)
	}
	x.Int(e.FinishDate)
	x.Int(e.WinnersCount)
	if e.ActivatedCount != nil {
		x.Int(*e.ActivatedCount)
	}
	return x.buf
}

func (e TL_prepaidGiveaway) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_prepaidGiveaway)
	x.Long(e.ID)
	x.Int(e.Months)
	x.Int(e.Quantity)
	x.Int(e.Date)
	return x.buf
}

func (e TL_prepaidStarsGiveaway) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_prepaidStarsGiveaway)
	x.Long(e.ID)
	x.Long(e.Stars)
	x.Int(e.Quantity)
	x.Int(e.Boosts)
	x.Int(e.Date)
	return x.buf
}

func (e TL_boost) encode() []byte {
	var flags int32
	if e.Gift {
		flags |= (1 << 1)
	}
	if e.Giveaway {
		flags |= (1 << 2)
	}
	if e.Unclaimed {
		flags |= (1 << 3)
	}
	if e.UserID != nil {
		flags |= (1 << 0)
	}
	if e.GiveawayMsgID != nil {
		flags |= (1 << 2)
	}
	if e.UsedGiftSlug != nil {
		flags |= (1 << 4)
	}
	if e.Multiplier != nil {
		flags |= (1 << 5)
	}
	if e.Stars != nil {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_boost)
	x.Int(flags)
	x.String(e.ID)
	if e.UserID != nil {
		x.Long(*e.UserID)
	}
	if e.GiveawayMsgID != nil {
		x.Int(*e.GiveawayMsgID)
	}
	x.Int(e.Date)
	x.Int(e.Expires)
	if e.UsedGiftSlug != nil {
		x.String(*e.UsedGiftSlug)
	}
	if e.Multiplier != nil {
		x.Int(*e.Multiplier)
	}
	if e.Stars != nil {
		x.Long(*e.Stars)
	}
	return x.buf
}

func (e TL_premium_boostsList) encode() []byte {
	var flags int32
	if e.NextOffset != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_boostsList)
	x.Int(flags)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Boosts)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_myBoost) encode() []byte {
	var flags int32
	if e.Peer != nil {
		flags |= (1 << 0)
	}
	if e.CooldownUntilDate != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_myBoost)
	x.Int(flags)
	x.Int(e.Slot)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	x.Int(e.Date)
	x.Int(e.Expires)
	if e.CooldownUntilDate != nil {
		x.Int(*e.CooldownUntilDate)
	}
	return x.buf
}

func (e TL_premium_myBoosts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_myBoosts)
	EncodeBuf_GenericVector(x, e.MyBoosts)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_premium_boostsStatus) encode() []byte {
	var flags int32
	if e.MyBoost {
		flags |= (1 << 2)
	}
	if e.GiftBoosts != nil {
		flags |= (1 << 4)
	}
	if e.NextLevelBoosts != nil {
		flags |= (1 << 0)
	}
	if e.PremiumAudience != nil {
		flags |= (1 << 1)
	}
	if e.PrepaidGiveaways != nil {
		flags |= (1 << 3)
	}
	if e.MyBoostSlots != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_boostsStatus)
	x.Int(flags)
	x.Int(e.Level)
	x.Int(e.CurrentLevelBoosts)
	x.Int(e.Boosts)
	if e.GiftBoosts != nil {
		x.Int(*e.GiftBoosts)
	}
	if e.NextLevelBoosts != nil {
		x.Int(*e.NextLevelBoosts)
	}
	if e.PremiumAudience != nil {
		x.Object(e.PremiumAudience)
	}
	x.String(e.BoostURL)
	if e.PrepaidGiveaways != nil {
		EncodeBuf_GenericVector(x, e.PrepaidGiveaways)
	}
	if e.MyBoostSlots != nil {
		x.VectorInt(e.MyBoostSlots)
	}
	return x.buf
}

func (e TL_storyFwdHeader) encode() []byte {
	var flags int32
	if e.Modified {
		flags |= (1 << 3)
	}
	if e.From != nil {
		flags |= (1 << 0)
	}
	if e.FromName != nil {
		flags |= (1 << 1)
	}
	if e.StoryID != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyFwdHeader)
	x.Int(flags)
	if e.From != nil {
		x.Object(e.From)
	}
	if e.FromName != nil {
		x.String(*e.FromName)
	}
	if e.StoryID != nil {
		x.Int(*e.StoryID)
	}
	return x.buf
}

func (e TL_postInteractionCountersMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_postInteractionCountersMessage)
	x.Int(e.MsgID)
	x.Int(e.Views)
	x.Int(e.Forwards)
	x.Int(e.Reactions)
	return x.buf
}

func (e TL_postInteractionCountersStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_postInteractionCountersStory)
	x.Int(e.StoryID)
	x.Int(e.Views)
	x.Int(e.Forwards)
	x.Int(e.Reactions)
	return x.buf
}

func (e TL_stats_storyStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_storyStats)
	x.Object(e.ViewsGraph)
	x.Object(e.ReactionsByEmotionGraph)
	return x.buf
}

func (e TL_publicForwardMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_publicForwardMessage)
	x.Object(e.Message)
	return x.buf
}

func (e TL_publicForwardStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_publicForwardStory)
	x.Object(e.Peer)
	x.Object(e.Story)
	return x.buf
}

func (e TL_stats_publicForwards) encode() []byte {
	var flags int32
	if e.NextOffset != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_publicForwards)
	x.Int(flags)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Forwards)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_peerColor) encode() []byte {
	var flags int32
	if e.Color != nil {
		flags |= (1 << 0)
	}
	if e.BackgroundEmojiID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_peerColor)
	x.Int(flags)
	if e.Color != nil {
		x.Int(*e.Color)
	}
	if e.BackgroundEmojiID != nil {
		x.Long(*e.BackgroundEmojiID)
	}
	return x.buf
}

func (e TL_help_peerColorSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_peerColorSet)
	x.VectorInt(e.Colors)
	return x.buf
}

func (e TL_help_peerColorProfileSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_peerColorProfileSet)
	x.VectorInt(e.PaletteColors)
	x.VectorInt(e.BgColors)
	x.VectorInt(e.StoryColors)
	return x.buf
}

func (e TL_help_peerColorOption) encode() []byte {
	var flags int32
	if e.Hidden {
		flags |= (1 << 0)
	}
	if e.Colors != nil {
		flags |= (1 << 1)
	}
	if e.DarkColors != nil {
		flags |= (1 << 2)
	}
	if e.ChannelMinLevel != nil {
		flags |= (1 << 3)
	}
	if e.GroupMinLevel != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_peerColorOption)
	x.Int(flags)
	x.Int(e.ColorID)
	if e.Colors != nil {
		x.Object(e.Colors)
	}
	if e.DarkColors != nil {
		x.Object(e.DarkColors)
	}
	if e.ChannelMinLevel != nil {
		x.Int(*e.ChannelMinLevel)
	}
	if e.GroupMinLevel != nil {
		x.Int(*e.GroupMinLevel)
	}
	return x.buf
}

func (e TL_help_peerColorsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_peerColorsNotModified)
	return x.buf
}

func (e TL_help_peerColors) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_peerColors)
	x.Int(e.Hash)
	EncodeBuf_GenericVector(x, e.Colors)
	return x.buf
}

func (e TL_storyReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyReaction)
	x.Object(e.PeerID)
	x.Int(e.Date)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_storyReactionPublicForward) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyReactionPublicForward)
	x.Object(e.Message)
	return x.buf
}

func (e TL_storyReactionPublicRepost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_storyReactionPublicRepost)
	x.Object(e.PeerID)
	x.Object(e.Story)
	return x.buf
}

func (e TL_stories_storyReactionsList) encode() []byte {
	var flags int32
	if e.NextOffset != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_storyReactionsList)
	x.Int(flags)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Reactions)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	return x.buf
}

func (e TL_savedDialog) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_savedDialog)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.TopMessage)
	return x.buf
}

func (e TL_messages_savedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_savedDialogs)
	EncodeBuf_GenericVector(x, e.Dialogs)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_savedDialogsSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_savedDialogsSlice)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Dialogs)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_savedDialogsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_savedDialogsNotModified)
	x.Int(e.Count)
	return x.buf
}

func (e TL_savedReactionTag) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_savedReactionTag)
	x.Int(flags)
	x.Object(e.Reaction)
	if e.Title != nil {
		x.String(*e.Title)
	}
	x.Int(e.Count)
	return x.buf
}

func (e TL_messages_savedReactionTagsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_savedReactionTagsNotModified)
	return x.buf
}

func (e TL_messages_savedReactionTags) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_savedReactionTags)
	EncodeBuf_GenericVector(x, e.Tags)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_outboxReadDate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_outboxReadDate)
	x.Int(e.Date)
	return x.buf
}

func (e TL_smsjobs_eligibleToJoin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsjobs_eligibleToJoin)
	x.String(e.TermsURL)
	x.Int(e.MonthlySentSMS)
	return x.buf
}

func (e TL_smsjobs_status) encode() []byte {
	var flags int32
	if e.AllowInternational {
		flags |= (1 << 0)
	}
	if e.LastGiftSlug != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsjobs_status)
	x.Int(flags)
	x.Int(e.RecentSent)
	x.Int(e.RecentSince)
	x.Int(e.RecentRemains)
	x.Int(e.TotalSent)
	x.Int(e.TotalSince)
	if e.LastGiftSlug != nil {
		x.String(*e.LastGiftSlug)
	}
	x.String(e.TermsURL)
	return x.buf
}

func (e TL_smsJob) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsJob)
	x.String(e.JobID)
	x.String(e.PhoneNumber)
	x.String(e.Text)
	return x.buf
}

func (e TL_businessWeeklyOpen) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessWeeklyOpen)
	x.Int(e.StartMinute)
	x.Int(e.EndMinute)
	return x.buf
}

func (e TL_businessWorkHours) encode() []byte {
	var flags int32
	if e.OpenNow {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessWorkHours)
	x.Int(flags)
	x.String(e.TimezoneID)
	EncodeBuf_GenericVector(x, e.WeeklyOpen)
	return x.buf
}

func (e TL_businessLocation) encode() []byte {
	var flags int32
	if e.GeoPoint != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessLocation)
	x.Int(flags)
	if e.GeoPoint != nil {
		x.Object(e.GeoPoint)
	}
	x.String(e.Address)
	return x.buf
}

func (e TL_inputBusinessRecipients) encode() []byte {
	var flags int32
	if e.ExistingChats {
		flags |= (1 << 0)
	}
	if e.NewChats {
		flags |= (1 << 1)
	}
	if e.Contacts {
		flags |= (1 << 2)
	}
	if e.NonContacts {
		flags |= (1 << 3)
	}
	if e.ExcludeSelected {
		flags |= (1 << 5)
	}
	if e.Users != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBusinessRecipients)
	x.Int(flags)
	if e.Users != nil {
		EncodeBuf_GenericVector(x, e.Users)
	}
	return x.buf
}

func (e TL_businessRecipients) encode() []byte {
	var flags int32
	if e.ExistingChats {
		flags |= (1 << 0)
	}
	if e.NewChats {
		flags |= (1 << 1)
	}
	if e.Contacts {
		flags |= (1 << 2)
	}
	if e.NonContacts {
		flags |= (1 << 3)
	}
	if e.ExcludeSelected {
		flags |= (1 << 5)
	}
	if e.Users != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessRecipients)
	x.Int(flags)
	if e.Users != nil {
		x.VectorLong(e.Users)
	}
	return x.buf
}

func (e TL_businessAwayMessageScheduleAlways) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessAwayMessageScheduleAlways)
	return x.buf
}

func (e TL_businessAwayMessageScheduleOutsideWorkHours) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessAwayMessageScheduleOutsideWorkHours)
	return x.buf
}

func (e TL_businessAwayMessageScheduleCustom) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessAwayMessageScheduleCustom)
	x.Int(e.StartDate)
	x.Int(e.EndDate)
	return x.buf
}

func (e TL_inputBusinessGreetingMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBusinessGreetingMessage)
	x.Int(e.ShortcutID)
	x.Object(e.Recipients)
	x.Int(e.NoActivityDays)
	return x.buf
}

func (e TL_businessGreetingMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessGreetingMessage)
	x.Int(e.ShortcutID)
	x.Object(e.Recipients)
	x.Int(e.NoActivityDays)
	return x.buf
}

func (e TL_inputBusinessAwayMessage) encode() []byte {
	var flags int32
	if e.OfflineOnly {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBusinessAwayMessage)
	x.Int(flags)
	x.Int(e.ShortcutID)
	x.Object(e.Schedule)
	x.Object(e.Recipients)
	return x.buf
}

func (e TL_businessAwayMessage) encode() []byte {
	var flags int32
	if e.OfflineOnly {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessAwayMessage)
	x.Int(flags)
	x.Int(e.ShortcutID)
	x.Object(e.Schedule)
	x.Object(e.Recipients)
	return x.buf
}

func (e TL_timezone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_timezone)
	x.String(e.ID)
	x.String(e.Name)
	x.Int(e.UtcOffset)
	return x.buf
}

func (e TL_help_timezonesListNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_timezonesListNotModified)
	return x.buf
}

func (e TL_help_timezonesList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_timezonesList)
	EncodeBuf_GenericVector(x, e.Timezones)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_quickReply) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_quickReply)
	x.Int(e.ShortcutID)
	x.String(e.Shortcut)
	x.Int(e.TopMessage)
	x.Int(e.Count)
	return x.buf
}

func (e TL_inputQuickReplyShortcut) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputQuickReplyShortcut)
	x.String(e.Shortcut)
	return x.buf
}

func (e TL_inputQuickReplyShortcutID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputQuickReplyShortcutID)
	x.Int(e.ShortcutID)
	return x.buf
}

func (e TL_messages_quickReplies) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_quickReplies)
	EncodeBuf_GenericVector(x, e.QuickReplies)
	EncodeBuf_GenericVector(x, e.Messages)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_quickRepliesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_quickRepliesNotModified)
	return x.buf
}

func (e TL_connectedBot) encode() []byte {
	var flags int32
	if e.CanReply {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_connectedBot)
	x.Int(flags)
	x.Long(e.BotID)
	x.Object(e.Recipients)
	return x.buf
}

func (e TL_account_connectedBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_connectedBots)
	EncodeBuf_GenericVector(x, e.ConnectedBots)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_messages_dialogFilters) encode() []byte {
	var flags int32
	if e.TagsEnabled {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_dialogFilters)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Filters)
	return x.buf
}

func (e TL_birthday) encode() []byte {
	var flags int32
	if e.Year != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_birthday)
	x.Int(flags)
	x.Int(e.Day)
	x.Int(e.Month)
	if e.Year != nil {
		x.Int(*e.Year)
	}
	return x.buf
}

func (e TL_botBusinessConnection) encode() []byte {
	var flags int32
	if e.CanReply {
		flags |= (1 << 0)
	}
	if e.Disabled {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_botBusinessConnection)
	x.Int(flags)
	x.String(e.ConnectionID)
	x.Long(e.UserID)
	x.Int(e.DCID)
	x.Int(e.Date)
	return x.buf
}

func (e TL_inputBusinessIntro) encode() []byte {
	var flags int32
	if e.Sticker != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBusinessIntro)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Sticker != nil {
		x.Object(e.Sticker)
	}
	return x.buf
}

func (e TL_businessIntro) encode() []byte {
	var flags int32
	if e.Sticker != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessIntro)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.Description)
	if e.Sticker != nil {
		x.Object(e.Sticker)
	}
	return x.buf
}

func (e TL_messages_myStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_myStickers)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Sets)
	return x.buf
}

func (e TL_inputCollectibleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputCollectibleUsername)
	x.String(e.Username)
	return x.buf
}

func (e TL_inputCollectiblePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputCollectiblePhone)
	x.String(e.Phone)
	return x.buf
}

func (e TL_fragment_collectibleInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_fragment_collectibleInfo)
	x.Int(e.PurchaseDate)
	x.String(e.Currency)
	x.Long(e.Amount)
	x.String(e.CryptoCurrency)
	x.Long(e.CryptoAmount)
	x.String(e.URL)
	return x.buf
}

func (e TL_inputBusinessBotRecipients) encode() []byte {
	var flags int32
	if e.ExistingChats {
		flags |= (1 << 0)
	}
	if e.NewChats {
		flags |= (1 << 1)
	}
	if e.Contacts {
		flags |= (1 << 2)
	}
	if e.NonContacts {
		flags |= (1 << 3)
	}
	if e.ExcludeSelected {
		flags |= (1 << 5)
	}
	if e.Users != nil {
		flags |= (1 << 4)
	}
	if e.ExcludeUsers != nil {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBusinessBotRecipients)
	x.Int(flags)
	if e.Users != nil {
		EncodeBuf_GenericVector(x, e.Users)
	}
	if e.ExcludeUsers != nil {
		EncodeBuf_GenericVector(x, e.ExcludeUsers)
	}
	return x.buf
}

func (e TL_businessBotRecipients) encode() []byte {
	var flags int32
	if e.ExistingChats {
		flags |= (1 << 0)
	}
	if e.NewChats {
		flags |= (1 << 1)
	}
	if e.Contacts {
		flags |= (1 << 2)
	}
	if e.NonContacts {
		flags |= (1 << 3)
	}
	if e.ExcludeSelected {
		flags |= (1 << 5)
	}
	if e.Users != nil {
		flags |= (1 << 4)
	}
	if e.ExcludeUsers != nil {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessBotRecipients)
	x.Int(flags)
	if e.Users != nil {
		x.VectorLong(e.Users)
	}
	if e.ExcludeUsers != nil {
		x.VectorLong(e.ExcludeUsers)
	}
	return x.buf
}

func (e TL_contactBirthday) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contactBirthday)
	x.Long(e.ContactID)
	x.Object(e.Birthday)
	return x.buf
}

func (e TL_contacts_contactBirthdays) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_contactBirthdays)
	EncodeBuf_GenericVector(x, e.Contacts)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_missingInvitee) encode() []byte {
	var flags int32
	if e.PremiumWouldAllowInvite {
		flags |= (1 << 0)
	}
	if e.PremiumRequiredForPM {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_missingInvitee)
	x.Int(flags)
	x.Long(e.UserID)
	return x.buf
}

func (e TL_messages_invitedUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_invitedUsers)
	x.Object(e.Updates)
	EncodeBuf_GenericVector(x, e.MissingInvitees)
	return x.buf
}

func (e TL_inputBusinessChatLink) encode() []byte {
	var flags int32
	if e.Entities != nil {
		flags |= (1 << 0)
	}
	if e.Title != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputBusinessChatLink)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.Title != nil {
		x.String(*e.Title)
	}
	return x.buf
}

func (e TL_businessChatLink) encode() []byte {
	var flags int32
	if e.Entities != nil {
		flags |= (1 << 0)
	}
	if e.Title != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_businessChatLink)
	x.Int(flags)
	x.String(e.Link)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.Title != nil {
		x.String(*e.Title)
	}
	x.Int(e.Views)
	return x.buf
}

func (e TL_account_businessChatLinks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_businessChatLinks)
	EncodeBuf_GenericVector(x, e.Links)
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_account_resolvedBusinessChatLinks) encode() []byte {
	var flags int32
	if e.Entities != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resolvedBusinessChatLinks)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_requestedPeerUser) encode() []byte {
	var flags int32
	if e.FirstName != nil {
		flags |= (1 << 0)
	}
	if e.LastName != nil {
		flags |= (1 << 0)
	}
	if e.Username != nil {
		flags |= (1 << 1)
	}
	if e.Photo != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_requestedPeerUser)
	x.Int(flags)
	x.Long(e.UserID)
	if e.FirstName != nil {
		x.String(*e.FirstName)
	}
	if e.LastName != nil {
		x.String(*e.LastName)
	}
	if e.Username != nil {
		x.String(*e.Username)
	}
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	return x.buf
}

func (e TL_requestedPeerChat) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 0)
	}
	if e.Photo != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_requestedPeerChat)
	x.Int(flags)
	x.Long(e.ChatID)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	return x.buf
}

func (e TL_requestedPeerChannel) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 0)
	}
	if e.Username != nil {
		flags |= (1 << 1)
	}
	if e.Photo != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_requestedPeerChannel)
	x.Int(flags)
	x.Long(e.ChannelID)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Username != nil {
		x.String(*e.Username)
	}
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	return x.buf
}

func (e TL_sponsoredMessageReportOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_sponsoredMessageReportOption)
	x.String(e.Text)
	x.StringBytes(e.Option)
	return x.buf
}

func (e TL_channels_sponsoredMessageReportResultChooseOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_sponsoredMessageReportResultChooseOption)
	x.String(e.Title)
	EncodeBuf_GenericVector(x, e.Options)
	return x.buf
}

func (e TL_channels_sponsoredMessageReportResultAdsHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_sponsoredMessageReportResultAdsHidden)
	return x.buf
}

func (e TL_channels_sponsoredMessageReportResultReported) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_sponsoredMessageReportResultReported)
	return x.buf
}

func (e TL_stats_broadcastRevenueStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_broadcastRevenueStats)
	x.Object(e.TopHoursGraph)
	x.Object(e.RevenueGraph)
	x.Object(e.Balances)
	x.Double(e.UsdRate)
	return x.buf
}

func (e TL_stats_broadcastRevenueWithdrawalURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_broadcastRevenueWithdrawalURL)
	x.String(e.URL)
	return x.buf
}

func (e TL_broadcastRevenueTransactionProceeds) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_broadcastRevenueTransactionProceeds)
	x.Long(e.Amount)
	x.Int(e.FromDate)
	x.Int(e.ToDate)
	return x.buf
}

func (e TL_broadcastRevenueTransactionWithdrawal) encode() []byte {
	var flags int32
	if e.Pending {
		flags |= (1 << 0)
	}
	if e.Failed {
		flags |= (1 << 2)
	}
	if e.TransactionDate != nil {
		flags |= (1 << 1)
	}
	if e.TransactionURL != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_broadcastRevenueTransactionWithdrawal)
	x.Int(flags)
	x.Long(e.Amount)
	x.Int(e.Date)
	x.String(e.Provider)
	if e.TransactionDate != nil {
		x.Int(*e.TransactionDate)
	}
	if e.TransactionURL != nil {
		x.String(*e.TransactionURL)
	}
	return x.buf
}

func (e TL_broadcastRevenueTransactionRefund) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_broadcastRevenueTransactionRefund)
	x.Long(e.Amount)
	x.Int(e.Date)
	x.String(e.Provider)
	return x.buf
}

func (e TL_stats_broadcastRevenueTransactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_broadcastRevenueTransactions)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Transactions)
	return x.buf
}

func (e TL_reactionNotificationsFromContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionNotificationsFromContacts)
	return x.buf
}

func (e TL_reactionNotificationsFromAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionNotificationsFromAll)
	return x.buf
}

func (e TL_reactionsNotifySettings) encode() []byte {
	var flags int32
	if e.MessagesNotifyFrom != nil {
		flags |= (1 << 0)
	}
	if e.StoriesNotifyFrom != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_reactionsNotifySettings)
	x.Int(flags)
	if e.MessagesNotifyFrom != nil {
		x.Object(e.MessagesNotifyFrom)
	}
	if e.StoriesNotifyFrom != nil {
		x.Object(e.StoriesNotifyFrom)
	}
	x.Object(e.Sound)
	x.Bool(e.ShowPreviews)
	return x.buf
}

func (e TL_broadcastRevenueBalances) encode() []byte {
	var flags int32
	if e.WithdrawalEnabled {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_broadcastRevenueBalances)
	x.Int(flags)
	x.Long(e.CurrentBalance)
	x.Long(e.AvailableBalance)
	x.Long(e.OverallRevenue)
	return x.buf
}

func (e TL_availableEffect) encode() []byte {
	var flags int32
	if e.PremiumRequired {
		flags |= (1 << 2)
	}
	if e.StaticIconID != nil {
		flags |= (1 << 0)
	}
	if e.EffectAnimationID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_availableEffect)
	x.Int(flags)
	x.Long(e.ID)
	x.String(e.Emoticon)
	if e.StaticIconID != nil {
		x.Long(*e.StaticIconID)
	}
	x.Long(e.EffectStickerID)
	if e.EffectAnimationID != nil {
		x.Long(*e.EffectAnimationID)
	}
	return x.buf
}

func (e TL_messages_availableEffectsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_availableEffectsNotModified)
	return x.buf
}

func (e TL_messages_availableEffects) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_availableEffects)
	x.Int(e.Hash)
	EncodeBuf_GenericVector(x, e.Effects)
	EncodeBuf_GenericVector(x, e.Documents)
	return x.buf
}

func (e TL_factCheck) encode() []byte {
	var flags int32
	if e.NeedCheck {
		flags |= (1 << 0)
	}
	if e.Country != nil {
		flags |= (1 << 1)
	}
	if e.Text != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_factCheck)
	x.Int(flags)
	if e.Country != nil {
		x.String(*e.Country)
	}
	if e.Text != nil {
		x.Object(e.Text)
	}
	x.Long(e.Hash)
	return x.buf
}

func (e TL_starsTransactionPeerUnsupported) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsTransactionPeerUnsupported)
	return x.buf
}

func (e TL_starsTransactionPeerAppStore) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsTransactionPeerAppStore)
	return x.buf
}

func (e TL_starsTransactionPeerPlayMarket) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsTransactionPeerPlayMarket)
	return x.buf
}

func (e TL_starsTransactionPeerPremiumBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsTransactionPeerPremiumBot)
	return x.buf
}

func (e TL_starsTransactionPeerFragment) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsTransactionPeerFragment)
	return x.buf
}

func (e TL_starsTransactionPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsTransactionPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_starsTransactionPeerAds) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsTransactionPeerAds)
	return x.buf
}

func (e TL_starsTopupOption) encode() []byte {
	var flags int32
	if e.Extended {
		flags |= (1 << 1)
	}
	if e.StoreProduct != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsTopupOption)
	x.Int(flags)
	x.Long(e.Stars)
	if e.StoreProduct != nil {
		x.String(*e.StoreProduct)
	}
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_starsTransaction) encode() []byte {
	var flags int32
	if e.Refund {
		flags |= (1 << 3)
	}
	if e.Pending {
		flags |= (1 << 4)
	}
	if e.Failed {
		flags |= (1 << 6)
	}
	if e.Gift {
		flags |= (1 << 10)
	}
	if e.Reaction {
		flags |= (1 << 11)
	}
	if e.Title != nil {
		flags |= (1 << 0)
	}
	if e.Description != nil {
		flags |= (1 << 1)
	}
	if e.Photo != nil {
		flags |= (1 << 2)
	}
	if e.TransactionDate != nil {
		flags |= (1 << 5)
	}
	if e.TransactionURL != nil {
		flags |= (1 << 5)
	}
	if e.BotPayload != nil {
		flags |= (1 << 7)
	}
	if e.MsgID != nil {
		flags |= (1 << 8)
	}
	if e.ExtendedMedia != nil {
		flags |= (1 << 9)
	}
	if e.SubscriptionPeriod != nil {
		flags |= (1 << 12)
	}
	if e.GiveawayPostID != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsTransaction)
	x.Int(flags)
	x.String(e.ID)
	x.Long(e.Stars)
	x.Int(e.Date)
	x.Object(e.Peer)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Description != nil {
		x.String(*e.Description)
	}
	if e.Photo != nil {
		x.Object(e.Photo)
	}
	if e.TransactionDate != nil {
		x.Int(*e.TransactionDate)
	}
	if e.TransactionURL != nil {
		x.String(*e.TransactionURL)
	}
	if e.BotPayload != nil {
		x.StringBytes(e.BotPayload)
	}
	if e.MsgID != nil {
		x.Int(*e.MsgID)
	}
	if e.ExtendedMedia != nil {
		EncodeBuf_GenericVector(x, e.ExtendedMedia)
	}
	if e.SubscriptionPeriod != nil {
		x.Int(*e.SubscriptionPeriod)
	}
	if e.GiveawayPostID != nil {
		x.Int(*e.GiveawayPostID)
	}
	return x.buf
}

func (e TL_payments_starsStatus) encode() []byte {
	var flags int32
	if e.Subscriptions != nil {
		flags |= (1 << 1)
	}
	if e.SubscriptionsNextOffset != nil {
		flags |= (1 << 2)
	}
	if e.SubscriptionsMissingBalance != nil {
		flags |= (1 << 4)
	}
	if e.History != nil {
		flags |= (1 << 3)
	}
	if e.NextOffset != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_starsStatus)
	x.Int(flags)
	x.Long(e.Balance)
	if e.Subscriptions != nil {
		EncodeBuf_GenericVector(x, e.Subscriptions)
	}
	if e.SubscriptionsNextOffset != nil {
		x.String(*e.SubscriptionsNextOffset)
	}
	if e.SubscriptionsMissingBalance != nil {
		x.Long(*e.SubscriptionsMissingBalance)
	}
	if e.History != nil {
		EncodeBuf_GenericVector(x, e.History)
	}
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_foundStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_foundStory)
	x.Object(e.Peer)
	x.Object(e.Story)
	return x.buf
}

func (e TL_stories_foundStories) encode() []byte {
	var flags int32
	if e.NextOffset != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_foundStories)
	x.Int(flags)
	x.Int(e.Count)
	EncodeBuf_GenericVector(x, e.Stories)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	EncodeBuf_GenericVector(x, e.Chats)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_geoPointAddress) encode() []byte {
	var flags int32
	if e.State != nil {
		flags |= (1 << 0)
	}
	if e.City != nil {
		flags |= (1 << 1)
	}
	if e.Street != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_geoPointAddress)
	x.Int(flags)
	x.String(e.CountryISO2)
	if e.State != nil {
		x.String(*e.State)
	}
	if e.City != nil {
		x.String(*e.City)
	}
	if e.Street != nil {
		x.String(*e.Street)
	}
	return x.buf
}

func (e TL_starsRevenueStatus) encode() []byte {
	var flags int32
	if e.WithdrawalEnabled {
		flags |= (1 << 0)
	}
	if e.NextWithdrawalAt != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsRevenueStatus)
	x.Int(flags)
	x.Long(e.CurrentBalance)
	x.Long(e.AvailableBalance)
	x.Long(e.OverallRevenue)
	if e.NextWithdrawalAt != nil {
		x.Int(*e.NextWithdrawalAt)
	}
	return x.buf
}

func (e TL_payments_starsRevenueStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_starsRevenueStats)
	x.Object(e.RevenueGraph)
	x.Object(e.Status)
	x.Double(e.UsdRate)
	return x.buf
}

func (e TL_payments_starsRevenueWithdrawalURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_starsRevenueWithdrawalURL)
	x.String(e.URL)
	return x.buf
}

func (e TL_payments_starsRevenueAdsAccountURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_starsRevenueAdsAccountURL)
	x.String(e.URL)
	return x.buf
}

func (e TL_inputStarsTransaction) encode() []byte {
	var flags int32
	if e.Refund {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_inputStarsTransaction)
	x.Int(flags)
	x.String(e.ID)
	return x.buf
}

func (e TL_starsGiftOption) encode() []byte {
	var flags int32
	if e.Extended {
		flags |= (1 << 1)
	}
	if e.StoreProduct != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsGiftOption)
	x.Int(flags)
	x.Long(e.Stars)
	if e.StoreProduct != nil {
		x.String(*e.StoreProduct)
	}
	x.String(e.Currency)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_bots_popularAppBots) encode() []byte {
	var flags int32
	if e.NextOffset != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_popularAppBots)
	x.Int(flags)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_botPreviewMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_botPreviewMedia)
	x.Int(e.Date)
	x.Object(e.Media)
	return x.buf
}

func (e TL_bots_previewInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_previewInfo)
	EncodeBuf_GenericVector(x, e.Media)
	x.VectorString(e.LangCodes)
	return x.buf
}

func (e TL_starsSubscriptionPricing) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsSubscriptionPricing)
	x.Int(e.Period)
	x.Long(e.Amount)
	return x.buf
}

func (e TL_starsSubscription) encode() []byte {
	var flags int32
	if e.Canceled {
		flags |= (1 << 0)
	}
	if e.CanRefulfill {
		flags |= (1 << 1)
	}
	if e.MissingBalance {
		flags |= (1 << 2)
	}
	if e.ChatInviteHash != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsSubscription)
	x.Int(flags)
	x.String(e.ID)
	x.Object(e.Peer)
	x.Int(e.UntilDate)
	x.Object(e.Pricing)
	if e.ChatInviteHash != nil {
		x.String(*e.ChatInviteHash)
	}
	return x.buf
}

func (e TL_messageReactor) encode() []byte {
	var flags int32
	if e.Top {
		flags |= (1 << 0)
	}
	if e.My {
		flags |= (1 << 1)
	}
	if e.Anonymous {
		flags |= (1 << 2)
	}
	if e.PeerID != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messageReactor)
	x.Int(flags)
	if e.PeerID != nil {
		x.Object(e.PeerID)
	}
	x.Int(e.Count)
	return x.buf
}

func (e TL_starsGiveawayOption) encode() []byte {
	var flags int32
	if e.Extended {
		flags |= (1 << 0)
	}
	if e.Default {
		flags |= (1 << 1)
	}
	if e.StoreProduct != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsGiveawayOption)
	x.Int(flags)
	x.Long(e.Stars)
	x.Int(e.YearlyBoosts)
	if e.StoreProduct != nil {
		x.String(*e.StoreProduct)
	}
	x.String(e.Currency)
	x.Long(e.Amount)
	EncodeBuf_GenericVector(x, e.Winners)
	return x.buf
}

func (e TL_starsGiveawayWinnersOption) encode() []byte {
	var flags int32
	if e.Default {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_starsGiveawayWinnersOption)
	x.Int(flags)
	x.Int(e.Users)
	x.Long(e.PerUserStars)
	return x.buf
}

func (e TL_invokeAfterMsg) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeAfterMsg)
	x.Long(e.MsgID)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeAfterMsgs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeAfterMsgs)
	x.VectorLong(e.MsgIDs)
	x.Object(e.Query)
	return x.buf
}

func (e TL_initConnection) encode() []byte {
	var flags int32
	if e.Proxy != nil {
		flags |= (1 << 0)
	}
	if e.Params != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_initConnection)
	x.Int(flags)
	x.Int(e.APIID)
	x.String(e.DeviceModel)
	x.String(e.SystemVersion)
	x.String(e.AppVersion)
	x.String(e.SystemLangCode)
	x.String(e.LangPack)
	x.String(e.LangCode)
	if e.Proxy != nil {
		x.Object(e.Proxy)
	}
	if e.Params != nil {
		x.Object(e.Params)
	}
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithLayer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithLayer)
	x.Int(e.Layer)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithoutUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithoutUpdates)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithMessagesRange) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithMessagesRange)
	x.Object(e.Range)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithTakeout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithTakeout)
	x.Long(e.TakeoutID)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithBusinessConnection) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithBusinessConnection)
	x.String(e.ConnectionID)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithGooglePlayIntegrity) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithGooglePlayIntegrity)
	x.String(e.Nonce)
	x.String(e.Token)
	x.Object(e.Query)
	return x.buf
}

func (e TL_invokeWithApnsSecret) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_invokeWithApnsSecret)
	x.String(e.Nonce)
	x.String(e.Secret)
	x.Object(e.Query)
	return x.buf
}

func (e TL_auth_sendCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_sendCode)
	x.String(e.PhoneNumber)
	x.Int(e.APIID)
	x.String(e.APIHash)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_auth_signUp) encode() []byte {
	var flags int32
	if e.NoJoinedNotifications {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_signUp)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	x.String(e.FirstName)
	x.String(e.LastName)
	return x.buf
}

func (e TL_auth_signIn) encode() []byte {
	var flags int32
	if e.PhoneCode != nil {
		flags |= (1 << 0)
	}
	if e.EmailVerification != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_signIn)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	if e.PhoneCode != nil {
		x.String(*e.PhoneCode)
	}
	if e.EmailVerification != nil {
		x.Object(e.EmailVerification)
	}
	return x.buf
}

func (e TL_auth_logOut) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_logOut)
	return x.buf
}

func (e TL_auth_resetAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_resetAuthorizations)
	return x.buf
}

func (e TL_auth_exportAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_exportAuthorization)
	x.Int(e.DCID)
	return x.buf
}

func (e TL_auth_importAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_importAuthorization)
	x.Long(e.ID)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_auth_bindTempAuthKey) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_bindTempAuthKey)
	x.Long(e.PermAuthKeyID)
	x.Long(e.Nonce)
	x.Int(e.ExpiresAt)
	x.StringBytes(e.EncryptedMessage)
	return x.buf
}

func (e TL_auth_importBotAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_importBotAuthorization)
	x.Int(e.Flags)
	x.Int(e.APIID)
	x.String(e.APIHash)
	x.String(e.BotAuthToken)
	return x.buf
}

func (e TL_auth_checkPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_checkPassword)
	x.Object(e.Password)
	return x.buf
}

func (e TL_auth_requestPasswordRecovery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_requestPasswordRecovery)
	return x.buf
}

func (e TL_auth_recoverPassword) encode() []byte {
	var flags int32
	if e.NewSettings != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_recoverPassword)
	x.Int(flags)
	x.String(e.Code)
	if e.NewSettings != nil {
		x.Object(e.NewSettings)
	}
	return x.buf
}

func (e TL_auth_resendCode) encode() []byte {
	var flags int32
	if e.Reason != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_resendCode)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	if e.Reason != nil {
		x.String(*e.Reason)
	}
	return x.buf
}

func (e TL_auth_cancelCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_cancelCode)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	return x.buf
}

func (e TL_auth_dropTempAuthKeys) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_dropTempAuthKeys)
	x.VectorLong(e.ExceptAuthKeys)
	return x.buf
}

func (e TL_auth_exportLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_exportLoginToken)
	x.Int(e.APIID)
	x.String(e.APIHash)
	x.VectorLong(e.ExceptIDs)
	return x.buf
}

func (e TL_auth_importLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_importLoginToken)
	x.StringBytes(e.Token)
	return x.buf
}

func (e TL_auth_acceptLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_acceptLoginToken)
	x.StringBytes(e.Token)
	return x.buf
}

func (e TL_auth_checkRecoveryPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_checkRecoveryPassword)
	x.String(e.Code)
	return x.buf
}

func (e TL_auth_importWebTokenAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_importWebTokenAuthorization)
	x.Int(e.APIID)
	x.String(e.APIHash)
	x.String(e.WebAuthToken)
	return x.buf
}

func (e TL_auth_requestFirebaseSMS) encode() []byte {
	var flags int32
	if e.SafetyNetToken != nil {
		flags |= (1 << 0)
	}
	if e.PlayIntegrityToken != nil {
		flags |= (1 << 2)
	}
	if e.IOSPushSecret != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_requestFirebaseSMS)
	x.Int(flags)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	if e.SafetyNetToken != nil {
		x.String(*e.SafetyNetToken)
	}
	if e.PlayIntegrityToken != nil {
		x.String(*e.PlayIntegrityToken)
	}
	if e.IOSPushSecret != nil {
		x.String(*e.IOSPushSecret)
	}
	return x.buf
}

func (e TL_auth_resetLoginEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_resetLoginEmail)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	return x.buf
}

func (e TL_auth_reportMissingCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_auth_reportMissingCode)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	x.String(e.Mnc)
	return x.buf
}

func (e TL_account_registerDevice) encode() []byte {
	var flags int32
	if e.NoMuted {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_registerDevice)
	x.Int(flags)
	x.Int(e.TokenType)
	x.String(e.Token)
	x.Bool(e.AppSandbox)
	x.StringBytes(e.Secret)
	x.VectorLong(e.OtherUIDs)
	return x.buf
}

func (e TL_account_unregisterDevice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_unregisterDevice)
	x.Int(e.TokenType)
	x.String(e.Token)
	x.VectorLong(e.OtherUIDs)
	return x.buf
}

func (e TL_account_updateNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateNotifySettings)
	x.Object(e.Peer)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_getNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getNotifySettings)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_account_resetNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetNotifySettings)
	return x.buf
}

func (e TL_account_updateProfile) encode() []byte {
	var flags int32
	if e.FirstName != nil {
		flags |= (1 << 0)
	}
	if e.LastName != nil {
		flags |= (1 << 1)
	}
	if e.About != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateProfile)
	x.Int(flags)
	if e.FirstName != nil {
		x.String(*e.FirstName)
	}
	if e.LastName != nil {
		x.String(*e.LastName)
	}
	if e.About != nil {
		x.String(*e.About)
	}
	return x.buf
}

func (e TL_account_updateStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateStatus)
	x.Bool(e.Offline)
	return x.buf
}

func (e TL_account_getWallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getWallPapers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_reportPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_reportPeer)
	x.Object(e.Peer)
	x.Object(e.Reason)
	x.String(e.Message)
	return x.buf
}

func (e TL_account_checkUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_checkUsername)
	x.String(e.Username)
	return x.buf
}

func (e TL_account_updateUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateUsername)
	x.String(e.Username)
	return x.buf
}

func (e TL_account_getPrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getPrivacy)
	x.Object(e.Key)
	return x.buf
}

func (e TL_account_setPrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setPrivacy)
	x.Object(e.Key)
	EncodeBuf_GenericVector(x, e.Rules)
	return x.buf
}

func (e TL_account_deleteAccount) encode() []byte {
	var flags int32
	if e.Password != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_deleteAccount)
	x.Int(flags)
	x.String(e.Reason)
	if e.Password != nil {
		x.Object(e.Password)
	}
	return x.buf
}

func (e TL_account_getAccountTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAccountTTL)
	return x.buf
}

func (e TL_account_setAccountTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setAccountTTL)
	x.Object(e.TTL)
	return x.buf
}

func (e TL_account_sendChangePhoneCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sendChangePhoneCode)
	x.String(e.PhoneNumber)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_changePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_changePhone)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	x.String(e.PhoneCode)
	return x.buf
}

func (e TL_account_updateDeviceLocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateDeviceLocked)
	x.Int(e.Period)
	return x.buf
}

func (e TL_account_getAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAuthorizations)
	return x.buf
}

func (e TL_account_resetAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetAuthorization)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getPassword)
	return x.buf
}

func (e TL_account_getPasswordSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getPasswordSettings)
	x.Object(e.Password)
	return x.buf
}

func (e TL_account_updatePasswordSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updatePasswordSettings)
	x.Object(e.Password)
	x.Object(e.NewSettings)
	return x.buf
}

func (e TL_account_sendConfirmPhoneCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sendConfirmPhoneCode)
	x.String(e.Hash)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_confirmPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_confirmPhone)
	x.String(e.PhoneCodeHash)
	x.String(e.PhoneCode)
	return x.buf
}

func (e TL_account_getTmpPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getTmpPassword)
	x.Object(e.Password)
	x.Int(e.Period)
	return x.buf
}

func (e TL_account_getWebAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getWebAuthorizations)
	return x.buf
}

func (e TL_account_resetWebAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetWebAuthorization)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_resetWebAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetWebAuthorizations)
	return x.buf
}

func (e TL_account_getAllSecureValues) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAllSecureValues)
	return x.buf
}

func (e TL_account_getSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getSecureValue)
	EncodeBuf_GenericVector(x, e.Types)
	return x.buf
}

func (e TL_account_saveSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveSecureValue)
	x.Object(e.Value)
	x.Long(e.SecureSecretID)
	return x.buf
}

func (e TL_account_deleteSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_deleteSecureValue)
	EncodeBuf_GenericVector(x, e.Types)
	return x.buf
}

func (e TL_account_getAuthorizationForm) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAuthorizationForm)
	x.Long(e.BotID)
	x.String(e.Scope)
	x.String(e.PublicKey)
	return x.buf
}

func (e TL_account_acceptAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_acceptAuthorization)
	x.Long(e.BotID)
	x.String(e.Scope)
	x.String(e.PublicKey)
	EncodeBuf_GenericVector(x, e.ValueHashes)
	x.Object(e.Credentials)
	return x.buf
}

func (e TL_account_sendVerifyPhoneCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sendVerifyPhoneCode)
	x.String(e.PhoneNumber)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_verifyPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_verifyPhone)
	x.String(e.PhoneNumber)
	x.String(e.PhoneCodeHash)
	x.String(e.PhoneCode)
	return x.buf
}

func (e TL_account_sendVerifyEmailCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_sendVerifyEmailCode)
	x.Object(e.Purpose)
	x.String(e.Email)
	return x.buf
}

func (e TL_account_verifyEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_verifyEmail)
	x.Object(e.Purpose)
	x.Object(e.Verification)
	return x.buf
}

func (e TL_account_initTakeoutSession) encode() []byte {
	var flags int32
	if e.Contacts {
		flags |= (1 << 0)
	}
	if e.MessageUsers {
		flags |= (1 << 1)
	}
	if e.MessageChats {
		flags |= (1 << 2)
	}
	if e.MessageMegagroups {
		flags |= (1 << 3)
	}
	if e.MessageChannels {
		flags |= (1 << 4)
	}
	if e.Files {
		flags |= (1 << 5)
	}
	if e.FileMaxSize != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_initTakeoutSession)
	x.Int(flags)
	if e.FileMaxSize != nil {
		x.Long(*e.FileMaxSize)
	}
	return x.buf
}

func (e TL_account_finishTakeoutSession) encode() []byte {
	var flags int32
	if e.Success {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_finishTakeoutSession)
	x.Int(flags)
	return x.buf
}

func (e TL_account_confirmPasswordEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_confirmPasswordEmail)
	x.String(e.Code)
	return x.buf
}

func (e TL_account_resendPasswordEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resendPasswordEmail)
	return x.buf
}

func (e TL_account_cancelPasswordEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_cancelPasswordEmail)
	return x.buf
}

func (e TL_account_getContactSignUpNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getContactSignUpNotification)
	return x.buf
}

func (e TL_account_setContactSignUpNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setContactSignUpNotification)
	x.Bool(e.Silent)
	return x.buf
}

func (e TL_account_getNotifyExceptions) encode() []byte {
	var flags int32
	if e.CompareSound {
		flags |= (1 << 1)
	}
	if e.CompareStories {
		flags |= (1 << 2)
	}
	if e.Peer != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getNotifyExceptions)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	return x.buf
}

func (e TL_account_getWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getWallPaper)
	x.Object(e.Wallpaper)
	return x.buf
}

func (e TL_account_uploadWallPaper) encode() []byte {
	var flags int32
	if e.ForChat {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_uploadWallPaper)
	x.Int(flags)
	x.Object(e.File)
	x.String(e.MIMEType)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_saveWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveWallPaper)
	x.Object(e.Wallpaper)
	x.Bool(e.Unsave)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_installWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_installWallPaper)
	x.Object(e.Wallpaper)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_resetWallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetWallPapers)
	return x.buf
}

func (e TL_account_getAutoDownloadSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAutoDownloadSettings)
	return x.buf
}

func (e TL_account_saveAutoDownloadSettings) encode() []byte {
	var flags int32
	if e.Low {
		flags |= (1 << 0)
	}
	if e.High {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveAutoDownloadSettings)
	x.Int(flags)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_uploadTheme) encode() []byte {
	var flags int32
	if e.Thumb != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_uploadTheme)
	x.Int(flags)
	x.Object(e.File)
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	x.String(e.FileName)
	x.String(e.MIMEType)
	return x.buf
}

func (e TL_account_createTheme) encode() []byte {
	var flags int32
	if e.Document != nil {
		flags |= (1 << 2)
	}
	if e.Settings != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_createTheme)
	x.Int(flags)
	x.String(e.Slug)
	x.String(e.Title)
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Settings != nil {
		EncodeBuf_GenericVector(x, e.Settings)
	}
	return x.buf
}

func (e TL_account_updateTheme) encode() []byte {
	var flags int32
	if e.Slug != nil {
		flags |= (1 << 0)
	}
	if e.Title != nil {
		flags |= (1 << 1)
	}
	if e.Document != nil {
		flags |= (1 << 2)
	}
	if e.Settings != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateTheme)
	x.Int(flags)
	x.String(e.Format)
	x.Object(e.Theme)
	if e.Slug != nil {
		x.String(*e.Slug)
	}
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Document != nil {
		x.Object(e.Document)
	}
	if e.Settings != nil {
		EncodeBuf_GenericVector(x, e.Settings)
	}
	return x.buf
}

func (e TL_account_saveTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveTheme)
	x.Object(e.Theme)
	x.Bool(e.Unsave)
	return x.buf
}

func (e TL_account_installTheme) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	if e.Theme != nil {
		flags |= (1 << 1)
	}
	if e.Format != nil {
		flags |= (1 << 2)
	}
	if e.BaseTheme != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_installTheme)
	x.Int(flags)
	if e.Theme != nil {
		x.Object(e.Theme)
	}
	if e.Format != nil {
		x.String(*e.Format)
	}
	if e.BaseTheme != nil {
		x.Object(e.BaseTheme)
	}
	return x.buf
}

func (e TL_account_getTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getTheme)
	x.String(e.Format)
	x.Object(e.Theme)
	return x.buf
}

func (e TL_account_getThemes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getThemes)
	x.String(e.Format)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_setContentSettings) encode() []byte {
	var flags int32
	if e.SensitiveEnabled {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setContentSettings)
	x.Int(flags)
	return x.buf
}

func (e TL_account_getContentSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getContentSettings)
	return x.buf
}

func (e TL_account_getMultiWallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getMultiWallPapers)
	EncodeBuf_GenericVector(x, e.Wallpapers)
	return x.buf
}

func (e TL_account_getGlobalPrivacySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getGlobalPrivacySettings)
	return x.buf
}

func (e TL_account_setGlobalPrivacySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setGlobalPrivacySettings)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_reportProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_reportProfilePhoto)
	x.Object(e.Peer)
	x.Object(e.PhotoID)
	x.Object(e.Reason)
	x.String(e.Message)
	return x.buf
}

func (e TL_account_resetPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resetPassword)
	return x.buf
}

func (e TL_account_declinePasswordReset) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_declinePasswordReset)
	return x.buf
}

func (e TL_account_getChatThemes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getChatThemes)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_setAuthorizationTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setAuthorizationTTL)
	x.Int(e.AuthorizationTTLDays)
	return x.buf
}

func (e TL_account_changeAuthorizationSettings) encode() []byte {
	var flags int32
	if e.Confirmed {
		flags |= (1 << 3)
	}
	if e.EncryptedRequestsDisabled != nil {
		flags |= (1 << 0)
	}
	if e.CallRequestsDisabled != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_changeAuthorizationSettings)
	x.Int(flags)
	x.Long(e.Hash)
	if e.EncryptedRequestsDisabled != nil {
		x.Bool(*e.EncryptedRequestsDisabled)
	}
	if e.CallRequestsDisabled != nil {
		x.Bool(*e.CallRequestsDisabled)
	}
	return x.buf
}

func (e TL_account_getSavedRingtones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getSavedRingtones)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_saveRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveRingtone)
	x.Object(e.ID)
	x.Bool(e.Unsave)
	return x.buf
}

func (e TL_account_uploadRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_uploadRingtone)
	x.Object(e.File)
	x.String(e.FileName)
	x.String(e.MIMEType)
	return x.buf
}

func (e TL_account_updateEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateEmojiStatus)
	x.Object(e.EmojiStatus)
	return x.buf
}

func (e TL_account_getDefaultEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getDefaultEmojiStatuses)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getRecentEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getRecentEmojiStatuses)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_clearRecentEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_clearRecentEmojiStatuses)
	return x.buf
}

func (e TL_account_reorderUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_reorderUsernames)
	x.VectorString(e.Order)
	return x.buf
}

func (e TL_account_toggleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_toggleUsername)
	x.String(e.Username)
	x.Bool(e.Active)
	return x.buf
}

func (e TL_account_getDefaultProfilePhotoEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getDefaultProfilePhotoEmojis)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getDefaultGroupPhotoEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getDefaultGroupPhotoEmojis)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getAutoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getAutoSaveSettings)
	return x.buf
}

func (e TL_account_saveAutoSaveSettings) encode() []byte {
	var flags int32
	if e.Users {
		flags |= (1 << 0)
	}
	if e.Chats {
		flags |= (1 << 1)
	}
	if e.Broadcasts {
		flags |= (1 << 2)
	}
	if e.Peer != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_saveAutoSaveSettings)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	x.Object(e.Settings)
	return x.buf
}

func (e TL_account_deleteAutoSaveExceptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_deleteAutoSaveExceptions)
	return x.buf
}

func (e TL_account_invalidateSignInCodes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_invalidateSignInCodes)
	x.VectorString(e.Codes)
	return x.buf
}

func (e TL_account_updateColor) encode() []byte {
	var flags int32
	if e.ForProfile {
		flags |= (1 << 1)
	}
	if e.Color != nil {
		flags |= (1 << 2)
	}
	if e.BackgroundEmojiID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateColor)
	x.Int(flags)
	if e.Color != nil {
		x.Int(*e.Color)
	}
	if e.BackgroundEmojiID != nil {
		x.Long(*e.BackgroundEmojiID)
	}
	return x.buf
}

func (e TL_account_getDefaultBackgroundEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getDefaultBackgroundEmojis)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getChannelDefaultEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getChannelDefaultEmojiStatuses)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_getChannelRestrictedStatusEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getChannelRestrictedStatusEmojis)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_account_updateBusinessWorkHours) encode() []byte {
	var flags int32
	if e.BusinessWorkHours != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateBusinessWorkHours)
	x.Int(flags)
	if e.BusinessWorkHours != nil {
		x.Object(e.BusinessWorkHours)
	}
	return x.buf
}

func (e TL_account_updateBusinessLocation) encode() []byte {
	var flags int32
	if e.GeoPoint != nil {
		flags |= (1 << 1)
	}
	if e.Address != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateBusinessLocation)
	x.Int(flags)
	if e.GeoPoint != nil {
		x.Object(e.GeoPoint)
	}
	if e.Address != nil {
		x.String(*e.Address)
	}
	return x.buf
}

func (e TL_account_updateBusinessGreetingMessage) encode() []byte {
	var flags int32
	if e.Message != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateBusinessGreetingMessage)
	x.Int(flags)
	if e.Message != nil {
		x.Object(e.Message)
	}
	return x.buf
}

func (e TL_account_updateBusinessAwayMessage) encode() []byte {
	var flags int32
	if e.Message != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateBusinessAwayMessage)
	x.Int(flags)
	if e.Message != nil {
		x.Object(e.Message)
	}
	return x.buf
}

func (e TL_account_updateConnectedBot) encode() []byte {
	var flags int32
	if e.CanReply {
		flags |= (1 << 0)
	}
	if e.Deleted {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateConnectedBot)
	x.Int(flags)
	x.Object(e.Bot)
	x.Object(e.Recipients)
	return x.buf
}

func (e TL_account_getConnectedBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getConnectedBots)
	return x.buf
}

func (e TL_account_getBotBusinessConnection) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getBotBusinessConnection)
	x.String(e.ConnectionID)
	return x.buf
}

func (e TL_account_updateBusinessIntro) encode() []byte {
	var flags int32
	if e.Intro != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateBusinessIntro)
	x.Int(flags)
	if e.Intro != nil {
		x.Object(e.Intro)
	}
	return x.buf
}

func (e TL_account_toggleConnectedBotPaused) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_toggleConnectedBotPaused)
	x.Object(e.Peer)
	x.Bool(e.Paused)
	return x.buf
}

func (e TL_account_disablePeerConnectedBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_disablePeerConnectedBot)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_account_updateBirthday) encode() []byte {
	var flags int32
	if e.Birthday != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updateBirthday)
	x.Int(flags)
	if e.Birthday != nil {
		x.Object(e.Birthday)
	}
	return x.buf
}

func (e TL_account_createBusinessChatLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_createBusinessChatLink)
	x.Object(e.Link)
	return x.buf
}

func (e TL_account_editBusinessChatLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_editBusinessChatLink)
	x.String(e.Slug)
	x.Object(e.Link)
	return x.buf
}

func (e TL_account_deleteBusinessChatLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_deleteBusinessChatLink)
	x.String(e.Slug)
	return x.buf
}

func (e TL_account_getBusinessChatLinks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getBusinessChatLinks)
	return x.buf
}

func (e TL_account_resolveBusinessChatLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_resolveBusinessChatLink)
	x.String(e.Slug)
	return x.buf
}

func (e TL_account_updatePersonalChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_updatePersonalChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_account_toggleSponsoredMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_toggleSponsoredMessages)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_account_getReactionsNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_getReactionsNotifySettings)
	return x.buf
}

func (e TL_account_setReactionsNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_account_setReactionsNotifySettings)
	x.Object(e.Settings)
	return x.buf
}

func (e TL_users_getUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_users_getUsers)
	EncodeBuf_GenericVector(x, e.ID)
	return x.buf
}

func (e TL_users_getFullUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_users_getFullUser)
	x.Object(e.ID)
	return x.buf
}

func (e TL_users_setSecureValueErrors) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_users_setSecureValueErrors)
	x.Object(e.ID)
	EncodeBuf_GenericVector(x, e.Errors)
	return x.buf
}

func (e TL_users_getIsPremiumRequiredToContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_users_getIsPremiumRequiredToContact)
	EncodeBuf_GenericVector(x, e.ID)
	return x.buf
}

func (e TL_contacts_getContactIDs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getContactIDs)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_contacts_getStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getStatuses)
	return x.buf
}

func (e TL_contacts_getContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getContacts)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_contacts_importContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_importContacts)
	EncodeBuf_GenericVector(x, e.Contacts)
	return x.buf
}

func (e TL_contacts_deleteContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_deleteContacts)
	EncodeBuf_GenericVector(x, e.ID)
	return x.buf
}

func (e TL_contacts_deleteByPhones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_deleteByPhones)
	x.VectorString(e.Phones)
	return x.buf
}

func (e TL_contacts_block) encode() []byte {
	var flags int32
	if e.MyStoriesFrom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_block)
	x.Int(flags)
	x.Object(e.ID)
	return x.buf
}

func (e TL_contacts_unblock) encode() []byte {
	var flags int32
	if e.MyStoriesFrom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_unblock)
	x.Int(flags)
	x.Object(e.ID)
	return x.buf
}

func (e TL_contacts_getBlocked) encode() []byte {
	var flags int32
	if e.MyStoriesFrom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getBlocked)
	x.Int(flags)
	x.Int(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_contacts_search) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_search)
	x.String(e.Q)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_contacts_resolveUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resolveUsername)
	x.String(e.Username)
	return x.buf
}

func (e TL_contacts_getTopPeers) encode() []byte {
	var flags int32
	if e.Correspondents {
		flags |= (1 << 0)
	}
	if e.BotsPM {
		flags |= (1 << 1)
	}
	if e.BotsInline {
		flags |= (1 << 2)
	}
	if e.PhoneCalls {
		flags |= (1 << 3)
	}
	if e.ForwardUsers {
		flags |= (1 << 4)
	}
	if e.ForwardChats {
		flags |= (1 << 5)
	}
	if e.Groups {
		flags |= (1 << 10)
	}
	if e.Channels {
		flags |= (1 << 15)
	}
	if e.BotsApp {
		flags |= (1 << 16)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getTopPeers)
	x.Int(flags)
	x.Int(e.Offset)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_contacts_resetTopPeerRating) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resetTopPeerRating)
	x.Object(e.Category)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_contacts_resetSaved) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resetSaved)
	return x.buf
}

func (e TL_contacts_getSaved) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getSaved)
	return x.buf
}

func (e TL_contacts_toggleTopPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_toggleTopPeers)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_contacts_addContact) encode() []byte {
	var flags int32
	if e.AddPhonePrivacyException {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_addContact)
	x.Int(flags)
	x.Object(e.ID)
	x.String(e.FirstName)
	x.String(e.LastName)
	x.String(e.Phone)
	return x.buf
}

func (e TL_contacts_acceptContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_acceptContact)
	x.Object(e.ID)
	return x.buf
}

func (e TL_contacts_getLocated) encode() []byte {
	var flags int32
	if e.Background {
		flags |= (1 << 1)
	}
	if e.SelfExpires != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getLocated)
	x.Int(flags)
	x.Object(e.GeoPoint)
	if e.SelfExpires != nil {
		x.Int(*e.SelfExpires)
	}
	return x.buf
}

func (e TL_contacts_blockFromReplies) encode() []byte {
	var flags int32
	if e.DeleteMessage {
		flags |= (1 << 0)
	}
	if e.DeleteHistory {
		flags |= (1 << 1)
	}
	if e.ReportSpam {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_blockFromReplies)
	x.Int(flags)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_contacts_resolvePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_resolvePhone)
	x.String(e.Phone)
	return x.buf
}

func (e TL_contacts_exportContactToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_exportContactToken)
	return x.buf
}

func (e TL_contacts_importContactToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_importContactToken)
	x.String(e.Token)
	return x.buf
}

func (e TL_contacts_editCloseFriends) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_editCloseFriends)
	x.VectorLong(e.ID)
	return x.buf
}

func (e TL_contacts_setBlocked) encode() []byte {
	var flags int32
	if e.MyStoriesFrom {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_setBlocked)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.ID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_contacts_getBirthdays) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_contacts_getBirthdays)
	return x.buf
}

func (e TL_messages_getMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessages)
	EncodeBuf_GenericVector(x, e.ID)
	return x.buf
}

func (e TL_messages_getDialogs) encode() []byte {
	var flags int32
	if e.ExcludePinned {
		flags |= (1 << 0)
	}
	if e.FolderID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDialogs)
	x.Int(flags)
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	x.Int(e.OffsetDate)
	x.Int(e.OffsetID)
	x.Object(e.OffsetPeer)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getHistory)
	x.Object(e.Peer)
	x.Int(e.OffsetID)
	x.Int(e.OffsetDate)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_search) encode() []byte {
	var flags int32
	if e.FromID != nil {
		flags |= (1 << 0)
	}
	if e.SavedPeerID != nil {
		flags |= (1 << 2)
	}
	if e.SavedReaction != nil {
		flags |= (1 << 3)
	}
	if e.TopMsgID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_search)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.Q)
	if e.FromID != nil {
		x.Object(e.FromID)
	}
	if e.SavedPeerID != nil {
		x.Object(e.SavedPeerID)
	}
	if e.SavedReaction != nil {
		EncodeBuf_GenericVector(x, e.SavedReaction)
	}
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	x.Object(e.Filter)
	x.Int(e.MinDate)
	x.Int(e.MaxDate)
	x.Int(e.OffsetID)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_readHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readHistory)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_messages_deleteHistory) encode() []byte {
	var flags int32
	if e.JustClear {
		flags |= (1 << 0)
	}
	if e.Revoke {
		flags |= (1 << 1)
	}
	if e.MinDate != nil {
		flags |= (1 << 2)
	}
	if e.MaxDate != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteHistory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	if e.MinDate != nil {
		x.Int(*e.MinDate)
	}
	if e.MaxDate != nil {
		x.Int(*e.MaxDate)
	}
	return x.buf
}

func (e TL_messages_deleteMessages) encode() []byte {
	var flags int32
	if e.Revoke {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteMessages)
	x.Int(flags)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_receivedMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_receivedMessages)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_messages_setTyping) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setTyping)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	x.Object(e.Action)
	return x.buf
}

func (e TL_messages_sendMessage) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.ClearDraft {
		flags |= (1 << 7)
	}
	if e.Noforwards {
		flags |= (1 << 14)
	}
	if e.UpdateStickersetsOrder {
		flags |= (1 << 15)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.ScheduleDate != nil {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	if e.QuickReplyShortcut != nil {
		flags |= (1 << 17)
	}
	if e.Effect != nil {
		flags |= (1 << 18)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendMessage)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.String(e.Message)
	x.Long(e.RandomID)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.ScheduleDate != nil {
		x.Int(*e.ScheduleDate)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	if e.QuickReplyShortcut != nil {
		x.Object(e.QuickReplyShortcut)
	}
	if e.Effect != nil {
		x.Long(*e.Effect)
	}
	return x.buf
}

func (e TL_messages_sendMedia) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.ClearDraft {
		flags |= (1 << 7)
	}
	if e.Noforwards {
		flags |= (1 << 14)
	}
	if e.UpdateStickersetsOrder {
		flags |= (1 << 15)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.ScheduleDate != nil {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	if e.QuickReplyShortcut != nil {
		flags |= (1 << 17)
	}
	if e.Effect != nil {
		flags |= (1 << 18)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendMedia)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Object(e.Media)
	x.String(e.Message)
	x.Long(e.RandomID)
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.ScheduleDate != nil {
		x.Int(*e.ScheduleDate)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	if e.QuickReplyShortcut != nil {
		x.Object(e.QuickReplyShortcut)
	}
	if e.Effect != nil {
		x.Long(*e.Effect)
	}
	return x.buf
}

func (e TL_messages_forwardMessages) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.WithMyScore {
		flags |= (1 << 8)
	}
	if e.DropAuthor {
		flags |= (1 << 11)
	}
	if e.DropMediaCaptions {
		flags |= (1 << 12)
	}
	if e.Noforwards {
		flags |= (1 << 14)
	}
	if e.TopMsgID != nil {
		flags |= (1 << 9)
	}
	if e.ScheduleDate != nil {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	if e.QuickReplyShortcut != nil {
		flags |= (1 << 17)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_forwardMessages)
	x.Int(flags)
	x.Object(e.FromPeer)
	x.VectorInt(e.ID)
	x.VectorLong(e.RandomID)
	x.Object(e.ToPeer)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	if e.ScheduleDate != nil {
		x.Int(*e.ScheduleDate)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	if e.QuickReplyShortcut != nil {
		x.Object(e.QuickReplyShortcut)
	}
	return x.buf
}

func (e TL_messages_reportSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reportSpam)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getPeerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPeerSettings)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_report) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_report)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	x.Object(e.Reason)
	x.String(e.Message)
	return x.buf
}

func (e TL_messages_getChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getChats)
	x.VectorLong(e.ID)
	return x.buf
}

func (e TL_messages_getFullChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getFullChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_messages_editChatTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatTitle)
	x.Long(e.ChatID)
	x.String(e.Title)
	return x.buf
}

func (e TL_messages_editChatPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatPhoto)
	x.Long(e.ChatID)
	x.Object(e.Photo)
	return x.buf
}

func (e TL_messages_addChatUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_addChatUser)
	x.Long(e.ChatID)
	x.Object(e.UserID)
	x.Int(e.FwdLimit)
	return x.buf
}

func (e TL_messages_deleteChatUser) encode() []byte {
	var flags int32
	if e.RevokeHistory {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteChatUser)
	x.Int(flags)
	x.Long(e.ChatID)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messages_createChat) encode() []byte {
	var flags int32
	if e.TTLPeriod != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_createChat)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Users)
	x.String(e.Title)
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	return x.buf
}

func (e TL_messages_getDHConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDHConfig)
	x.Int(e.Version)
	x.Int(e.RandomLength)
	return x.buf
}

func (e TL_messages_requestEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestEncryption)
	x.Object(e.UserID)
	x.Int(e.RandomID)
	x.StringBytes(e.GA)
	return x.buf
}

func (e TL_messages_acceptEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_acceptEncryption)
	x.Object(e.Peer)
	x.StringBytes(e.GB)
	x.Long(e.KeyFingerprint)
	return x.buf
}

func (e TL_messages_discardEncryption) encode() []byte {
	var flags int32
	if e.DeleteHistory {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_discardEncryption)
	x.Int(flags)
	x.Int(e.ChatID)
	return x.buf
}

func (e TL_messages_setEncryptedTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setEncryptedTyping)
	x.Object(e.Peer)
	x.Bool(e.Typing)
	return x.buf
}

func (e TL_messages_readEncryptedHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readEncryptedHistory)
	x.Object(e.Peer)
	x.Int(e.MaxDate)
	return x.buf
}

func (e TL_messages_sendEncrypted) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendEncrypted)
	x.Int(flags)
	x.Object(e.Peer)
	x.Long(e.RandomID)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_messages_sendEncryptedFile) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendEncryptedFile)
	x.Int(flags)
	x.Object(e.Peer)
	x.Long(e.RandomID)
	x.StringBytes(e.Data)
	x.Object(e.File)
	return x.buf
}

func (e TL_messages_sendEncryptedService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendEncryptedService)
	x.Object(e.Peer)
	x.Long(e.RandomID)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_messages_receivedQueue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_receivedQueue)
	x.Int(e.MaxQTS)
	return x.buf
}

func (e TL_messages_reportEncryptedSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reportEncryptedSpam)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_readMessageContents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readMessageContents)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_getStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getStickers)
	x.String(e.Emoticon)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getAllStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAllStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getWebPagePreview) encode() []byte {
	var flags int32
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getWebPagePreview)
	x.Int(flags)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	return x.buf
}

func (e TL_messages_exportChatInvite) encode() []byte {
	var flags int32
	if e.LegacyRevokePermanent {
		flags |= (1 << 2)
	}
	if e.RequestNeeded {
		flags |= (1 << 3)
	}
	if e.ExpireDate != nil {
		flags |= (1 << 0)
	}
	if e.UsageLimit != nil {
		flags |= (1 << 1)
	}
	if e.Title != nil {
		flags |= (1 << 4)
	}
	if e.SubscriptionPricing != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_exportChatInvite)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ExpireDate != nil {
		x.Int(*e.ExpireDate)
	}
	if e.UsageLimit != nil {
		x.Int(*e.UsageLimit)
	}
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.SubscriptionPricing != nil {
		x.Object(e.SubscriptionPricing)
	}
	return x.buf
}

func (e TL_messages_checkChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_checkChatInvite)
	x.String(e.Hash)
	return x.buf
}

func (e TL_messages_importChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_importChatInvite)
	x.String(e.Hash)
	return x.buf
}

func (e TL_messages_getStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getStickerSet)
	x.Object(e.Stickerset)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_installStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_installStickerSet)
	x.Object(e.Stickerset)
	x.Bool(e.Archived)
	return x.buf
}

func (e TL_messages_uninstallStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_uninstallStickerSet)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_messages_startBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_startBot)
	x.Object(e.Bot)
	x.Object(e.Peer)
	x.Long(e.RandomID)
	x.String(e.StartParam)
	return x.buf
}

func (e TL_messages_getMessagesViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessagesViews)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	x.Bool(e.Increment)
	return x.buf
}

func (e TL_messages_editChatAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatAdmin)
	x.Long(e.ChatID)
	x.Object(e.UserID)
	x.Bool(e.IsAdmin)
	return x.buf
}

func (e TL_messages_migrateChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_migrateChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_messages_searchGlobal) encode() []byte {
	var flags int32
	if e.BroadcastsOnly {
		flags |= (1 << 1)
	}
	if e.FolderID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchGlobal)
	x.Int(flags)
	if e.FolderID != nil {
		x.Int(*e.FolderID)
	}
	x.String(e.Q)
	x.Object(e.Filter)
	x.Int(e.MinDate)
	x.Int(e.MaxDate)
	x.Int(e.OffsetRate)
	x.Object(e.OffsetPeer)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_reorderStickerSets) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reorderStickerSets)
	x.Int(flags)
	x.VectorLong(e.Order)
	return x.buf
}

func (e TL_messages_getDocumentByHash) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDocumentByHash)
	x.StringBytes(e.Sha256)
	x.Long(e.Size)
	x.String(e.MIMEType)
	return x.buf
}

func (e TL_messages_getSavedGIFs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSavedGIFs)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_saveGIF) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_saveGIF)
	x.Object(e.ID)
	x.Bool(e.Unsave)
	return x.buf
}

func (e TL_messages_getInlineBotResults) encode() []byte {
	var flags int32
	if e.GeoPoint != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getInlineBotResults)
	x.Int(flags)
	x.Object(e.Bot)
	x.Object(e.Peer)
	if e.GeoPoint != nil {
		x.Object(e.GeoPoint)
	}
	x.String(e.Query)
	x.String(e.Offset)
	return x.buf
}

func (e TL_messages_setInlineBotResults) encode() []byte {
	var flags int32
	if e.Gallery {
		flags |= (1 << 0)
	}
	if e.Private {
		flags |= (1 << 1)
	}
	if e.NextOffset != nil {
		flags |= (1 << 2)
	}
	if e.SwitchPM != nil {
		flags |= (1 << 3)
	}
	if e.SwitchWebview != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setInlineBotResults)
	x.Int(flags)
	x.Long(e.QueryID)
	EncodeBuf_GenericVector(x, e.Results)
	x.Int(e.CacheTime)
	if e.NextOffset != nil {
		x.String(*e.NextOffset)
	}
	if e.SwitchPM != nil {
		x.Object(e.SwitchPM)
	}
	if e.SwitchWebview != nil {
		x.Object(e.SwitchWebview)
	}
	return x.buf
}

func (e TL_messages_sendInlineBotResult) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.ClearDraft {
		flags |= (1 << 7)
	}
	if e.HideVia {
		flags |= (1 << 11)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.ScheduleDate != nil {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	if e.QuickReplyShortcut != nil {
		flags |= (1 << 17)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendInlineBotResult)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Long(e.RandomID)
	x.Long(e.QueryID)
	x.String(e.ID)
	if e.ScheduleDate != nil {
		x.Int(*e.ScheduleDate)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	if e.QuickReplyShortcut != nil {
		x.Object(e.QuickReplyShortcut)
	}
	return x.buf
}

func (e TL_messages_getMessageEditData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessageEditData)
	x.Object(e.Peer)
	x.Int(e.ID)
	return x.buf
}

func (e TL_messages_editMessage) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.Message != nil {
		flags |= (1 << 11)
	}
	if e.Media != nil {
		flags |= (1 << 14)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.ScheduleDate != nil {
		flags |= (1 << 15)
	}
	if e.QuickReplyShortcutID != nil {
		flags |= (1 << 17)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editMessage)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Message != nil {
		x.String(*e.Message)
	}
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.ScheduleDate != nil {
		x.Int(*e.ScheduleDate)
	}
	if e.QuickReplyShortcutID != nil {
		x.Int(*e.QuickReplyShortcutID)
	}
	return x.buf
}

func (e TL_messages_editInlineBotMessage) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.Message != nil {
		flags |= (1 << 11)
	}
	if e.Media != nil {
		flags |= (1 << 14)
	}
	if e.ReplyMarkup != nil {
		flags |= (1 << 2)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editInlineBotMessage)
	x.Int(flags)
	x.Object(e.ID)
	if e.Message != nil {
		x.String(*e.Message)
	}
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.ReplyMarkup != nil {
		x.Object(e.ReplyMarkup)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	return x.buf
}

func (e TL_messages_getBotCallbackAnswer) encode() []byte {
	var flags int32
	if e.Game {
		flags |= (1 << 1)
	}
	if e.Data != nil {
		flags |= (1 << 0)
	}
	if e.Password != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getBotCallbackAnswer)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	if e.Data != nil {
		x.StringBytes(e.Data)
	}
	if e.Password != nil {
		x.Object(e.Password)
	}
	return x.buf
}

func (e TL_messages_setBotCallbackAnswer) encode() []byte {
	var flags int32
	if e.Alert {
		flags |= (1 << 1)
	}
	if e.Message != nil {
		flags |= (1 << 0)
	}
	if e.URL != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setBotCallbackAnswer)
	x.Int(flags)
	x.Long(e.QueryID)
	if e.Message != nil {
		x.String(*e.Message)
	}
	if e.URL != nil {
		x.String(*e.URL)
	}
	x.Int(e.CacheTime)
	return x.buf
}

func (e TL_messages_getPeerDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPeerDialogs)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_messages_saveDraft) encode() []byte {
	var flags int32
	if e.NoWebpage {
		flags |= (1 << 1)
	}
	if e.InvertMedia {
		flags |= (1 << 6)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 4)
	}
	if e.Entities != nil {
		flags |= (1 << 3)
	}
	if e.Media != nil {
		flags |= (1 << 5)
	}
	if e.Effect != nil {
		flags |= (1 << 7)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_saveDraft)
	x.Int(flags)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	x.Object(e.Peer)
	x.String(e.Message)
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.Effect != nil {
		x.Long(*e.Effect)
	}
	return x.buf
}

func (e TL_messages_getAllDrafts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAllDrafts)
	return x.buf
}

func (e TL_messages_getFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getFeaturedStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_readFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readFeaturedStickers)
	x.VectorLong(e.ID)
	return x.buf
}

func (e TL_messages_getRecentStickers) encode() []byte {
	var flags int32
	if e.Attached {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getRecentStickers)
	x.Int(flags)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_saveRecentSticker) encode() []byte {
	var flags int32
	if e.Attached {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_saveRecentSticker)
	x.Int(flags)
	x.Object(e.ID)
	x.Bool(e.Unsave)
	return x.buf
}

func (e TL_messages_clearRecentStickers) encode() []byte {
	var flags int32
	if e.Attached {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_clearRecentStickers)
	x.Int(flags)
	return x.buf
}

func (e TL_messages_getArchivedStickers) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getArchivedStickers)
	x.Int(flags)
	x.Long(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getMaskStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMaskStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getAttachedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAttachedStickers)
	x.Object(e.Media)
	return x.buf
}

func (e TL_messages_setGameScore) encode() []byte {
	var flags int32
	if e.EditMessage {
		flags |= (1 << 0)
	}
	if e.Force {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setGameScore)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	x.Object(e.UserID)
	x.Int(e.Score)
	return x.buf
}

func (e TL_messages_setInlineGameScore) encode() []byte {
	var flags int32
	if e.EditMessage {
		flags |= (1 << 0)
	}
	if e.Force {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setInlineGameScore)
	x.Int(flags)
	x.Object(e.ID)
	x.Object(e.UserID)
	x.Int(e.Score)
	return x.buf
}

func (e TL_messages_getGameHighScores) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getGameHighScores)
	x.Object(e.Peer)
	x.Int(e.ID)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messages_getInlineGameHighScores) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getInlineGameHighScores)
	x.Object(e.ID)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messages_getCommonChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getCommonChats)
	x.Object(e.UserID)
	x.Long(e.MaxID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getWebPage)
	x.String(e.URL)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_toggleDialogPIN) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleDialogPIN)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_reorderPinnedDialogs) encode() []byte {
	var flags int32
	if e.Force {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reorderPinnedDialogs)
	x.Int(flags)
	x.Int(e.FolderID)
	EncodeBuf_GenericVector(x, e.Order)
	return x.buf
}

func (e TL_messages_getPinnedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPinnedDialogs)
	x.Int(e.FolderID)
	return x.buf
}

func (e TL_messages_setBotShippingResults) encode() []byte {
	var flags int32
	if e.Error != nil {
		flags |= (1 << 0)
	}
	if e.ShippingOptions != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setBotShippingResults)
	x.Int(flags)
	x.Long(e.QueryID)
	if e.Error != nil {
		x.String(*e.Error)
	}
	if e.ShippingOptions != nil {
		EncodeBuf_GenericVector(x, e.ShippingOptions)
	}
	return x.buf
}

func (e TL_messages_setBotPrecheckoutResults) encode() []byte {
	var flags int32
	if e.Success {
		flags |= (1 << 1)
	}
	if e.Error != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setBotPrecheckoutResults)
	x.Int(flags)
	x.Long(e.QueryID)
	if e.Error != nil {
		x.String(*e.Error)
	}
	return x.buf
}

func (e TL_messages_uploadMedia) encode() []byte {
	var flags int32
	if e.BusinessConnectionID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_uploadMedia)
	x.Int(flags)
	if e.BusinessConnectionID != nil {
		x.String(*e.BusinessConnectionID)
	}
	x.Object(e.Peer)
	x.Object(e.Media)
	return x.buf
}

func (e TL_messages_sendScreenshotNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendScreenshotNotification)
	x.Object(e.Peer)
	x.Object(e.ReplyTo)
	x.Long(e.RandomID)
	return x.buf
}

func (e TL_messages_getFavedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getFavedStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_faveSticker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_faveSticker)
	x.Object(e.ID)
	x.Bool(e.Unfave)
	return x.buf
}

func (e TL_messages_getUnreadMentions) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getUnreadMentions)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	x.Int(e.OffsetID)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	return x.buf
}

func (e TL_messages_readMentions) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readMentions)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	return x.buf
}

func (e TL_messages_getRecentLocations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getRecentLocations)
	x.Object(e.Peer)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_sendMultiMedia) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Background {
		flags |= (1 << 6)
	}
	if e.ClearDraft {
		flags |= (1 << 7)
	}
	if e.Noforwards {
		flags |= (1 << 14)
	}
	if e.UpdateStickersetsOrder {
		flags |= (1 << 15)
	}
	if e.InvertMedia {
		flags |= (1 << 16)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.ScheduleDate != nil {
		flags |= (1 << 10)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	if e.QuickReplyShortcut != nil {
		flags |= (1 << 17)
	}
	if e.Effect != nil {
		flags |= (1 << 18)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendMultiMedia)
	x.Int(flags)
	x.Object(e.Peer)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	EncodeBuf_GenericVector(x, e.MultiMedia)
	if e.ScheduleDate != nil {
		x.Int(*e.ScheduleDate)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	if e.QuickReplyShortcut != nil {
		x.Object(e.QuickReplyShortcut)
	}
	if e.Effect != nil {
		x.Long(*e.Effect)
	}
	return x.buf
}

func (e TL_messages_uploadEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_uploadEncryptedFile)
	x.Object(e.Peer)
	x.Object(e.File)
	return x.buf
}

func (e TL_messages_searchStickerSets) encode() []byte {
	var flags int32
	if e.ExcludeFeatured {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchStickerSets)
	x.Int(flags)
	x.String(e.Q)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getSplitRanges) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSplitRanges)
	return x.buf
}

func (e TL_messages_markDialogUnread) encode() []byte {
	var flags int32
	if e.Unread {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_markDialogUnread)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getDialogUnreadMarks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDialogUnreadMarks)
	return x.buf
}

func (e TL_messages_clearAllDrafts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_clearAllDrafts)
	return x.buf
}

func (e TL_messages_updatePinnedMessage) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 0)
	}
	if e.Unpin {
		flags |= (1 << 1)
	}
	if e.PMOneside {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_updatePinnedMessage)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	return x.buf
}

func (e TL_messages_sendVote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendVote)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.VectorBytes(e.Options)
	return x.buf
}

func (e TL_messages_getPollResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPollResults)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_getOnlines) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getOnlines)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_editChatAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatAbout)
	x.Object(e.Peer)
	x.String(e.About)
	return x.buf
}

func (e TL_messages_editChatDefaultBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editChatDefaultBannedRights)
	x.Object(e.Peer)
	x.Object(e.BannedRights)
	return x.buf
}

func (e TL_messages_getEmojiKeywords) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiKeywords)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_messages_getEmojiKeywordsDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiKeywordsDifference)
	x.String(e.LangCode)
	x.Int(e.FromVersion)
	return x.buf
}

func (e TL_messages_getEmojiKeywordsLanguages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiKeywordsLanguages)
	x.VectorString(e.LangCodes)
	return x.buf
}

func (e TL_messages_getEmojiURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiURL)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_messages_getSearchCounters) encode() []byte {
	var flags int32
	if e.SavedPeerID != nil {
		flags |= (1 << 2)
	}
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSearchCounters)
	x.Int(flags)
	x.Object(e.Peer)
	if e.SavedPeerID != nil {
		x.Object(e.SavedPeerID)
	}
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	EncodeBuf_GenericVector(x, e.Filters)
	return x.buf
}

func (e TL_messages_requestURLAuth) encode() []byte {
	var flags int32
	if e.Peer != nil {
		flags |= (1 << 1)
	}
	if e.MsgID != nil {
		flags |= (1 << 1)
	}
	if e.ButtonID != nil {
		flags |= (1 << 1)
	}
	if e.URL != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestURLAuth)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	if e.MsgID != nil {
		x.Int(*e.MsgID)
	}
	if e.ButtonID != nil {
		x.Int(*e.ButtonID)
	}
	if e.URL != nil {
		x.String(*e.URL)
	}
	return x.buf
}

func (e TL_messages_acceptURLAuth) encode() []byte {
	var flags int32
	if e.WriteAllowed {
		flags |= (1 << 0)
	}
	if e.Peer != nil {
		flags |= (1 << 1)
	}
	if e.MsgID != nil {
		flags |= (1 << 1)
	}
	if e.ButtonID != nil {
		flags |= (1 << 1)
	}
	if e.URL != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_acceptURLAuth)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	if e.MsgID != nil {
		x.Int(*e.MsgID)
	}
	if e.ButtonID != nil {
		x.Int(*e.ButtonID)
	}
	if e.URL != nil {
		x.String(*e.URL)
	}
	return x.buf
}

func (e TL_messages_hidePeerSettingsBar) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_hidePeerSettingsBar)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getScheduledHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getScheduledHistory)
	x.Object(e.Peer)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getScheduledMessages)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_sendScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendScheduledMessages)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_deleteScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteScheduledMessages)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_getPollVotes) encode() []byte {
	var flags int32
	if e.Option != nil {
		flags |= (1 << 0)
	}
	if e.Offset != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPollVotes)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Option != nil {
		x.StringBytes(e.Option)
	}
	if e.Offset != nil {
		x.String(*e.Offset)
	}
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_toggleStickerSets) encode() []byte {
	var flags int32
	if e.Uninstall {
		flags |= (1 << 0)
	}
	if e.Archive {
		flags |= (1 << 1)
	}
	if e.Unarchive {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleStickerSets)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Stickersets)
	return x.buf
}

func (e TL_messages_getDialogFilters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDialogFilters)
	return x.buf
}

func (e TL_messages_getSuggestedDialogFilters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSuggestedDialogFilters)
	return x.buf
}

func (e TL_messages_updateDialogFilter) encode() []byte {
	var flags int32
	if e.Filter != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_updateDialogFilter)
	x.Int(flags)
	x.Int(e.ID)
	if e.Filter != nil {
		x.Object(e.Filter)
	}
	return x.buf
}

func (e TL_messages_updateDialogFiltersOrder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_updateDialogFiltersOrder)
	x.VectorInt(e.Order)
	return x.buf
}

func (e TL_messages_getOldFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getOldFeaturedStickers)
	x.Int(e.Offset)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getReplies) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getReplies)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Int(e.OffsetID)
	x.Int(e.OffsetDate)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getDiscussionMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDiscussionMessage)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_readDiscussion) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readDiscussion)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Int(e.ReadMaxID)
	return x.buf
}

func (e TL_messages_unpinAllMessages) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_unpinAllMessages)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	return x.buf
}

func (e TL_messages_deleteChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteChat)
	x.Long(e.ChatID)
	return x.buf
}

func (e TL_messages_deletePhoneCallHistory) encode() []byte {
	var flags int32
	if e.Revoke {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deletePhoneCallHistory)
	x.Int(flags)
	return x.buf
}

func (e TL_messages_checkHistoryImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_checkHistoryImport)
	x.String(e.ImportHead)
	return x.buf
}

func (e TL_messages_initHistoryImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_initHistoryImport)
	x.Object(e.Peer)
	x.Object(e.File)
	x.Int(e.MediaCount)
	return x.buf
}

func (e TL_messages_uploadImportedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_uploadImportedMedia)
	x.Object(e.Peer)
	x.Long(e.ImportID)
	x.String(e.FileName)
	x.Object(e.Media)
	return x.buf
}

func (e TL_messages_startHistoryImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_startHistoryImport)
	x.Object(e.Peer)
	x.Long(e.ImportID)
	return x.buf
}

func (e TL_messages_getExportedChatInvites) encode() []byte {
	var flags int32
	if e.Revoked {
		flags |= (1 << 3)
	}
	if e.OffsetDate != nil {
		flags |= (1 << 2)
	}
	if e.OffsetLink != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getExportedChatInvites)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.AdminID)
	if e.OffsetDate != nil {
		x.Int(*e.OffsetDate)
	}
	if e.OffsetLink != nil {
		x.String(*e.OffsetLink)
	}
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getExportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getExportedChatInvite)
	x.Object(e.Peer)
	x.String(e.Link)
	return x.buf
}

func (e TL_messages_editExportedChatInvite) encode() []byte {
	var flags int32
	if e.Revoked {
		flags |= (1 << 2)
	}
	if e.ExpireDate != nil {
		flags |= (1 << 0)
	}
	if e.UsageLimit != nil {
		flags |= (1 << 1)
	}
	if e.RequestNeeded != nil {
		flags |= (1 << 3)
	}
	if e.Title != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editExportedChatInvite)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.Link)
	if e.ExpireDate != nil {
		x.Int(*e.ExpireDate)
	}
	if e.UsageLimit != nil {
		x.Int(*e.UsageLimit)
	}
	if e.RequestNeeded != nil {
		x.Bool(*e.RequestNeeded)
	}
	if e.Title != nil {
		x.String(*e.Title)
	}
	return x.buf
}

func (e TL_messages_deleteRevokedExportedChatInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteRevokedExportedChatInvites)
	x.Object(e.Peer)
	x.Object(e.AdminID)
	return x.buf
}

func (e TL_messages_deleteExportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteExportedChatInvite)
	x.Object(e.Peer)
	x.String(e.Link)
	return x.buf
}

func (e TL_messages_getAdminsWithInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAdminsWithInvites)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getChatInviteImporters) encode() []byte {
	var flags int32
	if e.Requested {
		flags |= (1 << 0)
	}
	if e.SubscriptionExpired {
		flags |= (1 << 3)
	}
	if e.Link != nil {
		flags |= (1 << 1)
	}
	if e.Q != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getChatInviteImporters)
	x.Int(flags)
	x.Object(e.Peer)
	if e.Link != nil {
		x.String(*e.Link)
	}
	if e.Q != nil {
		x.String(*e.Q)
	}
	x.Int(e.OffsetDate)
	x.Object(e.OffsetUser)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_setHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setHistoryTTL)
	x.Object(e.Peer)
	x.Int(e.Period)
	return x.buf
}

func (e TL_messages_checkHistoryImportPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_checkHistoryImportPeer)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_setChatTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setChatTheme)
	x.Object(e.Peer)
	x.String(e.Emoticon)
	return x.buf
}

func (e TL_messages_getMessageReadParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessageReadParticipants)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_getSearchResultsCalendar) encode() []byte {
	var flags int32
	if e.SavedPeerID != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSearchResultsCalendar)
	x.Int(flags)
	x.Object(e.Peer)
	if e.SavedPeerID != nil {
		x.Object(e.SavedPeerID)
	}
	x.Object(e.Filter)
	x.Int(e.OffsetID)
	x.Int(e.OffsetDate)
	return x.buf
}

func (e TL_messages_getSearchResultsPositions) encode() []byte {
	var flags int32
	if e.SavedPeerID != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSearchResultsPositions)
	x.Int(flags)
	x.Object(e.Peer)
	if e.SavedPeerID != nil {
		x.Object(e.SavedPeerID)
	}
	x.Object(e.Filter)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_hideChatJoinRequest) encode() []byte {
	var flags int32
	if e.Approved {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_hideChatJoinRequest)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_messages_hideAllChatJoinRequests) encode() []byte {
	var flags int32
	if e.Approved {
		flags |= (1 << 0)
	}
	if e.Link != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_hideAllChatJoinRequests)
	x.Int(flags)
	x.Object(e.Peer)
	if e.Link != nil {
		x.String(*e.Link)
	}
	return x.buf
}

func (e TL_messages_toggleNoForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleNoForwards)
	x.Object(e.Peer)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_messages_saveDefaultSendAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_saveDefaultSendAs)
	x.Object(e.Peer)
	x.Object(e.SendAs)
	return x.buf
}

func (e TL_messages_sendReaction) encode() []byte {
	var flags int32
	if e.Big {
		flags |= (1 << 1)
	}
	if e.AddToRecent {
		flags |= (1 << 2)
	}
	if e.Reaction != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendReaction)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	if e.Reaction != nil {
		EncodeBuf_GenericVector(x, e.Reaction)
	}
	return x.buf
}

func (e TL_messages_getMessagesReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessagesReactions)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_getMessageReactionsList) encode() []byte {
	var flags int32
	if e.Reaction != nil {
		flags |= (1 << 0)
	}
	if e.Offset != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMessageReactionsList)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Reaction != nil {
		x.Object(e.Reaction)
	}
	if e.Offset != nil {
		x.String(*e.Offset)
	}
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_setChatAvailableReactions) encode() []byte {
	var flags int32
	if e.ReactionsLimit != nil {
		flags |= (1 << 0)
	}
	if e.PaidEnabled != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setChatAvailableReactions)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.AvailableReactions)
	if e.ReactionsLimit != nil {
		x.Int(*e.ReactionsLimit)
	}
	if e.PaidEnabled != nil {
		x.Bool(*e.PaidEnabled)
	}
	return x.buf
}

func (e TL_messages_getAvailableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAvailableReactions)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_setDefaultReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setDefaultReaction)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_messages_translateText) encode() []byte {
	var flags int32
	if e.Peer != nil {
		flags |= (1 << 0)
	}
	if e.ID != nil {
		flags |= (1 << 0)
	}
	if e.Text != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_translateText)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	if e.ID != nil {
		x.VectorInt(e.ID)
	}
	if e.Text != nil {
		EncodeBuf_GenericVector(x, e.Text)
	}
	x.String(e.ToLang)
	return x.buf
}

func (e TL_messages_getUnreadReactions) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getUnreadReactions)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	x.Int(e.OffsetID)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	return x.buf
}

func (e TL_messages_readReactions) encode() []byte {
	var flags int32
	if e.TopMsgID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_readReactions)
	x.Int(flags)
	x.Object(e.Peer)
	if e.TopMsgID != nil {
		x.Int(*e.TopMsgID)
	}
	return x.buf
}

func (e TL_messages_searchSentMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchSentMedia)
	x.String(e.Q)
	x.Object(e.Filter)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getAttachMenuBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAttachMenuBots)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getAttachMenuBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAttachMenuBot)
	x.Object(e.Bot)
	return x.buf
}

func (e TL_messages_toggleBotInAttachMenu) encode() []byte {
	var flags int32
	if e.WriteAllowed {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleBotInAttachMenu)
	x.Int(flags)
	x.Object(e.Bot)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_messages_requestWebView) encode() []byte {
	var flags int32
	if e.FromBotMenu {
		flags |= (1 << 4)
	}
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.Compact {
		flags |= (1 << 7)
	}
	if e.URL != nil {
		flags |= (1 << 1)
	}
	if e.StartParam != nil {
		flags |= (1 << 3)
	}
	if e.ThemeParams != nil {
		flags |= (1 << 2)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestWebView)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.Bot)
	if e.URL != nil {
		x.String(*e.URL)
	}
	if e.StartParam != nil {
		x.String(*e.StartParam)
	}
	if e.ThemeParams != nil {
		x.Object(e.ThemeParams)
	}
	x.String(e.Platform)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_messages_prolongWebView) encode() []byte {
	var flags int32
	if e.Silent {
		flags |= (1 << 5)
	}
	if e.ReplyTo != nil {
		flags |= (1 << 0)
	}
	if e.SendAs != nil {
		flags |= (1 << 13)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_prolongWebView)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.Bot)
	x.Long(e.QueryID)
	if e.ReplyTo != nil {
		x.Object(e.ReplyTo)
	}
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_messages_requestSimpleWebView) encode() []byte {
	var flags int32
	if e.FromSwitchWebview {
		flags |= (1 << 1)
	}
	if e.FromSideMenu {
		flags |= (1 << 2)
	}
	if e.Compact {
		flags |= (1 << 7)
	}
	if e.URL != nil {
		flags |= (1 << 3)
	}
	if e.StartParam != nil {
		flags |= (1 << 4)
	}
	if e.ThemeParams != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestSimpleWebView)
	x.Int(flags)
	x.Object(e.Bot)
	if e.URL != nil {
		x.String(*e.URL)
	}
	if e.StartParam != nil {
		x.String(*e.StartParam)
	}
	if e.ThemeParams != nil {
		x.Object(e.ThemeParams)
	}
	x.String(e.Platform)
	return x.buf
}

func (e TL_messages_sendWebViewResultMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendWebViewResultMessage)
	x.String(e.BotQueryID)
	x.Object(e.Result)
	return x.buf
}

func (e TL_messages_sendWebViewData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendWebViewData)
	x.Object(e.Bot)
	x.Long(e.RandomID)
	x.String(e.ButtonText)
	x.String(e.Data)
	return x.buf
}

func (e TL_messages_transcribeAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_transcribeAudio)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_rateTranscribedAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_rateTranscribedAudio)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Long(e.TranscriptionID)
	x.Bool(e.Good)
	return x.buf
}

func (e TL_messages_getCustomEmojiDocuments) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getCustomEmojiDocuments)
	x.VectorLong(e.DocumentID)
	return x.buf
}

func (e TL_messages_getEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getFeaturedEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getFeaturedEmojiStickers)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_reportReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reportReaction)
	x.Object(e.Peer)
	x.Int(e.ID)
	x.Object(e.ReactionPeer)
	return x.buf
}

func (e TL_messages_getTopReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getTopReactions)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getRecentReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getRecentReactions)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_clearRecentReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_clearRecentReactions)
	return x.buf
}

func (e TL_messages_getExtendedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getExtendedMedia)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_setDefaultHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setDefaultHistoryTTL)
	x.Int(e.Period)
	return x.buf
}

func (e TL_messages_getDefaultHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDefaultHistoryTTL)
	return x.buf
}

func (e TL_messages_sendBotRequestedPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendBotRequestedPeer)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Int(e.ButtonID)
	EncodeBuf_GenericVector(x, e.RequestedPeers)
	return x.buf
}

func (e TL_messages_getEmojiGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiGroups)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_getEmojiStatusGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiStatusGroups)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_getEmojiProfilePhotoGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiProfilePhotoGroups)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_searchCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchCustomEmoji)
	x.String(e.Emoticon)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_togglePeerTranslations) encode() []byte {
	var flags int32
	if e.Disabled {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_togglePeerTranslations)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_getBotApp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getBotApp)
	x.Object(e.App)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_requestAppWebView) encode() []byte {
	var flags int32
	if e.WriteAllowed {
		flags |= (1 << 0)
	}
	if e.Compact {
		flags |= (1 << 7)
	}
	if e.StartParam != nil {
		flags |= (1 << 1)
	}
	if e.ThemeParams != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestAppWebView)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.App)
	if e.StartParam != nil {
		x.String(*e.StartParam)
	}
	if e.ThemeParams != nil {
		x.Object(e.ThemeParams)
	}
	x.String(e.Platform)
	return x.buf
}

func (e TL_messages_setChatWallPaper) encode() []byte {
	var flags int32
	if e.ForBoth {
		flags |= (1 << 3)
	}
	if e.Revert {
		flags |= (1 << 4)
	}
	if e.Wallpaper != nil {
		flags |= (1 << 0)
	}
	if e.Settings != nil {
		flags |= (1 << 2)
	}
	if e.ID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_setChatWallPaper)
	x.Int(flags)
	x.Object(e.Peer)
	if e.Wallpaper != nil {
		x.Object(e.Wallpaper)
	}
	if e.Settings != nil {
		x.Object(e.Settings)
	}
	if e.ID != nil {
		x.Int(*e.ID)
	}
	return x.buf
}

func (e TL_messages_searchEmojiStickerSets) encode() []byte {
	var flags int32
	if e.ExcludeFeatured {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_searchEmojiStickerSets)
	x.Int(flags)
	x.String(e.Q)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getSavedDialogs) encode() []byte {
	var flags int32
	if e.ExcludePinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSavedDialogs)
	x.Int(flags)
	x.Int(e.OffsetDate)
	x.Int(e.OffsetID)
	x.Object(e.OffsetPeer)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getSavedHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSavedHistory)
	x.Object(e.Peer)
	x.Int(e.OffsetID)
	x.Int(e.OffsetDate)
	x.Int(e.AddOffset)
	x.Int(e.Limit)
	x.Int(e.MaxID)
	x.Int(e.MinID)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_deleteSavedHistory) encode() []byte {
	var flags int32
	if e.MinDate != nil {
		flags |= (1 << 2)
	}
	if e.MaxDate != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteSavedHistory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	if e.MinDate != nil {
		x.Int(*e.MinDate)
	}
	if e.MaxDate != nil {
		x.Int(*e.MaxDate)
	}
	return x.buf
}

func (e TL_messages_getPinnedSavedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPinnedSavedDialogs)
	return x.buf
}

func (e TL_messages_toggleSavedDialogPIN) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleSavedDialogPIN)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_messages_reorderPinnedSavedDialogs) encode() []byte {
	var flags int32
	if e.Force {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reorderPinnedSavedDialogs)
	x.Int(flags)
	EncodeBuf_GenericVector(x, e.Order)
	return x.buf
}

func (e TL_messages_getSavedReactionTags) encode() []byte {
	var flags int32
	if e.Peer != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getSavedReactionTags)
	x.Int(flags)
	if e.Peer != nil {
		x.Object(e.Peer)
	}
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_updateSavedReactionTag) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_updateSavedReactionTag)
	x.Int(flags)
	x.Object(e.Reaction)
	if e.Title != nil {
		x.String(*e.Title)
	}
	return x.buf
}

func (e TL_messages_getDefaultTagReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getDefaultTagReactions)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_getOutboxReadDate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getOutboxReadDate)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_getQuickReplies) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getQuickReplies)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_reorderQuickReplies) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_reorderQuickReplies)
	x.VectorInt(e.Order)
	return x.buf
}

func (e TL_messages_checkQuickReplyShortcut) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_checkQuickReplyShortcut)
	x.String(e.Shortcut)
	return x.buf
}

func (e TL_messages_editQuickReplyShortcut) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editQuickReplyShortcut)
	x.Int(e.ShortcutID)
	x.String(e.Shortcut)
	return x.buf
}

func (e TL_messages_deleteQuickReplyShortcut) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteQuickReplyShortcut)
	x.Int(e.ShortcutID)
	return x.buf
}

func (e TL_messages_getQuickReplyMessages) encode() []byte {
	var flags int32
	if e.ID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getQuickReplyMessages)
	x.Int(flags)
	x.Int(e.ShortcutID)
	if e.ID != nil {
		x.VectorInt(e.ID)
	}
	x.Long(e.Hash)
	return x.buf
}

func (e TL_messages_sendQuickReplyMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendQuickReplyMessages)
	x.Object(e.Peer)
	x.Int(e.ShortcutID)
	x.VectorInt(e.ID)
	x.VectorLong(e.RandomID)
	return x.buf
}

func (e TL_messages_deleteQuickReplyMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteQuickReplyMessages)
	x.Int(e.ShortcutID)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_messages_toggleDialogFilterTags) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_toggleDialogFilterTags)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_messages_getMyStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getMyStickers)
	x.Long(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_messages_getEmojiStickerGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getEmojiStickerGroups)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_getAvailableEffects) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getAvailableEffects)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_messages_editFactCheck) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_editFactCheck)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Object(e.Text)
	return x.buf
}

func (e TL_messages_deleteFactCheck) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_deleteFactCheck)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_messages_getFactCheck) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getFactCheck)
	x.Object(e.Peer)
	x.VectorInt(e.MsgID)
	return x.buf
}

func (e TL_messages_requestMainWebView) encode() []byte {
	var flags int32
	if e.Compact {
		flags |= (1 << 7)
	}
	if e.StartParam != nil {
		flags |= (1 << 1)
	}
	if e.ThemeParams != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_requestMainWebView)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.Bot)
	if e.StartParam != nil {
		x.String(*e.StartParam)
	}
	if e.ThemeParams != nil {
		x.Object(e.ThemeParams)
	}
	x.String(e.Platform)
	return x.buf
}

func (e TL_messages_sendPaidReaction) encode() []byte {
	var flags int32
	if e.Private != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_sendPaidReaction)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Int(e.Count)
	x.Long(e.RandomID)
	if e.Private != nil {
		x.Bool(*e.Private)
	}
	return x.buf
}

func (e TL_messages_togglePaidReactionPrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_togglePaidReactionPrivacy)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	x.Bool(e.Private)
	return x.buf
}

func (e TL_messages_getPaidReactionPrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_messages_getPaidReactionPrivacy)
	return x.buf
}

func (e TL_updates_getState) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_getState)
	return x.buf
}

func (e TL_updates_getDifference) encode() []byte {
	var flags int32
	if e.PTSLimit != nil {
		flags |= (1 << 1)
	}
	if e.PTSTotalLimit != nil {
		flags |= (1 << 0)
	}
	if e.QTSLimit != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_getDifference)
	x.Int(flags)
	x.Int(e.PTS)
	if e.PTSLimit != nil {
		x.Int(*e.PTSLimit)
	}
	if e.PTSTotalLimit != nil {
		x.Int(*e.PTSTotalLimit)
	}
	x.Int(e.Date)
	x.Int(e.QTS)
	if e.QTSLimit != nil {
		x.Int(*e.QTSLimit)
	}
	return x.buf
}

func (e TL_updates_getChannelDifference) encode() []byte {
	var flags int32
	if e.Force {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_updates_getChannelDifference)
	x.Int(flags)
	x.Object(e.Channel)
	x.Object(e.Filter)
	x.Int(e.PTS)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_photos_updateProfilePhoto) encode() []byte {
	var flags int32
	if e.Fallback {
		flags |= (1 << 0)
	}
	if e.Bot != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_updateProfilePhoto)
	x.Int(flags)
	if e.Bot != nil {
		x.Object(e.Bot)
	}
	x.Object(e.ID)
	return x.buf
}

func (e TL_photos_uploadProfilePhoto) encode() []byte {
	var flags int32
	if e.Fallback {
		flags |= (1 << 3)
	}
	if e.Bot != nil {
		flags |= (1 << 5)
	}
	if e.File != nil {
		flags |= (1 << 0)
	}
	if e.Video != nil {
		flags |= (1 << 1)
	}
	if e.VideoStartTS != nil {
		flags |= (1 << 2)
	}
	if e.VideoEmojiMarkup != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_uploadProfilePhoto)
	x.Int(flags)
	if e.Bot != nil {
		x.Object(e.Bot)
	}
	if e.File != nil {
		x.Object(e.File)
	}
	if e.Video != nil {
		x.Object(e.Video)
	}
	if e.VideoStartTS != nil {
		x.Double(*e.VideoStartTS)
	}
	if e.VideoEmojiMarkup != nil {
		x.Object(e.VideoEmojiMarkup)
	}
	return x.buf
}

func (e TL_photos_deletePhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_deletePhotos)
	EncodeBuf_GenericVector(x, e.ID)
	return x.buf
}

func (e TL_photos_getUserPhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_getUserPhotos)
	x.Object(e.UserID)
	x.Int(e.Offset)
	x.Long(e.MaxID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_photos_uploadContactProfilePhoto) encode() []byte {
	var flags int32
	if e.Suggest {
		flags |= (1 << 3)
	}
	if e.Save {
		flags |= (1 << 4)
	}
	if e.File != nil {
		flags |= (1 << 0)
	}
	if e.Video != nil {
		flags |= (1 << 1)
	}
	if e.VideoStartTS != nil {
		flags |= (1 << 2)
	}
	if e.VideoEmojiMarkup != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_photos_uploadContactProfilePhoto)
	x.Int(flags)
	x.Object(e.UserID)
	if e.File != nil {
		x.Object(e.File)
	}
	if e.Video != nil {
		x.Object(e.Video)
	}
	if e.VideoStartTS != nil {
		x.Double(*e.VideoStartTS)
	}
	if e.VideoEmojiMarkup != nil {
		x.Object(e.VideoEmojiMarkup)
	}
	return x.buf
}

func (e TL_upload_saveFilePart) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_saveFilePart)
	x.Long(e.FileID)
	x.Int(e.FilePart)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_upload_getFile) encode() []byte {
	var flags int32
	if e.Precise {
		flags |= (1 << 0)
	}
	if e.CDNSupported {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getFile)
	x.Int(flags)
	x.Object(e.Location)
	x.Long(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_upload_saveBigFilePart) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_saveBigFilePart)
	x.Long(e.FileID)
	x.Int(e.FilePart)
	x.Int(e.FileTotalParts)
	x.StringBytes(e.Bytes)
	return x.buf
}

func (e TL_upload_getWebFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getWebFile)
	x.Object(e.Location)
	x.Int(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_upload_getCDNFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getCDNFile)
	x.StringBytes(e.FileToken)
	x.Long(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_upload_reuploadCDNFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_reuploadCDNFile)
	x.StringBytes(e.FileToken)
	x.StringBytes(e.RequestToken)
	return x.buf
}

func (e TL_upload_getCDNFileHashes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getCDNFileHashes)
	x.StringBytes(e.FileToken)
	x.Long(e.Offset)
	return x.buf
}

func (e TL_upload_getFileHashes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_upload_getFileHashes)
	x.Object(e.Location)
	x.Long(e.Offset)
	return x.buf
}

func (e TL_help_getConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getConfig)
	return x.buf
}

func (e TL_help_getNearestDC) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getNearestDC)
	return x.buf
}

func (e TL_help_getAppUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getAppUpdate)
	x.String(e.Source)
	return x.buf
}

func (e TL_help_getInviteText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getInviteText)
	return x.buf
}

func (e TL_help_getSupport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getSupport)
	return x.buf
}

func (e TL_help_setBotUpdatesStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_setBotUpdatesStatus)
	x.Int(e.PendingUpdatesCount)
	x.String(e.Message)
	return x.buf
}

func (e TL_help_getCDNConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getCDNConfig)
	return x.buf
}

func (e TL_help_getRecentMeURLs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getRecentMeURLs)
	x.String(e.Referer)
	return x.buf
}

func (e TL_help_getTermsOfServiceUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getTermsOfServiceUpdate)
	return x.buf
}

func (e TL_help_acceptTermsOfService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_acceptTermsOfService)
	x.Object(e.ID)
	return x.buf
}

func (e TL_help_getDeepLinkInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getDeepLinkInfo)
	x.String(e.Path)
	return x.buf
}

func (e TL_help_getAppConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getAppConfig)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_help_saveAppLog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_saveAppLog)
	EncodeBuf_GenericVector(x, e.Events)
	return x.buf
}

func (e TL_help_getPassportConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getPassportConfig)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_help_getSupportName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getSupportName)
	return x.buf
}

func (e TL_help_getUserInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getUserInfo)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_help_editUserInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_editUserInfo)
	x.Object(e.UserID)
	x.String(e.Message)
	EncodeBuf_GenericVector(x, e.Entities)
	return x.buf
}

func (e TL_help_getPromoData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getPromoData)
	return x.buf
}

func (e TL_help_hidePromoData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_hidePromoData)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_help_dismissSuggestion) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_dismissSuggestion)
	x.Object(e.Peer)
	x.String(e.Suggestion)
	return x.buf
}

func (e TL_help_getCountriesList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getCountriesList)
	x.String(e.LangCode)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_help_getPremiumPromo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getPremiumPromo)
	return x.buf
}

func (e TL_help_getPeerColors) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getPeerColors)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_help_getPeerProfileColors) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getPeerProfileColors)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_help_getTimezonesList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_help_getTimezonesList)
	x.Int(e.Hash)
	return x.buf
}

func (e TL_channels_readHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_readHistory)
	x.Object(e.Channel)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_channels_deleteMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteMessages)
	x.Object(e.Channel)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_channels_reportSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_reportSpam)
	x.Object(e.Channel)
	x.Object(e.Participant)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_channels_getMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getMessages)
	x.Object(e.Channel)
	EncodeBuf_GenericVector(x, e.ID)
	return x.buf
}

func (e TL_channels_getParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getParticipants)
	x.Object(e.Channel)
	x.Object(e.Filter)
	x.Int(e.Offset)
	x.Int(e.Limit)
	x.Long(e.Hash)
	return x.buf
}

func (e TL_channels_getParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getParticipant)
	x.Object(e.Channel)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channels_getChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getChannels)
	EncodeBuf_GenericVector(x, e.ID)
	return x.buf
}

func (e TL_channels_getFullChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getFullChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_createChannel) encode() []byte {
	var flags int32
	if e.Broadcast {
		flags |= (1 << 0)
	}
	if e.Megagroup {
		flags |= (1 << 1)
	}
	if e.ForImport {
		flags |= (1 << 3)
	}
	if e.Forum {
		flags |= (1 << 5)
	}
	if e.GeoPoint != nil {
		flags |= (1 << 2)
	}
	if e.Address != nil {
		flags |= (1 << 2)
	}
	if e.TTLPeriod != nil {
		flags |= (1 << 4)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_createChannel)
	x.Int(flags)
	x.String(e.Title)
	x.String(e.About)
	if e.GeoPoint != nil {
		x.Object(e.GeoPoint)
	}
	if e.Address != nil {
		x.String(*e.Address)
	}
	if e.TTLPeriod != nil {
		x.Int(*e.TTLPeriod)
	}
	return x.buf
}

func (e TL_channels_editAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editAdmin)
	x.Object(e.Channel)
	x.Object(e.UserID)
	x.Object(e.AdminRights)
	x.String(e.Rank)
	return x.buf
}

func (e TL_channels_editTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editTitle)
	x.Object(e.Channel)
	x.String(e.Title)
	return x.buf
}

func (e TL_channels_editPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editPhoto)
	x.Object(e.Channel)
	x.Object(e.Photo)
	return x.buf
}

func (e TL_channels_checkUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_checkUsername)
	x.Object(e.Channel)
	x.String(e.Username)
	return x.buf
}

func (e TL_channels_updateUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_updateUsername)
	x.Object(e.Channel)
	x.String(e.Username)
	return x.buf
}

func (e TL_channels_joinChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_joinChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_leaveChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_leaveChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_inviteToChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_inviteToChannel)
	x.Object(e.Channel)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_channels_deleteChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteChannel)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_exportMessageLink) encode() []byte {
	var flags int32
	if e.Grouped {
		flags |= (1 << 0)
	}
	if e.Thread {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_exportMessageLink)
	x.Int(flags)
	x.Object(e.Channel)
	x.Int(e.ID)
	return x.buf
}

func (e TL_channels_toggleSignatures) encode() []byte {
	var flags int32
	if e.SignaturesEnabled {
		flags |= (1 << 0)
	}
	if e.ProfilesEnabled {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleSignatures)
	x.Int(flags)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_getAdminedPublicChannels) encode() []byte {
	var flags int32
	if e.ByLocation {
		flags |= (1 << 0)
	}
	if e.CheckLimit {
		flags |= (1 << 1)
	}
	if e.ForPersonal {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getAdminedPublicChannels)
	x.Int(flags)
	return x.buf
}

func (e TL_channels_editBanned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editBanned)
	x.Object(e.Channel)
	x.Object(e.Participant)
	x.Object(e.BannedRights)
	return x.buf
}

func (e TL_channels_getAdminLog) encode() []byte {
	var flags int32
	if e.EventsFilter != nil {
		flags |= (1 << 0)
	}
	if e.Admins != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getAdminLog)
	x.Int(flags)
	x.Object(e.Channel)
	x.String(e.Q)
	if e.EventsFilter != nil {
		x.Object(e.EventsFilter)
	}
	if e.Admins != nil {
		EncodeBuf_GenericVector(x, e.Admins)
	}
	x.Long(e.MaxID)
	x.Long(e.MinID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_channels_setStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_setStickers)
	x.Object(e.Channel)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_channels_readMessageContents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_readMessageContents)
	x.Object(e.Channel)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_channels_deleteHistory) encode() []byte {
	var flags int32
	if e.ForEveryone {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteHistory)
	x.Int(flags)
	x.Object(e.Channel)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_channels_togglePreHistoryHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_togglePreHistoryHidden)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_getLeftChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getLeftChannels)
	x.Int(e.Offset)
	return x.buf
}

func (e TL_channels_getGroupsForDiscussion) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getGroupsForDiscussion)
	return x.buf
}

func (e TL_channels_setDiscussionGroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_setDiscussionGroup)
	x.Object(e.Broadcast)
	x.Object(e.Group)
	return x.buf
}

func (e TL_channels_editCreator) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editCreator)
	x.Object(e.Channel)
	x.Object(e.UserID)
	x.Object(e.Password)
	return x.buf
}

func (e TL_channels_editLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editLocation)
	x.Object(e.Channel)
	x.Object(e.GeoPoint)
	x.String(e.Address)
	return x.buf
}

func (e TL_channels_toggleSlowMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleSlowMode)
	x.Object(e.Channel)
	x.Int(e.Seconds)
	return x.buf
}

func (e TL_channels_getInactiveChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getInactiveChannels)
	return x.buf
}

func (e TL_channels_convertToGigagroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_convertToGigagroup)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_viewSponsoredMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_viewSponsoredMessage)
	x.Object(e.Channel)
	x.StringBytes(e.RandomID)
	return x.buf
}

func (e TL_channels_getSponsoredMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getSponsoredMessages)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_getSendAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getSendAs)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_channels_deleteParticipantHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteParticipantHistory)
	x.Object(e.Channel)
	x.Object(e.Participant)
	return x.buf
}

func (e TL_channels_toggleJoinToSend) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleJoinToSend)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_toggleJoinRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleJoinRequest)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_reorderUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_reorderUsernames)
	x.Object(e.Channel)
	x.VectorString(e.Order)
	return x.buf
}

func (e TL_channels_toggleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleUsername)
	x.Object(e.Channel)
	x.String(e.Username)
	x.Bool(e.Active)
	return x.buf
}

func (e TL_channels_deactivateAllUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deactivateAllUsernames)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_channels_toggleForum) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleForum)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_createForumTopic) encode() []byte {
	var flags int32
	if e.IconColor != nil {
		flags |= (1 << 0)
	}
	if e.IconEmojiID != nil {
		flags |= (1 << 3)
	}
	if e.SendAs != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_createForumTopic)
	x.Int(flags)
	x.Object(e.Channel)
	x.String(e.Title)
	if e.IconColor != nil {
		x.Int(*e.IconColor)
	}
	if e.IconEmojiID != nil {
		x.Long(*e.IconEmojiID)
	}
	x.Long(e.RandomID)
	if e.SendAs != nil {
		x.Object(e.SendAs)
	}
	return x.buf
}

func (e TL_channels_getForumTopics) encode() []byte {
	var flags int32
	if e.Q != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getForumTopics)
	x.Int(flags)
	x.Object(e.Channel)
	if e.Q != nil {
		x.String(*e.Q)
	}
	x.Int(e.OffsetDate)
	x.Int(e.OffsetID)
	x.Int(e.OffsetTopic)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_channels_getForumTopicsByID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getForumTopicsByID)
	x.Object(e.Channel)
	x.VectorInt(e.Topics)
	return x.buf
}

func (e TL_channels_editForumTopic) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 0)
	}
	if e.IconEmojiID != nil {
		flags |= (1 << 1)
	}
	if e.Closed != nil {
		flags |= (1 << 2)
	}
	if e.Hidden != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_editForumTopic)
	x.Int(flags)
	x.Object(e.Channel)
	x.Int(e.TopicID)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.IconEmojiID != nil {
		x.Long(*e.IconEmojiID)
	}
	if e.Closed != nil {
		x.Bool(*e.Closed)
	}
	if e.Hidden != nil {
		x.Bool(*e.Hidden)
	}
	return x.buf
}

func (e TL_channels_updatePinnedForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_updatePinnedForumTopic)
	x.Object(e.Channel)
	x.Int(e.TopicID)
	x.Bool(e.Pinned)
	return x.buf
}

func (e TL_channels_deleteTopicHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_deleteTopicHistory)
	x.Object(e.Channel)
	x.Int(e.TopMsgID)
	return x.buf
}

func (e TL_channels_reorderPinnedForumTopics) encode() []byte {
	var flags int32
	if e.Force {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_reorderPinnedForumTopics)
	x.Int(flags)
	x.Object(e.Channel)
	x.VectorInt(e.Order)
	return x.buf
}

func (e TL_channels_toggleAntiSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleAntiSpam)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_reportAntiSpamFalsePositive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_reportAntiSpamFalsePositive)
	x.Object(e.Channel)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_channels_toggleParticipantsHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleParticipantsHidden)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_clickSponsoredMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_clickSponsoredMessage)
	x.Object(e.Channel)
	x.StringBytes(e.RandomID)
	return x.buf
}

func (e TL_channels_updateColor) encode() []byte {
	var flags int32
	if e.ForProfile {
		flags |= (1 << 1)
	}
	if e.Color != nil {
		flags |= (1 << 2)
	}
	if e.BackgroundEmojiID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_updateColor)
	x.Int(flags)
	x.Object(e.Channel)
	if e.Color != nil {
		x.Int(*e.Color)
	}
	if e.BackgroundEmojiID != nil {
		x.Long(*e.BackgroundEmojiID)
	}
	return x.buf
}

func (e TL_channels_toggleViewForumAsMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_toggleViewForumAsMessages)
	x.Object(e.Channel)
	x.Bool(e.Enabled)
	return x.buf
}

func (e TL_channels_getChannelRecommendations) encode() []byte {
	var flags int32
	if e.Channel != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_getChannelRecommendations)
	x.Int(flags)
	if e.Channel != nil {
		x.Object(e.Channel)
	}
	return x.buf
}

func (e TL_channels_updateEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_updateEmojiStatus)
	x.Object(e.Channel)
	x.Object(e.EmojiStatus)
	return x.buf
}

func (e TL_channels_setBoostsToUnblockRestrictions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_setBoostsToUnblockRestrictions)
	x.Object(e.Channel)
	x.Int(e.Boosts)
	return x.buf
}

func (e TL_channels_setEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_setEmojiStickers)
	x.Object(e.Channel)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_channels_reportSponsoredMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_reportSponsoredMessage)
	x.Object(e.Channel)
	x.StringBytes(e.RandomID)
	x.StringBytes(e.Option)
	return x.buf
}

func (e TL_channels_restrictSponsoredMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_restrictSponsoredMessages)
	x.Object(e.Channel)
	x.Bool(e.Restricted)
	return x.buf
}

func (e TL_channels_searchPosts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_channels_searchPosts)
	x.String(e.Hashtag)
	x.Int(e.OffsetRate)
	x.Object(e.OffsetPeer)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_bots_sendCustomRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_sendCustomRequest)
	x.String(e.CustomMethod)
	x.Object(e.Params)
	return x.buf
}

func (e TL_bots_answerWebhookJSONQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_answerWebhookJSONQuery)
	x.Long(e.QueryID)
	x.Object(e.Data)
	return x.buf
}

func (e TL_bots_setBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotCommands)
	x.Object(e.Scope)
	x.String(e.LangCode)
	EncodeBuf_GenericVector(x, e.Commands)
	return x.buf
}

func (e TL_bots_resetBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_resetBotCommands)
	x.Object(e.Scope)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_bots_getBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_getBotCommands)
	x.Object(e.Scope)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_bots_setBotMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotMenuButton)
	x.Object(e.UserID)
	x.Object(e.Button)
	return x.buf
}

func (e TL_bots_getBotMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_getBotMenuButton)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_bots_setBotBroadcastDefaultAdminRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotBroadcastDefaultAdminRights)
	x.Object(e.AdminRights)
	return x.buf
}

func (e TL_bots_setBotGroupDefaultAdminRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotGroupDefaultAdminRights)
	x.Object(e.AdminRights)
	return x.buf
}

func (e TL_bots_setBotInfo) encode() []byte {
	var flags int32
	if e.Bot != nil {
		flags |= (1 << 2)
	}
	if e.Name != nil {
		flags |= (1 << 3)
	}
	if e.About != nil {
		flags |= (1 << 0)
	}
	if e.Description != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_setBotInfo)
	x.Int(flags)
	if e.Bot != nil {
		x.Object(e.Bot)
	}
	x.String(e.LangCode)
	if e.Name != nil {
		x.String(*e.Name)
	}
	if e.About != nil {
		x.String(*e.About)
	}
	if e.Description != nil {
		x.String(*e.Description)
	}
	return x.buf
}

func (e TL_bots_getBotInfo) encode() []byte {
	var flags int32
	if e.Bot != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_getBotInfo)
	x.Int(flags)
	if e.Bot != nil {
		x.Object(e.Bot)
	}
	x.String(e.LangCode)
	return x.buf
}

func (e TL_bots_reorderUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_reorderUsernames)
	x.Object(e.Bot)
	x.VectorString(e.Order)
	return x.buf
}

func (e TL_bots_toggleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_toggleUsername)
	x.Object(e.Bot)
	x.String(e.Username)
	x.Bool(e.Active)
	return x.buf
}

func (e TL_bots_canSendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_canSendMessage)
	x.Object(e.Bot)
	return x.buf
}

func (e TL_bots_allowSendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_allowSendMessage)
	x.Object(e.Bot)
	return x.buf
}

func (e TL_bots_invokeWebViewCustomMethod) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_invokeWebViewCustomMethod)
	x.Object(e.Bot)
	x.String(e.CustomMethod)
	x.Object(e.Params)
	return x.buf
}

func (e TL_bots_getPopularAppBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_getPopularAppBots)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_bots_addPreviewMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_addPreviewMedia)
	x.Object(e.Bot)
	x.String(e.LangCode)
	x.Object(e.Media)
	return x.buf
}

func (e TL_bots_editPreviewMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_editPreviewMedia)
	x.Object(e.Bot)
	x.String(e.LangCode)
	x.Object(e.Media)
	x.Object(e.NewMedia)
	return x.buf
}

func (e TL_bots_deletePreviewMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_deletePreviewMedia)
	x.Object(e.Bot)
	x.String(e.LangCode)
	EncodeBuf_GenericVector(x, e.Media)
	return x.buf
}

func (e TL_bots_reorderPreviewMedias) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_reorderPreviewMedias)
	x.Object(e.Bot)
	x.String(e.LangCode)
	EncodeBuf_GenericVector(x, e.Order)
	return x.buf
}

func (e TL_bots_getPreviewInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_getPreviewInfo)
	x.Object(e.Bot)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_bots_getPreviewMedias) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_bots_getPreviewMedias)
	x.Object(e.Bot)
	return x.buf
}

func (e TL_payments_getPaymentForm) encode() []byte {
	var flags int32
	if e.ThemeParams != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getPaymentForm)
	x.Int(flags)
	x.Object(e.Invoice)
	if e.ThemeParams != nil {
		x.Object(e.ThemeParams)
	}
	return x.buf
}

func (e TL_payments_getPaymentReceipt) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getPaymentReceipt)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_payments_validateRequestedInfo) encode() []byte {
	var flags int32
	if e.Save {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_validateRequestedInfo)
	x.Int(flags)
	x.Object(e.Invoice)
	x.Object(e.Info)
	return x.buf
}

func (e TL_payments_sendPaymentForm) encode() []byte {
	var flags int32
	if e.RequestedInfoID != nil {
		flags |= (1 << 0)
	}
	if e.ShippingOptionID != nil {
		flags |= (1 << 1)
	}
	if e.TipAmount != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_sendPaymentForm)
	x.Int(flags)
	x.Long(e.FormID)
	x.Object(e.Invoice)
	if e.RequestedInfoID != nil {
		x.String(*e.RequestedInfoID)
	}
	if e.ShippingOptionID != nil {
		x.String(*e.ShippingOptionID)
	}
	x.Object(e.Credentials)
	if e.TipAmount != nil {
		x.Long(*e.TipAmount)
	}
	return x.buf
}

func (e TL_payments_getSavedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getSavedInfo)
	return x.buf
}

func (e TL_payments_clearSavedInfo) encode() []byte {
	var flags int32
	if e.Credentials {
		flags |= (1 << 0)
	}
	if e.Info {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_clearSavedInfo)
	x.Int(flags)
	return x.buf
}

func (e TL_payments_getBankCardData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getBankCardData)
	x.String(e.Number)
	return x.buf
}

func (e TL_payments_exportInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_exportInvoice)
	x.Object(e.InvoiceMedia)
	return x.buf
}

func (e TL_payments_assignAppStoreTransaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_assignAppStoreTransaction)
	x.StringBytes(e.Receipt)
	x.Object(e.Purpose)
	return x.buf
}

func (e TL_payments_assignPlayMarketTransaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_assignPlayMarketTransaction)
	x.Object(e.Receipt)
	x.Object(e.Purpose)
	return x.buf
}

func (e TL_payments_canPurchasePremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_canPurchasePremium)
	x.Object(e.Purpose)
	return x.buf
}

func (e TL_payments_getPremiumGiftCodeOptions) encode() []byte {
	var flags int32
	if e.BoostPeer != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getPremiumGiftCodeOptions)
	x.Int(flags)
	if e.BoostPeer != nil {
		x.Object(e.BoostPeer)
	}
	return x.buf
}

func (e TL_payments_checkGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_checkGiftCode)
	x.String(e.Slug)
	return x.buf
}

func (e TL_payments_applyGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_applyGiftCode)
	x.String(e.Slug)
	return x.buf
}

func (e TL_payments_getGiveawayInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getGiveawayInfo)
	x.Object(e.Peer)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_payments_launchPrepaidGiveaway) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_launchPrepaidGiveaway)
	x.Object(e.Peer)
	x.Long(e.GiveawayID)
	x.Object(e.Purpose)
	return x.buf
}

func (e TL_payments_getStarsTopupOptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsTopupOptions)
	return x.buf
}

func (e TL_payments_getStarsStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsStatus)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_payments_getStarsTransactions) encode() []byte {
	var flags int32
	if e.Inbound {
		flags |= (1 << 0)
	}
	if e.Outbound {
		flags |= (1 << 1)
	}
	if e.Ascending {
		flags |= (1 << 2)
	}
	if e.SubscriptionID != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsTransactions)
	x.Int(flags)
	if e.SubscriptionID != nil {
		x.String(*e.SubscriptionID)
	}
	x.Object(e.Peer)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_payments_sendStarsForm) encode() []byte {
	var flags int32
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_sendStarsForm)
	x.Int(flags)
	x.Long(e.FormID)
	x.Object(e.Invoice)
	return x.buf
}

func (e TL_payments_refundStarsCharge) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_refundStarsCharge)
	x.Object(e.UserID)
	x.String(e.ChargeID)
	return x.buf
}

func (e TL_payments_getStarsRevenueStats) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsRevenueStats)
	x.Int(flags)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_payments_getStarsRevenueWithdrawalURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsRevenueWithdrawalURL)
	x.Object(e.Peer)
	x.Long(e.Stars)
	x.Object(e.Password)
	return x.buf
}

func (e TL_payments_getStarsRevenueAdsAccountURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsRevenueAdsAccountURL)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_payments_getStarsTransactionsByID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsTransactionsByID)
	x.Object(e.Peer)
	EncodeBuf_GenericVector(x, e.ID)
	return x.buf
}

func (e TL_payments_getStarsGiftOptions) encode() []byte {
	var flags int32
	if e.UserID != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsGiftOptions)
	x.Int(flags)
	if e.UserID != nil {
		x.Object(e.UserID)
	}
	return x.buf
}

func (e TL_payments_getStarsSubscriptions) encode() []byte {
	var flags int32
	if e.MissingBalance {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsSubscriptions)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.Offset)
	return x.buf
}

func (e TL_payments_changeStarsSubscription) encode() []byte {
	var flags int32
	if e.Canceled != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_changeStarsSubscription)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.SubscriptionID)
	if e.Canceled != nil {
		x.Bool(*e.Canceled)
	}
	return x.buf
}

func (e TL_payments_fulfillStarsSubscription) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_fulfillStarsSubscription)
	x.Object(e.Peer)
	x.String(e.SubscriptionID)
	return x.buf
}

func (e TL_payments_getStarsGiveawayOptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_payments_getStarsGiveawayOptions)
	return x.buf
}

func (e TL_stickers_createStickerSet) encode() []byte {
	var flags int32
	if e.Masks {
		flags |= (1 << 0)
	}
	if e.Emojis {
		flags |= (1 << 5)
	}
	if e.TextColor {
		flags |= (1 << 6)
	}
	if e.Thumb != nil {
		flags |= (1 << 2)
	}
	if e.Software != nil {
		flags |= (1 << 3)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_createStickerSet)
	x.Int(flags)
	x.Object(e.UserID)
	x.String(e.Title)
	x.String(e.ShortName)
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	EncodeBuf_GenericVector(x, e.Stickers)
	if e.Software != nil {
		x.String(*e.Software)
	}
	return x.buf
}

func (e TL_stickers_removeStickerFromSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_removeStickerFromSet)
	x.Object(e.Sticker)
	return x.buf
}

func (e TL_stickers_changeStickerPosition) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_changeStickerPosition)
	x.Object(e.Sticker)
	x.Int(e.Position)
	return x.buf
}

func (e TL_stickers_addStickerToSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_addStickerToSet)
	x.Object(e.Stickerset)
	x.Object(e.Sticker)
	return x.buf
}

func (e TL_stickers_setStickerSetThumb) encode() []byte {
	var flags int32
	if e.Thumb != nil {
		flags |= (1 << 0)
	}
	if e.ThumbDocumentID != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_setStickerSetThumb)
	x.Int(flags)
	x.Object(e.Stickerset)
	if e.Thumb != nil {
		x.Object(e.Thumb)
	}
	if e.ThumbDocumentID != nil {
		x.Long(*e.ThumbDocumentID)
	}
	return x.buf
}

func (e TL_stickers_checkShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_checkShortName)
	x.String(e.ShortName)
	return x.buf
}

func (e TL_stickers_suggestShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_suggestShortName)
	x.String(e.Title)
	return x.buf
}

func (e TL_stickers_changeSticker) encode() []byte {
	var flags int32
	if e.Emoji != nil {
		flags |= (1 << 0)
	}
	if e.MaskCoords != nil {
		flags |= (1 << 1)
	}
	if e.Keywords != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_changeSticker)
	x.Int(flags)
	x.Object(e.Sticker)
	if e.Emoji != nil {
		x.String(*e.Emoji)
	}
	if e.MaskCoords != nil {
		x.Object(e.MaskCoords)
	}
	if e.Keywords != nil {
		x.String(*e.Keywords)
	}
	return x.buf
}

func (e TL_stickers_renameStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_renameStickerSet)
	x.Object(e.Stickerset)
	x.String(e.Title)
	return x.buf
}

func (e TL_stickers_deleteStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_deleteStickerSet)
	x.Object(e.Stickerset)
	return x.buf
}

func (e TL_stickers_replaceSticker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stickers_replaceSticker)
	x.Object(e.Sticker)
	x.Object(e.NewSticker)
	return x.buf
}

func (e TL_phone_getCallConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getCallConfig)
	return x.buf
}

func (e TL_phone_requestCall) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_requestCall)
	x.Int(flags)
	x.Object(e.UserID)
	x.Int(e.RandomID)
	x.StringBytes(e.GAHash)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phone_acceptCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_acceptCall)
	x.Object(e.Peer)
	x.StringBytes(e.GB)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phone_confirmCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_confirmCall)
	x.Object(e.Peer)
	x.StringBytes(e.GA)
	x.Long(e.KeyFingerprint)
	x.Object(e.Protocol)
	return x.buf
}

func (e TL_phone_receivedCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_receivedCall)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_phone_discardCall) encode() []byte {
	var flags int32
	if e.Video {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_discardCall)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.Duration)
	x.Object(e.Reason)
	x.Long(e.ConnectionID)
	return x.buf
}

func (e TL_phone_setCallRating) encode() []byte {
	var flags int32
	if e.UserInitiative {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_setCallRating)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.Rating)
	x.String(e.Comment)
	return x.buf
}

func (e TL_phone_saveCallDebug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_saveCallDebug)
	x.Object(e.Peer)
	x.Object(e.Debug)
	return x.buf
}

func (e TL_phone_sendSignalingData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_sendSignalingData)
	x.Object(e.Peer)
	x.StringBytes(e.Data)
	return x.buf
}

func (e TL_phone_createGroupCall) encode() []byte {
	var flags int32
	if e.RTMPStream {
		flags |= (1 << 2)
	}
	if e.Title != nil {
		flags |= (1 << 0)
	}
	if e.ScheduleDate != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_createGroupCall)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.RandomID)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.ScheduleDate != nil {
		x.Int(*e.ScheduleDate)
	}
	return x.buf
}

func (e TL_phone_joinGroupCall) encode() []byte {
	var flags int32
	if e.Muted {
		flags |= (1 << 0)
	}
	if e.VideoStopped {
		flags |= (1 << 2)
	}
	if e.InviteHash != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_joinGroupCall)
	x.Int(flags)
	x.Object(e.Call)
	x.Object(e.JoinAs)
	if e.InviteHash != nil {
		x.String(*e.InviteHash)
	}
	x.Object(e.Params)
	return x.buf
}

func (e TL_phone_leaveGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_leaveGroupCall)
	x.Object(e.Call)
	x.Int(e.Source)
	return x.buf
}

func (e TL_phone_inviteToGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_inviteToGroupCall)
	x.Object(e.Call)
	EncodeBuf_GenericVector(x, e.Users)
	return x.buf
}

func (e TL_phone_discardGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_discardGroupCall)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_toggleGroupCallSettings) encode() []byte {
	var flags int32
	if e.ResetInviteHash {
		flags |= (1 << 1)
	}
	if e.JoinMuted != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_toggleGroupCallSettings)
	x.Int(flags)
	x.Object(e.Call)
	if e.JoinMuted != nil {
		x.Bool(*e.JoinMuted)
	}
	return x.buf
}

func (e TL_phone_getGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupCall)
	x.Object(e.Call)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_phone_getGroupParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupParticipants)
	x.Object(e.Call)
	EncodeBuf_GenericVector(x, e.IDs)
	x.VectorInt(e.Sources)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_phone_checkGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_checkGroupCall)
	x.Object(e.Call)
	x.VectorInt(e.Sources)
	return x.buf
}

func (e TL_phone_toggleGroupCallRecord) encode() []byte {
	var flags int32
	if e.Start {
		flags |= (1 << 0)
	}
	if e.Video {
		flags |= (1 << 2)
	}
	if e.Title != nil {
		flags |= (1 << 1)
	}
	if e.VideoPortrait != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_toggleGroupCallRecord)
	x.Int(flags)
	x.Object(e.Call)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.VideoPortrait != nil {
		x.Bool(*e.VideoPortrait)
	}
	return x.buf
}

func (e TL_phone_editGroupCallParticipant) encode() []byte {
	var flags int32
	if e.Muted != nil {
		flags |= (1 << 0)
	}
	if e.Volume != nil {
		flags |= (1 << 1)
	}
	if e.RaiseHand != nil {
		flags |= (1 << 2)
	}
	if e.VideoStopped != nil {
		flags |= (1 << 3)
	}
	if e.VideoPaused != nil {
		flags |= (1 << 4)
	}
	if e.PresentationPaused != nil {
		flags |= (1 << 5)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_editGroupCallParticipant)
	x.Int(flags)
	x.Object(e.Call)
	x.Object(e.Participant)
	if e.Muted != nil {
		x.Bool(*e.Muted)
	}
	if e.Volume != nil {
		x.Int(*e.Volume)
	}
	if e.RaiseHand != nil {
		x.Bool(*e.RaiseHand)
	}
	if e.VideoStopped != nil {
		x.Bool(*e.VideoStopped)
	}
	if e.VideoPaused != nil {
		x.Bool(*e.VideoPaused)
	}
	if e.PresentationPaused != nil {
		x.Bool(*e.PresentationPaused)
	}
	return x.buf
}

func (e TL_phone_editGroupCallTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_editGroupCallTitle)
	x.Object(e.Call)
	x.String(e.Title)
	return x.buf
}

func (e TL_phone_getGroupCallJoinAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupCallJoinAs)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_phone_exportGroupCallInvite) encode() []byte {
	var flags int32
	if e.CanSelfUnmute {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_exportGroupCallInvite)
	x.Int(flags)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_toggleGroupCallStartSubscription) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_toggleGroupCallStartSubscription)
	x.Object(e.Call)
	x.Bool(e.Subscribed)
	return x.buf
}

func (e TL_phone_startScheduledGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_startScheduledGroupCall)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_saveDefaultGroupCallJoinAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_saveDefaultGroupCallJoinAs)
	x.Object(e.Peer)
	x.Object(e.JoinAs)
	return x.buf
}

func (e TL_phone_joinGroupCallPresentation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_joinGroupCallPresentation)
	x.Object(e.Call)
	x.Object(e.Params)
	return x.buf
}

func (e TL_phone_leaveGroupCallPresentation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_leaveGroupCallPresentation)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_getGroupCallStreamChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupCallStreamChannels)
	x.Object(e.Call)
	return x.buf
}

func (e TL_phone_getGroupCallStreamRTMPURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_getGroupCallStreamRTMPURL)
	x.Object(e.Peer)
	x.Bool(e.Revoke)
	return x.buf
}

func (e TL_phone_saveCallLog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_phone_saveCallLog)
	x.Object(e.Peer)
	x.Object(e.File)
	return x.buf
}

func (e TL_langpack_getLangPack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getLangPack)
	x.String(e.LangPack)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_langpack_getStrings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getStrings)
	x.String(e.LangPack)
	x.String(e.LangCode)
	x.VectorString(e.Keys)
	return x.buf
}

func (e TL_langpack_getDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getDifference)
	x.String(e.LangPack)
	x.String(e.LangCode)
	x.Int(e.FromVersion)
	return x.buf
}

func (e TL_langpack_getLanguages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getLanguages)
	x.String(e.LangPack)
	return x.buf
}

func (e TL_langpack_getLanguage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_langpack_getLanguage)
	x.String(e.LangPack)
	x.String(e.LangCode)
	return x.buf
}

func (e TL_folders_editPeerFolders) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_folders_editPeerFolders)
	EncodeBuf_GenericVector(x, e.FolderPeers)
	return x.buf
}

func (e TL_stats_getBroadcastStats) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getBroadcastStats)
	x.Int(flags)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_stats_loadAsyncGraph) encode() []byte {
	var flags int32
	if e.X != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_loadAsyncGraph)
	x.Int(flags)
	x.String(e.Token)
	if e.X != nil {
		x.Long(*e.X)
	}
	return x.buf
}

func (e TL_stats_getMegagroupStats) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getMegagroupStats)
	x.Int(flags)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_stats_getMessagePublicForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getMessagePublicForwards)
	x.Object(e.Channel)
	x.Int(e.MsgID)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stats_getMessageStats) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getMessageStats)
	x.Int(flags)
	x.Object(e.Channel)
	x.Int(e.MsgID)
	return x.buf
}

func (e TL_stats_getStoryStats) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getStoryStats)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	return x.buf
}

func (e TL_stats_getStoryPublicForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getStoryPublicForwards)
	x.Object(e.Peer)
	x.Int(e.ID)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stats_getBroadcastRevenueStats) encode() []byte {
	var flags int32
	if e.Dark {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getBroadcastRevenueStats)
	x.Int(flags)
	x.Object(e.Channel)
	return x.buf
}

func (e TL_stats_getBroadcastRevenueWithdrawalURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getBroadcastRevenueWithdrawalURL)
	x.Object(e.Channel)
	x.Object(e.Password)
	return x.buf
}

func (e TL_stats_getBroadcastRevenueTransactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stats_getBroadcastRevenueTransactions)
	x.Object(e.Channel)
	x.Int(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_chatlists_exportChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_exportChatlistInvite)
	x.Object(e.Chatlist)
	x.String(e.Title)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_chatlists_deleteExportedInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_deleteExportedInvite)
	x.Object(e.Chatlist)
	x.String(e.Slug)
	return x.buf
}

func (e TL_chatlists_editExportedInvite) encode() []byte {
	var flags int32
	if e.Title != nil {
		flags |= (1 << 1)
	}
	if e.Peers != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_editExportedInvite)
	x.Int(flags)
	x.Object(e.Chatlist)
	x.String(e.Slug)
	if e.Title != nil {
		x.String(*e.Title)
	}
	if e.Peers != nil {
		EncodeBuf_GenericVector(x, e.Peers)
	}
	return x.buf
}

func (e TL_chatlists_getExportedInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_getExportedInvites)
	x.Object(e.Chatlist)
	return x.buf
}

func (e TL_chatlists_checkChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_checkChatlistInvite)
	x.String(e.Slug)
	return x.buf
}

func (e TL_chatlists_joinChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_joinChatlistInvite)
	x.String(e.Slug)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_chatlists_getChatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_getChatlistUpdates)
	x.Object(e.Chatlist)
	return x.buf
}

func (e TL_chatlists_joinChatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_joinChatlistUpdates)
	x.Object(e.Chatlist)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_chatlists_hideChatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_hideChatlistUpdates)
	x.Object(e.Chatlist)
	return x.buf
}

func (e TL_chatlists_getLeaveChatlistSuggestions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_getLeaveChatlistSuggestions)
	x.Object(e.Chatlist)
	return x.buf
}

func (e TL_chatlists_leaveChatlist) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_chatlists_leaveChatlist)
	x.Object(e.Chatlist)
	EncodeBuf_GenericVector(x, e.Peers)
	return x.buf
}

func (e TL_stories_canSendStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_canSendStory)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_stories_sendStory) encode() []byte {
	var flags int32
	if e.Pinned {
		flags |= (1 << 2)
	}
	if e.Noforwards {
		flags |= (1 << 4)
	}
	if e.FwdModified {
		flags |= (1 << 7)
	}
	if e.MediaAreas != nil {
		flags |= (1 << 5)
	}
	if e.Caption != nil {
		flags |= (1 << 0)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.Period != nil {
		flags |= (1 << 3)
	}
	if e.FwdFromID != nil {
		flags |= (1 << 6)
	}
	if e.FwdFromStory != nil {
		flags |= (1 << 6)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_sendStory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Object(e.Media)
	if e.MediaAreas != nil {
		EncodeBuf_GenericVector(x, e.MediaAreas)
	}
	if e.Caption != nil {
		x.String(*e.Caption)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	EncodeBuf_GenericVector(x, e.PrivacyRules)
	x.Long(e.RandomID)
	if e.Period != nil {
		x.Int(*e.Period)
	}
	if e.FwdFromID != nil {
		x.Object(e.FwdFromID)
	}
	if e.FwdFromStory != nil {
		x.Int(*e.FwdFromStory)
	}
	return x.buf
}

func (e TL_stories_editStory) encode() []byte {
	var flags int32
	if e.Media != nil {
		flags |= (1 << 0)
	}
	if e.MediaAreas != nil {
		flags |= (1 << 3)
	}
	if e.Caption != nil {
		flags |= (1 << 1)
	}
	if e.Entities != nil {
		flags |= (1 << 1)
	}
	if e.PrivacyRules != nil {
		flags |= (1 << 2)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_editStory)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Media != nil {
		x.Object(e.Media)
	}
	if e.MediaAreas != nil {
		EncodeBuf_GenericVector(x, e.MediaAreas)
	}
	if e.Caption != nil {
		x.String(*e.Caption)
	}
	if e.Entities != nil {
		EncodeBuf_GenericVector(x, e.Entities)
	}
	if e.PrivacyRules != nil {
		EncodeBuf_GenericVector(x, e.PrivacyRules)
	}
	return x.buf
}

func (e TL_stories_deleteStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_deleteStories)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_stories_togglePinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_togglePinned)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	x.Bool(e.Pinned)
	return x.buf
}

func (e TL_stories_getAllStories) encode() []byte {
	var flags int32
	if e.Next {
		flags |= (1 << 1)
	}
	if e.Hidden {
		flags |= (1 << 2)
	}
	if e.State != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getAllStories)
	x.Int(flags)
	if e.State != nil {
		x.String(*e.State)
	}
	return x.buf
}

func (e TL_stories_getPinnedStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getPinnedStories)
	x.Object(e.Peer)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stories_getStoriesArchive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getStoriesArchive)
	x.Object(e.Peer)
	x.Int(e.OffsetID)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stories_getStoriesByID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getStoriesByID)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_stories_toggleAllStoriesHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_toggleAllStoriesHidden)
	x.Bool(e.Hidden)
	return x.buf
}

func (e TL_stories_readStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_readStories)
	x.Object(e.Peer)
	x.Int(e.MaxID)
	return x.buf
}

func (e TL_stories_incrementStoryViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_incrementStoryViews)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_stories_getStoryViewsList) encode() []byte {
	var flags int32
	if e.JustContacts {
		flags |= (1 << 0)
	}
	if e.ReactionsFirst {
		flags |= (1 << 2)
	}
	if e.ForwardsFirst {
		flags |= (1 << 3)
	}
	if e.Q != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getStoryViewsList)
	x.Int(flags)
	x.Object(e.Peer)
	if e.Q != nil {
		x.String(*e.Q)
	}
	x.Int(e.ID)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stories_getStoriesViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getStoriesViews)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_stories_exportStoryLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_exportStoryLink)
	x.Object(e.Peer)
	x.Int(e.ID)
	return x.buf
}

func (e TL_stories_report) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_report)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	x.Object(e.Reason)
	x.String(e.Message)
	return x.buf
}

func (e TL_stories_activateStealthMode) encode() []byte {
	var flags int32
	if e.Past {
		flags |= (1 << 0)
	}
	if e.Future {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_activateStealthMode)
	x.Int(flags)
	return x.buf
}

func (e TL_stories_sendReaction) encode() []byte {
	var flags int32
	if e.AddToRecent {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_sendReaction)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.StoryID)
	x.Object(e.Reaction)
	return x.buf
}

func (e TL_stories_getPeerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getPeerStories)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_stories_getAllReadPeerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getAllReadPeerStories)
	return x.buf
}

func (e TL_stories_getPeerMaxIDs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getPeerMaxIDs)
	EncodeBuf_GenericVector(x, e.ID)
	return x.buf
}

func (e TL_stories_getChatsToSend) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getChatsToSend)
	return x.buf
}

func (e TL_stories_togglePeerStoriesHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_togglePeerStoriesHidden)
	x.Object(e.Peer)
	x.Bool(e.Hidden)
	return x.buf
}

func (e TL_stories_getStoryReactionsList) encode() []byte {
	var flags int32
	if e.ForwardsFirst {
		flags |= (1 << 2)
	}
	if e.Reaction != nil {
		flags |= (1 << 0)
	}
	if e.Offset != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_getStoryReactionsList)
	x.Int(flags)
	x.Object(e.Peer)
	x.Int(e.ID)
	if e.Reaction != nil {
		x.Object(e.Reaction)
	}
	if e.Offset != nil {
		x.String(*e.Offset)
	}
	x.Int(e.Limit)
	return x.buf
}

func (e TL_stories_togglePinnedToTop) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_togglePinnedToTop)
	x.Object(e.Peer)
	x.VectorInt(e.ID)
	return x.buf
}

func (e TL_stories_searchPosts) encode() []byte {
	var flags int32
	if e.Hashtag != nil {
		flags |= (1 << 0)
	}
	if e.Area != nil {
		flags |= (1 << 1)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_stories_searchPosts)
	x.Int(flags)
	if e.Hashtag != nil {
		x.String(*e.Hashtag)
	}
	if e.Area != nil {
		x.Object(e.Area)
	}
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_premium_getBoostsList) encode() []byte {
	var flags int32
	if e.Gifts {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_getBoostsList)
	x.Int(flags)
	x.Object(e.Peer)
	x.String(e.Offset)
	x.Int(e.Limit)
	return x.buf
}

func (e TL_premium_getMyBoosts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_getMyBoosts)
	return x.buf
}

func (e TL_premium_applyBoost) encode() []byte {
	var flags int32
	if e.Slots != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_applyBoost)
	x.Int(flags)
	if e.Slots != nil {
		x.VectorInt(e.Slots)
	}
	x.Object(e.Peer)
	return x.buf
}

func (e TL_premium_getBoostsStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_getBoostsStatus)
	x.Object(e.Peer)
	return x.buf
}

func (e TL_premium_getUserBoosts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_premium_getUserBoosts)
	x.Object(e.Peer)
	x.Object(e.UserID)
	return x.buf
}

func (e TL_smsjobs_isEligibleToJoin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsjobs_isEligibleToJoin)
	return x.buf
}

func (e TL_smsjobs_join) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsjobs_join)
	return x.buf
}

func (e TL_smsjobs_leave) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsjobs_leave)
	return x.buf
}

func (e TL_smsjobs_updateSettings) encode() []byte {
	var flags int32
	if e.AllowInternational {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsjobs_updateSettings)
	x.Int(flags)
	return x.buf
}

func (e TL_smsjobs_getStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsjobs_getStatus)
	return x.buf
}

func (e TL_smsjobs_getSMSJob) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsjobs_getSMSJob)
	x.String(e.JobID)
	return x.buf
}

func (e TL_smsjobs_finishJob) encode() []byte {
	var flags int32
	if e.Error != nil {
		flags |= (1 << 0)
	}
	x := NewEncodeBuf(512)
	x.UInt(CRC_smsjobs_finishJob)
	x.Int(flags)
	x.String(e.JobID)
	if e.Error != nil {
		x.String(*e.Error)
	}
	return x.buf
}

func (e TL_fragment_getCollectibleInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(CRC_fragment_getCollectibleInfo)
	x.Object(e.Collectible)
	return x.buf
}

func (e TL_reqPQ) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_reqPQMulti) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_reqDHParams) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_setClientDHParams) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_destroyAuthKey) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_rpcDropAnswer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_getFutureSalts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_ping) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_pingDelayDisconnect) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_destroySession) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_invokeAfterMsg) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_invokeAfterMsgs) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_initConnection) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_invokeWithLayer) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_invokeWithoutUpdates) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_invokeWithMessagesRange) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_invokeWithTakeout) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_invokeWithBusinessConnection) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_invokeWithGooglePlayIntegrity) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_invokeWithApnsSecret) decodeResponse(dbuf *DecodeBuf) TL {
	return e.Query.decodeResponse(dbuf)
}

func (e TL_auth_sendCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_signUp) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_signIn) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_logOut) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_resetAuthorizations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_exportAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_importAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_bindTempAuthKey) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_importBotAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_checkPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_requestPasswordRecovery) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_recoverPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_resendCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_cancelCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_dropTempAuthKeys) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_exportLoginToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_importLoginToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_acceptLoginToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_checkRecoveryPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_importWebTokenAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_requestFirebaseSMS) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_resetLoginEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_auth_reportMissingCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_registerDevice) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_unregisterDevice) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateNotifySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getNotifySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetNotifySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateProfile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getWallPapers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_reportPeer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_checkUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getPrivacy) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setPrivacy) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_deleteAccount) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAccountTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setAccountTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_sendChangePhoneCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_changePhone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateDeviceLocked) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAuthorizations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getPasswordSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updatePasswordSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_sendConfirmPhoneCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_confirmPhone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getTmpPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getWebAuthorizations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetWebAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetWebAuthorizations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAllSecureValues) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_account_getSecureValue) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_account_saveSecureValue) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_deleteSecureValue) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAuthorizationForm) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_acceptAuthorization) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_sendVerifyPhoneCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_verifyPhone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_sendVerifyEmailCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_verifyEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_initTakeoutSession) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_finishTakeoutSession) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_confirmPasswordEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resendPasswordEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_cancelPasswordEmail) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getContactSignUpNotification) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setContactSignUpNotification) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getNotifyExceptions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_uploadWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_installWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetWallPapers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAutoDownloadSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveAutoDownloadSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_uploadTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_createTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_installTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getThemes) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setContentSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getContentSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getMultiWallPapers) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_account_getGlobalPrivacySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setGlobalPrivacySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_reportProfilePhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resetPassword) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_declinePasswordReset) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getChatThemes) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setAuthorizationTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_changeAuthorizationSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getSavedRingtones) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveRingtone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_uploadRingtone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateEmojiStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getDefaultEmojiStatuses) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getRecentEmojiStatuses) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_clearRecentEmojiStatuses) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_reorderUsernames) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_toggleUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getDefaultProfilePhotoEmojis) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getDefaultGroupPhotoEmojis) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getAutoSaveSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_saveAutoSaveSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_deleteAutoSaveExceptions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_invalidateSignInCodes) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateColor) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getDefaultBackgroundEmojis) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getChannelDefaultEmojiStatuses) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getChannelRestrictedStatusEmojis) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateBusinessWorkHours) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateBusinessLocation) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateBusinessGreetingMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateBusinessAwayMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateConnectedBot) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getConnectedBots) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getBotBusinessConnection) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateBusinessIntro) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_toggleConnectedBotPaused) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_disablePeerConnectedBot) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updateBirthday) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_createBusinessChatLink) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_editBusinessChatLink) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_deleteBusinessChatLink) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getBusinessChatLinks) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_resolveBusinessChatLink) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_updatePersonalChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_toggleSponsoredMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_getReactionsNotifySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_account_setReactionsNotifySettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_users_getUsers) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_users_getFullUser) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_users_setSecureValueErrors) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_users_getIsPremiumRequiredToContact) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_contacts_getContactIDs) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_contacts_getStatuses) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_contacts_getContacts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_importContacts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_deleteContacts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_deleteByPhones) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_block) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_unblock) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getBlocked) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_search) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_resolveUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getTopPeers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_resetTopPeerRating) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_resetSaved) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getSaved) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_contacts_toggleTopPeers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_addContact) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_acceptContact) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getLocated) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_blockFromReplies) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_resolvePhone) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_exportContactToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_importContactToken) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_editCloseFriends) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_setBlocked) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_contacts_getBirthdays) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_search) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_receivedMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_setTyping) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_forwardMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reportSpam) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPeerSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_report) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getChats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getFullChat) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatTitle) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatPhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_addChatUser) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteChatUser) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_createChat) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDHConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_requestEncryption) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_acceptEncryption) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_discardEncryption) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setEncryptedTyping) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readEncryptedHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendEncrypted) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendEncryptedFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendEncryptedService) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_receivedQueue) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorLong(dbuf.VectorLong())
}

func (e TL_messages_reportEncryptedSpam) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readMessageContents) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAllStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getWebPagePreview) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_exportChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_checkChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_importChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_installStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_uninstallStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_startBot) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessagesViews) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatAdmin) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_migrateChat) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_searchGlobal) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reorderStickerSets) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDocumentByHash) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSavedGIFs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_saveGIF) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getInlineBotResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setInlineBotResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendInlineBotResult) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessageEditData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editInlineBotMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getBotCallbackAnswer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setBotCallbackAnswer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPeerDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_saveDraft) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAllDrafts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getFeaturedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readFeaturedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getRecentStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_saveRecentSticker) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_clearRecentStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getArchivedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMaskStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAttachedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_setGameScore) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setInlineGameScore) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getGameHighScores) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getInlineGameHighScores) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getCommonChats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getWebPage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleDialogPIN) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reorderPinnedDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPinnedDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setBotShippingResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setBotPrecheckoutResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_uploadMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendScreenshotNotification) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getFavedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_faveSticker) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getUnreadMentions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readMentions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getRecentLocations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendMultiMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_uploadEncryptedFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_searchStickerSets) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSplitRanges) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_markDialogUnread) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDialogUnreadMarks) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_clearAllDrafts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_updatePinnedMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendVote) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPollResults) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getOnlines) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatAbout) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editChatDefaultBannedRights) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiKeywords) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiKeywordsDifference) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiKeywordsLanguages) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_getEmojiURL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSearchCounters) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_requestURLAuth) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_acceptURLAuth) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_hidePeerSettingsBar) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getScheduledHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getScheduledMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendScheduledMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteScheduledMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPollVotes) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleStickerSets) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDialogFilters) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSuggestedDialogFilters) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_updateDialogFilter) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_updateDialogFiltersOrder) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getOldFeaturedStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getReplies) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDiscussionMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readDiscussion) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_unpinAllMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteChat) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deletePhoneCallHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_checkHistoryImport) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_initHistoryImport) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_uploadImportedMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_startHistoryImport) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getExportedChatInvites) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getExportedChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editExportedChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteRevokedExportedChatInvites) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteExportedChatInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAdminsWithInvites) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getChatInviteImporters) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setHistoryTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_checkHistoryImportPeer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setChatTheme) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessageReadParticipants) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_getSearchResultsCalendar) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSearchResultsPositions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_hideChatJoinRequest) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_hideAllChatJoinRequests) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleNoForwards) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_saveDefaultSendAs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendReaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessagesReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMessageReactionsList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setChatAvailableReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAvailableReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setDefaultReaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_translateText) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getUnreadReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_readReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_searchSentMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAttachMenuBots) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAttachMenuBot) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleBotInAttachMenu) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_requestWebView) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_prolongWebView) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_requestSimpleWebView) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendWebViewResultMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendWebViewData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_transcribeAudio) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_rateTranscribedAudio) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getCustomEmojiDocuments) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_getEmojiStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getFeaturedEmojiStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reportReaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getTopReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getRecentReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_clearRecentReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getExtendedMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setDefaultHistoryTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDefaultHistoryTTL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendBotRequestedPeer) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiGroups) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiStatusGroups) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiProfilePhotoGroups) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_searchCustomEmoji) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_togglePeerTranslations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getBotApp) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_requestAppWebView) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_setChatWallPaper) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_searchEmojiStickerSets) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSavedDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSavedHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteSavedHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPinnedSavedDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleSavedDialogPIN) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reorderPinnedSavedDialogs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getSavedReactionTags) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_updateSavedReactionTag) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getDefaultTagReactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getOutboxReadDate) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getQuickReplies) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_reorderQuickReplies) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_checkQuickReplyShortcut) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editQuickReplyShortcut) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteQuickReplyShortcut) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getQuickReplyMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendQuickReplyMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteQuickReplyMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_toggleDialogFilterTags) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getMyStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getEmojiStickerGroups) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getAvailableEffects) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_editFactCheck) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_deleteFactCheck) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getFactCheck) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_messages_requestMainWebView) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_sendPaidReaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_togglePaidReactionPrivacy) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_messages_getPaidReactionPrivacy) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_updates_getState) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_updates_getDifference) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_updates_getChannelDifference) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_photos_updateProfilePhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_photos_uploadProfilePhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_photos_deletePhotos) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorLong(dbuf.VectorLong())
}

func (e TL_photos_getUserPhotos) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_photos_uploadContactProfilePhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_saveFilePart) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_getFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_saveBigFilePart) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_getWebFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_getCDNFile) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_upload_reuploadCDNFile) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_upload_getCDNFileHashes) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_upload_getFileHashes) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_help_getConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getNearestDC) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getAppUpdate) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getInviteText) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getSupport) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_setBotUpdatesStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getCDNConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getRecentMeURLs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getTermsOfServiceUpdate) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_acceptTermsOfService) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getDeepLinkInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getAppConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_saveAppLog) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getPassportConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getSupportName) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getUserInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_editUserInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getPromoData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_hidePromoData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_dismissSuggestion) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getCountriesList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getPremiumPromo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getPeerColors) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getPeerProfileColors) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_help_getTimezonesList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_readHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_reportSpam) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getParticipants) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getParticipant) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getFullChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_createChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editAdmin) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editTitle) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editPhoto) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_checkUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_updateUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_joinChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_leaveChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_inviteToChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteChannel) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_exportMessageLink) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleSignatures) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getAdminedPublicChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editBanned) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getAdminLog) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_setStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_readMessageContents) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_togglePreHistoryHidden) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getLeftChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getGroupsForDiscussion) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_setDiscussionGroup) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editCreator) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editLocation) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleSlowMode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getInactiveChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_convertToGigagroup) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_viewSponsoredMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getSponsoredMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getSendAs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteParticipantHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleJoinToSend) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleJoinRequest) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_reorderUsernames) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deactivateAllUsernames) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleForum) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_createForumTopic) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getForumTopics) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getForumTopicsByID) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_editForumTopic) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_updatePinnedForumTopic) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_deleteTopicHistory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_reorderPinnedForumTopics) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleAntiSpam) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_reportAntiSpamFalsePositive) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleParticipantsHidden) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_clickSponsoredMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_updateColor) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_toggleViewForumAsMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_getChannelRecommendations) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_updateEmojiStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_setBoostsToUnblockRestrictions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_setEmojiStickers) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_reportSponsoredMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_restrictSponsoredMessages) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_channels_searchPosts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_sendCustomRequest) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_answerWebhookJSONQuery) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_setBotCommands) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_resetBotCommands) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_getBotCommands) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_bots_setBotMenuButton) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_getBotMenuButton) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_setBotBroadcastDefaultAdminRights) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_setBotGroupDefaultAdminRights) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_setBotInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_getBotInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_reorderUsernames) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_toggleUsername) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_canSendMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_allowSendMessage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_invokeWebViewCustomMethod) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_getPopularAppBots) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_addPreviewMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_editPreviewMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_deletePreviewMedia) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_reorderPreviewMedias) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_getPreviewInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_bots_getPreviewMedias) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_payments_getPaymentForm) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getPaymentReceipt) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_validateRequestedInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_sendPaymentForm) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getSavedInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_clearSavedInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getBankCardData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_exportInvoice) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_assignAppStoreTransaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_assignPlayMarketTransaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_canPurchasePremium) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getPremiumGiftCodeOptions) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_payments_checkGiftCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_applyGiftCode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getGiveawayInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_launchPrepaidGiveaway) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getStarsTopupOptions) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_payments_getStarsStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getStarsTransactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_sendStarsForm) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_refundStarsCharge) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getStarsRevenueStats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getStarsRevenueWithdrawalURL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getStarsRevenueAdsAccountURL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getStarsTransactionsByID) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getStarsGiftOptions) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_payments_getStarsSubscriptions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_changeStarsSubscription) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_fulfillStarsSubscription) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_payments_getStarsGiveawayOptions) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_stickers_createStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_removeStickerFromSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_changeStickerPosition) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_addStickerToSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_setStickerSetThumb) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_checkShortName) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_suggestShortName) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_changeSticker) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_renameStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_deleteStickerSet) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stickers_replaceSticker) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getCallConfig) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_requestCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_acceptCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_confirmCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_receivedCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_discardCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_setCallRating) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_saveCallDebug) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_sendSignalingData) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_createGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_joinGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_leaveGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_inviteToGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_discardGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_toggleGroupCallSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupParticipants) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_checkGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_phone_toggleGroupCallRecord) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_editGroupCallParticipant) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_editGroupCallTitle) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupCallJoinAs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_exportGroupCallInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_toggleGroupCallStartSubscription) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_startScheduledGroupCall) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_saveDefaultGroupCallJoinAs) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_joinGroupCallPresentation) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_leaveGroupCallPresentation) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupCallStreamChannels) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_getGroupCallStreamRTMPURL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_phone_saveCallLog) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_langpack_getLangPack) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_langpack_getStrings) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_langpack_getDifference) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_langpack_getLanguages) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_langpack_getLanguage) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_folders_editPeerFolders) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getBroadcastStats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_loadAsyncGraph) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getMegagroupStats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getMessagePublicForwards) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getMessageStats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getStoryStats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getStoryPublicForwards) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getBroadcastRevenueStats) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getBroadcastRevenueWithdrawalURL) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stats_getBroadcastRevenueTransactions) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_exportChatlistInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_deleteExportedInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_editExportedInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_getExportedInvites) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_checkChatlistInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_joinChatlistInvite) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_getChatlistUpdates) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_joinChatlistUpdates) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_hideChatlistUpdates) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_chatlists_getLeaveChatlistSuggestions) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorObject(dbuf.Vector())
}

func (e TL_chatlists_leaveChatlist) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_canSendStory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_sendStory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_editStory) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_deleteStories) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_stories_togglePinned) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_stories_getAllStories) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getPinnedStories) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getStoriesArchive) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getStoriesByID) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_toggleAllStoriesHidden) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_readStories) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_stories_incrementStoryViews) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getStoryViewsList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getStoriesViews) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_exportStoryLink) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_report) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_activateStealthMode) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_sendReaction) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getPeerStories) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getAllReadPeerStories) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getPeerMaxIDs) decodeResponse(dbuf *DecodeBuf) TL {
	return VectorInt(dbuf.VectorInt())
}

func (e TL_stories_getChatsToSend) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_togglePeerStoriesHidden) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_getStoryReactionsList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_togglePinnedToTop) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_stories_searchPosts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_premium_getBoostsList) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_premium_getMyBoosts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_premium_applyBoost) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_premium_getBoostsStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_premium_getUserBoosts) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_smsjobs_isEligibleToJoin) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_smsjobs_join) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_smsjobs_leave) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_smsjobs_updateSettings) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_smsjobs_getStatus) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_smsjobs_getSMSJob) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_smsjobs_finishJob) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func (e TL_fragment_getCollectibleInfo) decodeResponse(dbuf *DecodeBuf) TL {
	return dbuf.Object()
}

func decode_TL_resPQ(m *DecodeBuf) TL {
	m.constructorAssert(CRC_resPQ)
	return decode_body_TL_resPQ(m)
}
func decode_body_TL_resPQ(m *DecodeBuf) TL {
	tl := TL_resPQ{}
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.PQ = m.String()
	tl.ServerPublicKeyFingerprints = m.VectorLong()
	return tl
}

func decode_TL_pqInnerData(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pqInnerData)
	return decode_body_TL_pqInnerData(m)
}
func decode_body_TL_pqInnerData(m *DecodeBuf) TL {
	tl := TL_pqInnerData{}
	tl.PQ = m.String()
	tl.P = m.String()
	tl.Q = m.String()
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.NewNonce = m.Bytes32()
	return tl
}

func decode_TL_pqInnerDataDC(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pqInnerDataDC)
	return decode_body_TL_pqInnerDataDC(m)
}
func decode_body_TL_pqInnerDataDC(m *DecodeBuf) TL {
	tl := TL_pqInnerDataDC{}
	tl.PQ = m.String()
	tl.P = m.String()
	tl.Q = m.String()
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.NewNonce = m.Bytes32()
	tl.DC = m.Int()
	return tl
}

func decode_TL_pqInnerDataTemp(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pqInnerDataTemp)
	return decode_body_TL_pqInnerDataTemp(m)
}
func decode_body_TL_pqInnerDataTemp(m *DecodeBuf) TL {
	tl := TL_pqInnerDataTemp{}
	tl.PQ = m.String()
	tl.P = m.String()
	tl.Q = m.String()
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.NewNonce = m.Bytes32()
	tl.ExpiresIn = m.Int()
	return tl
}

func decode_TL_pqInnerDataTempDC(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pqInnerDataTempDC)
	return decode_body_TL_pqInnerDataTempDC(m)
}
func decode_body_TL_pqInnerDataTempDC(m *DecodeBuf) TL {
	tl := TL_pqInnerDataTempDC{}
	tl.PQ = m.String()
	tl.P = m.String()
	tl.Q = m.String()
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.NewNonce = m.Bytes32()
	tl.DC = m.Int()
	tl.ExpiresIn = m.Int()
	return tl
}

func decode_TL_bindAuthKeyInner(m *DecodeBuf) TL {
	m.constructorAssert(CRC_bindAuthKeyInner)
	return decode_body_TL_bindAuthKeyInner(m)
}
func decode_body_TL_bindAuthKeyInner(m *DecodeBuf) TL {
	tl := TL_bindAuthKeyInner{}
	tl.Nonce = m.Long()
	tl.TempAuthKeyID = m.Long()
	tl.PermAuthKeyID = m.Long()
	tl.TempSessionID = m.Long()
	tl.ExpiresAt = m.Int()
	return tl
}

func decode_TL_serverDHParamsFail(m *DecodeBuf) TL {
	m.constructorAssert(CRC_serverDHParamsFail)
	return decode_body_TL_serverDHParamsFail(m)
}
func decode_body_TL_serverDHParamsFail(m *DecodeBuf) TL {
	tl := TL_serverDHParamsFail{}
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.NewNonceHash = m.Bytes16()
	return tl
}

func decode_TL_serverDHParamsOK(m *DecodeBuf) TL {
	m.constructorAssert(CRC_serverDHParamsOK)
	return decode_body_TL_serverDHParamsOK(m)
}
func decode_body_TL_serverDHParamsOK(m *DecodeBuf) TL {
	tl := TL_serverDHParamsOK{}
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.EncryptedAnswer = m.String()
	return tl
}

func decode_TL_serverDHInnerData(m *DecodeBuf) TL {
	m.constructorAssert(CRC_serverDHInnerData)
	return decode_body_TL_serverDHInnerData(m)
}
func decode_body_TL_serverDHInnerData(m *DecodeBuf) TL {
	tl := TL_serverDHInnerData{}
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.G = m.Int()
	tl.DHPrime = m.String()
	tl.GA = m.String()
	tl.ServerTime = m.Int()
	return tl
}

func decode_TL_clientDHInnerData(m *DecodeBuf) TL {
	m.constructorAssert(CRC_clientDHInnerData)
	return decode_body_TL_clientDHInnerData(m)
}
func decode_body_TL_clientDHInnerData(m *DecodeBuf) TL {
	tl := TL_clientDHInnerData{}
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.RetryID = m.Long()
	tl.GB = m.String()
	return tl
}

func decode_TL_dhGenOK(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dhGenOK)
	return decode_body_TL_dhGenOK(m)
}
func decode_body_TL_dhGenOK(m *DecodeBuf) TL {
	tl := TL_dhGenOK{}
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.NewNonceHash1 = m.Bytes16()
	return tl
}

func decode_TL_dhGenRetry(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dhGenRetry)
	return decode_body_TL_dhGenRetry(m)
}
func decode_body_TL_dhGenRetry(m *DecodeBuf) TL {
	tl := TL_dhGenRetry{}
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.NewNonceHash2 = m.Bytes16()
	return tl
}

func decode_TL_dhGenFail(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dhGenFail)
	return decode_body_TL_dhGenFail(m)
}
func decode_body_TL_dhGenFail(m *DecodeBuf) TL {
	tl := TL_dhGenFail{}
	tl.Nonce = m.Bytes16()
	tl.ServerNonce = m.Bytes16()
	tl.NewNonceHash3 = m.Bytes16()
	return tl
}

func decode_TL_destroyAuthKeyOK(m *DecodeBuf) TL {
	m.constructorAssert(CRC_destroyAuthKeyOK)
	return decode_body_TL_destroyAuthKeyOK(m)
}
func decode_body_TL_destroyAuthKeyOK(_ *DecodeBuf) TL {
	tl := TL_destroyAuthKeyOK{}
	return tl
}

func decode_TL_destroyAuthKeyNone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_destroyAuthKeyNone)
	return decode_body_TL_destroyAuthKeyNone(m)
}
func decode_body_TL_destroyAuthKeyNone(_ *DecodeBuf) TL {
	tl := TL_destroyAuthKeyNone{}
	return tl
}

func decode_TL_destroyAuthKeyFail(m *DecodeBuf) TL {
	m.constructorAssert(CRC_destroyAuthKeyFail)
	return decode_body_TL_destroyAuthKeyFail(m)
}
func decode_body_TL_destroyAuthKeyFail(_ *DecodeBuf) TL {
	tl := TL_destroyAuthKeyFail{}
	return tl
}

func decode_TL_msgsACK(m *DecodeBuf) TL {
	m.constructorAssert(CRC_msgsACK)
	return decode_body_TL_msgsACK(m)
}
func decode_body_TL_msgsACK(m *DecodeBuf) TL {
	tl := TL_msgsACK{}
	tl.MsgIDs = m.VectorLong()
	return tl
}

func decode_TL_badMsgNotification(m *DecodeBuf) TL {
	m.constructorAssert(CRC_badMsgNotification)
	return decode_body_TL_badMsgNotification(m)
}
func decode_body_TL_badMsgNotification(m *DecodeBuf) TL {
	tl := TL_badMsgNotification{}
	tl.BadMsgID = m.Long()
	tl.BadMsgSeqno = m.Int()
	tl.ErrorCode = m.Int()
	return tl
}

func decode_TL_badServerSalt(m *DecodeBuf) TL {
	m.constructorAssert(CRC_badServerSalt)
	return decode_body_TL_badServerSalt(m)
}
func decode_body_TL_badServerSalt(m *DecodeBuf) TL {
	tl := TL_badServerSalt{}
	tl.BadMsgID = m.Long()
	tl.BadMsgSeqno = m.Int()
	tl.ErrorCode = m.Int()
	tl.NewServerSalt = m.Long()
	return tl
}

func decode_TL_msgsStateReq(m *DecodeBuf) TL {
	m.constructorAssert(CRC_msgsStateReq)
	return decode_body_TL_msgsStateReq(m)
}
func decode_body_TL_msgsStateReq(m *DecodeBuf) TL {
	tl := TL_msgsStateReq{}
	tl.MsgIDs = m.VectorLong()
	return tl
}

func decode_TL_msgsStateInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_msgsStateInfo)
	return decode_body_TL_msgsStateInfo(m)
}
func decode_body_TL_msgsStateInfo(m *DecodeBuf) TL {
	tl := TL_msgsStateInfo{}
	tl.ReqMsgID = m.Long()
	tl.Info = m.String()
	return tl
}

func decode_TL_msgsAllInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_msgsAllInfo)
	return decode_body_TL_msgsAllInfo(m)
}
func decode_body_TL_msgsAllInfo(m *DecodeBuf) TL {
	tl := TL_msgsAllInfo{}
	tl.MsgIDs = m.VectorLong()
	tl.Info = m.String()
	return tl
}

func decode_TL_msgDetailedInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_msgDetailedInfo)
	return decode_body_TL_msgDetailedInfo(m)
}
func decode_body_TL_msgDetailedInfo(m *DecodeBuf) TL {
	tl := TL_msgDetailedInfo{}
	tl.MsgID = m.Long()
	tl.AnswerMsgID = m.Long()
	tl.Bytes = m.Int()
	tl.Status = m.Int()
	return tl
}

func decode_TL_msgNewDetailedInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_msgNewDetailedInfo)
	return decode_body_TL_msgNewDetailedInfo(m)
}
func decode_body_TL_msgNewDetailedInfo(m *DecodeBuf) TL {
	tl := TL_msgNewDetailedInfo{}
	tl.AnswerMsgID = m.Long()
	tl.Bytes = m.Int()
	tl.Status = m.Int()
	return tl
}

func decode_TL_msgResendReq(m *DecodeBuf) TL {
	m.constructorAssert(CRC_msgResendReq)
	return decode_body_TL_msgResendReq(m)
}
func decode_body_TL_msgResendReq(m *DecodeBuf) TL {
	tl := TL_msgResendReq{}
	tl.MsgIDs = m.VectorLong()
	return tl
}

func decode_TL_rpcError(m *DecodeBuf) TL {
	m.constructorAssert(CRC_rpcError)
	return decode_body_TL_rpcError(m)
}
func decode_body_TL_rpcError(m *DecodeBuf) TL {
	tl := TL_rpcError{}
	tl.ErrorCode = m.Int()
	tl.ErrorMessage = m.String()
	return tl
}

func decode_TL_rpcAnswerUnknown(m *DecodeBuf) TL {
	m.constructorAssert(CRC_rpcAnswerUnknown)
	return decode_body_TL_rpcAnswerUnknown(m)
}
func decode_body_TL_rpcAnswerUnknown(_ *DecodeBuf) TL {
	tl := TL_rpcAnswerUnknown{}
	return tl
}

func decode_TL_rpcAnswerDroppedRunning(m *DecodeBuf) TL {
	m.constructorAssert(CRC_rpcAnswerDroppedRunning)
	return decode_body_TL_rpcAnswerDroppedRunning(m)
}
func decode_body_TL_rpcAnswerDroppedRunning(_ *DecodeBuf) TL {
	tl := TL_rpcAnswerDroppedRunning{}
	return tl
}

func decode_TL_rpcAnswerDropped(m *DecodeBuf) TL {
	m.constructorAssert(CRC_rpcAnswerDropped)
	return decode_body_TL_rpcAnswerDropped(m)
}
func decode_body_TL_rpcAnswerDropped(m *DecodeBuf) TL {
	tl := TL_rpcAnswerDropped{}
	tl.MsgID = m.Long()
	tl.SeqNo = m.Int()
	tl.Bytes = m.Int()
	return tl
}

func decode_TL_futureSalt(m *DecodeBuf) TL {
	m.constructorAssert(CRC_futureSalt)
	return decode_body_TL_futureSalt(m)
}
func decode_body_TL_futureSalt(m *DecodeBuf) TL {
	tl := TL_futureSalt{}
	tl.ValidSince = m.Int()
	tl.ValidUntil = m.Int()
	tl.Salt = m.Long()
	return tl
}

func decode_TL_futureSalts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_futureSalts)
	return decode_body_TL_futureSalts(m)
}
func decode_body_TL_futureSalts(m *DecodeBuf) TL {
	tl := TL_futureSalts{}
	tl.ReqMsgID = m.Long()
	tl.Now = m.Int()
	tl.Salts = m.Vector()
	return tl
}

func decode_TL_pong(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pong)
	return decode_body_TL_pong(m)
}
func decode_body_TL_pong(m *DecodeBuf) TL {
	tl := TL_pong{}
	tl.MsgID = m.Long()
	tl.PingID = m.Long()
	return tl
}

func decode_TL_destroySessionOK(m *DecodeBuf) TL {
	m.constructorAssert(CRC_destroySessionOK)
	return decode_body_TL_destroySessionOK(m)
}
func decode_body_TL_destroySessionOK(m *DecodeBuf) TL {
	tl := TL_destroySessionOK{}
	tl.SessionID = m.Long()
	return tl
}

func decode_TL_destroySessionNone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_destroySessionNone)
	return decode_body_TL_destroySessionNone(m)
}
func decode_body_TL_destroySessionNone(m *DecodeBuf) TL {
	tl := TL_destroySessionNone{}
	tl.SessionID = m.Long()
	return tl
}

func decode_TL_newSessionCreated(m *DecodeBuf) TL {
	m.constructorAssert(CRC_newSessionCreated)
	return decode_body_TL_newSessionCreated(m)
}
func decode_body_TL_newSessionCreated(m *DecodeBuf) TL {
	tl := TL_newSessionCreated{}
	tl.FirstMsgID = m.Long()
	tl.UniqueID = m.Long()
	tl.ServerSalt = m.Long()
	return tl
}

func decode_TL_httpWait(m *DecodeBuf) TL {
	m.constructorAssert(CRC_httpWait)
	return decode_body_TL_httpWait(m)
}
func decode_body_TL_httpWait(m *DecodeBuf) TL {
	tl := TL_httpWait{}
	tl.MaxDelay = m.Int()
	tl.WaitAfter = m.Int()
	tl.MaxWait = m.Int()
	return tl
}

func decode_TL_ipPort(m *DecodeBuf) TL {
	m.constructorAssert(CRC_ipPort)
	return decode_body_TL_ipPort(m)
}
func decode_body_TL_ipPort(m *DecodeBuf) TL {
	tl := TL_ipPort{}
	tl.IPv4 = m.Int()
	tl.Port = m.Int()
	return tl
}

func decode_TL_ipPortSecret(m *DecodeBuf) TL {
	m.constructorAssert(CRC_ipPortSecret)
	return decode_body_TL_ipPortSecret(m)
}
func decode_body_TL_ipPortSecret(m *DecodeBuf) TL {
	tl := TL_ipPortSecret{}
	tl.IPv4 = m.Int()
	tl.Port = m.Int()
	tl.Secret = m.StringBytes()
	return tl
}

func decode_TL_accessPointRule(m *DecodeBuf) TL {
	m.constructorAssert(CRC_accessPointRule)
	return decode_body_TL_accessPointRule(m)
}
func decode_body_TL_accessPointRule(m *DecodeBuf) TL {
	tl := TL_accessPointRule{}
	tl.PhonePrefixRules = m.String()
	tl.DCID = m.Int()
	tl.IPs = m.Vector()
	return tl
}

func decode_TL_help_configSimple(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_configSimple)
	return decode_body_TL_help_configSimple(m)
}
func decode_body_TL_help_configSimple(m *DecodeBuf) TL {
	tl := TL_help_configSimple{}
	tl.Date = m.Int()
	tl.Expires = m.Int()
	tl.Rules = DecodeBuf_GenericVector[TL_accessPointRule](m)
	return tl
}

func decode_TL_tlsClientHello(m *DecodeBuf) TL {
	m.constructorAssert(CRC_tlsClientHello)
	return decode_body_TL_tlsClientHello(m)
}
func decode_body_TL_tlsClientHello(m *DecodeBuf) TL {
	tl := TL_tlsClientHello{}
	tl.Blocks = m.Vector()
	return tl
}

func decode_TL_tlsBlockString(m *DecodeBuf) TL {
	m.constructorAssert(CRC_tlsBlockString)
	return decode_body_TL_tlsBlockString(m)
}
func decode_body_TL_tlsBlockString(m *DecodeBuf) TL {
	tl := TL_tlsBlockString{}
	tl.Data = m.String()
	return tl
}

func decode_TL_tlsBlockRandom(m *DecodeBuf) TL {
	m.constructorAssert(CRC_tlsBlockRandom)
	return decode_body_TL_tlsBlockRandom(m)
}
func decode_body_TL_tlsBlockRandom(m *DecodeBuf) TL {
	tl := TL_tlsBlockRandom{}
	tl.Length = m.Int()
	return tl
}

func decode_TL_tlsBlockZero(m *DecodeBuf) TL {
	m.constructorAssert(CRC_tlsBlockZero)
	return decode_body_TL_tlsBlockZero(m)
}
func decode_body_TL_tlsBlockZero(m *DecodeBuf) TL {
	tl := TL_tlsBlockZero{}
	tl.Length = m.Int()
	return tl
}

func decode_TL_tlsBlockDomain(m *DecodeBuf) TL {
	m.constructorAssert(CRC_tlsBlockDomain)
	return decode_body_TL_tlsBlockDomain(m)
}
func decode_body_TL_tlsBlockDomain(_ *DecodeBuf) TL {
	tl := TL_tlsBlockDomain{}
	return tl
}

func decode_TL_tlsBlockGrease(m *DecodeBuf) TL {
	m.constructorAssert(CRC_tlsBlockGrease)
	return decode_body_TL_tlsBlockGrease(m)
}
func decode_body_TL_tlsBlockGrease(m *DecodeBuf) TL {
	tl := TL_tlsBlockGrease{}
	tl.Seed = m.Int()
	return tl
}

func decode_TL_tlsBlockPublicKey(m *DecodeBuf) TL {
	m.constructorAssert(CRC_tlsBlockPublicKey)
	return decode_body_TL_tlsBlockPublicKey(m)
}
func decode_body_TL_tlsBlockPublicKey(_ *DecodeBuf) TL {
	tl := TL_tlsBlockPublicKey{}
	return tl
}

func decode_TL_tlsBlockScope(m *DecodeBuf) TL {
	m.constructorAssert(CRC_tlsBlockScope)
	return decode_body_TL_tlsBlockScope(m)
}
func decode_body_TL_tlsBlockScope(m *DecodeBuf) TL {
	tl := TL_tlsBlockScope{}
	tl.Entries = m.Vector()
	return tl
}

func decode_TL_tlsBlockPermutation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_tlsBlockPermutation)
	return decode_body_TL_tlsBlockPermutation(m)
}
func decode_body_TL_tlsBlockPermutation(m *DecodeBuf) TL {
	tl := TL_tlsBlockPermutation{}
	tl.Entries = m.Vector2d()
	return tl
}

func decode_TL_boolFalse(m *DecodeBuf) TL {
	m.constructorAssert(CRC_boolFalse)
	return decode_body_TL_boolFalse(m)
}
func decode_body_TL_boolFalse(_ *DecodeBuf) TL {
	tl := TL_boolFalse{}
	return tl
}

func decode_TL_boolTrue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_boolTrue)
	return decode_body_TL_boolTrue(m)
}
func decode_body_TL_boolTrue(_ *DecodeBuf) TL {
	tl := TL_boolTrue{}
	return tl
}

func decode_TL_true(m *DecodeBuf) TL {
	m.constructorAssert(CRC_true)
	return decode_body_TL_true(m)
}
func decode_body_TL_true(_ *DecodeBuf) TL {
	tl := TL_true{}
	return tl
}

func decode_TL_error(m *DecodeBuf) TL {
	m.constructorAssert(CRC_error)
	return decode_body_TL_error(m)
}
func decode_body_TL_error(m *DecodeBuf) TL {
	tl := TL_error{}
	tl.Code = m.Int()
	tl.Text = m.String()
	return tl
}

func decode_TL_null(m *DecodeBuf) TL {
	m.constructorAssert(CRC_null)
	return decode_body_TL_null(m)
}
func decode_body_TL_null(_ *DecodeBuf) TL {
	tl := TL_null{}
	return tl
}

func decode_TL_inputPeerEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPeerEmpty)
	return decode_body_TL_inputPeerEmpty(m)
}
func decode_body_TL_inputPeerEmpty(_ *DecodeBuf) TL {
	tl := TL_inputPeerEmpty{}
	return tl
}

func decode_TL_inputPeerSelf(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPeerSelf)
	return decode_body_TL_inputPeerSelf(m)
}
func decode_body_TL_inputPeerSelf(_ *DecodeBuf) TL {
	tl := TL_inputPeerSelf{}
	return tl
}

func decode_TL_inputPeerChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPeerChat)
	return decode_body_TL_inputPeerChat(m)
}
func decode_body_TL_inputPeerChat(m *DecodeBuf) TL {
	tl := TL_inputPeerChat{}
	tl.ChatID = m.Long()
	return tl
}

func decode_TL_inputPeerUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPeerUser)
	return decode_body_TL_inputPeerUser(m)
}
func decode_body_TL_inputPeerUser(m *DecodeBuf) TL {
	tl := TL_inputPeerUser{}
	tl.UserID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputPeerChannel(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPeerChannel)
	return decode_body_TL_inputPeerChannel(m)
}
func decode_body_TL_inputPeerChannel(m *DecodeBuf) TL {
	tl := TL_inputPeerChannel{}
	tl.ChannelID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputPeerUserFromMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPeerUserFromMessage)
	return decode_body_TL_inputPeerUserFromMessage(m)
}
func decode_body_TL_inputPeerUserFromMessage(m *DecodeBuf) TL {
	tl := TL_inputPeerUserFromMessage{}
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	tl.UserID = m.Long()
	return tl
}

func decode_TL_inputPeerChannelFromMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPeerChannelFromMessage)
	return decode_body_TL_inputPeerChannelFromMessage(m)
}
func decode_body_TL_inputPeerChannelFromMessage(m *DecodeBuf) TL {
	tl := TL_inputPeerChannelFromMessage{}
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	tl.ChannelID = m.Long()
	return tl
}

func decode_TL_inputUserEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputUserEmpty)
	return decode_body_TL_inputUserEmpty(m)
}
func decode_body_TL_inputUserEmpty(_ *DecodeBuf) TL {
	tl := TL_inputUserEmpty{}
	return tl
}

func decode_TL_inputUserSelf(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputUserSelf)
	return decode_body_TL_inputUserSelf(m)
}
func decode_body_TL_inputUserSelf(_ *DecodeBuf) TL {
	tl := TL_inputUserSelf{}
	return tl
}

func decode_TL_inputUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputUser)
	return decode_body_TL_inputUser(m)
}
func decode_body_TL_inputUser(m *DecodeBuf) TL {
	tl := TL_inputUser{}
	tl.UserID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputUserFromMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputUserFromMessage)
	return decode_body_TL_inputUserFromMessage(m)
}
func decode_body_TL_inputUserFromMessage(m *DecodeBuf) TL {
	tl := TL_inputUserFromMessage{}
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	tl.UserID = m.Long()
	return tl
}

func decode_TL_inputPhoneContact(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPhoneContact)
	return decode_body_TL_inputPhoneContact(m)
}
func decode_body_TL_inputPhoneContact(m *DecodeBuf) TL {
	tl := TL_inputPhoneContact{}
	tl.ClientID = m.Long()
	tl.Phone = m.String()
	tl.FirstName = m.String()
	tl.LastName = m.String()
	return tl
}

func decode_TL_inputFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputFile)
	return decode_body_TL_inputFile(m)
}
func decode_body_TL_inputFile(m *DecodeBuf) TL {
	tl := TL_inputFile{}
	tl.ID = m.Long()
	tl.Parts = m.Int()
	tl.Name = m.String()
	tl.MD5Checksum = m.String()
	return tl
}

func decode_TL_inputFileBig(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputFileBig)
	return decode_body_TL_inputFileBig(m)
}
func decode_body_TL_inputFileBig(m *DecodeBuf) TL {
	tl := TL_inputFileBig{}
	tl.ID = m.Long()
	tl.Parts = m.Int()
	tl.Name = m.String()
	return tl
}

func decode_TL_inputFileStoryDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputFileStoryDocument)
	return decode_body_TL_inputFileStoryDocument(m)
}
func decode_body_TL_inputFileStoryDocument(m *DecodeBuf) TL {
	tl := TL_inputFileStoryDocument{}
	tl.ID = m.Object()
	return tl
}

func decode_TL_inputMediaEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaEmpty)
	return decode_body_TL_inputMediaEmpty(m)
}
func decode_body_TL_inputMediaEmpty(_ *DecodeBuf) TL {
	tl := TL_inputMediaEmpty{}
	return tl
}

func decode_TL_inputMediaUploadedPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaUploadedPhoto)
	return decode_body_TL_inputMediaUploadedPhoto(m)
}
func decode_body_TL_inputMediaUploadedPhoto(m *DecodeBuf) TL {
	tl := TL_inputMediaUploadedPhoto{}
	flags := m.Int()
	tl.Spoiler = flags&(1<<2) != 0
	tl.File = m.Object()
	if flags&(1<<0) != 0 {
		tl.Stickers = m.Vector()
	}
	if flags&(1<<1) != 0 {
		tl.TTLSeconds = Ref(m.Int())
	}
	return tl
}

func decode_TL_inputMediaPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaPhoto)
	return decode_body_TL_inputMediaPhoto(m)
}
func decode_body_TL_inputMediaPhoto(m *DecodeBuf) TL {
	tl := TL_inputMediaPhoto{}
	flags := m.Int()
	tl.Spoiler = flags&(1<<1) != 0
	tl.ID = m.Object()
	if flags&(1<<0) != 0 {
		tl.TTLSeconds = Ref(m.Int())
	}
	return tl
}

func decode_TL_inputMediaGeoPoint(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaGeoPoint)
	return decode_body_TL_inputMediaGeoPoint(m)
}
func decode_body_TL_inputMediaGeoPoint(m *DecodeBuf) TL {
	tl := TL_inputMediaGeoPoint{}
	tl.GeoPoint = m.Object()
	return tl
}

func decode_TL_inputMediaContact(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaContact)
	return decode_body_TL_inputMediaContact(m)
}
func decode_body_TL_inputMediaContact(m *DecodeBuf) TL {
	tl := TL_inputMediaContact{}
	tl.PhoneNumber = m.String()
	tl.FirstName = m.String()
	tl.LastName = m.String()
	tl.Vcard = m.String()
	return tl
}

func decode_TL_inputMediaUploadedDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaUploadedDocument)
	return decode_body_TL_inputMediaUploadedDocument(m)
}
func decode_body_TL_inputMediaUploadedDocument(m *DecodeBuf) TL {
	tl := TL_inputMediaUploadedDocument{}
	flags := m.Int()
	tl.NosoundVideo = flags&(1<<3) != 0
	tl.ForceFile = flags&(1<<4) != 0
	tl.Spoiler = flags&(1<<5) != 0
	tl.File = m.Object()
	if flags&(1<<2) != 0 {
		tl.Thumb = m.Object()
	}
	tl.MIMEType = m.String()
	tl.Attributes = m.Vector()
	if flags&(1<<0) != 0 {
		tl.Stickers = m.Vector()
	}
	if flags&(1<<1) != 0 {
		tl.TTLSeconds = Ref(m.Int())
	}
	return tl
}

func decode_TL_inputMediaDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaDocument)
	return decode_body_TL_inputMediaDocument(m)
}
func decode_body_TL_inputMediaDocument(m *DecodeBuf) TL {
	tl := TL_inputMediaDocument{}
	flags := m.Int()
	tl.Spoiler = flags&(1<<2) != 0
	tl.ID = m.Object()
	if flags&(1<<0) != 0 {
		tl.TTLSeconds = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.Query = Ref(m.String())
	}
	return tl
}

func decode_TL_inputMediaVenue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaVenue)
	return decode_body_TL_inputMediaVenue(m)
}
func decode_body_TL_inputMediaVenue(m *DecodeBuf) TL {
	tl := TL_inputMediaVenue{}
	tl.GeoPoint = m.Object()
	tl.Title = m.String()
	tl.Address = m.String()
	tl.Provider = m.String()
	tl.VenueID = m.String()
	tl.VenueType = m.String()
	return tl
}

func decode_TL_inputMediaPhotoExternal(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaPhotoExternal)
	return decode_body_TL_inputMediaPhotoExternal(m)
}
func decode_body_TL_inputMediaPhotoExternal(m *DecodeBuf) TL {
	tl := TL_inputMediaPhotoExternal{}
	flags := m.Int()
	tl.Spoiler = flags&(1<<1) != 0
	tl.URL = m.String()
	if flags&(1<<0) != 0 {
		tl.TTLSeconds = Ref(m.Int())
	}
	return tl
}

func decode_TL_inputMediaDocumentExternal(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaDocumentExternal)
	return decode_body_TL_inputMediaDocumentExternal(m)
}
func decode_body_TL_inputMediaDocumentExternal(m *DecodeBuf) TL {
	tl := TL_inputMediaDocumentExternal{}
	flags := m.Int()
	tl.Spoiler = flags&(1<<1) != 0
	tl.URL = m.String()
	if flags&(1<<0) != 0 {
		tl.TTLSeconds = Ref(m.Int())
	}
	return tl
}

func decode_TL_inputMediaGame(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaGame)
	return decode_body_TL_inputMediaGame(m)
}
func decode_body_TL_inputMediaGame(m *DecodeBuf) TL {
	tl := TL_inputMediaGame{}
	tl.ID = m.Object()
	return tl
}

func decode_TL_inputMediaInvoice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaInvoice)
	return decode_body_TL_inputMediaInvoice(m)
}
func decode_body_TL_inputMediaInvoice(m *DecodeBuf) TL {
	tl := TL_inputMediaInvoice{}
	flags := m.Int()
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<0) != 0 {
		tl.Photo = Ref(decode_TL_inputWebDocument(m).(TL_inputWebDocument))
	}
	tl.Invoice = decode_TL_invoice(m).(TL_invoice)
	tl.Payload = m.StringBytes()
	if flags&(1<<3) != 0 {
		tl.Provider = Ref(m.String())
	}
	tl.ProviderData = decode_TL_dataJSON(m).(TL_dataJSON)
	if flags&(1<<1) != 0 {
		tl.StartParam = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.ExtendedMedia = m.Object()
	}
	return tl
}

func decode_TL_inputMediaGeoLive(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaGeoLive)
	return decode_body_TL_inputMediaGeoLive(m)
}
func decode_body_TL_inputMediaGeoLive(m *DecodeBuf) TL {
	tl := TL_inputMediaGeoLive{}
	flags := m.Int()
	tl.Stopped = flags&(1<<0) != 0
	tl.GeoPoint = m.Object()
	if flags&(1<<2) != 0 {
		tl.Heading = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.Period = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.ProximityNotificationRadius = Ref(m.Int())
	}
	return tl
}

func decode_TL_inputMediaPoll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaPoll)
	return decode_body_TL_inputMediaPoll(m)
}
func decode_body_TL_inputMediaPoll(m *DecodeBuf) TL {
	tl := TL_inputMediaPoll{}
	flags := m.Int()
	tl.Poll = decode_TL_poll(m).(TL_poll)
	if flags&(1<<0) != 0 {
		tl.CorrectAnswers = m.VectorBytes()
	}
	if flags&(1<<1) != 0 {
		tl.Solution = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.SolutionEntities = m.Vector()
	}
	return tl
}

func decode_TL_inputMediaDice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaDice)
	return decode_body_TL_inputMediaDice(m)
}
func decode_body_TL_inputMediaDice(m *DecodeBuf) TL {
	tl := TL_inputMediaDice{}
	tl.Emoticon = m.String()
	return tl
}

func decode_TL_inputMediaStory(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaStory)
	return decode_body_TL_inputMediaStory(m)
}
func decode_body_TL_inputMediaStory(m *DecodeBuf) TL {
	tl := TL_inputMediaStory{}
	tl.Peer = m.Object()
	tl.ID = m.Int()
	return tl
}

func decode_TL_inputMediaWebPage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaWebPage)
	return decode_body_TL_inputMediaWebPage(m)
}
func decode_body_TL_inputMediaWebPage(m *DecodeBuf) TL {
	tl := TL_inputMediaWebPage{}
	flags := m.Int()
	tl.ForceLargeMedia = flags&(1<<0) != 0
	tl.ForceSmallMedia = flags&(1<<1) != 0
	tl.Optional = flags&(1<<2) != 0
	tl.URL = m.String()
	return tl
}

func decode_TL_inputMediaPaidMedia(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaPaidMedia)
	return decode_body_TL_inputMediaPaidMedia(m)
}
func decode_body_TL_inputMediaPaidMedia(m *DecodeBuf) TL {
	tl := TL_inputMediaPaidMedia{}
	flags := m.Int()
	tl.StarsAmount = m.Long()
	tl.ExtendedMedia = m.Vector()
	if flags&(1<<0) != 0 {
		tl.Payload = Ref(m.String())
	}
	return tl
}

func decode_TL_inputChatPhotoEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputChatPhotoEmpty)
	return decode_body_TL_inputChatPhotoEmpty(m)
}
func decode_body_TL_inputChatPhotoEmpty(_ *DecodeBuf) TL {
	tl := TL_inputChatPhotoEmpty{}
	return tl
}

func decode_TL_inputChatUploadedPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputChatUploadedPhoto)
	return decode_body_TL_inputChatUploadedPhoto(m)
}
func decode_body_TL_inputChatUploadedPhoto(m *DecodeBuf) TL {
	tl := TL_inputChatUploadedPhoto{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.File = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.Video = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.VideoStartTS = Ref(m.Double())
	}
	if flags&(1<<3) != 0 {
		tl.VideoEmojiMarkup = m.Object()
	}
	return tl
}

func decode_TL_inputChatPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputChatPhoto)
	return decode_body_TL_inputChatPhoto(m)
}
func decode_body_TL_inputChatPhoto(m *DecodeBuf) TL {
	tl := TL_inputChatPhoto{}
	tl.ID = m.Object()
	return tl
}

func decode_TL_inputGeoPointEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputGeoPointEmpty)
	return decode_body_TL_inputGeoPointEmpty(m)
}
func decode_body_TL_inputGeoPointEmpty(_ *DecodeBuf) TL {
	tl := TL_inputGeoPointEmpty{}
	return tl
}

func decode_TL_inputGeoPoint(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputGeoPoint)
	return decode_body_TL_inputGeoPoint(m)
}
func decode_body_TL_inputGeoPoint(m *DecodeBuf) TL {
	tl := TL_inputGeoPoint{}
	flags := m.Int()
	tl.Lat = m.Double()
	tl.Long = m.Double()
	if flags&(1<<0) != 0 {
		tl.AccuracyRadius = Ref(m.Int())
	}
	return tl
}

func decode_TL_inputPhotoEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPhotoEmpty)
	return decode_body_TL_inputPhotoEmpty(m)
}
func decode_body_TL_inputPhotoEmpty(_ *DecodeBuf) TL {
	tl := TL_inputPhotoEmpty{}
	return tl
}

func decode_TL_inputPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPhoto)
	return decode_body_TL_inputPhoto(m)
}
func decode_body_TL_inputPhoto(m *DecodeBuf) TL {
	tl := TL_inputPhoto{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.FileReference = m.StringBytes()
	return tl
}

func decode_TL_inputFileLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputFileLocation)
	return decode_body_TL_inputFileLocation(m)
}
func decode_body_TL_inputFileLocation(m *DecodeBuf) TL {
	tl := TL_inputFileLocation{}
	tl.VolumeID = m.Long()
	tl.LocalID = m.Int()
	tl.Secret = m.Long()
	tl.FileReference = m.StringBytes()
	return tl
}

func decode_TL_inputEncryptedFileLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputEncryptedFileLocation)
	return decode_body_TL_inputEncryptedFileLocation(m)
}
func decode_body_TL_inputEncryptedFileLocation(m *DecodeBuf) TL {
	tl := TL_inputEncryptedFileLocation{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputDocumentFileLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputDocumentFileLocation)
	return decode_body_TL_inputDocumentFileLocation(m)
}
func decode_body_TL_inputDocumentFileLocation(m *DecodeBuf) TL {
	tl := TL_inputDocumentFileLocation{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.FileReference = m.StringBytes()
	tl.ThumbSize = m.String()
	return tl
}

func decode_TL_inputSecureFileLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputSecureFileLocation)
	return decode_body_TL_inputSecureFileLocation(m)
}
func decode_body_TL_inputSecureFileLocation(m *DecodeBuf) TL {
	tl := TL_inputSecureFileLocation{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputTakeoutFileLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputTakeoutFileLocation)
	return decode_body_TL_inputTakeoutFileLocation(m)
}
func decode_body_TL_inputTakeoutFileLocation(_ *DecodeBuf) TL {
	tl := TL_inputTakeoutFileLocation{}
	return tl
}

func decode_TL_inputPhotoFileLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPhotoFileLocation)
	return decode_body_TL_inputPhotoFileLocation(m)
}
func decode_body_TL_inputPhotoFileLocation(m *DecodeBuf) TL {
	tl := TL_inputPhotoFileLocation{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.FileReference = m.StringBytes()
	tl.ThumbSize = m.String()
	return tl
}

func decode_TL_inputPhotoLegacyFileLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPhotoLegacyFileLocation)
	return decode_body_TL_inputPhotoLegacyFileLocation(m)
}
func decode_body_TL_inputPhotoLegacyFileLocation(m *DecodeBuf) TL {
	tl := TL_inputPhotoLegacyFileLocation{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.FileReference = m.StringBytes()
	tl.VolumeID = m.Long()
	tl.LocalID = m.Int()
	tl.Secret = m.Long()
	return tl
}

func decode_TL_inputPeerPhotoFileLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPeerPhotoFileLocation)
	return decode_body_TL_inputPeerPhotoFileLocation(m)
}
func decode_body_TL_inputPeerPhotoFileLocation(m *DecodeBuf) TL {
	tl := TL_inputPeerPhotoFileLocation{}
	flags := m.Int()
	tl.Big = flags&(1<<0) != 0
	tl.Peer = m.Object()
	tl.PhotoID = m.Long()
	return tl
}

func decode_TL_inputStickerSetThumb(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetThumb)
	return decode_body_TL_inputStickerSetThumb(m)
}
func decode_body_TL_inputStickerSetThumb(m *DecodeBuf) TL {
	tl := TL_inputStickerSetThumb{}
	tl.Stickerset = m.Object()
	tl.ThumbVersion = m.Int()
	return tl
}

func decode_TL_inputGroupCallStream(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputGroupCallStream)
	return decode_body_TL_inputGroupCallStream(m)
}
func decode_body_TL_inputGroupCallStream(m *DecodeBuf) TL {
	tl := TL_inputGroupCallStream{}
	flags := m.Int()
	tl.Call = decode_TL_inputGroupCall(m).(TL_inputGroupCall)
	tl.TimeMS = m.Long()
	tl.Scale = m.Int()
	if flags&(1<<0) != 0 {
		tl.VideoChannel = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.VideoQuality = Ref(m.Int())
	}
	return tl
}

func decode_TL_peerUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerUser)
	return decode_body_TL_peerUser(m)
}
func decode_body_TL_peerUser(m *DecodeBuf) TL {
	tl := TL_peerUser{}
	tl.UserID = m.Long()
	return tl
}

func decode_TL_peerChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerChat)
	return decode_body_TL_peerChat(m)
}
func decode_body_TL_peerChat(m *DecodeBuf) TL {
	tl := TL_peerChat{}
	tl.ChatID = m.Long()
	return tl
}

func decode_TL_peerChannel(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerChannel)
	return decode_body_TL_peerChannel(m)
}
func decode_body_TL_peerChannel(m *DecodeBuf) TL {
	tl := TL_peerChannel{}
	tl.ChannelID = m.Long()
	return tl
}

func decode_TL_storage_fileUnknown(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_fileUnknown)
	return decode_body_TL_storage_fileUnknown(m)
}
func decode_body_TL_storage_fileUnknown(_ *DecodeBuf) TL {
	tl := TL_storage_fileUnknown{}
	return tl
}

func decode_TL_storage_filePartial(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_filePartial)
	return decode_body_TL_storage_filePartial(m)
}
func decode_body_TL_storage_filePartial(_ *DecodeBuf) TL {
	tl := TL_storage_filePartial{}
	return tl
}

func decode_TL_storage_fileJPEG(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_fileJPEG)
	return decode_body_TL_storage_fileJPEG(m)
}
func decode_body_TL_storage_fileJPEG(_ *DecodeBuf) TL {
	tl := TL_storage_fileJPEG{}
	return tl
}

func decode_TL_storage_fileGIF(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_fileGIF)
	return decode_body_TL_storage_fileGIF(m)
}
func decode_body_TL_storage_fileGIF(_ *DecodeBuf) TL {
	tl := TL_storage_fileGIF{}
	return tl
}

func decode_TL_storage_filePNG(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_filePNG)
	return decode_body_TL_storage_filePNG(m)
}
func decode_body_TL_storage_filePNG(_ *DecodeBuf) TL {
	tl := TL_storage_filePNG{}
	return tl
}

func decode_TL_storage_filePDF(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_filePDF)
	return decode_body_TL_storage_filePDF(m)
}
func decode_body_TL_storage_filePDF(_ *DecodeBuf) TL {
	tl := TL_storage_filePDF{}
	return tl
}

func decode_TL_storage_fileMP3(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_fileMP3)
	return decode_body_TL_storage_fileMP3(m)
}
func decode_body_TL_storage_fileMP3(_ *DecodeBuf) TL {
	tl := TL_storage_fileMP3{}
	return tl
}

func decode_TL_storage_fileMOV(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_fileMOV)
	return decode_body_TL_storage_fileMOV(m)
}
func decode_body_TL_storage_fileMOV(_ *DecodeBuf) TL {
	tl := TL_storage_fileMOV{}
	return tl
}

func decode_TL_storage_fileMP4(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_fileMP4)
	return decode_body_TL_storage_fileMP4(m)
}
func decode_body_TL_storage_fileMP4(_ *DecodeBuf) TL {
	tl := TL_storage_fileMP4{}
	return tl
}

func decode_TL_storage_fileWEBP(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storage_fileWEBP)
	return decode_body_TL_storage_fileWEBP(m)
}
func decode_body_TL_storage_fileWEBP(_ *DecodeBuf) TL {
	tl := TL_storage_fileWEBP{}
	return tl
}

func decode_TL_userEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userEmpty)
	return decode_body_TL_userEmpty(m)
}
func decode_body_TL_userEmpty(m *DecodeBuf) TL {
	tl := TL_userEmpty{}
	tl.ID = m.Long()
	return tl
}

func decode_TL_user(m *DecodeBuf) TL {
	m.constructorAssert(CRC_user)
	return decode_body_TL_user(m)
}
func decode_body_TL_user(m *DecodeBuf) TL {
	tl := TL_user{}
	flags := m.Int()
	tl.Self = flags&(1<<10) != 0
	tl.Contact = flags&(1<<11) != 0
	tl.MutualContact = flags&(1<<12) != 0
	tl.Deleted = flags&(1<<13) != 0
	tl.Bot = flags&(1<<14) != 0
	tl.BotChatHistory = flags&(1<<15) != 0
	tl.BotNochats = flags&(1<<16) != 0
	tl.Verified = flags&(1<<17) != 0
	tl.Restricted = flags&(1<<18) != 0
	tl.Min = flags&(1<<20) != 0
	tl.BotInlineGeo = flags&(1<<21) != 0
	tl.Support = flags&(1<<23) != 0
	tl.Scam = flags&(1<<24) != 0
	tl.ApplyMinPhoto = flags&(1<<25) != 0
	tl.Fake = flags&(1<<26) != 0
	tl.BotAttachMenu = flags&(1<<27) != 0
	tl.Premium = flags&(1<<28) != 0
	tl.AttachMenuEnabled = flags&(1<<29) != 0
	flags2 := m.Int()
	tl.BotCanEdit = flags2&(1<<1) != 0
	tl.CloseFriend = flags2&(1<<2) != 0
	tl.StoriesHidden = flags2&(1<<3) != 0
	tl.StoriesUnavailable = flags2&(1<<4) != 0
	tl.ContactRequirePremium = flags2&(1<<10) != 0
	tl.BotBusiness = flags2&(1<<11) != 0
	tl.BotHasMainApp = flags2&(1<<13) != 0
	tl.ID = m.Long()
	if flags&(1<<0) != 0 {
		tl.AccessHash = Ref(m.Long())
	}
	if flags&(1<<1) != 0 {
		tl.FirstName = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.LastName = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.Username = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.Phone = Ref(m.String())
	}
	if flags&(1<<5) != 0 {
		tl.Photo = m.Object()
	}
	if flags&(1<<6) != 0 {
		tl.Status = m.Object()
	}
	if flags&(1<<14) != 0 {
		tl.BotInfoVersion = Ref(m.Int())
	}
	if flags&(1<<18) != 0 {
		tl.RestrictionReason = DecodeBuf_GenericVector[TL_restrictionReason](m)
	}
	if flags&(1<<19) != 0 {
		tl.BotInlinePlaceholder = Ref(m.String())
	}
	if flags&(1<<22) != 0 {
		tl.LangCode = Ref(m.String())
	}
	if flags&(1<<30) != 0 {
		tl.EmojiStatus = m.Object()
	}
	if flags2&(1<<0) != 0 {
		tl.Usernames = DecodeBuf_GenericVector[TL_username](m)
	}
	if flags2&(1<<5) != 0 {
		tl.StoriesMaxID = Ref(m.Int())
	}
	if flags2&(1<<8) != 0 {
		tl.Color = Ref(decode_TL_peerColor(m).(TL_peerColor))
	}
	if flags2&(1<<9) != 0 {
		tl.ProfileColor = Ref(decode_TL_peerColor(m).(TL_peerColor))
	}
	if flags2&(1<<12) != 0 {
		tl.BotActiveUsers = Ref(m.Int())
	}
	return tl
}

func decode_TL_userProfilePhotoEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userProfilePhotoEmpty)
	return decode_body_TL_userProfilePhotoEmpty(m)
}
func decode_body_TL_userProfilePhotoEmpty(_ *DecodeBuf) TL {
	tl := TL_userProfilePhotoEmpty{}
	return tl
}

func decode_TL_userProfilePhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userProfilePhoto)
	return decode_body_TL_userProfilePhoto(m)
}
func decode_body_TL_userProfilePhoto(m *DecodeBuf) TL {
	tl := TL_userProfilePhoto{}
	flags := m.Int()
	tl.HasVideo = flags&(1<<0) != 0
	tl.Personal = flags&(1<<2) != 0
	tl.PhotoID = m.Long()
	if flags&(1<<1) != 0 {
		tl.StrippedThumb = m.StringBytes()
	}
	tl.DCID = m.Int()
	return tl
}

func decode_TL_userStatusEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userStatusEmpty)
	return decode_body_TL_userStatusEmpty(m)
}
func decode_body_TL_userStatusEmpty(_ *DecodeBuf) TL {
	tl := TL_userStatusEmpty{}
	return tl
}

func decode_TL_userStatusOnline(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userStatusOnline)
	return decode_body_TL_userStatusOnline(m)
}
func decode_body_TL_userStatusOnline(m *DecodeBuf) TL {
	tl := TL_userStatusOnline{}
	tl.Expires = m.Int()
	return tl
}

func decode_TL_userStatusOffline(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userStatusOffline)
	return decode_body_TL_userStatusOffline(m)
}
func decode_body_TL_userStatusOffline(m *DecodeBuf) TL {
	tl := TL_userStatusOffline{}
	tl.WasOnline = m.Int()
	return tl
}

func decode_TL_userStatusRecently(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userStatusRecently)
	return decode_body_TL_userStatusRecently(m)
}
func decode_body_TL_userStatusRecently(m *DecodeBuf) TL {
	tl := TL_userStatusRecently{}
	flags := m.Int()
	tl.ByMe = flags&(1<<0) != 0
	return tl
}

func decode_TL_userStatusLastWeek(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userStatusLastWeek)
	return decode_body_TL_userStatusLastWeek(m)
}
func decode_body_TL_userStatusLastWeek(m *DecodeBuf) TL {
	tl := TL_userStatusLastWeek{}
	flags := m.Int()
	tl.ByMe = flags&(1<<0) != 0
	return tl
}

func decode_TL_userStatusLastMonth(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userStatusLastMonth)
	return decode_body_TL_userStatusLastMonth(m)
}
func decode_body_TL_userStatusLastMonth(m *DecodeBuf) TL {
	tl := TL_userStatusLastMonth{}
	flags := m.Int()
	tl.ByMe = flags&(1<<0) != 0
	return tl
}

func decode_TL_chatEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatEmpty)
	return decode_body_TL_chatEmpty(m)
}
func decode_body_TL_chatEmpty(m *DecodeBuf) TL {
	tl := TL_chatEmpty{}
	tl.ID = m.Long()
	return tl
}

func decode_TL_chat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chat)
	return decode_body_TL_chat(m)
}
func decode_body_TL_chat(m *DecodeBuf) TL {
	tl := TL_chat{}
	flags := m.Int()
	tl.Creator = flags&(1<<0) != 0
	tl.Left = flags&(1<<2) != 0
	tl.Deactivated = flags&(1<<5) != 0
	tl.CallActive = flags&(1<<23) != 0
	tl.CallNotEmpty = flags&(1<<24) != 0
	tl.Noforwards = flags&(1<<25) != 0
	tl.ID = m.Long()
	tl.Title = m.String()
	tl.Photo = m.Object()
	tl.ParticipantsCount = m.Int()
	tl.Date = m.Int()
	tl.Version = m.Int()
	if flags&(1<<6) != 0 {
		tl.MigratedTo = m.Object()
	}
	if flags&(1<<14) != 0 {
		tl.AdminRights = Ref(decode_TL_chatAdminRights(m).(TL_chatAdminRights))
	}
	if flags&(1<<18) != 0 {
		tl.DefaultBannedRights = Ref(decode_TL_chatBannedRights(m).(TL_chatBannedRights))
	}
	return tl
}

func decode_TL_chatForbidden(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatForbidden)
	return decode_body_TL_chatForbidden(m)
}
func decode_body_TL_chatForbidden(m *DecodeBuf) TL {
	tl := TL_chatForbidden{}
	tl.ID = m.Long()
	tl.Title = m.String()
	return tl
}

func decode_TL_channel(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channel)
	return decode_body_TL_channel(m)
}
func decode_body_TL_channel(m *DecodeBuf) TL {
	tl := TL_channel{}
	flags := m.Int()
	tl.Creator = flags&(1<<0) != 0
	tl.Left = flags&(1<<2) != 0
	tl.Broadcast = flags&(1<<5) != 0
	tl.Verified = flags&(1<<7) != 0
	tl.Megagroup = flags&(1<<8) != 0
	tl.Restricted = flags&(1<<9) != 0
	tl.Signatures = flags&(1<<11) != 0
	tl.Min = flags&(1<<12) != 0
	tl.Scam = flags&(1<<19) != 0
	tl.HasLink = flags&(1<<20) != 0
	tl.HasGeo = flags&(1<<21) != 0
	tl.SlowmodeEnabled = flags&(1<<22) != 0
	tl.CallActive = flags&(1<<23) != 0
	tl.CallNotEmpty = flags&(1<<24) != 0
	tl.Fake = flags&(1<<25) != 0
	tl.Gigagroup = flags&(1<<26) != 0
	tl.Noforwards = flags&(1<<27) != 0
	tl.JoinToSend = flags&(1<<28) != 0
	tl.JoinRequest = flags&(1<<29) != 0
	tl.Forum = flags&(1<<30) != 0
	flags2 := m.Int()
	tl.StoriesHidden = flags2&(1<<1) != 0
	tl.StoriesHiddenMin = flags2&(1<<2) != 0
	tl.StoriesUnavailable = flags2&(1<<3) != 0
	tl.SignatureProfiles = flags2&(1<<12) != 0
	tl.ID = m.Long()
	if flags&(1<<13) != 0 {
		tl.AccessHash = Ref(m.Long())
	}
	tl.Title = m.String()
	if flags&(1<<6) != 0 {
		tl.Username = Ref(m.String())
	}
	tl.Photo = m.Object()
	tl.Date = m.Int()
	if flags&(1<<9) != 0 {
		tl.RestrictionReason = DecodeBuf_GenericVector[TL_restrictionReason](m)
	}
	if flags&(1<<14) != 0 {
		tl.AdminRights = Ref(decode_TL_chatAdminRights(m).(TL_chatAdminRights))
	}
	if flags&(1<<15) != 0 {
		tl.BannedRights = Ref(decode_TL_chatBannedRights(m).(TL_chatBannedRights))
	}
	if flags&(1<<18) != 0 {
		tl.DefaultBannedRights = Ref(decode_TL_chatBannedRights(m).(TL_chatBannedRights))
	}
	if flags&(1<<17) != 0 {
		tl.ParticipantsCount = Ref(m.Int())
	}
	if flags2&(1<<0) != 0 {
		tl.Usernames = DecodeBuf_GenericVector[TL_username](m)
	}
	if flags2&(1<<4) != 0 {
		tl.StoriesMaxID = Ref(m.Int())
	}
	if flags2&(1<<7) != 0 {
		tl.Color = Ref(decode_TL_peerColor(m).(TL_peerColor))
	}
	if flags2&(1<<8) != 0 {
		tl.ProfileColor = Ref(decode_TL_peerColor(m).(TL_peerColor))
	}
	if flags2&(1<<9) != 0 {
		tl.EmojiStatus = m.Object()
	}
	if flags2&(1<<10) != 0 {
		tl.Level = Ref(m.Int())
	}
	if flags2&(1<<11) != 0 {
		tl.SubscriptionUntilDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_channelForbidden(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelForbidden)
	return decode_body_TL_channelForbidden(m)
}
func decode_body_TL_channelForbidden(m *DecodeBuf) TL {
	tl := TL_channelForbidden{}
	flags := m.Int()
	tl.Broadcast = flags&(1<<5) != 0
	tl.Megagroup = flags&(1<<8) != 0
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Title = m.String()
	if flags&(1<<16) != 0 {
		tl.UntilDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_chatFull(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatFull)
	return decode_body_TL_chatFull(m)
}
func decode_body_TL_chatFull(m *DecodeBuf) TL {
	tl := TL_chatFull{}
	flags := m.Int()
	tl.CanSetUsername = flags&(1<<7) != 0
	tl.HasScheduled = flags&(1<<8) != 0
	tl.TranslationsDisabled = flags&(1<<19) != 0
	tl.ID = m.Long()
	tl.About = m.String()
	tl.Participants = m.Object()
	if flags&(1<<2) != 0 {
		tl.ChatPhoto = m.Object()
	}
	tl.NotifySettings = decode_TL_peerNotifySettings(m).(TL_peerNotifySettings)
	if flags&(1<<13) != 0 {
		tl.ExportedInvite = m.Object()
	}
	if flags&(1<<3) != 0 {
		tl.BotInfo = DecodeBuf_GenericVector[TL_botInfo](m)
	}
	if flags&(1<<6) != 0 {
		tl.PinnedMsgID = Ref(m.Int())
	}
	if flags&(1<<11) != 0 {
		tl.FolderID = Ref(m.Int())
	}
	if flags&(1<<12) != 0 {
		tl.Call = Ref(decode_TL_inputGroupCall(m).(TL_inputGroupCall))
	}
	if flags&(1<<14) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	if flags&(1<<15) != 0 {
		tl.GroupcallDefaultJoinAs = m.Object()
	}
	if flags&(1<<16) != 0 {
		tl.ThemeEmoticon = Ref(m.String())
	}
	if flags&(1<<17) != 0 {
		tl.RequestsPending = Ref(m.Int())
	}
	if flags&(1<<17) != 0 {
		tl.RecentRequesters = m.VectorLong()
	}
	if flags&(1<<18) != 0 {
		tl.AvailableReactions = m.Object()
	}
	if flags&(1<<20) != 0 {
		tl.ReactionsLimit = Ref(m.Int())
	}
	return tl
}

func decode_TL_channelFull(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelFull)
	return decode_body_TL_channelFull(m)
}
func decode_body_TL_channelFull(m *DecodeBuf) TL {
	tl := TL_channelFull{}
	flags := m.Int()
	tl.CanViewParticipants = flags&(1<<3) != 0
	tl.CanSetUsername = flags&(1<<6) != 0
	tl.CanSetStickers = flags&(1<<7) != 0
	tl.HiddenPrehistory = flags&(1<<10) != 0
	tl.CanSetLocation = flags&(1<<16) != 0
	tl.HasScheduled = flags&(1<<19) != 0
	tl.CanViewStats = flags&(1<<20) != 0
	tl.Blocked = flags&(1<<22) != 0
	flags2 := m.Int()
	tl.CanDeleteChannel = flags2&(1<<0) != 0
	tl.Antispam = flags2&(1<<1) != 0
	tl.ParticipantsHidden = flags2&(1<<2) != 0
	tl.TranslationsDisabled = flags2&(1<<3) != 0
	tl.StoriesPinnedAvailable = flags2&(1<<5) != 0
	tl.ViewForumAsMessages = flags2&(1<<6) != 0
	tl.RestrictedSponsored = flags2&(1<<11) != 0
	tl.CanViewRevenue = flags2&(1<<12) != 0
	tl.PaidMediaAllowed = flags2&(1<<14) != 0
	tl.CanViewStarsRevenue = flags2&(1<<15) != 0
	tl.PaidReactionsAvailable = flags2&(1<<16) != 0
	tl.ID = m.Long()
	tl.About = m.String()
	if flags&(1<<0) != 0 {
		tl.ParticipantsCount = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.AdminsCount = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.KickedCount = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.BannedCount = Ref(m.Int())
	}
	if flags&(1<<13) != 0 {
		tl.OnlineCount = Ref(m.Int())
	}
	tl.ReadInboxMaxID = m.Int()
	tl.ReadOutboxMaxID = m.Int()
	tl.UnreadCount = m.Int()
	tl.ChatPhoto = m.Object()
	tl.NotifySettings = decode_TL_peerNotifySettings(m).(TL_peerNotifySettings)
	if flags&(1<<23) != 0 {
		tl.ExportedInvite = m.Object()
	}
	tl.BotInfo = DecodeBuf_GenericVector[TL_botInfo](m)
	if flags&(1<<4) != 0 {
		tl.MigratedFromChatID = Ref(m.Long())
	}
	if flags&(1<<4) != 0 {
		tl.MigratedFromMaxID = Ref(m.Int())
	}
	if flags&(1<<5) != 0 {
		tl.PinnedMsgID = Ref(m.Int())
	}
	if flags&(1<<8) != 0 {
		tl.Stickerset = Ref(decode_TL_stickerSet(m).(TL_stickerSet))
	}
	if flags&(1<<9) != 0 {
		tl.AvailableMinID = Ref(m.Int())
	}
	if flags&(1<<11) != 0 {
		tl.FolderID = Ref(m.Int())
	}
	if flags&(1<<14) != 0 {
		tl.LinkedChatID = Ref(m.Long())
	}
	if flags&(1<<15) != 0 {
		tl.Location = m.Object()
	}
	if flags&(1<<17) != 0 {
		tl.SlowmodeSeconds = Ref(m.Int())
	}
	if flags&(1<<18) != 0 {
		tl.SlowmodeNextSendDate = Ref(m.Int())
	}
	if flags&(1<<12) != 0 {
		tl.StatsDC = Ref(m.Int())
	}
	tl.PTS = m.Int()
	if flags&(1<<21) != 0 {
		tl.Call = Ref(decode_TL_inputGroupCall(m).(TL_inputGroupCall))
	}
	if flags&(1<<24) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	if flags&(1<<25) != 0 {
		tl.PendingSuggestions = m.VectorString()
	}
	if flags&(1<<26) != 0 {
		tl.GroupcallDefaultJoinAs = m.Object()
	}
	if flags&(1<<27) != 0 {
		tl.ThemeEmoticon = Ref(m.String())
	}
	if flags&(1<<28) != 0 {
		tl.RequestsPending = Ref(m.Int())
	}
	if flags&(1<<28) != 0 {
		tl.RecentRequesters = m.VectorLong()
	}
	if flags&(1<<29) != 0 {
		tl.DefaultSendAs = m.Object()
	}
	if flags&(1<<30) != 0 {
		tl.AvailableReactions = m.Object()
	}
	if flags2&(1<<13) != 0 {
		tl.ReactionsLimit = Ref(m.Int())
	}
	if flags2&(1<<4) != 0 {
		tl.Stories = Ref(decode_TL_peerStories(m).(TL_peerStories))
	}
	if flags2&(1<<7) != 0 {
		tl.Wallpaper = m.Object()
	}
	if flags2&(1<<8) != 0 {
		tl.BoostsApplied = Ref(m.Int())
	}
	if flags2&(1<<9) != 0 {
		tl.BoostsUnrestrict = Ref(m.Int())
	}
	if flags2&(1<<10) != 0 {
		tl.Emojiset = Ref(decode_TL_stickerSet(m).(TL_stickerSet))
	}
	return tl
}

func decode_TL_chatParticipant(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatParticipant)
	return decode_body_TL_chatParticipant(m)
}
func decode_body_TL_chatParticipant(m *DecodeBuf) TL {
	tl := TL_chatParticipant{}
	tl.UserID = m.Long()
	tl.InviterID = m.Long()
	tl.Date = m.Int()
	return tl
}

func decode_TL_chatParticipantCreator(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatParticipantCreator)
	return decode_body_TL_chatParticipantCreator(m)
}
func decode_body_TL_chatParticipantCreator(m *DecodeBuf) TL {
	tl := TL_chatParticipantCreator{}
	tl.UserID = m.Long()
	return tl
}

func decode_TL_chatParticipantAdmin(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatParticipantAdmin)
	return decode_body_TL_chatParticipantAdmin(m)
}
func decode_body_TL_chatParticipantAdmin(m *DecodeBuf) TL {
	tl := TL_chatParticipantAdmin{}
	tl.UserID = m.Long()
	tl.InviterID = m.Long()
	tl.Date = m.Int()
	return tl
}

func decode_TL_chatParticipantsForbidden(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatParticipantsForbidden)
	return decode_body_TL_chatParticipantsForbidden(m)
}
func decode_body_TL_chatParticipantsForbidden(m *DecodeBuf) TL {
	tl := TL_chatParticipantsForbidden{}
	flags := m.Int()
	tl.ChatID = m.Long()
	if flags&(1<<0) != 0 {
		tl.SelfParticipant = m.Object()
	}
	return tl
}

func decode_TL_chatParticipants(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatParticipants)
	return decode_body_TL_chatParticipants(m)
}
func decode_body_TL_chatParticipants(m *DecodeBuf) TL {
	tl := TL_chatParticipants{}
	tl.ChatID = m.Long()
	tl.Participants = m.Vector()
	tl.Version = m.Int()
	return tl
}

func decode_TL_chatPhotoEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatPhotoEmpty)
	return decode_body_TL_chatPhotoEmpty(m)
}
func decode_body_TL_chatPhotoEmpty(_ *DecodeBuf) TL {
	tl := TL_chatPhotoEmpty{}
	return tl
}

func decode_TL_chatPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatPhoto)
	return decode_body_TL_chatPhoto(m)
}
func decode_body_TL_chatPhoto(m *DecodeBuf) TL {
	tl := TL_chatPhoto{}
	flags := m.Int()
	tl.HasVideo = flags&(1<<0) != 0
	tl.PhotoID = m.Long()
	if flags&(1<<1) != 0 {
		tl.StrippedThumb = m.StringBytes()
	}
	tl.DCID = m.Int()
	return tl
}

func decode_TL_messageEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEmpty)
	return decode_body_TL_messageEmpty(m)
}
func decode_body_TL_messageEmpty(m *DecodeBuf) TL {
	tl := TL_messageEmpty{}
	flags := m.Int()
	tl.ID = m.Int()
	if flags&(1<<0) != 0 {
		tl.PeerID = m.Object()
	}
	return tl
}

func decode_TL_message(m *DecodeBuf) TL {
	m.constructorAssert(CRC_message)
	return decode_body_TL_message(m)
}
func decode_body_TL_message(m *DecodeBuf) TL {
	tl := TL_message{}
	flags := m.Int()
	tl.Out = flags&(1<<1) != 0
	tl.Mentioned = flags&(1<<4) != 0
	tl.MediaUnread = flags&(1<<5) != 0
	tl.Silent = flags&(1<<13) != 0
	tl.Post = flags&(1<<14) != 0
	tl.FromScheduled = flags&(1<<18) != 0
	tl.Legacy = flags&(1<<19) != 0
	tl.EditHide = flags&(1<<21) != 0
	tl.Pinned = flags&(1<<24) != 0
	tl.Noforwards = flags&(1<<26) != 0
	tl.InvertMedia = flags&(1<<27) != 0
	flags2 := m.Int()
	tl.Offline = flags2&(1<<1) != 0
	tl.ID = m.Int()
	if flags&(1<<8) != 0 {
		tl.FromID = m.Object()
	}
	if flags&(1<<29) != 0 {
		tl.FromBoostsApplied = Ref(m.Int())
	}
	tl.PeerID = m.Object()
	if flags&(1<<28) != 0 {
		tl.SavedPeerID = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.FwdFrom = Ref(decode_TL_messageFwdHeader(m).(TL_messageFwdHeader))
	}
	if flags&(1<<11) != 0 {
		tl.ViaBotID = Ref(m.Long())
	}
	if flags2&(1<<0) != 0 {
		tl.ViaBusinessBotID = Ref(m.Long())
	}
	if flags&(1<<3) != 0 {
		tl.ReplyTo = m.Object()
	}
	tl.Date = m.Int()
	tl.Message = m.String()
	if flags&(1<<9) != 0 {
		tl.Media = m.Object()
	}
	if flags&(1<<6) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	if flags&(1<<7) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<10) != 0 {
		tl.Views = Ref(m.Int())
	}
	if flags&(1<<10) != 0 {
		tl.Forwards = Ref(m.Int())
	}
	if flags&(1<<23) != 0 {
		tl.Replies = Ref(decode_TL_messageReplies(m).(TL_messageReplies))
	}
	if flags&(1<<15) != 0 {
		tl.EditDate = Ref(m.Int())
	}
	if flags&(1<<16) != 0 {
		tl.PostAuthor = Ref(m.String())
	}
	if flags&(1<<17) != 0 {
		tl.GroupedID = Ref(m.Long())
	}
	if flags&(1<<20) != 0 {
		tl.Reactions = Ref(decode_TL_messageReactions(m).(TL_messageReactions))
	}
	if flags&(1<<22) != 0 {
		tl.RestrictionReason = DecodeBuf_GenericVector[TL_restrictionReason](m)
	}
	if flags&(1<<25) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	if flags&(1<<30) != 0 {
		tl.QuickReplyShortcutID = Ref(m.Int())
	}
	if flags2&(1<<2) != 0 {
		tl.Effect = Ref(m.Long())
	}
	if flags2&(1<<3) != 0 {
		tl.Factcheck = Ref(decode_TL_factCheck(m).(TL_factCheck))
	}
	return tl
}

func decode_TL_messageService(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageService)
	return decode_body_TL_messageService(m)
}
func decode_body_TL_messageService(m *DecodeBuf) TL {
	tl := TL_messageService{}
	flags := m.Int()
	tl.Out = flags&(1<<1) != 0
	tl.Mentioned = flags&(1<<4) != 0
	tl.MediaUnread = flags&(1<<5) != 0
	tl.Silent = flags&(1<<13) != 0
	tl.Post = flags&(1<<14) != 0
	tl.Legacy = flags&(1<<19) != 0
	tl.ID = m.Int()
	if flags&(1<<8) != 0 {
		tl.FromID = m.Object()
	}
	tl.PeerID = m.Object()
	if flags&(1<<3) != 0 {
		tl.ReplyTo = m.Object()
	}
	tl.Date = m.Int()
	tl.Action = m.Object()
	if flags&(1<<25) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	return tl
}

func decode_TL_messageMediaEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaEmpty)
	return decode_body_TL_messageMediaEmpty(m)
}
func decode_body_TL_messageMediaEmpty(_ *DecodeBuf) TL {
	tl := TL_messageMediaEmpty{}
	return tl
}

func decode_TL_messageMediaPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaPhoto)
	return decode_body_TL_messageMediaPhoto(m)
}
func decode_body_TL_messageMediaPhoto(m *DecodeBuf) TL {
	tl := TL_messageMediaPhoto{}
	flags := m.Int()
	tl.Spoiler = flags&(1<<3) != 0
	if flags&(1<<0) != 0 {
		tl.Photo = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.TTLSeconds = Ref(m.Int())
	}
	return tl
}

func decode_TL_messageMediaGeo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaGeo)
	return decode_body_TL_messageMediaGeo(m)
}
func decode_body_TL_messageMediaGeo(m *DecodeBuf) TL {
	tl := TL_messageMediaGeo{}
	tl.Geo = m.Object()
	return tl
}

func decode_TL_messageMediaContact(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaContact)
	return decode_body_TL_messageMediaContact(m)
}
func decode_body_TL_messageMediaContact(m *DecodeBuf) TL {
	tl := TL_messageMediaContact{}
	tl.PhoneNumber = m.String()
	tl.FirstName = m.String()
	tl.LastName = m.String()
	tl.Vcard = m.String()
	tl.UserID = m.Long()
	return tl
}

func decode_TL_messageMediaUnsupported(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaUnsupported)
	return decode_body_TL_messageMediaUnsupported(m)
}
func decode_body_TL_messageMediaUnsupported(_ *DecodeBuf) TL {
	tl := TL_messageMediaUnsupported{}
	return tl
}

func decode_TL_messageMediaDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaDocument)
	return decode_body_TL_messageMediaDocument(m)
}
func decode_body_TL_messageMediaDocument(m *DecodeBuf) TL {
	tl := TL_messageMediaDocument{}
	flags := m.Int()
	tl.Nopremium = flags&(1<<3) != 0
	tl.Spoiler = flags&(1<<4) != 0
	tl.Video = flags&(1<<6) != 0
	tl.Round = flags&(1<<7) != 0
	tl.Voice = flags&(1<<8) != 0
	if flags&(1<<0) != 0 {
		tl.Document = m.Object()
	}
	if flags&(1<<5) != 0 {
		tl.AltDocument = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.TTLSeconds = Ref(m.Int())
	}
	return tl
}

func decode_TL_messageMediaWebPage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaWebPage)
	return decode_body_TL_messageMediaWebPage(m)
}
func decode_body_TL_messageMediaWebPage(m *DecodeBuf) TL {
	tl := TL_messageMediaWebPage{}
	flags := m.Int()
	tl.ForceLargeMedia = flags&(1<<0) != 0
	tl.ForceSmallMedia = flags&(1<<1) != 0
	tl.Manual = flags&(1<<3) != 0
	tl.Safe = flags&(1<<4) != 0
	tl.Webpage = m.Object()
	return tl
}

func decode_TL_messageMediaVenue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaVenue)
	return decode_body_TL_messageMediaVenue(m)
}
func decode_body_TL_messageMediaVenue(m *DecodeBuf) TL {
	tl := TL_messageMediaVenue{}
	tl.Geo = m.Object()
	tl.Title = m.String()
	tl.Address = m.String()
	tl.Provider = m.String()
	tl.VenueID = m.String()
	tl.VenueType = m.String()
	return tl
}

func decode_TL_messageMediaGame(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaGame)
	return decode_body_TL_messageMediaGame(m)
}
func decode_body_TL_messageMediaGame(m *DecodeBuf) TL {
	tl := TL_messageMediaGame{}
	tl.Game = decode_TL_game(m).(TL_game)
	return tl
}

func decode_TL_messageMediaInvoice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaInvoice)
	return decode_body_TL_messageMediaInvoice(m)
}
func decode_body_TL_messageMediaInvoice(m *DecodeBuf) TL {
	tl := TL_messageMediaInvoice{}
	flags := m.Int()
	tl.ShippingAddressRequested = flags&(1<<1) != 0
	tl.Test = flags&(1<<3) != 0
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<0) != 0 {
		tl.Photo = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.ReceiptMsgID = Ref(m.Int())
	}
	tl.Currency = m.String()
	tl.TotalAmount = m.Long()
	tl.StartParam = m.String()
	if flags&(1<<4) != 0 {
		tl.ExtendedMedia = m.Object()
	}
	return tl
}

func decode_TL_messageMediaGeoLive(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaGeoLive)
	return decode_body_TL_messageMediaGeoLive(m)
}
func decode_body_TL_messageMediaGeoLive(m *DecodeBuf) TL {
	tl := TL_messageMediaGeoLive{}
	flags := m.Int()
	tl.Geo = m.Object()
	if flags&(1<<0) != 0 {
		tl.Heading = Ref(m.Int())
	}
	tl.Period = m.Int()
	if flags&(1<<1) != 0 {
		tl.ProximityNotificationRadius = Ref(m.Int())
	}
	return tl
}

func decode_TL_messageMediaPoll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaPoll)
	return decode_body_TL_messageMediaPoll(m)
}
func decode_body_TL_messageMediaPoll(m *DecodeBuf) TL {
	tl := TL_messageMediaPoll{}
	tl.Poll = decode_TL_poll(m).(TL_poll)
	tl.Results = decode_TL_pollResults(m).(TL_pollResults)
	return tl
}

func decode_TL_messageMediaDice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaDice)
	return decode_body_TL_messageMediaDice(m)
}
func decode_body_TL_messageMediaDice(m *DecodeBuf) TL {
	tl := TL_messageMediaDice{}
	tl.Value = m.Int()
	tl.Emoticon = m.String()
	return tl
}

func decode_TL_messageMediaStory(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaStory)
	return decode_body_TL_messageMediaStory(m)
}
func decode_body_TL_messageMediaStory(m *DecodeBuf) TL {
	tl := TL_messageMediaStory{}
	flags := m.Int()
	tl.ViaMention = flags&(1<<1) != 0
	tl.Peer = m.Object()
	tl.ID = m.Int()
	if flags&(1<<0) != 0 {
		tl.Story = m.Object()
	}
	return tl
}

func decode_TL_messageMediaGiveaway(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaGiveaway)
	return decode_body_TL_messageMediaGiveaway(m)
}
func decode_body_TL_messageMediaGiveaway(m *DecodeBuf) TL {
	tl := TL_messageMediaGiveaway{}
	flags := m.Int()
	tl.OnlyNewSubscribers = flags&(1<<0) != 0
	tl.WinnersAreVisible = flags&(1<<2) != 0
	tl.Channels = m.VectorLong()
	if flags&(1<<1) != 0 {
		tl.CountriesISO2 = m.VectorString()
	}
	if flags&(1<<3) != 0 {
		tl.PrizeDescription = Ref(m.String())
	}
	tl.Quantity = m.Int()
	if flags&(1<<4) != 0 {
		tl.Months = Ref(m.Int())
	}
	if flags&(1<<5) != 0 {
		tl.Stars = Ref(m.Long())
	}
	tl.UntilDate = m.Int()
	return tl
}

func decode_TL_messageMediaGiveawayResults(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaGiveawayResults)
	return decode_body_TL_messageMediaGiveawayResults(m)
}
func decode_body_TL_messageMediaGiveawayResults(m *DecodeBuf) TL {
	tl := TL_messageMediaGiveawayResults{}
	flags := m.Int()
	tl.OnlyNewSubscribers = flags&(1<<0) != 0
	tl.Refunded = flags&(1<<2) != 0
	tl.ChannelID = m.Long()
	if flags&(1<<3) != 0 {
		tl.AdditionalPeersCount = Ref(m.Int())
	}
	tl.LaunchMsgID = m.Int()
	tl.WinnersCount = m.Int()
	tl.UnclaimedCount = m.Int()
	tl.Winners = m.VectorLong()
	if flags&(1<<4) != 0 {
		tl.Months = Ref(m.Int())
	}
	if flags&(1<<5) != 0 {
		tl.Stars = Ref(m.Long())
	}
	if flags&(1<<1) != 0 {
		tl.PrizeDescription = Ref(m.String())
	}
	tl.UntilDate = m.Int()
	return tl
}

func decode_TL_messageMediaPaidMedia(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageMediaPaidMedia)
	return decode_body_TL_messageMediaPaidMedia(m)
}
func decode_body_TL_messageMediaPaidMedia(m *DecodeBuf) TL {
	tl := TL_messageMediaPaidMedia{}
	tl.StarsAmount = m.Long()
	tl.ExtendedMedia = m.Vector()
	return tl
}

func decode_TL_messageActionEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionEmpty)
	return decode_body_TL_messageActionEmpty(m)
}
func decode_body_TL_messageActionEmpty(_ *DecodeBuf) TL {
	tl := TL_messageActionEmpty{}
	return tl
}

func decode_TL_messageActionChatCreate(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChatCreate)
	return decode_body_TL_messageActionChatCreate(m)
}
func decode_body_TL_messageActionChatCreate(m *DecodeBuf) TL {
	tl := TL_messageActionChatCreate{}
	tl.Title = m.String()
	tl.Users = m.VectorLong()
	return tl
}

func decode_TL_messageActionChatEditTitle(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChatEditTitle)
	return decode_body_TL_messageActionChatEditTitle(m)
}
func decode_body_TL_messageActionChatEditTitle(m *DecodeBuf) TL {
	tl := TL_messageActionChatEditTitle{}
	tl.Title = m.String()
	return tl
}

func decode_TL_messageActionChatEditPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChatEditPhoto)
	return decode_body_TL_messageActionChatEditPhoto(m)
}
func decode_body_TL_messageActionChatEditPhoto(m *DecodeBuf) TL {
	tl := TL_messageActionChatEditPhoto{}
	tl.Photo = m.Object()
	return tl
}

func decode_TL_messageActionChatDeletePhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChatDeletePhoto)
	return decode_body_TL_messageActionChatDeletePhoto(m)
}
func decode_body_TL_messageActionChatDeletePhoto(_ *DecodeBuf) TL {
	tl := TL_messageActionChatDeletePhoto{}
	return tl
}

func decode_TL_messageActionChatAddUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChatAddUser)
	return decode_body_TL_messageActionChatAddUser(m)
}
func decode_body_TL_messageActionChatAddUser(m *DecodeBuf) TL {
	tl := TL_messageActionChatAddUser{}
	tl.Users = m.VectorLong()
	return tl
}

func decode_TL_messageActionChatDeleteUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChatDeleteUser)
	return decode_body_TL_messageActionChatDeleteUser(m)
}
func decode_body_TL_messageActionChatDeleteUser(m *DecodeBuf) TL {
	tl := TL_messageActionChatDeleteUser{}
	tl.UserID = m.Long()
	return tl
}

func decode_TL_messageActionChatJoinedByLink(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChatJoinedByLink)
	return decode_body_TL_messageActionChatJoinedByLink(m)
}
func decode_body_TL_messageActionChatJoinedByLink(m *DecodeBuf) TL {
	tl := TL_messageActionChatJoinedByLink{}
	tl.InviterID = m.Long()
	return tl
}

func decode_TL_messageActionChannelCreate(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChannelCreate)
	return decode_body_TL_messageActionChannelCreate(m)
}
func decode_body_TL_messageActionChannelCreate(m *DecodeBuf) TL {
	tl := TL_messageActionChannelCreate{}
	tl.Title = m.String()
	return tl
}

func decode_TL_messageActionChatMigrateTo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChatMigrateTo)
	return decode_body_TL_messageActionChatMigrateTo(m)
}
func decode_body_TL_messageActionChatMigrateTo(m *DecodeBuf) TL {
	tl := TL_messageActionChatMigrateTo{}
	tl.ChannelID = m.Long()
	return tl
}

func decode_TL_messageActionChannelMigrateFrom(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChannelMigrateFrom)
	return decode_body_TL_messageActionChannelMigrateFrom(m)
}
func decode_body_TL_messageActionChannelMigrateFrom(m *DecodeBuf) TL {
	tl := TL_messageActionChannelMigrateFrom{}
	tl.Title = m.String()
	tl.ChatID = m.Long()
	return tl
}

func decode_TL_messageActionPINMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionPINMessage)
	return decode_body_TL_messageActionPINMessage(m)
}
func decode_body_TL_messageActionPINMessage(_ *DecodeBuf) TL {
	tl := TL_messageActionPINMessage{}
	return tl
}

func decode_TL_messageActionHistoryClear(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionHistoryClear)
	return decode_body_TL_messageActionHistoryClear(m)
}
func decode_body_TL_messageActionHistoryClear(_ *DecodeBuf) TL {
	tl := TL_messageActionHistoryClear{}
	return tl
}

func decode_TL_messageActionGameScore(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionGameScore)
	return decode_body_TL_messageActionGameScore(m)
}
func decode_body_TL_messageActionGameScore(m *DecodeBuf) TL {
	tl := TL_messageActionGameScore{}
	tl.GameID = m.Long()
	tl.Score = m.Int()
	return tl
}

func decode_TL_messageActionPaymentSentMe(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionPaymentSentMe)
	return decode_body_TL_messageActionPaymentSentMe(m)
}
func decode_body_TL_messageActionPaymentSentMe(m *DecodeBuf) TL {
	tl := TL_messageActionPaymentSentMe{}
	flags := m.Int()
	tl.RecurringInit = flags&(1<<2) != 0
	tl.RecurringUsed = flags&(1<<3) != 0
	tl.Currency = m.String()
	tl.TotalAmount = m.Long()
	tl.Payload = m.StringBytes()
	if flags&(1<<0) != 0 {
		tl.Info = Ref(decode_TL_paymentRequestedInfo(m).(TL_paymentRequestedInfo))
	}
	if flags&(1<<1) != 0 {
		tl.ShippingOptionID = Ref(m.String())
	}
	tl.Charge = decode_TL_paymentCharge(m).(TL_paymentCharge)
	return tl
}

func decode_TL_messageActionPaymentSent(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionPaymentSent)
	return decode_body_TL_messageActionPaymentSent(m)
}
func decode_body_TL_messageActionPaymentSent(m *DecodeBuf) TL {
	tl := TL_messageActionPaymentSent{}
	flags := m.Int()
	tl.RecurringInit = flags&(1<<2) != 0
	tl.RecurringUsed = flags&(1<<3) != 0
	tl.Currency = m.String()
	tl.TotalAmount = m.Long()
	if flags&(1<<0) != 0 {
		tl.InvoiceSlug = Ref(m.String())
	}
	return tl
}

func decode_TL_messageActionPhoneCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionPhoneCall)
	return decode_body_TL_messageActionPhoneCall(m)
}
func decode_body_TL_messageActionPhoneCall(m *DecodeBuf) TL {
	tl := TL_messageActionPhoneCall{}
	flags := m.Int()
	tl.Video = flags&(1<<2) != 0
	tl.CallID = m.Long()
	if flags&(1<<0) != 0 {
		tl.Reason = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.Duration = Ref(m.Int())
	}
	return tl
}

func decode_TL_messageActionScreenshotTaken(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionScreenshotTaken)
	return decode_body_TL_messageActionScreenshotTaken(m)
}
func decode_body_TL_messageActionScreenshotTaken(_ *DecodeBuf) TL {
	tl := TL_messageActionScreenshotTaken{}
	return tl
}

func decode_TL_messageActionCustomAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionCustomAction)
	return decode_body_TL_messageActionCustomAction(m)
}
func decode_body_TL_messageActionCustomAction(m *DecodeBuf) TL {
	tl := TL_messageActionCustomAction{}
	tl.Message = m.String()
	return tl
}

func decode_TL_messageActionBotAllowed(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionBotAllowed)
	return decode_body_TL_messageActionBotAllowed(m)
}
func decode_body_TL_messageActionBotAllowed(m *DecodeBuf) TL {
	tl := TL_messageActionBotAllowed{}
	flags := m.Int()
	tl.AttachMenu = flags&(1<<1) != 0
	tl.FromRequest = flags&(1<<3) != 0
	if flags&(1<<0) != 0 {
		tl.Domain = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.App = m.Object()
	}
	return tl
}

func decode_TL_messageActionSecureValuesSentMe(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionSecureValuesSentMe)
	return decode_body_TL_messageActionSecureValuesSentMe(m)
}
func decode_body_TL_messageActionSecureValuesSentMe(m *DecodeBuf) TL {
	tl := TL_messageActionSecureValuesSentMe{}
	tl.Values = DecodeBuf_GenericVector[TL_secureValue](m)
	tl.Credentials = decode_TL_secureCredentialsEncrypted(m).(TL_secureCredentialsEncrypted)
	return tl
}

func decode_TL_messageActionSecureValuesSent(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionSecureValuesSent)
	return decode_body_TL_messageActionSecureValuesSent(m)
}
func decode_body_TL_messageActionSecureValuesSent(m *DecodeBuf) TL {
	tl := TL_messageActionSecureValuesSent{}
	tl.Types = m.Vector()
	return tl
}

func decode_TL_messageActionContactSignUp(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionContactSignUp)
	return decode_body_TL_messageActionContactSignUp(m)
}
func decode_body_TL_messageActionContactSignUp(_ *DecodeBuf) TL {
	tl := TL_messageActionContactSignUp{}
	return tl
}

func decode_TL_messageActionGeoProximityReached(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionGeoProximityReached)
	return decode_body_TL_messageActionGeoProximityReached(m)
}
func decode_body_TL_messageActionGeoProximityReached(m *DecodeBuf) TL {
	tl := TL_messageActionGeoProximityReached{}
	tl.FromID = m.Object()
	tl.ToID = m.Object()
	tl.Distance = m.Int()
	return tl
}

func decode_TL_messageActionGroupCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionGroupCall)
	return decode_body_TL_messageActionGroupCall(m)
}
func decode_body_TL_messageActionGroupCall(m *DecodeBuf) TL {
	tl := TL_messageActionGroupCall{}
	flags := m.Int()
	tl.Call = decode_TL_inputGroupCall(m).(TL_inputGroupCall)
	if flags&(1<<0) != 0 {
		tl.Duration = Ref(m.Int())
	}
	return tl
}

func decode_TL_messageActionInviteToGroupCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionInviteToGroupCall)
	return decode_body_TL_messageActionInviteToGroupCall(m)
}
func decode_body_TL_messageActionInviteToGroupCall(m *DecodeBuf) TL {
	tl := TL_messageActionInviteToGroupCall{}
	tl.Call = decode_TL_inputGroupCall(m).(TL_inputGroupCall)
	tl.Users = m.VectorLong()
	return tl
}

func decode_TL_messageActionSetMessagesTTL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionSetMessagesTTL)
	return decode_body_TL_messageActionSetMessagesTTL(m)
}
func decode_body_TL_messageActionSetMessagesTTL(m *DecodeBuf) TL {
	tl := TL_messageActionSetMessagesTTL{}
	flags := m.Int()
	tl.Period = m.Int()
	if flags&(1<<0) != 0 {
		tl.AutoSettingFrom = Ref(m.Long())
	}
	return tl
}

func decode_TL_messageActionGroupCallScheduled(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionGroupCallScheduled)
	return decode_body_TL_messageActionGroupCallScheduled(m)
}
func decode_body_TL_messageActionGroupCallScheduled(m *DecodeBuf) TL {
	tl := TL_messageActionGroupCallScheduled{}
	tl.Call = decode_TL_inputGroupCall(m).(TL_inputGroupCall)
	tl.ScheduleDate = m.Int()
	return tl
}

func decode_TL_messageActionSetChatTheme(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionSetChatTheme)
	return decode_body_TL_messageActionSetChatTheme(m)
}
func decode_body_TL_messageActionSetChatTheme(m *DecodeBuf) TL {
	tl := TL_messageActionSetChatTheme{}
	tl.Emoticon = m.String()
	return tl
}

func decode_TL_messageActionChatJoinedByRequest(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionChatJoinedByRequest)
	return decode_body_TL_messageActionChatJoinedByRequest(m)
}
func decode_body_TL_messageActionChatJoinedByRequest(_ *DecodeBuf) TL {
	tl := TL_messageActionChatJoinedByRequest{}
	return tl
}

func decode_TL_messageActionWebViewDataSentMe(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionWebViewDataSentMe)
	return decode_body_TL_messageActionWebViewDataSentMe(m)
}
func decode_body_TL_messageActionWebViewDataSentMe(m *DecodeBuf) TL {
	tl := TL_messageActionWebViewDataSentMe{}
	tl.Text = m.String()
	tl.Data = m.String()
	return tl
}

func decode_TL_messageActionWebViewDataSent(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionWebViewDataSent)
	return decode_body_TL_messageActionWebViewDataSent(m)
}
func decode_body_TL_messageActionWebViewDataSent(m *DecodeBuf) TL {
	tl := TL_messageActionWebViewDataSent{}
	tl.Text = m.String()
	return tl
}

func decode_TL_messageActionGiftPremium(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionGiftPremium)
	return decode_body_TL_messageActionGiftPremium(m)
}
func decode_body_TL_messageActionGiftPremium(m *DecodeBuf) TL {
	tl := TL_messageActionGiftPremium{}
	flags := m.Int()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	tl.Months = m.Int()
	if flags&(1<<0) != 0 {
		tl.CryptoCurrency = Ref(m.String())
	}
	if flags&(1<<0) != 0 {
		tl.CryptoAmount = Ref(m.Long())
	}
	return tl
}

func decode_TL_messageActionTopicCreate(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionTopicCreate)
	return decode_body_TL_messageActionTopicCreate(m)
}
func decode_body_TL_messageActionTopicCreate(m *DecodeBuf) TL {
	tl := TL_messageActionTopicCreate{}
	flags := m.Int()
	tl.Title = m.String()
	tl.IconColor = m.Int()
	if flags&(1<<0) != 0 {
		tl.IconEmojiID = Ref(m.Long())
	}
	return tl
}

func decode_TL_messageActionTopicEdit(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionTopicEdit)
	return decode_body_TL_messageActionTopicEdit(m)
}
func decode_body_TL_messageActionTopicEdit(m *DecodeBuf) TL {
	tl := TL_messageActionTopicEdit{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.IconEmojiID = Ref(m.Long())
	}
	if flags&(1<<2) != 0 {
		tl.Closed = Ref(m.Bool())
	}
	if flags&(1<<3) != 0 {
		tl.Hidden = Ref(m.Bool())
	}
	return tl
}

func decode_TL_messageActionSuggestProfilePhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionSuggestProfilePhoto)
	return decode_body_TL_messageActionSuggestProfilePhoto(m)
}
func decode_body_TL_messageActionSuggestProfilePhoto(m *DecodeBuf) TL {
	tl := TL_messageActionSuggestProfilePhoto{}
	tl.Photo = m.Object()
	return tl
}

func decode_TL_messageActionRequestedPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionRequestedPeer)
	return decode_body_TL_messageActionRequestedPeer(m)
}
func decode_body_TL_messageActionRequestedPeer(m *DecodeBuf) TL {
	tl := TL_messageActionRequestedPeer{}
	tl.ButtonID = m.Int()
	tl.Peers = m.Vector()
	return tl
}

func decode_TL_messageActionSetChatWallPaper(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionSetChatWallPaper)
	return decode_body_TL_messageActionSetChatWallPaper(m)
}
func decode_body_TL_messageActionSetChatWallPaper(m *DecodeBuf) TL {
	tl := TL_messageActionSetChatWallPaper{}
	flags := m.Int()
	tl.Same = flags&(1<<0) != 0
	tl.ForBoth = flags&(1<<1) != 0
	tl.Wallpaper = m.Object()
	return tl
}

func decode_TL_messageActionGiftCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionGiftCode)
	return decode_body_TL_messageActionGiftCode(m)
}
func decode_body_TL_messageActionGiftCode(m *DecodeBuf) TL {
	tl := TL_messageActionGiftCode{}
	flags := m.Int()
	tl.ViaGiveaway = flags&(1<<0) != 0
	tl.Unclaimed = flags&(1<<2) != 0
	if flags&(1<<1) != 0 {
		tl.BoostPeer = m.Object()
	}
	tl.Months = m.Int()
	tl.Slug = m.String()
	if flags&(1<<2) != 0 {
		tl.Currency = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Amount = Ref(m.Long())
	}
	if flags&(1<<3) != 0 {
		tl.CryptoCurrency = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.CryptoAmount = Ref(m.Long())
	}
	return tl
}

func decode_TL_messageActionGiveawayLaunch(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionGiveawayLaunch)
	return decode_body_TL_messageActionGiveawayLaunch(m)
}
func decode_body_TL_messageActionGiveawayLaunch(m *DecodeBuf) TL {
	tl := TL_messageActionGiveawayLaunch{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Stars = Ref(m.Long())
	}
	return tl
}

func decode_TL_messageActionGiveawayResults(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionGiveawayResults)
	return decode_body_TL_messageActionGiveawayResults(m)
}
func decode_body_TL_messageActionGiveawayResults(m *DecodeBuf) TL {
	tl := TL_messageActionGiveawayResults{}
	flags := m.Int()
	tl.Stars = flags&(1<<0) != 0
	tl.WinnersCount = m.Int()
	tl.UnclaimedCount = m.Int()
	return tl
}

func decode_TL_messageActionBoostApply(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionBoostApply)
	return decode_body_TL_messageActionBoostApply(m)
}
func decode_body_TL_messageActionBoostApply(m *DecodeBuf) TL {
	tl := TL_messageActionBoostApply{}
	tl.Boosts = m.Int()
	return tl
}

func decode_TL_messageActionRequestedPeerSentMe(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionRequestedPeerSentMe)
	return decode_body_TL_messageActionRequestedPeerSentMe(m)
}
func decode_body_TL_messageActionRequestedPeerSentMe(m *DecodeBuf) TL {
	tl := TL_messageActionRequestedPeerSentMe{}
	tl.ButtonID = m.Int()
	tl.Peers = m.Vector()
	return tl
}

func decode_TL_messageActionPaymentRefunded(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionPaymentRefunded)
	return decode_body_TL_messageActionPaymentRefunded(m)
}
func decode_body_TL_messageActionPaymentRefunded(m *DecodeBuf) TL {
	tl := TL_messageActionPaymentRefunded{}
	flags := m.Int()
	tl.Peer = m.Object()
	tl.Currency = m.String()
	tl.TotalAmount = m.Long()
	if flags&(1<<0) != 0 {
		tl.Payload = m.StringBytes()
	}
	tl.Charge = decode_TL_paymentCharge(m).(TL_paymentCharge)
	return tl
}

func decode_TL_messageActionGiftStars(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionGiftStars)
	return decode_body_TL_messageActionGiftStars(m)
}
func decode_body_TL_messageActionGiftStars(m *DecodeBuf) TL {
	tl := TL_messageActionGiftStars{}
	flags := m.Int()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	tl.Stars = m.Long()
	if flags&(1<<0) != 0 {
		tl.CryptoCurrency = Ref(m.String())
	}
	if flags&(1<<0) != 0 {
		tl.CryptoAmount = Ref(m.Long())
	}
	if flags&(1<<1) != 0 {
		tl.TransactionID = Ref(m.String())
	}
	return tl
}

func decode_TL_messageActionPrizeStars(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageActionPrizeStars)
	return decode_body_TL_messageActionPrizeStars(m)
}
func decode_body_TL_messageActionPrizeStars(m *DecodeBuf) TL {
	tl := TL_messageActionPrizeStars{}
	flags := m.Int()
	tl.Unclaimed = flags&(1<<0) != 0
	tl.Stars = m.Long()
	tl.TransactionID = m.String()
	tl.BoostPeer = m.Object()
	tl.GiveawayMsgID = m.Int()
	return tl
}

func decode_TL_dialog(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dialog)
	return decode_body_TL_dialog(m)
}
func decode_body_TL_dialog(m *DecodeBuf) TL {
	tl := TL_dialog{}
	flags := m.Int()
	tl.Pinned = flags&(1<<2) != 0
	tl.UnreadMark = flags&(1<<3) != 0
	tl.ViewForumAsMessages = flags&(1<<6) != 0
	tl.Peer = m.Object()
	tl.TopMessage = m.Int()
	tl.ReadInboxMaxID = m.Int()
	tl.ReadOutboxMaxID = m.Int()
	tl.UnreadCount = m.Int()
	tl.UnreadMentionsCount = m.Int()
	tl.UnreadReactionsCount = m.Int()
	tl.NotifySettings = decode_TL_peerNotifySettings(m).(TL_peerNotifySettings)
	if flags&(1<<0) != 0 {
		tl.PTS = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.Draft = m.Object()
	}
	if flags&(1<<4) != 0 {
		tl.FolderID = Ref(m.Int())
	}
	if flags&(1<<5) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	return tl
}

func decode_TL_dialogFolder(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dialogFolder)
	return decode_body_TL_dialogFolder(m)
}
func decode_body_TL_dialogFolder(m *DecodeBuf) TL {
	tl := TL_dialogFolder{}
	flags := m.Int()
	tl.Pinned = flags&(1<<2) != 0
	tl.Folder = decode_TL_folder(m).(TL_folder)
	tl.Peer = m.Object()
	tl.TopMessage = m.Int()
	tl.UnreadMutedPeersCount = m.Int()
	tl.UnreadUnmutedPeersCount = m.Int()
	tl.UnreadMutedMessagesCount = m.Int()
	tl.UnreadUnmutedMessagesCount = m.Int()
	return tl
}

func decode_TL_photoEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photoEmpty)
	return decode_body_TL_photoEmpty(m)
}
func decode_body_TL_photoEmpty(m *DecodeBuf) TL {
	tl := TL_photoEmpty{}
	tl.ID = m.Long()
	return tl
}

func decode_TL_photo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photo)
	return decode_body_TL_photo(m)
}
func decode_body_TL_photo(m *DecodeBuf) TL {
	tl := TL_photo{}
	flags := m.Int()
	tl.HasStickers = flags&(1<<0) != 0
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.FileReference = m.StringBytes()
	tl.Date = m.Int()
	tl.Sizes = m.Vector()
	if flags&(1<<1) != 0 {
		tl.VideoSizes = m.Vector()
	}
	tl.DCID = m.Int()
	return tl
}

func decode_TL_photoSizeEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photoSizeEmpty)
	return decode_body_TL_photoSizeEmpty(m)
}
func decode_body_TL_photoSizeEmpty(m *DecodeBuf) TL {
	tl := TL_photoSizeEmpty{}
	tl.Type = m.String()
	return tl
}

func decode_TL_photoSize(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photoSize)
	return decode_body_TL_photoSize(m)
}
func decode_body_TL_photoSize(m *DecodeBuf) TL {
	tl := TL_photoSize{}
	tl.Type = m.String()
	tl.W = m.Int()
	tl.H = m.Int()
	tl.Size = m.Int()
	return tl
}

func decode_TL_photoCachedSize(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photoCachedSize)
	return decode_body_TL_photoCachedSize(m)
}
func decode_body_TL_photoCachedSize(m *DecodeBuf) TL {
	tl := TL_photoCachedSize{}
	tl.Type = m.String()
	tl.W = m.Int()
	tl.H = m.Int()
	tl.Bytes = m.StringBytes()
	return tl
}

func decode_TL_photoStrippedSize(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photoStrippedSize)
	return decode_body_TL_photoStrippedSize(m)
}
func decode_body_TL_photoStrippedSize(m *DecodeBuf) TL {
	tl := TL_photoStrippedSize{}
	tl.Type = m.String()
	tl.Bytes = m.StringBytes()
	return tl
}

func decode_TL_photoSizeProgressive(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photoSizeProgressive)
	return decode_body_TL_photoSizeProgressive(m)
}
func decode_body_TL_photoSizeProgressive(m *DecodeBuf) TL {
	tl := TL_photoSizeProgressive{}
	tl.Type = m.String()
	tl.W = m.Int()
	tl.H = m.Int()
	tl.Sizes = m.VectorInt()
	return tl
}

func decode_TL_photoPathSize(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photoPathSize)
	return decode_body_TL_photoPathSize(m)
}
func decode_body_TL_photoPathSize(m *DecodeBuf) TL {
	tl := TL_photoPathSize{}
	tl.Type = m.String()
	tl.Bytes = m.StringBytes()
	return tl
}

func decode_TL_geoPointEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_geoPointEmpty)
	return decode_body_TL_geoPointEmpty(m)
}
func decode_body_TL_geoPointEmpty(_ *DecodeBuf) TL {
	tl := TL_geoPointEmpty{}
	return tl
}

func decode_TL_geoPoint(m *DecodeBuf) TL {
	m.constructorAssert(CRC_geoPoint)
	return decode_body_TL_geoPoint(m)
}
func decode_body_TL_geoPoint(m *DecodeBuf) TL {
	tl := TL_geoPoint{}
	flags := m.Int()
	tl.Long = m.Double()
	tl.Lat = m.Double()
	tl.AccessHash = m.Long()
	if flags&(1<<0) != 0 {
		tl.AccuracyRadius = Ref(m.Int())
	}
	return tl
}

func decode_TL_auth_sentCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCode)
	return decode_body_TL_auth_sentCode(m)
}
func decode_body_TL_auth_sentCode(m *DecodeBuf) TL {
	tl := TL_auth_sentCode{}
	flags := m.Int()
	tl.Type = m.Object()
	tl.PhoneCodeHash = m.String()
	if flags&(1<<1) != 0 {
		tl.NextType = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.Timeout = Ref(m.Int())
	}
	return tl
}

func decode_TL_auth_sentCodeSuccess(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeSuccess)
	return decode_body_TL_auth_sentCodeSuccess(m)
}
func decode_body_TL_auth_sentCodeSuccess(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeSuccess{}
	tl.Authorization = m.Object()
	return tl
}

func decode_TL_auth_authorization(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_authorization)
	return decode_body_TL_auth_authorization(m)
}
func decode_body_TL_auth_authorization(m *DecodeBuf) TL {
	tl := TL_auth_authorization{}
	flags := m.Int()
	tl.SetupPasswordRequired = flags&(1<<1) != 0
	if flags&(1<<1) != 0 {
		tl.OtherwiseReloginDays = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.TmpSessions = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.FutureAuthToken = m.StringBytes()
	}
	tl.User = m.Object()
	return tl
}

func decode_TL_auth_authorizationSignUpRequired(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_authorizationSignUpRequired)
	return decode_body_TL_auth_authorizationSignUpRequired(m)
}
func decode_body_TL_auth_authorizationSignUpRequired(m *DecodeBuf) TL {
	tl := TL_auth_authorizationSignUpRequired{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.TermsOfService = Ref(decode_TL_help_termsOfService(m).(TL_help_termsOfService))
	}
	return tl
}

func decode_TL_auth_exportedAuthorization(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_exportedAuthorization)
	return decode_body_TL_auth_exportedAuthorization(m)
}
func decode_body_TL_auth_exportedAuthorization(m *DecodeBuf) TL {
	tl := TL_auth_exportedAuthorization{}
	tl.ID = m.Long()
	tl.Bytes = m.StringBytes()
	return tl
}

func decode_TL_inputNotifyPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputNotifyPeer)
	return decode_body_TL_inputNotifyPeer(m)
}
func decode_body_TL_inputNotifyPeer(m *DecodeBuf) TL {
	tl := TL_inputNotifyPeer{}
	tl.Peer = m.Object()
	return tl
}

func decode_TL_inputNotifyUsers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputNotifyUsers)
	return decode_body_TL_inputNotifyUsers(m)
}
func decode_body_TL_inputNotifyUsers(_ *DecodeBuf) TL {
	tl := TL_inputNotifyUsers{}
	return tl
}

func decode_TL_inputNotifyChats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputNotifyChats)
	return decode_body_TL_inputNotifyChats(m)
}
func decode_body_TL_inputNotifyChats(_ *DecodeBuf) TL {
	tl := TL_inputNotifyChats{}
	return tl
}

func decode_TL_inputNotifyBroadcasts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputNotifyBroadcasts)
	return decode_body_TL_inputNotifyBroadcasts(m)
}
func decode_body_TL_inputNotifyBroadcasts(_ *DecodeBuf) TL {
	tl := TL_inputNotifyBroadcasts{}
	return tl
}

func decode_TL_inputNotifyForumTopic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputNotifyForumTopic)
	return decode_body_TL_inputNotifyForumTopic(m)
}
func decode_body_TL_inputNotifyForumTopic(m *DecodeBuf) TL {
	tl := TL_inputNotifyForumTopic{}
	tl.Peer = m.Object()
	tl.TopMsgID = m.Int()
	return tl
}

func decode_TL_inputPeerNotifySettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPeerNotifySettings)
	return decode_body_TL_inputPeerNotifySettings(m)
}
func decode_body_TL_inputPeerNotifySettings(m *DecodeBuf) TL {
	tl := TL_inputPeerNotifySettings{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.ShowPreviews = Ref(m.Bool())
	}
	if flags&(1<<1) != 0 {
		tl.Silent = Ref(m.Bool())
	}
	if flags&(1<<2) != 0 {
		tl.MuteUntil = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.Sound = m.Object()
	}
	if flags&(1<<6) != 0 {
		tl.StoriesMuted = Ref(m.Bool())
	}
	if flags&(1<<7) != 0 {
		tl.StoriesHideSender = Ref(m.Bool())
	}
	if flags&(1<<8) != 0 {
		tl.StoriesSound = m.Object()
	}
	return tl
}

func decode_TL_peerNotifySettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerNotifySettings)
	return decode_body_TL_peerNotifySettings(m)
}
func decode_body_TL_peerNotifySettings(m *DecodeBuf) TL {
	tl := TL_peerNotifySettings{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.ShowPreviews = Ref(m.Bool())
	}
	if flags&(1<<1) != 0 {
		tl.Silent = Ref(m.Bool())
	}
	if flags&(1<<2) != 0 {
		tl.MuteUntil = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.IOSSound = m.Object()
	}
	if flags&(1<<4) != 0 {
		tl.AndroidSound = m.Object()
	}
	if flags&(1<<5) != 0 {
		tl.OtherSound = m.Object()
	}
	if flags&(1<<6) != 0 {
		tl.StoriesMuted = Ref(m.Bool())
	}
	if flags&(1<<7) != 0 {
		tl.StoriesHideSender = Ref(m.Bool())
	}
	if flags&(1<<8) != 0 {
		tl.StoriesIOSSound = m.Object()
	}
	if flags&(1<<9) != 0 {
		tl.StoriesAndroidSound = m.Object()
	}
	if flags&(1<<10) != 0 {
		tl.StoriesOtherSound = m.Object()
	}
	return tl
}

func decode_TL_peerSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerSettings)
	return decode_body_TL_peerSettings(m)
}
func decode_body_TL_peerSettings(m *DecodeBuf) TL {
	tl := TL_peerSettings{}
	flags := m.Int()
	tl.ReportSpam = flags&(1<<0) != 0
	tl.AddContact = flags&(1<<1) != 0
	tl.BlockContact = flags&(1<<2) != 0
	tl.ShareContact = flags&(1<<3) != 0
	tl.NeedContactsException = flags&(1<<4) != 0
	tl.ReportGeo = flags&(1<<5) != 0
	tl.Autoarchived = flags&(1<<7) != 0
	tl.InviteMembers = flags&(1<<8) != 0
	tl.RequestChatBroadcast = flags&(1<<10) != 0
	tl.BusinessBotPaused = flags&(1<<11) != 0
	tl.BusinessBotCanReply = flags&(1<<12) != 0
	if flags&(1<<6) != 0 {
		tl.GeoDistance = Ref(m.Int())
	}
	if flags&(1<<9) != 0 {
		tl.RequestChatTitle = Ref(m.String())
	}
	if flags&(1<<9) != 0 {
		tl.RequestChatDate = Ref(m.Int())
	}
	if flags&(1<<13) != 0 {
		tl.BusinessBotID = Ref(m.Long())
	}
	if flags&(1<<13) != 0 {
		tl.BusinessBotManageURL = Ref(m.String())
	}
	return tl
}

func decode_TL_wallPaper(m *DecodeBuf) TL {
	m.constructorAssert(CRC_wallPaper)
	return decode_body_TL_wallPaper(m)
}
func decode_body_TL_wallPaper(m *DecodeBuf) TL {
	tl := TL_wallPaper{}
	tl.ID = m.Long()
	flags := m.Int()
	tl.Creator = flags&(1<<0) != 0
	tl.Default = flags&(1<<1) != 0
	tl.Pattern = flags&(1<<3) != 0
	tl.Dark = flags&(1<<4) != 0
	tl.AccessHash = m.Long()
	tl.Slug = m.String()
	tl.Document = m.Object()
	if flags&(1<<2) != 0 {
		tl.Settings = Ref(decode_TL_wallPaperSettings(m).(TL_wallPaperSettings))
	}
	return tl
}

func decode_TL_wallPaperNoFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_wallPaperNoFile)
	return decode_body_TL_wallPaperNoFile(m)
}
func decode_body_TL_wallPaperNoFile(m *DecodeBuf) TL {
	tl := TL_wallPaperNoFile{}
	tl.ID = m.Long()
	flags := m.Int()
	tl.Default = flags&(1<<1) != 0
	tl.Dark = flags&(1<<4) != 0
	if flags&(1<<2) != 0 {
		tl.Settings = Ref(decode_TL_wallPaperSettings(m).(TL_wallPaperSettings))
	}
	return tl
}

func decode_TL_inputReportReasonSpam(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonSpam)
	return decode_body_TL_inputReportReasonSpam(m)
}
func decode_body_TL_inputReportReasonSpam(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonSpam{}
	return tl
}

func decode_TL_inputReportReasonViolence(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonViolence)
	return decode_body_TL_inputReportReasonViolence(m)
}
func decode_body_TL_inputReportReasonViolence(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonViolence{}
	return tl
}

func decode_TL_inputReportReasonPornography(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonPornography)
	return decode_body_TL_inputReportReasonPornography(m)
}
func decode_body_TL_inputReportReasonPornography(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonPornography{}
	return tl
}

func decode_TL_inputReportReasonChildAbuse(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonChildAbuse)
	return decode_body_TL_inputReportReasonChildAbuse(m)
}
func decode_body_TL_inputReportReasonChildAbuse(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonChildAbuse{}
	return tl
}

func decode_TL_inputReportReasonOther(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonOther)
	return decode_body_TL_inputReportReasonOther(m)
}
func decode_body_TL_inputReportReasonOther(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonOther{}
	return tl
}

func decode_TL_inputReportReasonCopyright(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonCopyright)
	return decode_body_TL_inputReportReasonCopyright(m)
}
func decode_body_TL_inputReportReasonCopyright(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonCopyright{}
	return tl
}

func decode_TL_inputReportReasonGeoIrrelevant(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonGeoIrrelevant)
	return decode_body_TL_inputReportReasonGeoIrrelevant(m)
}
func decode_body_TL_inputReportReasonGeoIrrelevant(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonGeoIrrelevant{}
	return tl
}

func decode_TL_inputReportReasonFake(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonFake)
	return decode_body_TL_inputReportReasonFake(m)
}
func decode_body_TL_inputReportReasonFake(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonFake{}
	return tl
}

func decode_TL_inputReportReasonIllegalDrugs(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonIllegalDrugs)
	return decode_body_TL_inputReportReasonIllegalDrugs(m)
}
func decode_body_TL_inputReportReasonIllegalDrugs(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonIllegalDrugs{}
	return tl
}

func decode_TL_inputReportReasonPersonalDetails(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReportReasonPersonalDetails)
	return decode_body_TL_inputReportReasonPersonalDetails(m)
}
func decode_body_TL_inputReportReasonPersonalDetails(_ *DecodeBuf) TL {
	tl := TL_inputReportReasonPersonalDetails{}
	return tl
}

func decode_TL_userFull(m *DecodeBuf) TL {
	m.constructorAssert(CRC_userFull)
	return decode_body_TL_userFull(m)
}
func decode_body_TL_userFull(m *DecodeBuf) TL {
	tl := TL_userFull{}
	flags := m.Int()
	tl.Blocked = flags&(1<<0) != 0
	tl.PhoneCallsAvailable = flags&(1<<4) != 0
	tl.PhoneCallsPrivate = flags&(1<<5) != 0
	tl.CanPINMessage = flags&(1<<7) != 0
	tl.HasScheduled = flags&(1<<12) != 0
	tl.VideoCallsAvailable = flags&(1<<13) != 0
	tl.VoiceMessagesForbidden = flags&(1<<20) != 0
	tl.TranslationsDisabled = flags&(1<<23) != 0
	tl.StoriesPinnedAvailable = flags&(1<<26) != 0
	tl.BlockedMyStoriesFrom = flags&(1<<27) != 0
	tl.WallpaperOverridden = flags&(1<<28) != 0
	tl.ContactRequirePremium = flags&(1<<29) != 0
	tl.ReadDatesPrivate = flags&(1<<30) != 0
	flags2 := m.Int()
	tl.SponsoredEnabled = flags2&(1<<7) != 0
	tl.ID = m.Long()
	if flags&(1<<1) != 0 {
		tl.About = Ref(m.String())
	}
	tl.Settings = decode_TL_peerSettings(m).(TL_peerSettings)
	if flags&(1<<21) != 0 {
		tl.PersonalPhoto = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.ProfilePhoto = m.Object()
	}
	if flags&(1<<22) != 0 {
		tl.FallbackPhoto = m.Object()
	}
	tl.NotifySettings = decode_TL_peerNotifySettings(m).(TL_peerNotifySettings)
	if flags&(1<<3) != 0 {
		tl.BotInfo = Ref(decode_TL_botInfo(m).(TL_botInfo))
	}
	if flags&(1<<6) != 0 {
		tl.PinnedMsgID = Ref(m.Int())
	}
	tl.CommonChatsCount = m.Int()
	if flags&(1<<11) != 0 {
		tl.FolderID = Ref(m.Int())
	}
	if flags&(1<<14) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	if flags&(1<<15) != 0 {
		tl.ThemeEmoticon = Ref(m.String())
	}
	if flags&(1<<16) != 0 {
		tl.PrivateForwardName = Ref(m.String())
	}
	if flags&(1<<17) != 0 {
		tl.BotGroupAdminRights = Ref(decode_TL_chatAdminRights(m).(TL_chatAdminRights))
	}
	if flags&(1<<18) != 0 {
		tl.BotBroadcastAdminRights = Ref(decode_TL_chatAdminRights(m).(TL_chatAdminRights))
	}
	if flags&(1<<19) != 0 {
		tl.PremiumGifts = DecodeBuf_GenericVector[TL_premiumGiftOption](m)
	}
	if flags&(1<<24) != 0 {
		tl.Wallpaper = m.Object()
	}
	if flags&(1<<25) != 0 {
		tl.Stories = Ref(decode_TL_peerStories(m).(TL_peerStories))
	}
	if flags2&(1<<0) != 0 {
		tl.BusinessWorkHours = Ref(decode_TL_businessWorkHours(m).(TL_businessWorkHours))
	}
	if flags2&(1<<1) != 0 {
		tl.BusinessLocation = Ref(decode_TL_businessLocation(m).(TL_businessLocation))
	}
	if flags2&(1<<2) != 0 {
		tl.BusinessGreetingMessage = Ref(decode_TL_businessGreetingMessage(m).(TL_businessGreetingMessage))
	}
	if flags2&(1<<3) != 0 {
		tl.BusinessAwayMessage = Ref(decode_TL_businessAwayMessage(m).(TL_businessAwayMessage))
	}
	if flags2&(1<<4) != 0 {
		tl.BusinessIntro = Ref(decode_TL_businessIntro(m).(TL_businessIntro))
	}
	if flags2&(1<<5) != 0 {
		tl.Birthday = Ref(decode_TL_birthday(m).(TL_birthday))
	}
	if flags2&(1<<6) != 0 {
		tl.PersonalChannelID = Ref(m.Long())
	}
	if flags2&(1<<6) != 0 {
		tl.PersonalChannelMessage = Ref(m.Int())
	}
	return tl
}

func decode_TL_contact(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contact)
	return decode_body_TL_contact(m)
}
func decode_body_TL_contact(m *DecodeBuf) TL {
	tl := TL_contact{}
	tl.UserID = m.Long()
	tl.Mutual = m.Bool()
	return tl
}

func decode_TL_importedContact(m *DecodeBuf) TL {
	m.constructorAssert(CRC_importedContact)
	return decode_body_TL_importedContact(m)
}
func decode_body_TL_importedContact(m *DecodeBuf) TL {
	tl := TL_importedContact{}
	tl.UserID = m.Long()
	tl.ClientID = m.Long()
	return tl
}

func decode_TL_contactStatus(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contactStatus)
	return decode_body_TL_contactStatus(m)
}
func decode_body_TL_contactStatus(m *DecodeBuf) TL {
	tl := TL_contactStatus{}
	tl.UserID = m.Long()
	tl.Status = m.Object()
	return tl
}

func decode_TL_contacts_contactsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_contactsNotModified)
	return decode_body_TL_contacts_contactsNotModified(m)
}
func decode_body_TL_contacts_contactsNotModified(_ *DecodeBuf) TL {
	tl := TL_contacts_contactsNotModified{}
	return tl
}

func decode_TL_contacts_contacts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_contacts)
	return decode_body_TL_contacts_contacts(m)
}
func decode_body_TL_contacts_contacts(m *DecodeBuf) TL {
	tl := TL_contacts_contacts{}
	tl.Contacts = DecodeBuf_GenericVector[TL_contact](m)
	tl.SavedCount = m.Int()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_contacts_importedContacts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_importedContacts)
	return decode_body_TL_contacts_importedContacts(m)
}
func decode_body_TL_contacts_importedContacts(m *DecodeBuf) TL {
	tl := TL_contacts_importedContacts{}
	tl.Imported = DecodeBuf_GenericVector[TL_importedContact](m)
	tl.PopularInvites = DecodeBuf_GenericVector[TL_popularContact](m)
	tl.RetryContacts = m.VectorLong()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_contacts_blocked(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_blocked)
	return decode_body_TL_contacts_blocked(m)
}
func decode_body_TL_contacts_blocked(m *DecodeBuf) TL {
	tl := TL_contacts_blocked{}
	tl.Blocked = DecodeBuf_GenericVector[TL_peerBlocked](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_contacts_blockedSlice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_blockedSlice)
	return decode_body_TL_contacts_blockedSlice(m)
}
func decode_body_TL_contacts_blockedSlice(m *DecodeBuf) TL {
	tl := TL_contacts_blockedSlice{}
	tl.Count = m.Int()
	tl.Blocked = DecodeBuf_GenericVector[TL_peerBlocked](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_dialogs(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_dialogs)
	return decode_body_TL_messages_dialogs(m)
}
func decode_body_TL_messages_dialogs(m *DecodeBuf) TL {
	tl := TL_messages_dialogs{}
	tl.Dialogs = m.Vector()
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_dialogsSlice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_dialogsSlice)
	return decode_body_TL_messages_dialogsSlice(m)
}
func decode_body_TL_messages_dialogsSlice(m *DecodeBuf) TL {
	tl := TL_messages_dialogsSlice{}
	tl.Count = m.Int()
	tl.Dialogs = m.Vector()
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_dialogsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_dialogsNotModified)
	return decode_body_TL_messages_dialogsNotModified(m)
}
func decode_body_TL_messages_dialogsNotModified(m *DecodeBuf) TL {
	tl := TL_messages_dialogsNotModified{}
	tl.Count = m.Int()
	return tl
}

func decode_TL_messages_messages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_messages)
	return decode_body_TL_messages_messages(m)
}
func decode_body_TL_messages_messages(m *DecodeBuf) TL {
	tl := TL_messages_messages{}
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_messagesSlice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_messagesSlice)
	return decode_body_TL_messages_messagesSlice(m)
}
func decode_body_TL_messages_messagesSlice(m *DecodeBuf) TL {
	tl := TL_messages_messagesSlice{}
	flags := m.Int()
	tl.Inexact = flags&(1<<1) != 0
	tl.Count = m.Int()
	if flags&(1<<0) != 0 {
		tl.NextRate = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.OffsetIDOffset = Ref(m.Int())
	}
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_channelMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_channelMessages)
	return decode_body_TL_messages_channelMessages(m)
}
func decode_body_TL_messages_channelMessages(m *DecodeBuf) TL {
	tl := TL_messages_channelMessages{}
	flags := m.Int()
	tl.Inexact = flags&(1<<1) != 0
	tl.PTS = m.Int()
	tl.Count = m.Int()
	if flags&(1<<2) != 0 {
		tl.OffsetIDOffset = Ref(m.Int())
	}
	tl.Messages = m.Vector()
	tl.Topics = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_messagesNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_messagesNotModified)
	return decode_body_TL_messages_messagesNotModified(m)
}
func decode_body_TL_messages_messagesNotModified(m *DecodeBuf) TL {
	tl := TL_messages_messagesNotModified{}
	tl.Count = m.Int()
	return tl
}

func decode_TL_messages_chats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_chats)
	return decode_body_TL_messages_chats(m)
}
func decode_body_TL_messages_chats(m *DecodeBuf) TL {
	tl := TL_messages_chats{}
	tl.Chats = m.Vector()
	return tl
}

func decode_TL_messages_chatsSlice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_chatsSlice)
	return decode_body_TL_messages_chatsSlice(m)
}
func decode_body_TL_messages_chatsSlice(m *DecodeBuf) TL {
	tl := TL_messages_chatsSlice{}
	tl.Count = m.Int()
	tl.Chats = m.Vector()
	return tl
}

func decode_TL_messages_chatFull(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_chatFull)
	return decode_body_TL_messages_chatFull(m)
}
func decode_body_TL_messages_chatFull(m *DecodeBuf) TL {
	tl := TL_messages_chatFull{}
	tl.FullChat = m.Object()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_affectedHistory(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_affectedHistory)
	return decode_body_TL_messages_affectedHistory(m)
}
func decode_body_TL_messages_affectedHistory(m *DecodeBuf) TL {
	tl := TL_messages_affectedHistory{}
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	tl.Offset = m.Int()
	return tl
}

func decode_TL_inputMessagesFilterEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterEmpty)
	return decode_body_TL_inputMessagesFilterEmpty(m)
}
func decode_body_TL_inputMessagesFilterEmpty(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterEmpty{}
	return tl
}

func decode_TL_inputMessagesFilterPhotos(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterPhotos)
	return decode_body_TL_inputMessagesFilterPhotos(m)
}
func decode_body_TL_inputMessagesFilterPhotos(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterPhotos{}
	return tl
}

func decode_TL_inputMessagesFilterVideo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterVideo)
	return decode_body_TL_inputMessagesFilterVideo(m)
}
func decode_body_TL_inputMessagesFilterVideo(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterVideo{}
	return tl
}

func decode_TL_inputMessagesFilterPhotoVideo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterPhotoVideo)
	return decode_body_TL_inputMessagesFilterPhotoVideo(m)
}
func decode_body_TL_inputMessagesFilterPhotoVideo(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterPhotoVideo{}
	return tl
}

func decode_TL_inputMessagesFilterDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterDocument)
	return decode_body_TL_inputMessagesFilterDocument(m)
}
func decode_body_TL_inputMessagesFilterDocument(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterDocument{}
	return tl
}

func decode_TL_inputMessagesFilterURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterURL)
	return decode_body_TL_inputMessagesFilterURL(m)
}
func decode_body_TL_inputMessagesFilterURL(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterURL{}
	return tl
}

func decode_TL_inputMessagesFilterGIF(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterGIF)
	return decode_body_TL_inputMessagesFilterGIF(m)
}
func decode_body_TL_inputMessagesFilterGIF(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterGIF{}
	return tl
}

func decode_TL_inputMessagesFilterVoice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterVoice)
	return decode_body_TL_inputMessagesFilterVoice(m)
}
func decode_body_TL_inputMessagesFilterVoice(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterVoice{}
	return tl
}

func decode_TL_inputMessagesFilterMusic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterMusic)
	return decode_body_TL_inputMessagesFilterMusic(m)
}
func decode_body_TL_inputMessagesFilterMusic(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterMusic{}
	return tl
}

func decode_TL_inputMessagesFilterChatPhotos(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterChatPhotos)
	return decode_body_TL_inputMessagesFilterChatPhotos(m)
}
func decode_body_TL_inputMessagesFilterChatPhotos(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterChatPhotos{}
	return tl
}

func decode_TL_inputMessagesFilterPhoneCalls(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterPhoneCalls)
	return decode_body_TL_inputMessagesFilterPhoneCalls(m)
}
func decode_body_TL_inputMessagesFilterPhoneCalls(m *DecodeBuf) TL {
	tl := TL_inputMessagesFilterPhoneCalls{}
	flags := m.Int()
	tl.Missed = flags&(1<<0) != 0
	return tl
}

func decode_TL_inputMessagesFilterRoundVoice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterRoundVoice)
	return decode_body_TL_inputMessagesFilterRoundVoice(m)
}
func decode_body_TL_inputMessagesFilterRoundVoice(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterRoundVoice{}
	return tl
}

func decode_TL_inputMessagesFilterRoundVideo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterRoundVideo)
	return decode_body_TL_inputMessagesFilterRoundVideo(m)
}
func decode_body_TL_inputMessagesFilterRoundVideo(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterRoundVideo{}
	return tl
}

func decode_TL_inputMessagesFilterMyMentions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterMyMentions)
	return decode_body_TL_inputMessagesFilterMyMentions(m)
}
func decode_body_TL_inputMessagesFilterMyMentions(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterMyMentions{}
	return tl
}

func decode_TL_inputMessagesFilterGeo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterGeo)
	return decode_body_TL_inputMessagesFilterGeo(m)
}
func decode_body_TL_inputMessagesFilterGeo(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterGeo{}
	return tl
}

func decode_TL_inputMessagesFilterContacts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterContacts)
	return decode_body_TL_inputMessagesFilterContacts(m)
}
func decode_body_TL_inputMessagesFilterContacts(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterContacts{}
	return tl
}

func decode_TL_inputMessagesFilterPinned(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagesFilterPinned)
	return decode_body_TL_inputMessagesFilterPinned(m)
}
func decode_body_TL_inputMessagesFilterPinned(_ *DecodeBuf) TL {
	tl := TL_inputMessagesFilterPinned{}
	return tl
}

func decode_TL_updateNewMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateNewMessage)
	return decode_body_TL_updateNewMessage(m)
}
func decode_body_TL_updateNewMessage(m *DecodeBuf) TL {
	tl := TL_updateNewMessage{}
	tl.Message = m.Object()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateMessageID(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateMessageID)
	return decode_body_TL_updateMessageID(m)
}
func decode_body_TL_updateMessageID(m *DecodeBuf) TL {
	tl := TL_updateMessageID{}
	tl.ID = m.Int()
	tl.RandomID = m.Long()
	return tl
}

func decode_TL_updateDeleteMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDeleteMessages)
	return decode_body_TL_updateDeleteMessages(m)
}
func decode_body_TL_updateDeleteMessages(m *DecodeBuf) TL {
	tl := TL_updateDeleteMessages{}
	tl.Messages = m.VectorInt()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateUserTyping(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateUserTyping)
	return decode_body_TL_updateUserTyping(m)
}
func decode_body_TL_updateUserTyping(m *DecodeBuf) TL {
	tl := TL_updateUserTyping{}
	tl.UserID = m.Long()
	tl.Action = m.Object()
	return tl
}

func decode_TL_updateChatUserTyping(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChatUserTyping)
	return decode_body_TL_updateChatUserTyping(m)
}
func decode_body_TL_updateChatUserTyping(m *DecodeBuf) TL {
	tl := TL_updateChatUserTyping{}
	tl.ChatID = m.Long()
	tl.FromID = m.Object()
	tl.Action = m.Object()
	return tl
}

func decode_TL_updateChatParticipants(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChatParticipants)
	return decode_body_TL_updateChatParticipants(m)
}
func decode_body_TL_updateChatParticipants(m *DecodeBuf) TL {
	tl := TL_updateChatParticipants{}
	tl.Participants = m.Object()
	return tl
}

func decode_TL_updateUserStatus(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateUserStatus)
	return decode_body_TL_updateUserStatus(m)
}
func decode_body_TL_updateUserStatus(m *DecodeBuf) TL {
	tl := TL_updateUserStatus{}
	tl.UserID = m.Long()
	tl.Status = m.Object()
	return tl
}

func decode_TL_updateUserName(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateUserName)
	return decode_body_TL_updateUserName(m)
}
func decode_body_TL_updateUserName(m *DecodeBuf) TL {
	tl := TL_updateUserName{}
	tl.UserID = m.Long()
	tl.FirstName = m.String()
	tl.LastName = m.String()
	tl.Usernames = DecodeBuf_GenericVector[TL_username](m)
	return tl
}

func decode_TL_updateNewAuthorization(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateNewAuthorization)
	return decode_body_TL_updateNewAuthorization(m)
}
func decode_body_TL_updateNewAuthorization(m *DecodeBuf) TL {
	tl := TL_updateNewAuthorization{}
	flags := m.Int()
	tl.Unconfirmed = flags&(1<<0) != 0
	tl.Hash = m.Long()
	if flags&(1<<0) != 0 {
		tl.Date = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.Device = Ref(m.String())
	}
	if flags&(1<<0) != 0 {
		tl.Location = Ref(m.String())
	}
	return tl
}

func decode_TL_updateNewEncryptedMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateNewEncryptedMessage)
	return decode_body_TL_updateNewEncryptedMessage(m)
}
func decode_body_TL_updateNewEncryptedMessage(m *DecodeBuf) TL {
	tl := TL_updateNewEncryptedMessage{}
	tl.Message = m.Object()
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateEncryptedChatTyping(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateEncryptedChatTyping)
	return decode_body_TL_updateEncryptedChatTyping(m)
}
func decode_body_TL_updateEncryptedChatTyping(m *DecodeBuf) TL {
	tl := TL_updateEncryptedChatTyping{}
	tl.ChatID = m.Int()
	return tl
}

func decode_TL_updateEncryption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateEncryption)
	return decode_body_TL_updateEncryption(m)
}
func decode_body_TL_updateEncryption(m *DecodeBuf) TL {
	tl := TL_updateEncryption{}
	tl.Chat = m.Object()
	tl.Date = m.Int()
	return tl
}

func decode_TL_updateEncryptedMessagesRead(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateEncryptedMessagesRead)
	return decode_body_TL_updateEncryptedMessagesRead(m)
}
func decode_body_TL_updateEncryptedMessagesRead(m *DecodeBuf) TL {
	tl := TL_updateEncryptedMessagesRead{}
	tl.ChatID = m.Int()
	tl.MaxDate = m.Int()
	tl.Date = m.Int()
	return tl
}

func decode_TL_updateChatParticipantAdd(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChatParticipantAdd)
	return decode_body_TL_updateChatParticipantAdd(m)
}
func decode_body_TL_updateChatParticipantAdd(m *DecodeBuf) TL {
	tl := TL_updateChatParticipantAdd{}
	tl.ChatID = m.Long()
	tl.UserID = m.Long()
	tl.InviterID = m.Long()
	tl.Date = m.Int()
	tl.Version = m.Int()
	return tl
}

func decode_TL_updateChatParticipantDelete(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChatParticipantDelete)
	return decode_body_TL_updateChatParticipantDelete(m)
}
func decode_body_TL_updateChatParticipantDelete(m *DecodeBuf) TL {
	tl := TL_updateChatParticipantDelete{}
	tl.ChatID = m.Long()
	tl.UserID = m.Long()
	tl.Version = m.Int()
	return tl
}

func decode_TL_updateDCOptions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDCOptions)
	return decode_body_TL_updateDCOptions(m)
}
func decode_body_TL_updateDCOptions(m *DecodeBuf) TL {
	tl := TL_updateDCOptions{}
	tl.DCOptions = DecodeBuf_GenericVector[TL_dcOption](m)
	return tl
}

func decode_TL_updateNotifySettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateNotifySettings)
	return decode_body_TL_updateNotifySettings(m)
}
func decode_body_TL_updateNotifySettings(m *DecodeBuf) TL {
	tl := TL_updateNotifySettings{}
	tl.Peer = m.Object()
	tl.NotifySettings = decode_TL_peerNotifySettings(m).(TL_peerNotifySettings)
	return tl
}

func decode_TL_updateServiceNotification(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateServiceNotification)
	return decode_body_TL_updateServiceNotification(m)
}
func decode_body_TL_updateServiceNotification(m *DecodeBuf) TL {
	tl := TL_updateServiceNotification{}
	flags := m.Int()
	tl.Popup = flags&(1<<0) != 0
	tl.InvertMedia = flags&(1<<2) != 0
	if flags&(1<<1) != 0 {
		tl.InboxDate = Ref(m.Int())
	}
	tl.Type = m.String()
	tl.Message = m.String()
	tl.Media = m.Object()
	tl.Entities = m.Vector()
	return tl
}

func decode_TL_updatePrivacy(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePrivacy)
	return decode_body_TL_updatePrivacy(m)
}
func decode_body_TL_updatePrivacy(m *DecodeBuf) TL {
	tl := TL_updatePrivacy{}
	tl.Key = m.Object()
	tl.Rules = m.Vector()
	return tl
}

func decode_TL_updateUserPhone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateUserPhone)
	return decode_body_TL_updateUserPhone(m)
}
func decode_body_TL_updateUserPhone(m *DecodeBuf) TL {
	tl := TL_updateUserPhone{}
	tl.UserID = m.Long()
	tl.Phone = m.String()
	return tl
}

func decode_TL_updateReadHistoryInbox(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadHistoryInbox)
	return decode_body_TL_updateReadHistoryInbox(m)
}
func decode_body_TL_updateReadHistoryInbox(m *DecodeBuf) TL {
	tl := TL_updateReadHistoryInbox{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.FolderID = Ref(m.Int())
	}
	tl.Peer = m.Object()
	tl.MaxID = m.Int()
	tl.StillUnreadCount = m.Int()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateReadHistoryOutbox(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadHistoryOutbox)
	return decode_body_TL_updateReadHistoryOutbox(m)
}
func decode_body_TL_updateReadHistoryOutbox(m *DecodeBuf) TL {
	tl := TL_updateReadHistoryOutbox{}
	tl.Peer = m.Object()
	tl.MaxID = m.Int()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateWebPage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateWebPage)
	return decode_body_TL_updateWebPage(m)
}
func decode_body_TL_updateWebPage(m *DecodeBuf) TL {
	tl := TL_updateWebPage{}
	tl.Webpage = m.Object()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateReadMessagesContents(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadMessagesContents)
	return decode_body_TL_updateReadMessagesContents(m)
}
func decode_body_TL_updateReadMessagesContents(m *DecodeBuf) TL {
	tl := TL_updateReadMessagesContents{}
	flags := m.Int()
	tl.Messages = m.VectorInt()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	if flags&(1<<0) != 0 {
		tl.Date = Ref(m.Int())
	}
	return tl
}

func decode_TL_updateChannelTooLong(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelTooLong)
	return decode_body_TL_updateChannelTooLong(m)
}
func decode_body_TL_updateChannelTooLong(m *DecodeBuf) TL {
	tl := TL_updateChannelTooLong{}
	flags := m.Int()
	tl.ChannelID = m.Long()
	if flags&(1<<0) != 0 {
		tl.PTS = Ref(m.Int())
	}
	return tl
}

func decode_TL_updateChannel(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannel)
	return decode_body_TL_updateChannel(m)
}
func decode_body_TL_updateChannel(m *DecodeBuf) TL {
	tl := TL_updateChannel{}
	tl.ChannelID = m.Long()
	return tl
}

func decode_TL_updateNewChannelMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateNewChannelMessage)
	return decode_body_TL_updateNewChannelMessage(m)
}
func decode_body_TL_updateNewChannelMessage(m *DecodeBuf) TL {
	tl := TL_updateNewChannelMessage{}
	tl.Message = m.Object()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateReadChannelInbox(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadChannelInbox)
	return decode_body_TL_updateReadChannelInbox(m)
}
func decode_body_TL_updateReadChannelInbox(m *DecodeBuf) TL {
	tl := TL_updateReadChannelInbox{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.FolderID = Ref(m.Int())
	}
	tl.ChannelID = m.Long()
	tl.MaxID = m.Int()
	tl.StillUnreadCount = m.Int()
	tl.PTS = m.Int()
	return tl
}

func decode_TL_updateDeleteChannelMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDeleteChannelMessages)
	return decode_body_TL_updateDeleteChannelMessages(m)
}
func decode_body_TL_updateDeleteChannelMessages(m *DecodeBuf) TL {
	tl := TL_updateDeleteChannelMessages{}
	tl.ChannelID = m.Long()
	tl.Messages = m.VectorInt()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateChannelMessageViews(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelMessageViews)
	return decode_body_TL_updateChannelMessageViews(m)
}
func decode_body_TL_updateChannelMessageViews(m *DecodeBuf) TL {
	tl := TL_updateChannelMessageViews{}
	tl.ChannelID = m.Long()
	tl.ID = m.Int()
	tl.Views = m.Int()
	return tl
}

func decode_TL_updateChatParticipantAdmin(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChatParticipantAdmin)
	return decode_body_TL_updateChatParticipantAdmin(m)
}
func decode_body_TL_updateChatParticipantAdmin(m *DecodeBuf) TL {
	tl := TL_updateChatParticipantAdmin{}
	tl.ChatID = m.Long()
	tl.UserID = m.Long()
	tl.IsAdmin = m.Bool()
	tl.Version = m.Int()
	return tl
}

func decode_TL_updateNewStickerSet(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateNewStickerSet)
	return decode_body_TL_updateNewStickerSet(m)
}
func decode_body_TL_updateNewStickerSet(m *DecodeBuf) TL {
	tl := TL_updateNewStickerSet{}
	tl.Stickerset = m.Object()
	return tl
}

func decode_TL_updateStickerSetsOrder(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateStickerSetsOrder)
	return decode_body_TL_updateStickerSetsOrder(m)
}
func decode_body_TL_updateStickerSetsOrder(m *DecodeBuf) TL {
	tl := TL_updateStickerSetsOrder{}
	flags := m.Int()
	tl.Masks = flags&(1<<0) != 0
	tl.Emojis = flags&(1<<1) != 0
	tl.Order = m.VectorLong()
	return tl
}

func decode_TL_updateStickerSets(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateStickerSets)
	return decode_body_TL_updateStickerSets(m)
}
func decode_body_TL_updateStickerSets(m *DecodeBuf) TL {
	tl := TL_updateStickerSets{}
	flags := m.Int()
	tl.Masks = flags&(1<<0) != 0
	tl.Emojis = flags&(1<<1) != 0
	return tl
}

func decode_TL_updateSavedGIFs(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateSavedGIFs)
	return decode_body_TL_updateSavedGIFs(m)
}
func decode_body_TL_updateSavedGIFs(_ *DecodeBuf) TL {
	tl := TL_updateSavedGIFs{}
	return tl
}

func decode_TL_updateBotInlineQuery(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotInlineQuery)
	return decode_body_TL_updateBotInlineQuery(m)
}
func decode_body_TL_updateBotInlineQuery(m *DecodeBuf) TL {
	tl := TL_updateBotInlineQuery{}
	flags := m.Int()
	tl.QueryID = m.Long()
	tl.UserID = m.Long()
	tl.Query = m.String()
	if flags&(1<<0) != 0 {
		tl.Geo = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.PeerType = m.Object()
	}
	tl.Offset = m.String()
	return tl
}

func decode_TL_updateBotInlineSend(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotInlineSend)
	return decode_body_TL_updateBotInlineSend(m)
}
func decode_body_TL_updateBotInlineSend(m *DecodeBuf) TL {
	tl := TL_updateBotInlineSend{}
	flags := m.Int()
	tl.UserID = m.Long()
	tl.Query = m.String()
	if flags&(1<<0) != 0 {
		tl.Geo = m.Object()
	}
	tl.ID = m.String()
	if flags&(1<<1) != 0 {
		tl.MsgID = m.Object()
	}
	return tl
}

func decode_TL_updateEditChannelMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateEditChannelMessage)
	return decode_body_TL_updateEditChannelMessage(m)
}
func decode_body_TL_updateEditChannelMessage(m *DecodeBuf) TL {
	tl := TL_updateEditChannelMessage{}
	tl.Message = m.Object()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateBotCallbackQuery(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotCallbackQuery)
	return decode_body_TL_updateBotCallbackQuery(m)
}
func decode_body_TL_updateBotCallbackQuery(m *DecodeBuf) TL {
	tl := TL_updateBotCallbackQuery{}
	flags := m.Int()
	tl.QueryID = m.Long()
	tl.UserID = m.Long()
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	tl.ChatInstance = m.Long()
	if flags&(1<<0) != 0 {
		tl.Data = m.StringBytes()
	}
	if flags&(1<<1) != 0 {
		tl.GameShortName = Ref(m.String())
	}
	return tl
}

func decode_TL_updateEditMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateEditMessage)
	return decode_body_TL_updateEditMessage(m)
}
func decode_body_TL_updateEditMessage(m *DecodeBuf) TL {
	tl := TL_updateEditMessage{}
	tl.Message = m.Object()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateInlineBotCallbackQuery(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateInlineBotCallbackQuery)
	return decode_body_TL_updateInlineBotCallbackQuery(m)
}
func decode_body_TL_updateInlineBotCallbackQuery(m *DecodeBuf) TL {
	tl := TL_updateInlineBotCallbackQuery{}
	flags := m.Int()
	tl.QueryID = m.Long()
	tl.UserID = m.Long()
	tl.MsgID = m.Object()
	tl.ChatInstance = m.Long()
	if flags&(1<<0) != 0 {
		tl.Data = m.StringBytes()
	}
	if flags&(1<<1) != 0 {
		tl.GameShortName = Ref(m.String())
	}
	return tl
}

func decode_TL_updateReadChannelOutbox(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadChannelOutbox)
	return decode_body_TL_updateReadChannelOutbox(m)
}
func decode_body_TL_updateReadChannelOutbox(m *DecodeBuf) TL {
	tl := TL_updateReadChannelOutbox{}
	tl.ChannelID = m.Long()
	tl.MaxID = m.Int()
	return tl
}

func decode_TL_updateDraftMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDraftMessage)
	return decode_body_TL_updateDraftMessage(m)
}
func decode_body_TL_updateDraftMessage(m *DecodeBuf) TL {
	tl := TL_updateDraftMessage{}
	flags := m.Int()
	tl.Peer = m.Object()
	if flags&(1<<0) != 0 {
		tl.TopMsgID = Ref(m.Int())
	}
	tl.Draft = m.Object()
	return tl
}

func decode_TL_updateReadFeaturedStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadFeaturedStickers)
	return decode_body_TL_updateReadFeaturedStickers(m)
}
func decode_body_TL_updateReadFeaturedStickers(_ *DecodeBuf) TL {
	tl := TL_updateReadFeaturedStickers{}
	return tl
}

func decode_TL_updateRecentStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateRecentStickers)
	return decode_body_TL_updateRecentStickers(m)
}
func decode_body_TL_updateRecentStickers(_ *DecodeBuf) TL {
	tl := TL_updateRecentStickers{}
	return tl
}

func decode_TL_updateConfig(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateConfig)
	return decode_body_TL_updateConfig(m)
}
func decode_body_TL_updateConfig(_ *DecodeBuf) TL {
	tl := TL_updateConfig{}
	return tl
}

func decode_TL_updatePTSChanged(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePTSChanged)
	return decode_body_TL_updatePTSChanged(m)
}
func decode_body_TL_updatePTSChanged(_ *DecodeBuf) TL {
	tl := TL_updatePTSChanged{}
	return tl
}

func decode_TL_updateChannelWebPage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelWebPage)
	return decode_body_TL_updateChannelWebPage(m)
}
func decode_body_TL_updateChannelWebPage(m *DecodeBuf) TL {
	tl := TL_updateChannelWebPage{}
	tl.ChannelID = m.Long()
	tl.Webpage = m.Object()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateDialogPinned(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDialogPinned)
	return decode_body_TL_updateDialogPinned(m)
}
func decode_body_TL_updateDialogPinned(m *DecodeBuf) TL {
	tl := TL_updateDialogPinned{}
	flags := m.Int()
	tl.Pinned = flags&(1<<0) != 0
	if flags&(1<<1) != 0 {
		tl.FolderID = Ref(m.Int())
	}
	tl.Peer = m.Object()
	return tl
}

func decode_TL_updatePinnedDialogs(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePinnedDialogs)
	return decode_body_TL_updatePinnedDialogs(m)
}
func decode_body_TL_updatePinnedDialogs(m *DecodeBuf) TL {
	tl := TL_updatePinnedDialogs{}
	flags := m.Int()
	if flags&(1<<1) != 0 {
		tl.FolderID = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.Order = m.Vector()
	}
	return tl
}

func decode_TL_updateBotWebhookJSON(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotWebhookJSON)
	return decode_body_TL_updateBotWebhookJSON(m)
}
func decode_body_TL_updateBotWebhookJSON(m *DecodeBuf) TL {
	tl := TL_updateBotWebhookJSON{}
	tl.Data = decode_TL_dataJSON(m).(TL_dataJSON)
	return tl
}

func decode_TL_updateBotWebhookJSONQuery(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotWebhookJSONQuery)
	return decode_body_TL_updateBotWebhookJSONQuery(m)
}
func decode_body_TL_updateBotWebhookJSONQuery(m *DecodeBuf) TL {
	tl := TL_updateBotWebhookJSONQuery{}
	tl.QueryID = m.Long()
	tl.Data = decode_TL_dataJSON(m).(TL_dataJSON)
	tl.Timeout = m.Int()
	return tl
}

func decode_TL_updateBotShippingQuery(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotShippingQuery)
	return decode_body_TL_updateBotShippingQuery(m)
}
func decode_body_TL_updateBotShippingQuery(m *DecodeBuf) TL {
	tl := TL_updateBotShippingQuery{}
	tl.QueryID = m.Long()
	tl.UserID = m.Long()
	tl.Payload = m.StringBytes()
	tl.ShippingAddress = decode_TL_postAddress(m).(TL_postAddress)
	return tl
}

func decode_TL_updateBotPrecheckoutQuery(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotPrecheckoutQuery)
	return decode_body_TL_updateBotPrecheckoutQuery(m)
}
func decode_body_TL_updateBotPrecheckoutQuery(m *DecodeBuf) TL {
	tl := TL_updateBotPrecheckoutQuery{}
	flags := m.Int()
	tl.QueryID = m.Long()
	tl.UserID = m.Long()
	tl.Payload = m.StringBytes()
	if flags&(1<<0) != 0 {
		tl.Info = Ref(decode_TL_paymentRequestedInfo(m).(TL_paymentRequestedInfo))
	}
	if flags&(1<<1) != 0 {
		tl.ShippingOptionID = Ref(m.String())
	}
	tl.Currency = m.String()
	tl.TotalAmount = m.Long()
	return tl
}

func decode_TL_updatePhoneCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePhoneCall)
	return decode_body_TL_updatePhoneCall(m)
}
func decode_body_TL_updatePhoneCall(m *DecodeBuf) TL {
	tl := TL_updatePhoneCall{}
	tl.PhoneCall = m.Object()
	return tl
}

func decode_TL_updateLangPackTooLong(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateLangPackTooLong)
	return decode_body_TL_updateLangPackTooLong(m)
}
func decode_body_TL_updateLangPackTooLong(m *DecodeBuf) TL {
	tl := TL_updateLangPackTooLong{}
	tl.LangCode = m.String()
	return tl
}

func decode_TL_updateLangPack(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateLangPack)
	return decode_body_TL_updateLangPack(m)
}
func decode_body_TL_updateLangPack(m *DecodeBuf) TL {
	tl := TL_updateLangPack{}
	tl.Difference = decode_TL_langPackDifference(m).(TL_langPackDifference)
	return tl
}

func decode_TL_updateFavedStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateFavedStickers)
	return decode_body_TL_updateFavedStickers(m)
}
func decode_body_TL_updateFavedStickers(_ *DecodeBuf) TL {
	tl := TL_updateFavedStickers{}
	return tl
}

func decode_TL_updateChannelReadMessagesContents(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelReadMessagesContents)
	return decode_body_TL_updateChannelReadMessagesContents(m)
}
func decode_body_TL_updateChannelReadMessagesContents(m *DecodeBuf) TL {
	tl := TL_updateChannelReadMessagesContents{}
	flags := m.Int()
	tl.ChannelID = m.Long()
	if flags&(1<<0) != 0 {
		tl.TopMsgID = Ref(m.Int())
	}
	tl.Messages = m.VectorInt()
	return tl
}

func decode_TL_updateContactsReset(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateContactsReset)
	return decode_body_TL_updateContactsReset(m)
}
func decode_body_TL_updateContactsReset(_ *DecodeBuf) TL {
	tl := TL_updateContactsReset{}
	return tl
}

func decode_TL_updateChannelAvailableMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelAvailableMessages)
	return decode_body_TL_updateChannelAvailableMessages(m)
}
func decode_body_TL_updateChannelAvailableMessages(m *DecodeBuf) TL {
	tl := TL_updateChannelAvailableMessages{}
	tl.ChannelID = m.Long()
	tl.AvailableMinID = m.Int()
	return tl
}

func decode_TL_updateDialogUnreadMark(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDialogUnreadMark)
	return decode_body_TL_updateDialogUnreadMark(m)
}
func decode_body_TL_updateDialogUnreadMark(m *DecodeBuf) TL {
	tl := TL_updateDialogUnreadMark{}
	flags := m.Int()
	tl.Unread = flags&(1<<0) != 0
	tl.Peer = m.Object()
	return tl
}

func decode_TL_updateMessagePoll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateMessagePoll)
	return decode_body_TL_updateMessagePoll(m)
}
func decode_body_TL_updateMessagePoll(m *DecodeBuf) TL {
	tl := TL_updateMessagePoll{}
	flags := m.Int()
	tl.PollID = m.Long()
	if flags&(1<<0) != 0 {
		tl.Poll = Ref(decode_TL_poll(m).(TL_poll))
	}
	tl.Results = decode_TL_pollResults(m).(TL_pollResults)
	return tl
}

func decode_TL_updateChatDefaultBannedRights(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChatDefaultBannedRights)
	return decode_body_TL_updateChatDefaultBannedRights(m)
}
func decode_body_TL_updateChatDefaultBannedRights(m *DecodeBuf) TL {
	tl := TL_updateChatDefaultBannedRights{}
	tl.Peer = m.Object()
	tl.DefaultBannedRights = decode_TL_chatBannedRights(m).(TL_chatBannedRights)
	tl.Version = m.Int()
	return tl
}

func decode_TL_updateFolderPeers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateFolderPeers)
	return decode_body_TL_updateFolderPeers(m)
}
func decode_body_TL_updateFolderPeers(m *DecodeBuf) TL {
	tl := TL_updateFolderPeers{}
	tl.FolderPeers = DecodeBuf_GenericVector[TL_folderPeer](m)
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updatePeerSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePeerSettings)
	return decode_body_TL_updatePeerSettings(m)
}
func decode_body_TL_updatePeerSettings(m *DecodeBuf) TL {
	tl := TL_updatePeerSettings{}
	tl.Peer = m.Object()
	tl.Settings = decode_TL_peerSettings(m).(TL_peerSettings)
	return tl
}

func decode_TL_updatePeerLocated(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePeerLocated)
	return decode_body_TL_updatePeerLocated(m)
}
func decode_body_TL_updatePeerLocated(m *DecodeBuf) TL {
	tl := TL_updatePeerLocated{}
	tl.Peers = m.Vector()
	return tl
}

func decode_TL_updateNewScheduledMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateNewScheduledMessage)
	return decode_body_TL_updateNewScheduledMessage(m)
}
func decode_body_TL_updateNewScheduledMessage(m *DecodeBuf) TL {
	tl := TL_updateNewScheduledMessage{}
	tl.Message = m.Object()
	return tl
}

func decode_TL_updateDeleteScheduledMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDeleteScheduledMessages)
	return decode_body_TL_updateDeleteScheduledMessages(m)
}
func decode_body_TL_updateDeleteScheduledMessages(m *DecodeBuf) TL {
	tl := TL_updateDeleteScheduledMessages{}
	tl.Peer = m.Object()
	tl.Messages = m.VectorInt()
	return tl
}

func decode_TL_updateTheme(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateTheme)
	return decode_body_TL_updateTheme(m)
}
func decode_body_TL_updateTheme(m *DecodeBuf) TL {
	tl := TL_updateTheme{}
	tl.Theme = decode_TL_theme(m).(TL_theme)
	return tl
}

func decode_TL_updateGeoLiveViewed(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateGeoLiveViewed)
	return decode_body_TL_updateGeoLiveViewed(m)
}
func decode_body_TL_updateGeoLiveViewed(m *DecodeBuf) TL {
	tl := TL_updateGeoLiveViewed{}
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	return tl
}

func decode_TL_updateLoginToken(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateLoginToken)
	return decode_body_TL_updateLoginToken(m)
}
func decode_body_TL_updateLoginToken(_ *DecodeBuf) TL {
	tl := TL_updateLoginToken{}
	return tl
}

func decode_TL_updateMessagePollVote(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateMessagePollVote)
	return decode_body_TL_updateMessagePollVote(m)
}
func decode_body_TL_updateMessagePollVote(m *DecodeBuf) TL {
	tl := TL_updateMessagePollVote{}
	tl.PollID = m.Long()
	tl.Peer = m.Object()
	tl.Options = m.VectorBytes()
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateDialogFilter(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDialogFilter)
	return decode_body_TL_updateDialogFilter(m)
}
func decode_body_TL_updateDialogFilter(m *DecodeBuf) TL {
	tl := TL_updateDialogFilter{}
	flags := m.Int()
	tl.ID = m.Int()
	if flags&(1<<0) != 0 {
		tl.Filter = m.Object()
	}
	return tl
}

func decode_TL_updateDialogFilterOrder(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDialogFilterOrder)
	return decode_body_TL_updateDialogFilterOrder(m)
}
func decode_body_TL_updateDialogFilterOrder(m *DecodeBuf) TL {
	tl := TL_updateDialogFilterOrder{}
	tl.Order = m.VectorInt()
	return tl
}

func decode_TL_updateDialogFilters(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDialogFilters)
	return decode_body_TL_updateDialogFilters(m)
}
func decode_body_TL_updateDialogFilters(_ *DecodeBuf) TL {
	tl := TL_updateDialogFilters{}
	return tl
}

func decode_TL_updatePhoneCallSignalingData(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePhoneCallSignalingData)
	return decode_body_TL_updatePhoneCallSignalingData(m)
}
func decode_body_TL_updatePhoneCallSignalingData(m *DecodeBuf) TL {
	tl := TL_updatePhoneCallSignalingData{}
	tl.PhoneCallID = m.Long()
	tl.Data = m.StringBytes()
	return tl
}

func decode_TL_updateChannelMessageForwards(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelMessageForwards)
	return decode_body_TL_updateChannelMessageForwards(m)
}
func decode_body_TL_updateChannelMessageForwards(m *DecodeBuf) TL {
	tl := TL_updateChannelMessageForwards{}
	tl.ChannelID = m.Long()
	tl.ID = m.Int()
	tl.Forwards = m.Int()
	return tl
}

func decode_TL_updateReadChannelDiscussionInbox(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadChannelDiscussionInbox)
	return decode_body_TL_updateReadChannelDiscussionInbox(m)
}
func decode_body_TL_updateReadChannelDiscussionInbox(m *DecodeBuf) TL {
	tl := TL_updateReadChannelDiscussionInbox{}
	flags := m.Int()
	tl.ChannelID = m.Long()
	tl.TopMsgID = m.Int()
	tl.ReadMaxID = m.Int()
	if flags&(1<<0) != 0 {
		tl.BroadcastID = Ref(m.Long())
	}
	if flags&(1<<0) != 0 {
		tl.BroadcastPost = Ref(m.Int())
	}
	return tl
}

func decode_TL_updateReadChannelDiscussionOutbox(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadChannelDiscussionOutbox)
	return decode_body_TL_updateReadChannelDiscussionOutbox(m)
}
func decode_body_TL_updateReadChannelDiscussionOutbox(m *DecodeBuf) TL {
	tl := TL_updateReadChannelDiscussionOutbox{}
	tl.ChannelID = m.Long()
	tl.TopMsgID = m.Int()
	tl.ReadMaxID = m.Int()
	return tl
}

func decode_TL_updatePeerBlocked(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePeerBlocked)
	return decode_body_TL_updatePeerBlocked(m)
}
func decode_body_TL_updatePeerBlocked(m *DecodeBuf) TL {
	tl := TL_updatePeerBlocked{}
	flags := m.Int()
	tl.Blocked = flags&(1<<0) != 0
	tl.BlockedMyStoriesFrom = flags&(1<<1) != 0
	tl.PeerID = m.Object()
	return tl
}

func decode_TL_updateChannelUserTyping(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelUserTyping)
	return decode_body_TL_updateChannelUserTyping(m)
}
func decode_body_TL_updateChannelUserTyping(m *DecodeBuf) TL {
	tl := TL_updateChannelUserTyping{}
	flags := m.Int()
	tl.ChannelID = m.Long()
	if flags&(1<<0) != 0 {
		tl.TopMsgID = Ref(m.Int())
	}
	tl.FromID = m.Object()
	tl.Action = m.Object()
	return tl
}

func decode_TL_updatePinnedMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePinnedMessages)
	return decode_body_TL_updatePinnedMessages(m)
}
func decode_body_TL_updatePinnedMessages(m *DecodeBuf) TL {
	tl := TL_updatePinnedMessages{}
	flags := m.Int()
	tl.Pinned = flags&(1<<0) != 0
	tl.Peer = m.Object()
	tl.Messages = m.VectorInt()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updatePinnedChannelMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePinnedChannelMessages)
	return decode_body_TL_updatePinnedChannelMessages(m)
}
func decode_body_TL_updatePinnedChannelMessages(m *DecodeBuf) TL {
	tl := TL_updatePinnedChannelMessages{}
	flags := m.Int()
	tl.Pinned = flags&(1<<0) != 0
	tl.ChannelID = m.Long()
	tl.Messages = m.VectorInt()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_updateChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChat)
	return decode_body_TL_updateChat(m)
}
func decode_body_TL_updateChat(m *DecodeBuf) TL {
	tl := TL_updateChat{}
	tl.ChatID = m.Long()
	return tl
}

func decode_TL_updateGroupCallParticipants(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateGroupCallParticipants)
	return decode_body_TL_updateGroupCallParticipants(m)
}
func decode_body_TL_updateGroupCallParticipants(m *DecodeBuf) TL {
	tl := TL_updateGroupCallParticipants{}
	tl.Call = decode_TL_inputGroupCall(m).(TL_inputGroupCall)
	tl.Participants = DecodeBuf_GenericVector[TL_groupCallParticipant](m)
	tl.Version = m.Int()
	return tl
}

func decode_TL_updateGroupCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateGroupCall)
	return decode_body_TL_updateGroupCall(m)
}
func decode_body_TL_updateGroupCall(m *DecodeBuf) TL {
	tl := TL_updateGroupCall{}
	tl.ChatID = m.Long()
	tl.Call = m.Object()
	return tl
}

func decode_TL_updatePeerHistoryTTL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePeerHistoryTTL)
	return decode_body_TL_updatePeerHistoryTTL(m)
}
func decode_body_TL_updatePeerHistoryTTL(m *DecodeBuf) TL {
	tl := TL_updatePeerHistoryTTL{}
	flags := m.Int()
	tl.Peer = m.Object()
	if flags&(1<<0) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	return tl
}

func decode_TL_updateChatParticipant(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChatParticipant)
	return decode_body_TL_updateChatParticipant(m)
}
func decode_body_TL_updateChatParticipant(m *DecodeBuf) TL {
	tl := TL_updateChatParticipant{}
	flags := m.Int()
	tl.ChatID = m.Long()
	tl.Date = m.Int()
	tl.ActorID = m.Long()
	tl.UserID = m.Long()
	if flags&(1<<0) != 0 {
		tl.PrevParticipant = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.NewParticipant = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.Invite = m.Object()
	}
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateChannelParticipant(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelParticipant)
	return decode_body_TL_updateChannelParticipant(m)
}
func decode_body_TL_updateChannelParticipant(m *DecodeBuf) TL {
	tl := TL_updateChannelParticipant{}
	flags := m.Int()
	tl.ViaChatlist = flags&(1<<3) != 0
	tl.ChannelID = m.Long()
	tl.Date = m.Int()
	tl.ActorID = m.Long()
	tl.UserID = m.Long()
	if flags&(1<<0) != 0 {
		tl.PrevParticipant = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.NewParticipant = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.Invite = m.Object()
	}
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateBotStopped(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotStopped)
	return decode_body_TL_updateBotStopped(m)
}
func decode_body_TL_updateBotStopped(m *DecodeBuf) TL {
	tl := TL_updateBotStopped{}
	tl.UserID = m.Long()
	tl.Date = m.Int()
	tl.Stopped = m.Bool()
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateGroupCallConnection(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateGroupCallConnection)
	return decode_body_TL_updateGroupCallConnection(m)
}
func decode_body_TL_updateGroupCallConnection(m *DecodeBuf) TL {
	tl := TL_updateGroupCallConnection{}
	flags := m.Int()
	tl.Presentation = flags&(1<<0) != 0
	tl.Params = decode_TL_dataJSON(m).(TL_dataJSON)
	return tl
}

func decode_TL_updateBotCommands(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotCommands)
	return decode_body_TL_updateBotCommands(m)
}
func decode_body_TL_updateBotCommands(m *DecodeBuf) TL {
	tl := TL_updateBotCommands{}
	tl.Peer = m.Object()
	tl.BotID = m.Long()
	tl.Commands = DecodeBuf_GenericVector[TL_botCommand](m)
	return tl
}

func decode_TL_updatePendingJoinRequests(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePendingJoinRequests)
	return decode_body_TL_updatePendingJoinRequests(m)
}
func decode_body_TL_updatePendingJoinRequests(m *DecodeBuf) TL {
	tl := TL_updatePendingJoinRequests{}
	tl.Peer = m.Object()
	tl.RequestsPending = m.Int()
	tl.RecentRequesters = m.VectorLong()
	return tl
}

func decode_TL_updateBotChatInviteRequester(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotChatInviteRequester)
	return decode_body_TL_updateBotChatInviteRequester(m)
}
func decode_body_TL_updateBotChatInviteRequester(m *DecodeBuf) TL {
	tl := TL_updateBotChatInviteRequester{}
	tl.Peer = m.Object()
	tl.Date = m.Int()
	tl.UserID = m.Long()
	tl.About = m.String()
	tl.Invite = m.Object()
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateMessageReactions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateMessageReactions)
	return decode_body_TL_updateMessageReactions(m)
}
func decode_body_TL_updateMessageReactions(m *DecodeBuf) TL {
	tl := TL_updateMessageReactions{}
	flags := m.Int()
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	if flags&(1<<0) != 0 {
		tl.TopMsgID = Ref(m.Int())
	}
	tl.Reactions = decode_TL_messageReactions(m).(TL_messageReactions)
	return tl
}

func decode_TL_updateAttachMenuBots(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateAttachMenuBots)
	return decode_body_TL_updateAttachMenuBots(m)
}
func decode_body_TL_updateAttachMenuBots(_ *DecodeBuf) TL {
	tl := TL_updateAttachMenuBots{}
	return tl
}

func decode_TL_updateWebViewResultSent(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateWebViewResultSent)
	return decode_body_TL_updateWebViewResultSent(m)
}
func decode_body_TL_updateWebViewResultSent(m *DecodeBuf) TL {
	tl := TL_updateWebViewResultSent{}
	tl.QueryID = m.Long()
	return tl
}

func decode_TL_updateBotMenuButton(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotMenuButton)
	return decode_body_TL_updateBotMenuButton(m)
}
func decode_body_TL_updateBotMenuButton(m *DecodeBuf) TL {
	tl := TL_updateBotMenuButton{}
	tl.BotID = m.Long()
	tl.Button = m.Object()
	return tl
}

func decode_TL_updateSavedRingtones(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateSavedRingtones)
	return decode_body_TL_updateSavedRingtones(m)
}
func decode_body_TL_updateSavedRingtones(_ *DecodeBuf) TL {
	tl := TL_updateSavedRingtones{}
	return tl
}

func decode_TL_updateTranscribedAudio(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateTranscribedAudio)
	return decode_body_TL_updateTranscribedAudio(m)
}
func decode_body_TL_updateTranscribedAudio(m *DecodeBuf) TL {
	tl := TL_updateTranscribedAudio{}
	flags := m.Int()
	tl.Pending = flags&(1<<0) != 0
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	tl.TranscriptionID = m.Long()
	tl.Text = m.String()
	return tl
}

func decode_TL_updateReadFeaturedEmojiStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadFeaturedEmojiStickers)
	return decode_body_TL_updateReadFeaturedEmojiStickers(m)
}
func decode_body_TL_updateReadFeaturedEmojiStickers(_ *DecodeBuf) TL {
	tl := TL_updateReadFeaturedEmojiStickers{}
	return tl
}

func decode_TL_updateUserEmojiStatus(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateUserEmojiStatus)
	return decode_body_TL_updateUserEmojiStatus(m)
}
func decode_body_TL_updateUserEmojiStatus(m *DecodeBuf) TL {
	tl := TL_updateUserEmojiStatus{}
	tl.UserID = m.Long()
	tl.EmojiStatus = m.Object()
	return tl
}

func decode_TL_updateRecentEmojiStatuses(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateRecentEmojiStatuses)
	return decode_body_TL_updateRecentEmojiStatuses(m)
}
func decode_body_TL_updateRecentEmojiStatuses(_ *DecodeBuf) TL {
	tl := TL_updateRecentEmojiStatuses{}
	return tl
}

func decode_TL_updateRecentReactions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateRecentReactions)
	return decode_body_TL_updateRecentReactions(m)
}
func decode_body_TL_updateRecentReactions(_ *DecodeBuf) TL {
	tl := TL_updateRecentReactions{}
	return tl
}

func decode_TL_updateMoveStickerSetToTop(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateMoveStickerSetToTop)
	return decode_body_TL_updateMoveStickerSetToTop(m)
}
func decode_body_TL_updateMoveStickerSetToTop(m *DecodeBuf) TL {
	tl := TL_updateMoveStickerSetToTop{}
	flags := m.Int()
	tl.Masks = flags&(1<<0) != 0
	tl.Emojis = flags&(1<<1) != 0
	tl.Stickerset = m.Long()
	return tl
}

func decode_TL_updateMessageExtendedMedia(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateMessageExtendedMedia)
	return decode_body_TL_updateMessageExtendedMedia(m)
}
func decode_body_TL_updateMessageExtendedMedia(m *DecodeBuf) TL {
	tl := TL_updateMessageExtendedMedia{}
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	tl.ExtendedMedia = m.Vector()
	return tl
}

func decode_TL_updateChannelPinnedTopic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelPinnedTopic)
	return decode_body_TL_updateChannelPinnedTopic(m)
}
func decode_body_TL_updateChannelPinnedTopic(m *DecodeBuf) TL {
	tl := TL_updateChannelPinnedTopic{}
	flags := m.Int()
	tl.Pinned = flags&(1<<0) != 0
	tl.ChannelID = m.Long()
	tl.TopicID = m.Int()
	return tl
}

func decode_TL_updateChannelPinnedTopics(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelPinnedTopics)
	return decode_body_TL_updateChannelPinnedTopics(m)
}
func decode_body_TL_updateChannelPinnedTopics(m *DecodeBuf) TL {
	tl := TL_updateChannelPinnedTopics{}
	flags := m.Int()
	tl.ChannelID = m.Long()
	if flags&(1<<0) != 0 {
		tl.Order = m.VectorInt()
	}
	return tl
}

func decode_TL_updateUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateUser)
	return decode_body_TL_updateUser(m)
}
func decode_body_TL_updateUser(m *DecodeBuf) TL {
	tl := TL_updateUser{}
	tl.UserID = m.Long()
	return tl
}

func decode_TL_updateAutoSaveSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateAutoSaveSettings)
	return decode_body_TL_updateAutoSaveSettings(m)
}
func decode_body_TL_updateAutoSaveSettings(_ *DecodeBuf) TL {
	tl := TL_updateAutoSaveSettings{}
	return tl
}

func decode_TL_updateStory(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateStory)
	return decode_body_TL_updateStory(m)
}
func decode_body_TL_updateStory(m *DecodeBuf) TL {
	tl := TL_updateStory{}
	tl.Peer = m.Object()
	tl.Story = m.Object()
	return tl
}

func decode_TL_updateReadStories(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateReadStories)
	return decode_body_TL_updateReadStories(m)
}
func decode_body_TL_updateReadStories(m *DecodeBuf) TL {
	tl := TL_updateReadStories{}
	tl.Peer = m.Object()
	tl.MaxID = m.Int()
	return tl
}

func decode_TL_updateStoryID(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateStoryID)
	return decode_body_TL_updateStoryID(m)
}
func decode_body_TL_updateStoryID(m *DecodeBuf) TL {
	tl := TL_updateStoryID{}
	tl.ID = m.Int()
	tl.RandomID = m.Long()
	return tl
}

func decode_TL_updateStoriesStealthMode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateStoriesStealthMode)
	return decode_body_TL_updateStoriesStealthMode(m)
}
func decode_body_TL_updateStoriesStealthMode(m *DecodeBuf) TL {
	tl := TL_updateStoriesStealthMode{}
	tl.StealthMode = decode_TL_storiesStealthMode(m).(TL_storiesStealthMode)
	return tl
}

func decode_TL_updateSentStoryReaction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateSentStoryReaction)
	return decode_body_TL_updateSentStoryReaction(m)
}
func decode_body_TL_updateSentStoryReaction(m *DecodeBuf) TL {
	tl := TL_updateSentStoryReaction{}
	tl.Peer = m.Object()
	tl.StoryID = m.Int()
	tl.Reaction = m.Object()
	return tl
}

func decode_TL_updateBotChatBoost(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotChatBoost)
	return decode_body_TL_updateBotChatBoost(m)
}
func decode_body_TL_updateBotChatBoost(m *DecodeBuf) TL {
	tl := TL_updateBotChatBoost{}
	tl.Peer = m.Object()
	tl.Boost = decode_TL_boost(m).(TL_boost)
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateChannelViewForumAsMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateChannelViewForumAsMessages)
	return decode_body_TL_updateChannelViewForumAsMessages(m)
}
func decode_body_TL_updateChannelViewForumAsMessages(m *DecodeBuf) TL {
	tl := TL_updateChannelViewForumAsMessages{}
	tl.ChannelID = m.Long()
	tl.Enabled = m.Bool()
	return tl
}

func decode_TL_updatePeerWallpaper(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePeerWallpaper)
	return decode_body_TL_updatePeerWallpaper(m)
}
func decode_body_TL_updatePeerWallpaper(m *DecodeBuf) TL {
	tl := TL_updatePeerWallpaper{}
	flags := m.Int()
	tl.WallpaperOverridden = flags&(1<<1) != 0
	tl.Peer = m.Object()
	if flags&(1<<0) != 0 {
		tl.Wallpaper = m.Object()
	}
	return tl
}

func decode_TL_updateBotMessageReaction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotMessageReaction)
	return decode_body_TL_updateBotMessageReaction(m)
}
func decode_body_TL_updateBotMessageReaction(m *DecodeBuf) TL {
	tl := TL_updateBotMessageReaction{}
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	tl.Date = m.Int()
	tl.Actor = m.Object()
	tl.OldReactions = m.Vector()
	tl.NewReactions = m.Vector()
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateBotMessageReactions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotMessageReactions)
	return decode_body_TL_updateBotMessageReactions(m)
}
func decode_body_TL_updateBotMessageReactions(m *DecodeBuf) TL {
	tl := TL_updateBotMessageReactions{}
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	tl.Date = m.Int()
	tl.Reactions = DecodeBuf_GenericVector[TL_reactionCount](m)
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateSavedDialogPinned(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateSavedDialogPinned)
	return decode_body_TL_updateSavedDialogPinned(m)
}
func decode_body_TL_updateSavedDialogPinned(m *DecodeBuf) TL {
	tl := TL_updateSavedDialogPinned{}
	flags := m.Int()
	tl.Pinned = flags&(1<<0) != 0
	tl.Peer = m.Object()
	return tl
}

func decode_TL_updatePinnedSavedDialogs(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePinnedSavedDialogs)
	return decode_body_TL_updatePinnedSavedDialogs(m)
}
func decode_body_TL_updatePinnedSavedDialogs(m *DecodeBuf) TL {
	tl := TL_updatePinnedSavedDialogs{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Order = m.Vector()
	}
	return tl
}

func decode_TL_updateSavedReactionTags(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateSavedReactionTags)
	return decode_body_TL_updateSavedReactionTags(m)
}
func decode_body_TL_updateSavedReactionTags(_ *DecodeBuf) TL {
	tl := TL_updateSavedReactionTags{}
	return tl
}

func decode_TL_updateSMSJob(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateSMSJob)
	return decode_body_TL_updateSMSJob(m)
}
func decode_body_TL_updateSMSJob(m *DecodeBuf) TL {
	tl := TL_updateSMSJob{}
	tl.JobID = m.String()
	return tl
}

func decode_TL_updateQuickReplies(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateQuickReplies)
	return decode_body_TL_updateQuickReplies(m)
}
func decode_body_TL_updateQuickReplies(m *DecodeBuf) TL {
	tl := TL_updateQuickReplies{}
	tl.QuickReplies = DecodeBuf_GenericVector[TL_quickReply](m)
	return tl
}

func decode_TL_updateNewQuickReply(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateNewQuickReply)
	return decode_body_TL_updateNewQuickReply(m)
}
func decode_body_TL_updateNewQuickReply(m *DecodeBuf) TL {
	tl := TL_updateNewQuickReply{}
	tl.QuickReply = decode_TL_quickReply(m).(TL_quickReply)
	return tl
}

func decode_TL_updateDeleteQuickReply(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDeleteQuickReply)
	return decode_body_TL_updateDeleteQuickReply(m)
}
func decode_body_TL_updateDeleteQuickReply(m *DecodeBuf) TL {
	tl := TL_updateDeleteQuickReply{}
	tl.ShortcutID = m.Int()
	return tl
}

func decode_TL_updateQuickReplyMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateQuickReplyMessage)
	return decode_body_TL_updateQuickReplyMessage(m)
}
func decode_body_TL_updateQuickReplyMessage(m *DecodeBuf) TL {
	tl := TL_updateQuickReplyMessage{}
	tl.Message = m.Object()
	return tl
}

func decode_TL_updateDeleteQuickReplyMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateDeleteQuickReplyMessages)
	return decode_body_TL_updateDeleteQuickReplyMessages(m)
}
func decode_body_TL_updateDeleteQuickReplyMessages(m *DecodeBuf) TL {
	tl := TL_updateDeleteQuickReplyMessages{}
	tl.ShortcutID = m.Int()
	tl.Messages = m.VectorInt()
	return tl
}

func decode_TL_updateBotBusinessConnect(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotBusinessConnect)
	return decode_body_TL_updateBotBusinessConnect(m)
}
func decode_body_TL_updateBotBusinessConnect(m *DecodeBuf) TL {
	tl := TL_updateBotBusinessConnect{}
	tl.Connection = decode_TL_botBusinessConnection(m).(TL_botBusinessConnection)
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateBotNewBusinessMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotNewBusinessMessage)
	return decode_body_TL_updateBotNewBusinessMessage(m)
}
func decode_body_TL_updateBotNewBusinessMessage(m *DecodeBuf) TL {
	tl := TL_updateBotNewBusinessMessage{}
	flags := m.Int()
	tl.ConnectionID = m.String()
	tl.Message = m.Object()
	if flags&(1<<0) != 0 {
		tl.ReplyToMessage = m.Object()
	}
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateBotEditBusinessMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotEditBusinessMessage)
	return decode_body_TL_updateBotEditBusinessMessage(m)
}
func decode_body_TL_updateBotEditBusinessMessage(m *DecodeBuf) TL {
	tl := TL_updateBotEditBusinessMessage{}
	flags := m.Int()
	tl.ConnectionID = m.String()
	tl.Message = m.Object()
	if flags&(1<<0) != 0 {
		tl.ReplyToMessage = m.Object()
	}
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateBotDeleteBusinessMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotDeleteBusinessMessage)
	return decode_body_TL_updateBotDeleteBusinessMessage(m)
}
func decode_body_TL_updateBotDeleteBusinessMessage(m *DecodeBuf) TL {
	tl := TL_updateBotDeleteBusinessMessage{}
	tl.ConnectionID = m.String()
	tl.Peer = m.Object()
	tl.Messages = m.VectorInt()
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updateNewStoryReaction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateNewStoryReaction)
	return decode_body_TL_updateNewStoryReaction(m)
}
func decode_body_TL_updateNewStoryReaction(m *DecodeBuf) TL {
	tl := TL_updateNewStoryReaction{}
	tl.StoryID = m.Int()
	tl.Peer = m.Object()
	tl.Reaction = m.Object()
	return tl
}

func decode_TL_updateBroadcastRevenueTransactions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBroadcastRevenueTransactions)
	return decode_body_TL_updateBroadcastRevenueTransactions(m)
}
func decode_body_TL_updateBroadcastRevenueTransactions(m *DecodeBuf) TL {
	tl := TL_updateBroadcastRevenueTransactions{}
	tl.Peer = m.Object()
	tl.Balances = decode_TL_broadcastRevenueBalances(m).(TL_broadcastRevenueBalances)
	return tl
}

func decode_TL_updateStarsBalance(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateStarsBalance)
	return decode_body_TL_updateStarsBalance(m)
}
func decode_body_TL_updateStarsBalance(m *DecodeBuf) TL {
	tl := TL_updateStarsBalance{}
	tl.Balance = m.Long()
	return tl
}

func decode_TL_updateBusinessBotCallbackQuery(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBusinessBotCallbackQuery)
	return decode_body_TL_updateBusinessBotCallbackQuery(m)
}
func decode_body_TL_updateBusinessBotCallbackQuery(m *DecodeBuf) TL {
	tl := TL_updateBusinessBotCallbackQuery{}
	flags := m.Int()
	tl.QueryID = m.Long()
	tl.UserID = m.Long()
	tl.ConnectionID = m.String()
	tl.Message = m.Object()
	if flags&(1<<2) != 0 {
		tl.ReplyToMessage = m.Object()
	}
	tl.ChatInstance = m.Long()
	if flags&(1<<0) != 0 {
		tl.Data = m.StringBytes()
	}
	return tl
}

func decode_TL_updateStarsRevenueStatus(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateStarsRevenueStatus)
	return decode_body_TL_updateStarsRevenueStatus(m)
}
func decode_body_TL_updateStarsRevenueStatus(m *DecodeBuf) TL {
	tl := TL_updateStarsRevenueStatus{}
	tl.Peer = m.Object()
	tl.Status = decode_TL_starsRevenueStatus(m).(TL_starsRevenueStatus)
	return tl
}

func decode_TL_updateBotPurchasedPaidMedia(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateBotPurchasedPaidMedia)
	return decode_body_TL_updateBotPurchasedPaidMedia(m)
}
func decode_body_TL_updateBotPurchasedPaidMedia(m *DecodeBuf) TL {
	tl := TL_updateBotPurchasedPaidMedia{}
	tl.UserID = m.Long()
	tl.Payload = m.String()
	tl.QTS = m.Int()
	return tl
}

func decode_TL_updatePaidReactionPrivacy(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatePaidReactionPrivacy)
	return decode_body_TL_updatePaidReactionPrivacy(m)
}
func decode_body_TL_updatePaidReactionPrivacy(m *DecodeBuf) TL {
	tl := TL_updatePaidReactionPrivacy{}
	tl.Private = m.Bool()
	return tl
}

func decode_TL_updates_state(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updates_state)
	return decode_body_TL_updates_state(m)
}
func decode_body_TL_updates_state(m *DecodeBuf) TL {
	tl := TL_updates_state{}
	tl.PTS = m.Int()
	tl.QTS = m.Int()
	tl.Date = m.Int()
	tl.Seq = m.Int()
	tl.UnreadCount = m.Int()
	return tl
}

func decode_TL_updates_differenceEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updates_differenceEmpty)
	return decode_body_TL_updates_differenceEmpty(m)
}
func decode_body_TL_updates_differenceEmpty(m *DecodeBuf) TL {
	tl := TL_updates_differenceEmpty{}
	tl.Date = m.Int()
	tl.Seq = m.Int()
	return tl
}

func decode_TL_updates_difference(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updates_difference)
	return decode_body_TL_updates_difference(m)
}
func decode_body_TL_updates_difference(m *DecodeBuf) TL {
	tl := TL_updates_difference{}
	tl.NewMessages = m.Vector()
	tl.NewEncryptedMessages = m.Vector()
	tl.OtherUpdates = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	tl.State = decode_TL_updates_state(m).(TL_updates_state)
	return tl
}

func decode_TL_updates_differenceSlice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updates_differenceSlice)
	return decode_body_TL_updates_differenceSlice(m)
}
func decode_body_TL_updates_differenceSlice(m *DecodeBuf) TL {
	tl := TL_updates_differenceSlice{}
	tl.NewMessages = m.Vector()
	tl.NewEncryptedMessages = m.Vector()
	tl.OtherUpdates = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	tl.IntermediateState = decode_TL_updates_state(m).(TL_updates_state)
	return tl
}

func decode_TL_updates_differenceTooLong(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updates_differenceTooLong)
	return decode_body_TL_updates_differenceTooLong(m)
}
func decode_body_TL_updates_differenceTooLong(m *DecodeBuf) TL {
	tl := TL_updates_differenceTooLong{}
	tl.PTS = m.Int()
	return tl
}

func decode_TL_updatesTooLong(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatesTooLong)
	return decode_body_TL_updatesTooLong(m)
}
func decode_body_TL_updatesTooLong(_ *DecodeBuf) TL {
	tl := TL_updatesTooLong{}
	return tl
}

func decode_TL_updateShortMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateShortMessage)
	return decode_body_TL_updateShortMessage(m)
}
func decode_body_TL_updateShortMessage(m *DecodeBuf) TL {
	tl := TL_updateShortMessage{}
	flags := m.Int()
	tl.Out = flags&(1<<1) != 0
	tl.Mentioned = flags&(1<<4) != 0
	tl.MediaUnread = flags&(1<<5) != 0
	tl.Silent = flags&(1<<13) != 0
	tl.ID = m.Int()
	tl.UserID = m.Long()
	tl.Message = m.String()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	tl.Date = m.Int()
	if flags&(1<<2) != 0 {
		tl.FwdFrom = Ref(decode_TL_messageFwdHeader(m).(TL_messageFwdHeader))
	}
	if flags&(1<<11) != 0 {
		tl.ViaBotID = Ref(m.Long())
	}
	if flags&(1<<3) != 0 {
		tl.ReplyTo = m.Object()
	}
	if flags&(1<<7) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<25) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	return tl
}

func decode_TL_updateShortChatMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateShortChatMessage)
	return decode_body_TL_updateShortChatMessage(m)
}
func decode_body_TL_updateShortChatMessage(m *DecodeBuf) TL {
	tl := TL_updateShortChatMessage{}
	flags := m.Int()
	tl.Out = flags&(1<<1) != 0
	tl.Mentioned = flags&(1<<4) != 0
	tl.MediaUnread = flags&(1<<5) != 0
	tl.Silent = flags&(1<<13) != 0
	tl.ID = m.Int()
	tl.FromID = m.Long()
	tl.ChatID = m.Long()
	tl.Message = m.String()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	tl.Date = m.Int()
	if flags&(1<<2) != 0 {
		tl.FwdFrom = Ref(decode_TL_messageFwdHeader(m).(TL_messageFwdHeader))
	}
	if flags&(1<<11) != 0 {
		tl.ViaBotID = Ref(m.Long())
	}
	if flags&(1<<3) != 0 {
		tl.ReplyTo = m.Object()
	}
	if flags&(1<<7) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<25) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	return tl
}

func decode_TL_updateShort(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateShort)
	return decode_body_TL_updateShort(m)
}
func decode_body_TL_updateShort(m *DecodeBuf) TL {
	tl := TL_updateShort{}
	tl.Update = m.Object()
	tl.Date = m.Int()
	return tl
}

func decode_TL_updatesCombined(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updatesCombined)
	return decode_body_TL_updatesCombined(m)
}
func decode_body_TL_updatesCombined(m *DecodeBuf) TL {
	tl := TL_updatesCombined{}
	tl.Updates = m.Vector()
	tl.Users = m.Vector()
	tl.Chats = m.Vector()
	tl.Date = m.Int()
	tl.SeqStart = m.Int()
	tl.Seq = m.Int()
	return tl
}

func decode_TL_updates(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updates)
	return decode_body_TL_updates(m)
}
func decode_body_TL_updates(m *DecodeBuf) TL {
	tl := TL_updates{}
	tl.Updates = m.Vector()
	tl.Users = m.Vector()
	tl.Chats = m.Vector()
	tl.Date = m.Int()
	tl.Seq = m.Int()
	return tl
}

func decode_TL_updateShortSentMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updateShortSentMessage)
	return decode_body_TL_updateShortSentMessage(m)
}
func decode_body_TL_updateShortSentMessage(m *DecodeBuf) TL {
	tl := TL_updateShortSentMessage{}
	flags := m.Int()
	tl.Out = flags&(1<<1) != 0
	tl.ID = m.Int()
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	tl.Date = m.Int()
	if flags&(1<<9) != 0 {
		tl.Media = m.Object()
	}
	if flags&(1<<7) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<25) != 0 {
		tl.TTLPeriod = Ref(m.Int())
	}
	return tl
}

func decode_TL_photos_photos(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photos_photos)
	return decode_body_TL_photos_photos(m)
}
func decode_body_TL_photos_photos(m *DecodeBuf) TL {
	tl := TL_photos_photos{}
	tl.Photos = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_photos_photosSlice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photos_photosSlice)
	return decode_body_TL_photos_photosSlice(m)
}
func decode_body_TL_photos_photosSlice(m *DecodeBuf) TL {
	tl := TL_photos_photosSlice{}
	tl.Count = m.Int()
	tl.Photos = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_photos_photo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_photos_photo)
	return decode_body_TL_photos_photo(m)
}
func decode_body_TL_photos_photo(m *DecodeBuf) TL {
	tl := TL_photos_photo{}
	tl.Photo = m.Object()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_upload_file(m *DecodeBuf) TL {
	m.constructorAssert(CRC_upload_file)
	return decode_body_TL_upload_file(m)
}
func decode_body_TL_upload_file(m *DecodeBuf) TL {
	tl := TL_upload_file{}
	tl.Type = m.Object()
	tl.Mtime = m.Int()
	tl.Bytes = m.StringBytes()
	return tl
}

func decode_TL_upload_fileCDNRedirect(m *DecodeBuf) TL {
	m.constructorAssert(CRC_upload_fileCDNRedirect)
	return decode_body_TL_upload_fileCDNRedirect(m)
}
func decode_body_TL_upload_fileCDNRedirect(m *DecodeBuf) TL {
	tl := TL_upload_fileCDNRedirect{}
	tl.DCID = m.Int()
	tl.FileToken = m.StringBytes()
	tl.EncryptionKey = m.StringBytes()
	tl.EncryptionIV = m.StringBytes()
	tl.FileHashes = DecodeBuf_GenericVector[TL_fileHash](m)
	return tl
}

func decode_TL_dcOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dcOption)
	return decode_body_TL_dcOption(m)
}
func decode_body_TL_dcOption(m *DecodeBuf) TL {
	tl := TL_dcOption{}
	flags := m.Int()
	tl.IPv6 = flags&(1<<0) != 0
	tl.MediaOnly = flags&(1<<1) != 0
	tl.TCPOOnly = flags&(1<<2) != 0
	tl.CDN = flags&(1<<3) != 0
	tl.Static = flags&(1<<4) != 0
	tl.ThisPortOnly = flags&(1<<5) != 0
	tl.ID = m.Int()
	tl.IPAddress = m.String()
	tl.Port = m.Int()
	if flags&(1<<10) != 0 {
		tl.Secret = m.StringBytes()
	}
	return tl
}

func decode_TL_config(m *DecodeBuf) TL {
	m.constructorAssert(CRC_config)
	return decode_body_TL_config(m)
}
func decode_body_TL_config(m *DecodeBuf) TL {
	tl := TL_config{}
	flags := m.Int()
	tl.DefaultP2PContacts = flags&(1<<3) != 0
	tl.PreloadFeaturedStickers = flags&(1<<4) != 0
	tl.RevokePMInbox = flags&(1<<6) != 0
	tl.BlockedMode = flags&(1<<8) != 0
	tl.ForceTryIPv6 = flags&(1<<14) != 0
	tl.Date = m.Int()
	tl.Expires = m.Int()
	tl.TestMode = m.Bool()
	tl.ThisDC = m.Int()
	tl.DCOptions = DecodeBuf_GenericVector[TL_dcOption](m)
	tl.DCTXTDomainName = m.String()
	tl.ChatSizeMax = m.Int()
	tl.MegagroupSizeMax = m.Int()
	tl.ForwardedCountMax = m.Int()
	tl.OnlineUpdatePeriodMS = m.Int()
	tl.OfflineBlurTimeoutMS = m.Int()
	tl.OfflineIdleTimeoutMS = m.Int()
	tl.OnlineCloudTimeoutMS = m.Int()
	tl.NotifyCloudDelayMS = m.Int()
	tl.NotifyDefaultDelayMS = m.Int()
	tl.PushChatPeriodMS = m.Int()
	tl.PushChatLimit = m.Int()
	tl.EditTimeLimit = m.Int()
	tl.RevokeTimeLimit = m.Int()
	tl.RevokePMTimeLimit = m.Int()
	tl.RatingEDecay = m.Int()
	tl.StickersRecentLimit = m.Int()
	tl.ChannelsReadMediaPeriod = m.Int()
	if flags&(1<<0) != 0 {
		tl.TmpSessions = Ref(m.Int())
	}
	tl.CallReceiveTimeoutMS = m.Int()
	tl.CallRingTimeoutMS = m.Int()
	tl.CallConnectTimeoutMS = m.Int()
	tl.CallPacketTimeoutMS = m.Int()
	tl.MeURLPrefix = m.String()
	if flags&(1<<7) != 0 {
		tl.AutoupdateURLPrefix = Ref(m.String())
	}
	if flags&(1<<9) != 0 {
		tl.GIFSearchUsername = Ref(m.String())
	}
	if flags&(1<<10) != 0 {
		tl.VenueSearchUsername = Ref(m.String())
	}
	if flags&(1<<11) != 0 {
		tl.ImgSearchUsername = Ref(m.String())
	}
	if flags&(1<<12) != 0 {
		tl.StaticMapsProvider = Ref(m.String())
	}
	tl.CaptionLengthMax = m.Int()
	tl.MessageLengthMax = m.Int()
	tl.WebfileDCID = m.Int()
	if flags&(1<<2) != 0 {
		tl.SuggestedLangCode = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.LangPackVersion = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.BaseLangPackVersion = Ref(m.Int())
	}
	if flags&(1<<15) != 0 {
		tl.ReactionsDefault = m.Object()
	}
	if flags&(1<<16) != 0 {
		tl.AutologinToken = Ref(m.String())
	}
	return tl
}

func decode_TL_nearestDC(m *DecodeBuf) TL {
	m.constructorAssert(CRC_nearestDC)
	return decode_body_TL_nearestDC(m)
}
func decode_body_TL_nearestDC(m *DecodeBuf) TL {
	tl := TL_nearestDC{}
	tl.Country = m.String()
	tl.ThisDC = m.Int()
	tl.NearestDC = m.Int()
	return tl
}

func decode_TL_help_appUpdate(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_appUpdate)
	return decode_body_TL_help_appUpdate(m)
}
func decode_body_TL_help_appUpdate(m *DecodeBuf) TL {
	tl := TL_help_appUpdate{}
	flags := m.Int()
	tl.CanNotSkip = flags&(1<<0) != 0
	tl.ID = m.Int()
	tl.Version = m.String()
	tl.Text = m.String()
	tl.Entities = m.Vector()
	if flags&(1<<1) != 0 {
		tl.Document = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.URL = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.Sticker = m.Object()
	}
	return tl
}

func decode_TL_help_noAppUpdate(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_noAppUpdate)
	return decode_body_TL_help_noAppUpdate(m)
}
func decode_body_TL_help_noAppUpdate(_ *DecodeBuf) TL {
	tl := TL_help_noAppUpdate{}
	return tl
}

func decode_TL_help_inviteText(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_inviteText)
	return decode_body_TL_help_inviteText(m)
}
func decode_body_TL_help_inviteText(m *DecodeBuf) TL {
	tl := TL_help_inviteText{}
	tl.Message = m.String()
	return tl
}

func decode_TL_encryptedChatEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_encryptedChatEmpty)
	return decode_body_TL_encryptedChatEmpty(m)
}
func decode_body_TL_encryptedChatEmpty(m *DecodeBuf) TL {
	tl := TL_encryptedChatEmpty{}
	tl.ID = m.Int()
	return tl
}

func decode_TL_encryptedChatWaiting(m *DecodeBuf) TL {
	m.constructorAssert(CRC_encryptedChatWaiting)
	return decode_body_TL_encryptedChatWaiting(m)
}
func decode_body_TL_encryptedChatWaiting(m *DecodeBuf) TL {
	tl := TL_encryptedChatWaiting{}
	tl.ID = m.Int()
	tl.AccessHash = m.Long()
	tl.Date = m.Int()
	tl.AdminID = m.Long()
	tl.ParticipantID = m.Long()
	return tl
}

func decode_TL_encryptedChatRequested(m *DecodeBuf) TL {
	m.constructorAssert(CRC_encryptedChatRequested)
	return decode_body_TL_encryptedChatRequested(m)
}
func decode_body_TL_encryptedChatRequested(m *DecodeBuf) TL {
	tl := TL_encryptedChatRequested{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.FolderID = Ref(m.Int())
	}
	tl.ID = m.Int()
	tl.AccessHash = m.Long()
	tl.Date = m.Int()
	tl.AdminID = m.Long()
	tl.ParticipantID = m.Long()
	tl.GA = m.StringBytes()
	return tl
}

func decode_TL_encryptedChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_encryptedChat)
	return decode_body_TL_encryptedChat(m)
}
func decode_body_TL_encryptedChat(m *DecodeBuf) TL {
	tl := TL_encryptedChat{}
	tl.ID = m.Int()
	tl.AccessHash = m.Long()
	tl.Date = m.Int()
	tl.AdminID = m.Long()
	tl.ParticipantID = m.Long()
	tl.GAOrB = m.StringBytes()
	tl.KeyFingerprint = m.Long()
	return tl
}

func decode_TL_encryptedChatDiscarded(m *DecodeBuf) TL {
	m.constructorAssert(CRC_encryptedChatDiscarded)
	return decode_body_TL_encryptedChatDiscarded(m)
}
func decode_body_TL_encryptedChatDiscarded(m *DecodeBuf) TL {
	tl := TL_encryptedChatDiscarded{}
	flags := m.Int()
	tl.HistoryDeleted = flags&(1<<0) != 0
	tl.ID = m.Int()
	return tl
}

func decode_TL_inputEncryptedChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputEncryptedChat)
	return decode_body_TL_inputEncryptedChat(m)
}
func decode_body_TL_inputEncryptedChat(m *DecodeBuf) TL {
	tl := TL_inputEncryptedChat{}
	tl.ChatID = m.Int()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_encryptedFileEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_encryptedFileEmpty)
	return decode_body_TL_encryptedFileEmpty(m)
}
func decode_body_TL_encryptedFileEmpty(_ *DecodeBuf) TL {
	tl := TL_encryptedFileEmpty{}
	return tl
}

func decode_TL_encryptedFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_encryptedFile)
	return decode_body_TL_encryptedFile(m)
}
func decode_body_TL_encryptedFile(m *DecodeBuf) TL {
	tl := TL_encryptedFile{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Size = m.Long()
	tl.DCID = m.Int()
	tl.KeyFingerprint = m.Int()
	return tl
}

func decode_TL_inputEncryptedFileEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputEncryptedFileEmpty)
	return decode_body_TL_inputEncryptedFileEmpty(m)
}
func decode_body_TL_inputEncryptedFileEmpty(_ *DecodeBuf) TL {
	tl := TL_inputEncryptedFileEmpty{}
	return tl
}

func decode_TL_inputEncryptedFileUploaded(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputEncryptedFileUploaded)
	return decode_body_TL_inputEncryptedFileUploaded(m)
}
func decode_body_TL_inputEncryptedFileUploaded(m *DecodeBuf) TL {
	tl := TL_inputEncryptedFileUploaded{}
	tl.ID = m.Long()
	tl.Parts = m.Int()
	tl.MD5Checksum = m.String()
	tl.KeyFingerprint = m.Int()
	return tl
}

func decode_TL_inputEncryptedFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputEncryptedFile)
	return decode_body_TL_inputEncryptedFile(m)
}
func decode_body_TL_inputEncryptedFile(m *DecodeBuf) TL {
	tl := TL_inputEncryptedFile{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputEncryptedFileBigUploaded(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputEncryptedFileBigUploaded)
	return decode_body_TL_inputEncryptedFileBigUploaded(m)
}
func decode_body_TL_inputEncryptedFileBigUploaded(m *DecodeBuf) TL {
	tl := TL_inputEncryptedFileBigUploaded{}
	tl.ID = m.Long()
	tl.Parts = m.Int()
	tl.KeyFingerprint = m.Int()
	return tl
}

func decode_TL_encryptedMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_encryptedMessage)
	return decode_body_TL_encryptedMessage(m)
}
func decode_body_TL_encryptedMessage(m *DecodeBuf) TL {
	tl := TL_encryptedMessage{}
	tl.RandomID = m.Long()
	tl.ChatID = m.Int()
	tl.Date = m.Int()
	tl.Bytes = m.StringBytes()
	tl.File = m.Object()
	return tl
}

func decode_TL_encryptedMessageService(m *DecodeBuf) TL {
	m.constructorAssert(CRC_encryptedMessageService)
	return decode_body_TL_encryptedMessageService(m)
}
func decode_body_TL_encryptedMessageService(m *DecodeBuf) TL {
	tl := TL_encryptedMessageService{}
	tl.RandomID = m.Long()
	tl.ChatID = m.Int()
	tl.Date = m.Int()
	tl.Bytes = m.StringBytes()
	return tl
}

func decode_TL_messages_dhConfigNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_dhConfigNotModified)
	return decode_body_TL_messages_dhConfigNotModified(m)
}
func decode_body_TL_messages_dhConfigNotModified(m *DecodeBuf) TL {
	tl := TL_messages_dhConfigNotModified{}
	tl.Random = m.StringBytes()
	return tl
}

func decode_TL_messages_dhConfig(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_dhConfig)
	return decode_body_TL_messages_dhConfig(m)
}
func decode_body_TL_messages_dhConfig(m *DecodeBuf) TL {
	tl := TL_messages_dhConfig{}
	tl.G = m.Int()
	tl.P = m.StringBytes()
	tl.Version = m.Int()
	tl.Random = m.StringBytes()
	return tl
}

func decode_TL_messages_sentEncryptedMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_sentEncryptedMessage)
	return decode_body_TL_messages_sentEncryptedMessage(m)
}
func decode_body_TL_messages_sentEncryptedMessage(m *DecodeBuf) TL {
	tl := TL_messages_sentEncryptedMessage{}
	tl.Date = m.Int()
	return tl
}

func decode_TL_messages_sentEncryptedFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_sentEncryptedFile)
	return decode_body_TL_messages_sentEncryptedFile(m)
}
func decode_body_TL_messages_sentEncryptedFile(m *DecodeBuf) TL {
	tl := TL_messages_sentEncryptedFile{}
	tl.Date = m.Int()
	tl.File = m.Object()
	return tl
}

func decode_TL_inputDocumentEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputDocumentEmpty)
	return decode_body_TL_inputDocumentEmpty(m)
}
func decode_body_TL_inputDocumentEmpty(_ *DecodeBuf) TL {
	tl := TL_inputDocumentEmpty{}
	return tl
}

func decode_TL_inputDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputDocument)
	return decode_body_TL_inputDocument(m)
}
func decode_body_TL_inputDocument(m *DecodeBuf) TL {
	tl := TL_inputDocument{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.FileReference = m.StringBytes()
	return tl
}

func decode_TL_documentEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_documentEmpty)
	return decode_body_TL_documentEmpty(m)
}
func decode_body_TL_documentEmpty(m *DecodeBuf) TL {
	tl := TL_documentEmpty{}
	tl.ID = m.Long()
	return tl
}

func decode_TL_document(m *DecodeBuf) TL {
	m.constructorAssert(CRC_document)
	return decode_body_TL_document(m)
}
func decode_body_TL_document(m *DecodeBuf) TL {
	tl := TL_document{}
	flags := m.Int()
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.FileReference = m.StringBytes()
	tl.Date = m.Int()
	tl.MIMEType = m.String()
	tl.Size = m.Long()
	if flags&(1<<0) != 0 {
		tl.Thumbs = m.Vector()
	}
	if flags&(1<<1) != 0 {
		tl.VideoThumbs = m.Vector()
	}
	tl.DCID = m.Int()
	tl.Attributes = m.Vector()
	return tl
}

func decode_TL_help_support(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_support)
	return decode_body_TL_help_support(m)
}
func decode_body_TL_help_support(m *DecodeBuf) TL {
	tl := TL_help_support{}
	tl.PhoneNumber = m.String()
	tl.User = m.Object()
	return tl
}

func decode_TL_notifyPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_notifyPeer)
	return decode_body_TL_notifyPeer(m)
}
func decode_body_TL_notifyPeer(m *DecodeBuf) TL {
	tl := TL_notifyPeer{}
	tl.Peer = m.Object()
	return tl
}

func decode_TL_notifyUsers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_notifyUsers)
	return decode_body_TL_notifyUsers(m)
}
func decode_body_TL_notifyUsers(_ *DecodeBuf) TL {
	tl := TL_notifyUsers{}
	return tl
}

func decode_TL_notifyChats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_notifyChats)
	return decode_body_TL_notifyChats(m)
}
func decode_body_TL_notifyChats(_ *DecodeBuf) TL {
	tl := TL_notifyChats{}
	return tl
}

func decode_TL_notifyBroadcasts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_notifyBroadcasts)
	return decode_body_TL_notifyBroadcasts(m)
}
func decode_body_TL_notifyBroadcasts(_ *DecodeBuf) TL {
	tl := TL_notifyBroadcasts{}
	return tl
}

func decode_TL_notifyForumTopic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_notifyForumTopic)
	return decode_body_TL_notifyForumTopic(m)
}
func decode_body_TL_notifyForumTopic(m *DecodeBuf) TL {
	tl := TL_notifyForumTopic{}
	tl.Peer = m.Object()
	tl.TopMsgID = m.Int()
	return tl
}

func decode_TL_sendMessageTypingAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageTypingAction)
	return decode_body_TL_sendMessageTypingAction(m)
}
func decode_body_TL_sendMessageTypingAction(_ *DecodeBuf) TL {
	tl := TL_sendMessageTypingAction{}
	return tl
}

func decode_TL_sendMessageCancelAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageCancelAction)
	return decode_body_TL_sendMessageCancelAction(m)
}
func decode_body_TL_sendMessageCancelAction(_ *DecodeBuf) TL {
	tl := TL_sendMessageCancelAction{}
	return tl
}

func decode_TL_sendMessageRecordVideoAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageRecordVideoAction)
	return decode_body_TL_sendMessageRecordVideoAction(m)
}
func decode_body_TL_sendMessageRecordVideoAction(_ *DecodeBuf) TL {
	tl := TL_sendMessageRecordVideoAction{}
	return tl
}

func decode_TL_sendMessageUploadVideoAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageUploadVideoAction)
	return decode_body_TL_sendMessageUploadVideoAction(m)
}
func decode_body_TL_sendMessageUploadVideoAction(m *DecodeBuf) TL {
	tl := TL_sendMessageUploadVideoAction{}
	tl.Progress = m.Int()
	return tl
}

func decode_TL_sendMessageRecordAudioAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageRecordAudioAction)
	return decode_body_TL_sendMessageRecordAudioAction(m)
}
func decode_body_TL_sendMessageRecordAudioAction(_ *DecodeBuf) TL {
	tl := TL_sendMessageRecordAudioAction{}
	return tl
}

func decode_TL_sendMessageUploadAudioAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageUploadAudioAction)
	return decode_body_TL_sendMessageUploadAudioAction(m)
}
func decode_body_TL_sendMessageUploadAudioAction(m *DecodeBuf) TL {
	tl := TL_sendMessageUploadAudioAction{}
	tl.Progress = m.Int()
	return tl
}

func decode_TL_sendMessageUploadPhotoAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageUploadPhotoAction)
	return decode_body_TL_sendMessageUploadPhotoAction(m)
}
func decode_body_TL_sendMessageUploadPhotoAction(m *DecodeBuf) TL {
	tl := TL_sendMessageUploadPhotoAction{}
	tl.Progress = m.Int()
	return tl
}

func decode_TL_sendMessageUploadDocumentAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageUploadDocumentAction)
	return decode_body_TL_sendMessageUploadDocumentAction(m)
}
func decode_body_TL_sendMessageUploadDocumentAction(m *DecodeBuf) TL {
	tl := TL_sendMessageUploadDocumentAction{}
	tl.Progress = m.Int()
	return tl
}

func decode_TL_sendMessageGeoLocationAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageGeoLocationAction)
	return decode_body_TL_sendMessageGeoLocationAction(m)
}
func decode_body_TL_sendMessageGeoLocationAction(_ *DecodeBuf) TL {
	tl := TL_sendMessageGeoLocationAction{}
	return tl
}

func decode_TL_sendMessageChooseContactAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageChooseContactAction)
	return decode_body_TL_sendMessageChooseContactAction(m)
}
func decode_body_TL_sendMessageChooseContactAction(_ *DecodeBuf) TL {
	tl := TL_sendMessageChooseContactAction{}
	return tl
}

func decode_TL_sendMessageGamePlayAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageGamePlayAction)
	return decode_body_TL_sendMessageGamePlayAction(m)
}
func decode_body_TL_sendMessageGamePlayAction(_ *DecodeBuf) TL {
	tl := TL_sendMessageGamePlayAction{}
	return tl
}

func decode_TL_sendMessageRecordRoundAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageRecordRoundAction)
	return decode_body_TL_sendMessageRecordRoundAction(m)
}
func decode_body_TL_sendMessageRecordRoundAction(_ *DecodeBuf) TL {
	tl := TL_sendMessageRecordRoundAction{}
	return tl
}

func decode_TL_sendMessageUploadRoundAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageUploadRoundAction)
	return decode_body_TL_sendMessageUploadRoundAction(m)
}
func decode_body_TL_sendMessageUploadRoundAction(m *DecodeBuf) TL {
	tl := TL_sendMessageUploadRoundAction{}
	tl.Progress = m.Int()
	return tl
}

func decode_TL_speakingInGroupCallAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_speakingInGroupCallAction)
	return decode_body_TL_speakingInGroupCallAction(m)
}
func decode_body_TL_speakingInGroupCallAction(_ *DecodeBuf) TL {
	tl := TL_speakingInGroupCallAction{}
	return tl
}

func decode_TL_sendMessageHistoryImportAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageHistoryImportAction)
	return decode_body_TL_sendMessageHistoryImportAction(m)
}
func decode_body_TL_sendMessageHistoryImportAction(m *DecodeBuf) TL {
	tl := TL_sendMessageHistoryImportAction{}
	tl.Progress = m.Int()
	return tl
}

func decode_TL_sendMessageChooseStickerAction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageChooseStickerAction)
	return decode_body_TL_sendMessageChooseStickerAction(m)
}
func decode_body_TL_sendMessageChooseStickerAction(_ *DecodeBuf) TL {
	tl := TL_sendMessageChooseStickerAction{}
	return tl
}

func decode_TL_sendMessageEmojiInteraction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageEmojiInteraction)
	return decode_body_TL_sendMessageEmojiInteraction(m)
}
func decode_body_TL_sendMessageEmojiInteraction(m *DecodeBuf) TL {
	tl := TL_sendMessageEmojiInteraction{}
	tl.Emoticon = m.String()
	tl.MsgID = m.Int()
	tl.Interaction = decode_TL_dataJSON(m).(TL_dataJSON)
	return tl
}

func decode_TL_sendMessageEmojiInteractionSeen(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendMessageEmojiInteractionSeen)
	return decode_body_TL_sendMessageEmojiInteractionSeen(m)
}
func decode_body_TL_sendMessageEmojiInteractionSeen(m *DecodeBuf) TL {
	tl := TL_sendMessageEmojiInteractionSeen{}
	tl.Emoticon = m.String()
	return tl
}

func decode_TL_contacts_found(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_found)
	return decode_body_TL_contacts_found(m)
}
func decode_body_TL_contacts_found(m *DecodeBuf) TL {
	tl := TL_contacts_found{}
	tl.MyResults = m.Vector()
	tl.Results = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_inputPrivacyKeyStatusTimestamp(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyStatusTimestamp)
	return decode_body_TL_inputPrivacyKeyStatusTimestamp(m)
}
func decode_body_TL_inputPrivacyKeyStatusTimestamp(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyStatusTimestamp{}
	return tl
}

func decode_TL_inputPrivacyKeyChatInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyChatInvite)
	return decode_body_TL_inputPrivacyKeyChatInvite(m)
}
func decode_body_TL_inputPrivacyKeyChatInvite(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyChatInvite{}
	return tl
}

func decode_TL_inputPrivacyKeyPhoneCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyPhoneCall)
	return decode_body_TL_inputPrivacyKeyPhoneCall(m)
}
func decode_body_TL_inputPrivacyKeyPhoneCall(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyPhoneCall{}
	return tl
}

func decode_TL_inputPrivacyKeyPhoneP2P(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyPhoneP2P)
	return decode_body_TL_inputPrivacyKeyPhoneP2P(m)
}
func decode_body_TL_inputPrivacyKeyPhoneP2P(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyPhoneP2P{}
	return tl
}

func decode_TL_inputPrivacyKeyForwards(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyForwards)
	return decode_body_TL_inputPrivacyKeyForwards(m)
}
func decode_body_TL_inputPrivacyKeyForwards(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyForwards{}
	return tl
}

func decode_TL_inputPrivacyKeyProfilePhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyProfilePhoto)
	return decode_body_TL_inputPrivacyKeyProfilePhoto(m)
}
func decode_body_TL_inputPrivacyKeyProfilePhoto(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyProfilePhoto{}
	return tl
}

func decode_TL_inputPrivacyKeyPhoneNumber(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyPhoneNumber)
	return decode_body_TL_inputPrivacyKeyPhoneNumber(m)
}
func decode_body_TL_inputPrivacyKeyPhoneNumber(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyPhoneNumber{}
	return tl
}

func decode_TL_inputPrivacyKeyAddedByPhone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyAddedByPhone)
	return decode_body_TL_inputPrivacyKeyAddedByPhone(m)
}
func decode_body_TL_inputPrivacyKeyAddedByPhone(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyAddedByPhone{}
	return tl
}

func decode_TL_inputPrivacyKeyVoiceMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyVoiceMessages)
	return decode_body_TL_inputPrivacyKeyVoiceMessages(m)
}
func decode_body_TL_inputPrivacyKeyVoiceMessages(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyVoiceMessages{}
	return tl
}

func decode_TL_inputPrivacyKeyAbout(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyAbout)
	return decode_body_TL_inputPrivacyKeyAbout(m)
}
func decode_body_TL_inputPrivacyKeyAbout(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyAbout{}
	return tl
}

func decode_TL_inputPrivacyKeyBirthday(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyKeyBirthday)
	return decode_body_TL_inputPrivacyKeyBirthday(m)
}
func decode_body_TL_inputPrivacyKeyBirthday(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyKeyBirthday{}
	return tl
}

func decode_TL_privacyKeyStatusTimestamp(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyStatusTimestamp)
	return decode_body_TL_privacyKeyStatusTimestamp(m)
}
func decode_body_TL_privacyKeyStatusTimestamp(_ *DecodeBuf) TL {
	tl := TL_privacyKeyStatusTimestamp{}
	return tl
}

func decode_TL_privacyKeyChatInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyChatInvite)
	return decode_body_TL_privacyKeyChatInvite(m)
}
func decode_body_TL_privacyKeyChatInvite(_ *DecodeBuf) TL {
	tl := TL_privacyKeyChatInvite{}
	return tl
}

func decode_TL_privacyKeyPhoneCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyPhoneCall)
	return decode_body_TL_privacyKeyPhoneCall(m)
}
func decode_body_TL_privacyKeyPhoneCall(_ *DecodeBuf) TL {
	tl := TL_privacyKeyPhoneCall{}
	return tl
}

func decode_TL_privacyKeyPhoneP2P(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyPhoneP2P)
	return decode_body_TL_privacyKeyPhoneP2P(m)
}
func decode_body_TL_privacyKeyPhoneP2P(_ *DecodeBuf) TL {
	tl := TL_privacyKeyPhoneP2P{}
	return tl
}

func decode_TL_privacyKeyForwards(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyForwards)
	return decode_body_TL_privacyKeyForwards(m)
}
func decode_body_TL_privacyKeyForwards(_ *DecodeBuf) TL {
	tl := TL_privacyKeyForwards{}
	return tl
}

func decode_TL_privacyKeyProfilePhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyProfilePhoto)
	return decode_body_TL_privacyKeyProfilePhoto(m)
}
func decode_body_TL_privacyKeyProfilePhoto(_ *DecodeBuf) TL {
	tl := TL_privacyKeyProfilePhoto{}
	return tl
}

func decode_TL_privacyKeyPhoneNumber(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyPhoneNumber)
	return decode_body_TL_privacyKeyPhoneNumber(m)
}
func decode_body_TL_privacyKeyPhoneNumber(_ *DecodeBuf) TL {
	tl := TL_privacyKeyPhoneNumber{}
	return tl
}

func decode_TL_privacyKeyAddedByPhone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyAddedByPhone)
	return decode_body_TL_privacyKeyAddedByPhone(m)
}
func decode_body_TL_privacyKeyAddedByPhone(_ *DecodeBuf) TL {
	tl := TL_privacyKeyAddedByPhone{}
	return tl
}

func decode_TL_privacyKeyVoiceMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyVoiceMessages)
	return decode_body_TL_privacyKeyVoiceMessages(m)
}
func decode_body_TL_privacyKeyVoiceMessages(_ *DecodeBuf) TL {
	tl := TL_privacyKeyVoiceMessages{}
	return tl
}

func decode_TL_privacyKeyAbout(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyAbout)
	return decode_body_TL_privacyKeyAbout(m)
}
func decode_body_TL_privacyKeyAbout(_ *DecodeBuf) TL {
	tl := TL_privacyKeyAbout{}
	return tl
}

func decode_TL_privacyKeyBirthday(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyKeyBirthday)
	return decode_body_TL_privacyKeyBirthday(m)
}
func decode_body_TL_privacyKeyBirthday(_ *DecodeBuf) TL {
	tl := TL_privacyKeyBirthday{}
	return tl
}

func decode_TL_inputPrivacyValueAllowContacts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueAllowContacts)
	return decode_body_TL_inputPrivacyValueAllowContacts(m)
}
func decode_body_TL_inputPrivacyValueAllowContacts(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyValueAllowContacts{}
	return tl
}

func decode_TL_inputPrivacyValueAllowAll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueAllowAll)
	return decode_body_TL_inputPrivacyValueAllowAll(m)
}
func decode_body_TL_inputPrivacyValueAllowAll(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyValueAllowAll{}
	return tl
}

func decode_TL_inputPrivacyValueAllowUsers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueAllowUsers)
	return decode_body_TL_inputPrivacyValueAllowUsers(m)
}
func decode_body_TL_inputPrivacyValueAllowUsers(m *DecodeBuf) TL {
	tl := TL_inputPrivacyValueAllowUsers{}
	tl.Users = m.Vector()
	return tl
}

func decode_TL_inputPrivacyValueDisallowContacts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueDisallowContacts)
	return decode_body_TL_inputPrivacyValueDisallowContacts(m)
}
func decode_body_TL_inputPrivacyValueDisallowContacts(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyValueDisallowContacts{}
	return tl
}

func decode_TL_inputPrivacyValueDisallowAll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueDisallowAll)
	return decode_body_TL_inputPrivacyValueDisallowAll(m)
}
func decode_body_TL_inputPrivacyValueDisallowAll(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyValueDisallowAll{}
	return tl
}

func decode_TL_inputPrivacyValueDisallowUsers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueDisallowUsers)
	return decode_body_TL_inputPrivacyValueDisallowUsers(m)
}
func decode_body_TL_inputPrivacyValueDisallowUsers(m *DecodeBuf) TL {
	tl := TL_inputPrivacyValueDisallowUsers{}
	tl.Users = m.Vector()
	return tl
}

func decode_TL_inputPrivacyValueAllowChatParticipants(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueAllowChatParticipants)
	return decode_body_TL_inputPrivacyValueAllowChatParticipants(m)
}
func decode_body_TL_inputPrivacyValueAllowChatParticipants(m *DecodeBuf) TL {
	tl := TL_inputPrivacyValueAllowChatParticipants{}
	tl.Chats = m.VectorLong()
	return tl
}

func decode_TL_inputPrivacyValueDisallowChatParticipants(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueDisallowChatParticipants)
	return decode_body_TL_inputPrivacyValueDisallowChatParticipants(m)
}
func decode_body_TL_inputPrivacyValueDisallowChatParticipants(m *DecodeBuf) TL {
	tl := TL_inputPrivacyValueDisallowChatParticipants{}
	tl.Chats = m.VectorLong()
	return tl
}

func decode_TL_inputPrivacyValueAllowCloseFriends(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueAllowCloseFriends)
	return decode_body_TL_inputPrivacyValueAllowCloseFriends(m)
}
func decode_body_TL_inputPrivacyValueAllowCloseFriends(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyValueAllowCloseFriends{}
	return tl
}

func decode_TL_inputPrivacyValueAllowPremium(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPrivacyValueAllowPremium)
	return decode_body_TL_inputPrivacyValueAllowPremium(m)
}
func decode_body_TL_inputPrivacyValueAllowPremium(_ *DecodeBuf) TL {
	tl := TL_inputPrivacyValueAllowPremium{}
	return tl
}

func decode_TL_privacyValueAllowContacts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueAllowContacts)
	return decode_body_TL_privacyValueAllowContacts(m)
}
func decode_body_TL_privacyValueAllowContacts(_ *DecodeBuf) TL {
	tl := TL_privacyValueAllowContacts{}
	return tl
}

func decode_TL_privacyValueAllowAll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueAllowAll)
	return decode_body_TL_privacyValueAllowAll(m)
}
func decode_body_TL_privacyValueAllowAll(_ *DecodeBuf) TL {
	tl := TL_privacyValueAllowAll{}
	return tl
}

func decode_TL_privacyValueAllowUsers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueAllowUsers)
	return decode_body_TL_privacyValueAllowUsers(m)
}
func decode_body_TL_privacyValueAllowUsers(m *DecodeBuf) TL {
	tl := TL_privacyValueAllowUsers{}
	tl.Users = m.VectorLong()
	return tl
}

func decode_TL_privacyValueDisallowContacts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueDisallowContacts)
	return decode_body_TL_privacyValueDisallowContacts(m)
}
func decode_body_TL_privacyValueDisallowContacts(_ *DecodeBuf) TL {
	tl := TL_privacyValueDisallowContacts{}
	return tl
}

func decode_TL_privacyValueDisallowAll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueDisallowAll)
	return decode_body_TL_privacyValueDisallowAll(m)
}
func decode_body_TL_privacyValueDisallowAll(_ *DecodeBuf) TL {
	tl := TL_privacyValueDisallowAll{}
	return tl
}

func decode_TL_privacyValueDisallowUsers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueDisallowUsers)
	return decode_body_TL_privacyValueDisallowUsers(m)
}
func decode_body_TL_privacyValueDisallowUsers(m *DecodeBuf) TL {
	tl := TL_privacyValueDisallowUsers{}
	tl.Users = m.VectorLong()
	return tl
}

func decode_TL_privacyValueAllowChatParticipants(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueAllowChatParticipants)
	return decode_body_TL_privacyValueAllowChatParticipants(m)
}
func decode_body_TL_privacyValueAllowChatParticipants(m *DecodeBuf) TL {
	tl := TL_privacyValueAllowChatParticipants{}
	tl.Chats = m.VectorLong()
	return tl
}

func decode_TL_privacyValueDisallowChatParticipants(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueDisallowChatParticipants)
	return decode_body_TL_privacyValueDisallowChatParticipants(m)
}
func decode_body_TL_privacyValueDisallowChatParticipants(m *DecodeBuf) TL {
	tl := TL_privacyValueDisallowChatParticipants{}
	tl.Chats = m.VectorLong()
	return tl
}

func decode_TL_privacyValueAllowCloseFriends(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueAllowCloseFriends)
	return decode_body_TL_privacyValueAllowCloseFriends(m)
}
func decode_body_TL_privacyValueAllowCloseFriends(_ *DecodeBuf) TL {
	tl := TL_privacyValueAllowCloseFriends{}
	return tl
}

func decode_TL_privacyValueAllowPremium(m *DecodeBuf) TL {
	m.constructorAssert(CRC_privacyValueAllowPremium)
	return decode_body_TL_privacyValueAllowPremium(m)
}
func decode_body_TL_privacyValueAllowPremium(_ *DecodeBuf) TL {
	tl := TL_privacyValueAllowPremium{}
	return tl
}

func decode_TL_account_privacyRules(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_privacyRules)
	return decode_body_TL_account_privacyRules(m)
}
func decode_body_TL_account_privacyRules(m *DecodeBuf) TL {
	tl := TL_account_privacyRules{}
	tl.Rules = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_accountDaysTTL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_accountDaysTTL)
	return decode_body_TL_accountDaysTTL(m)
}
func decode_body_TL_accountDaysTTL(m *DecodeBuf) TL {
	tl := TL_accountDaysTTL{}
	tl.Days = m.Int()
	return tl
}

func decode_TL_documentAttributeImageSize(m *DecodeBuf) TL {
	m.constructorAssert(CRC_documentAttributeImageSize)
	return decode_body_TL_documentAttributeImageSize(m)
}
func decode_body_TL_documentAttributeImageSize(m *DecodeBuf) TL {
	tl := TL_documentAttributeImageSize{}
	tl.W = m.Int()
	tl.H = m.Int()
	return tl
}

func decode_TL_documentAttributeAnimated(m *DecodeBuf) TL {
	m.constructorAssert(CRC_documentAttributeAnimated)
	return decode_body_TL_documentAttributeAnimated(m)
}
func decode_body_TL_documentAttributeAnimated(_ *DecodeBuf) TL {
	tl := TL_documentAttributeAnimated{}
	return tl
}

func decode_TL_documentAttributeSticker(m *DecodeBuf) TL {
	m.constructorAssert(CRC_documentAttributeSticker)
	return decode_body_TL_documentAttributeSticker(m)
}
func decode_body_TL_documentAttributeSticker(m *DecodeBuf) TL {
	tl := TL_documentAttributeSticker{}
	flags := m.Int()
	tl.Mask = flags&(1<<1) != 0
	tl.Alt = m.String()
	tl.Stickerset = m.Object()
	if flags&(1<<0) != 0 {
		tl.MaskCoords = Ref(decode_TL_maskCoords(m).(TL_maskCoords))
	}
	return tl
}

func decode_TL_documentAttributeVideo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_documentAttributeVideo)
	return decode_body_TL_documentAttributeVideo(m)
}
func decode_body_TL_documentAttributeVideo(m *DecodeBuf) TL {
	tl := TL_documentAttributeVideo{}
	flags := m.Int()
	tl.RoundMessage = flags&(1<<0) != 0
	tl.SupportsStreaming = flags&(1<<1) != 0
	tl.Nosound = flags&(1<<3) != 0
	tl.Duration = m.Double()
	tl.W = m.Int()
	tl.H = m.Int()
	if flags&(1<<2) != 0 {
		tl.PreloadPrefixSize = Ref(m.Int())
	}
	if flags&(1<<4) != 0 {
		tl.VideoStartTS = Ref(m.Double())
	}
	return tl
}

func decode_TL_documentAttributeAudio(m *DecodeBuf) TL {
	m.constructorAssert(CRC_documentAttributeAudio)
	return decode_body_TL_documentAttributeAudio(m)
}
func decode_body_TL_documentAttributeAudio(m *DecodeBuf) TL {
	tl := TL_documentAttributeAudio{}
	flags := m.Int()
	tl.Voice = flags&(1<<10) != 0
	tl.Duration = m.Int()
	if flags&(1<<0) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Performer = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Waveform = m.StringBytes()
	}
	return tl
}

func decode_TL_documentAttributeFilename(m *DecodeBuf) TL {
	m.constructorAssert(CRC_documentAttributeFilename)
	return decode_body_TL_documentAttributeFilename(m)
}
func decode_body_TL_documentAttributeFilename(m *DecodeBuf) TL {
	tl := TL_documentAttributeFilename{}
	tl.FileName = m.String()
	return tl
}

func decode_TL_documentAttributeHasStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_documentAttributeHasStickers)
	return decode_body_TL_documentAttributeHasStickers(m)
}
func decode_body_TL_documentAttributeHasStickers(_ *DecodeBuf) TL {
	tl := TL_documentAttributeHasStickers{}
	return tl
}

func decode_TL_documentAttributeCustomEmoji(m *DecodeBuf) TL {
	m.constructorAssert(CRC_documentAttributeCustomEmoji)
	return decode_body_TL_documentAttributeCustomEmoji(m)
}
func decode_body_TL_documentAttributeCustomEmoji(m *DecodeBuf) TL {
	tl := TL_documentAttributeCustomEmoji{}
	flags := m.Int()
	tl.Free = flags&(1<<0) != 0
	tl.TextColor = flags&(1<<1) != 0
	tl.Alt = m.String()
	tl.Stickerset = m.Object()
	return tl
}

func decode_TL_messages_stickersNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_stickersNotModified)
	return decode_body_TL_messages_stickersNotModified(m)
}
func decode_body_TL_messages_stickersNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_stickersNotModified{}
	return tl
}

func decode_TL_messages_stickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_stickers)
	return decode_body_TL_messages_stickers(m)
}
func decode_body_TL_messages_stickers(m *DecodeBuf) TL {
	tl := TL_messages_stickers{}
	tl.Hash = m.Long()
	tl.Stickers = m.Vector()
	return tl
}

func decode_TL_stickerPack(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stickerPack)
	return decode_body_TL_stickerPack(m)
}
func decode_body_TL_stickerPack(m *DecodeBuf) TL {
	tl := TL_stickerPack{}
	tl.Emoticon = m.String()
	tl.Documents = m.VectorLong()
	return tl
}

func decode_TL_messages_allStickersNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_allStickersNotModified)
	return decode_body_TL_messages_allStickersNotModified(m)
}
func decode_body_TL_messages_allStickersNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_allStickersNotModified{}
	return tl
}

func decode_TL_messages_allStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_allStickers)
	return decode_body_TL_messages_allStickers(m)
}
func decode_body_TL_messages_allStickers(m *DecodeBuf) TL {
	tl := TL_messages_allStickers{}
	tl.Hash = m.Long()
	tl.Sets = DecodeBuf_GenericVector[TL_stickerSet](m)
	return tl
}

func decode_TL_messages_affectedMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_affectedMessages)
	return decode_body_TL_messages_affectedMessages(m)
}
func decode_body_TL_messages_affectedMessages(m *DecodeBuf) TL {
	tl := TL_messages_affectedMessages{}
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	return tl
}

func decode_TL_webPageEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webPageEmpty)
	return decode_body_TL_webPageEmpty(m)
}
func decode_body_TL_webPageEmpty(m *DecodeBuf) TL {
	tl := TL_webPageEmpty{}
	flags := m.Int()
	tl.ID = m.Long()
	if flags&(1<<0) != 0 {
		tl.URL = Ref(m.String())
	}
	return tl
}

func decode_TL_webPagePending(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webPagePending)
	return decode_body_TL_webPagePending(m)
}
func decode_body_TL_webPagePending(m *DecodeBuf) TL {
	tl := TL_webPagePending{}
	flags := m.Int()
	tl.ID = m.Long()
	if flags&(1<<0) != 0 {
		tl.URL = Ref(m.String())
	}
	tl.Date = m.Int()
	return tl
}

func decode_TL_webPage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webPage)
	return decode_body_TL_webPage(m)
}
func decode_body_TL_webPage(m *DecodeBuf) TL {
	tl := TL_webPage{}
	flags := m.Int()
	tl.HasLargeMedia = flags&(1<<13) != 0
	tl.ID = m.Long()
	tl.URL = m.String()
	tl.DisplayURL = m.String()
	tl.Hash = m.Int()
	if flags&(1<<0) != 0 {
		tl.Type = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.SiteName = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.Description = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.Photo = m.Object()
	}
	if flags&(1<<5) != 0 {
		tl.EmbedURL = Ref(m.String())
	}
	if flags&(1<<5) != 0 {
		tl.EmbedType = Ref(m.String())
	}
	if flags&(1<<6) != 0 {
		tl.EmbedWidth = Ref(m.Int())
	}
	if flags&(1<<6) != 0 {
		tl.EmbedHeight = Ref(m.Int())
	}
	if flags&(1<<7) != 0 {
		tl.Duration = Ref(m.Int())
	}
	if flags&(1<<8) != 0 {
		tl.Author = Ref(m.String())
	}
	if flags&(1<<9) != 0 {
		tl.Document = m.Object()
	}
	if flags&(1<<10) != 0 {
		tl.CachedPage = Ref(decode_TL_page(m).(TL_page))
	}
	if flags&(1<<12) != 0 {
		tl.Attributes = m.Vector()
	}
	return tl
}

func decode_TL_webPageNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webPageNotModified)
	return decode_body_TL_webPageNotModified(m)
}
func decode_body_TL_webPageNotModified(m *DecodeBuf) TL {
	tl := TL_webPageNotModified{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.CachedPageViews = Ref(m.Int())
	}
	return tl
}

func decode_TL_authorization(m *DecodeBuf) TL {
	m.constructorAssert(CRC_authorization)
	return decode_body_TL_authorization(m)
}
func decode_body_TL_authorization(m *DecodeBuf) TL {
	tl := TL_authorization{}
	flags := m.Int()
	tl.Current = flags&(1<<0) != 0
	tl.OfficialApp = flags&(1<<1) != 0
	tl.PasswordPending = flags&(1<<2) != 0
	tl.EncryptedRequestsDisabled = flags&(1<<3) != 0
	tl.CallRequestsDisabled = flags&(1<<4) != 0
	tl.Unconfirmed = flags&(1<<5) != 0
	tl.Hash = m.Long()
	tl.DeviceModel = m.String()
	tl.Platform = m.String()
	tl.SystemVersion = m.String()
	tl.APIID = m.Int()
	tl.AppName = m.String()
	tl.AppVersion = m.String()
	tl.DateCreated = m.Int()
	tl.DateActive = m.Int()
	tl.IP = m.String()
	tl.Country = m.String()
	tl.Region = m.String()
	return tl
}

func decode_TL_account_authorizations(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_authorizations)
	return decode_body_TL_account_authorizations(m)
}
func decode_body_TL_account_authorizations(m *DecodeBuf) TL {
	tl := TL_account_authorizations{}
	tl.AuthorizationTTLDays = m.Int()
	tl.Authorizations = DecodeBuf_GenericVector[TL_authorization](m)
	return tl
}

func decode_TL_account_password(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_password)
	return decode_body_TL_account_password(m)
}
func decode_body_TL_account_password(m *DecodeBuf) TL {
	tl := TL_account_password{}
	flags := m.Int()
	tl.HasRecovery = flags&(1<<0) != 0
	tl.HasSecureValues = flags&(1<<1) != 0
	tl.HasPassword = flags&(1<<2) != 0
	if flags&(1<<2) != 0 {
		tl.CurrentAlgo = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.SrpB = m.StringBytes()
	}
	if flags&(1<<2) != 0 {
		tl.SrpID = Ref(m.Long())
	}
	if flags&(1<<3) != 0 {
		tl.Hint = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.EmailUnconfirmedPattern = Ref(m.String())
	}
	tl.NewAlgo = m.Object()
	tl.NewSecureAlgo = m.Object()
	tl.SecureRandom = m.StringBytes()
	if flags&(1<<5) != 0 {
		tl.PendingResetDate = Ref(m.Int())
	}
	if flags&(1<<6) != 0 {
		tl.LoginEmailPattern = Ref(m.String())
	}
	return tl
}

func decode_TL_account_passwordSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_passwordSettings)
	return decode_body_TL_account_passwordSettings(m)
}
func decode_body_TL_account_passwordSettings(m *DecodeBuf) TL {
	tl := TL_account_passwordSettings{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Email = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.SecureSettings = Ref(decode_TL_secureSecretSettings(m).(TL_secureSecretSettings))
	}
	return tl
}

func decode_TL_account_passwordInputSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_passwordInputSettings)
	return decode_body_TL_account_passwordInputSettings(m)
}
func decode_body_TL_account_passwordInputSettings(m *DecodeBuf) TL {
	tl := TL_account_passwordInputSettings{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.NewAlgo = m.Object()
	}
	if flags&(1<<0) != 0 {
		tl.NewPasswordHash = m.StringBytes()
	}
	if flags&(1<<0) != 0 {
		tl.Hint = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Email = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.NewSecureSettings = Ref(decode_TL_secureSecretSettings(m).(TL_secureSecretSettings))
	}
	return tl
}

func decode_TL_auth_passwordRecovery(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_passwordRecovery)
	return decode_body_TL_auth_passwordRecovery(m)
}
func decode_body_TL_auth_passwordRecovery(m *DecodeBuf) TL {
	tl := TL_auth_passwordRecovery{}
	tl.EmailPattern = m.String()
	return tl
}

func decode_TL_receivedNotifyMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_receivedNotifyMessage)
	return decode_body_TL_receivedNotifyMessage(m)
}
func decode_body_TL_receivedNotifyMessage(m *DecodeBuf) TL {
	tl := TL_receivedNotifyMessage{}
	tl.ID = m.Int()
	tl.Flags = m.Int()
	return tl
}

func decode_TL_chatInviteExported(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatInviteExported)
	return decode_body_TL_chatInviteExported(m)
}
func decode_body_TL_chatInviteExported(m *DecodeBuf) TL {
	tl := TL_chatInviteExported{}
	flags := m.Int()
	tl.Revoked = flags&(1<<0) != 0
	tl.Permanent = flags&(1<<5) != 0
	tl.RequestNeeded = flags&(1<<6) != 0
	tl.Link = m.String()
	tl.AdminID = m.Long()
	tl.Date = m.Int()
	if flags&(1<<4) != 0 {
		tl.StartDate = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.ExpireDate = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.UsageLimit = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.Usage = Ref(m.Int())
	}
	if flags&(1<<7) != 0 {
		tl.Requested = Ref(m.Int())
	}
	if flags&(1<<10) != 0 {
		tl.SubscriptionExpired = Ref(m.Int())
	}
	if flags&(1<<8) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<9) != 0 {
		tl.SubscriptionPricing = Ref(decode_TL_starsSubscriptionPricing(m).(TL_starsSubscriptionPricing))
	}
	return tl
}

func decode_TL_chatInvitePublicJoinRequests(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatInvitePublicJoinRequests)
	return decode_body_TL_chatInvitePublicJoinRequests(m)
}
func decode_body_TL_chatInvitePublicJoinRequests(_ *DecodeBuf) TL {
	tl := TL_chatInvitePublicJoinRequests{}
	return tl
}

func decode_TL_chatInviteAlready(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatInviteAlready)
	return decode_body_TL_chatInviteAlready(m)
}
func decode_body_TL_chatInviteAlready(m *DecodeBuf) TL {
	tl := TL_chatInviteAlready{}
	tl.Chat = m.Object()
	return tl
}

func decode_TL_chatInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatInvite)
	return decode_body_TL_chatInvite(m)
}
func decode_body_TL_chatInvite(m *DecodeBuf) TL {
	tl := TL_chatInvite{}
	flags := m.Int()
	tl.Channel = flags&(1<<0) != 0
	tl.Broadcast = flags&(1<<1) != 0
	tl.Public = flags&(1<<2) != 0
	tl.Megagroup = flags&(1<<3) != 0
	tl.RequestNeeded = flags&(1<<6) != 0
	tl.Verified = flags&(1<<7) != 0
	tl.Scam = flags&(1<<8) != 0
	tl.Fake = flags&(1<<9) != 0
	tl.CanRefulfillSubscription = flags&(1<<11) != 0
	tl.Title = m.String()
	if flags&(1<<5) != 0 {
		tl.About = Ref(m.String())
	}
	tl.Photo = m.Object()
	tl.ParticipantsCount = m.Int()
	if flags&(1<<4) != 0 {
		tl.Participants = m.Vector()
	}
	tl.Color = m.Int()
	if flags&(1<<10) != 0 {
		tl.SubscriptionPricing = Ref(decode_TL_starsSubscriptionPricing(m).(TL_starsSubscriptionPricing))
	}
	if flags&(1<<12) != 0 {
		tl.SubscriptionFormID = Ref(m.Long())
	}
	return tl
}

func decode_TL_chatInvitePeek(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatInvitePeek)
	return decode_body_TL_chatInvitePeek(m)
}
func decode_body_TL_chatInvitePeek(m *DecodeBuf) TL {
	tl := TL_chatInvitePeek{}
	tl.Chat = m.Object()
	tl.Expires = m.Int()
	return tl
}

func decode_TL_inputStickerSetEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetEmpty)
	return decode_body_TL_inputStickerSetEmpty(m)
}
func decode_body_TL_inputStickerSetEmpty(_ *DecodeBuf) TL {
	tl := TL_inputStickerSetEmpty{}
	return tl
}

func decode_TL_inputStickerSetID(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetID)
	return decode_body_TL_inputStickerSetID(m)
}
func decode_body_TL_inputStickerSetID(m *DecodeBuf) TL {
	tl := TL_inputStickerSetID{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputStickerSetShortName(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetShortName)
	return decode_body_TL_inputStickerSetShortName(m)
}
func decode_body_TL_inputStickerSetShortName(m *DecodeBuf) TL {
	tl := TL_inputStickerSetShortName{}
	tl.ShortName = m.String()
	return tl
}

func decode_TL_inputStickerSetAnimatedEmoji(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetAnimatedEmoji)
	return decode_body_TL_inputStickerSetAnimatedEmoji(m)
}
func decode_body_TL_inputStickerSetAnimatedEmoji(_ *DecodeBuf) TL {
	tl := TL_inputStickerSetAnimatedEmoji{}
	return tl
}

func decode_TL_inputStickerSetDice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetDice)
	return decode_body_TL_inputStickerSetDice(m)
}
func decode_body_TL_inputStickerSetDice(m *DecodeBuf) TL {
	tl := TL_inputStickerSetDice{}
	tl.Emoticon = m.String()
	return tl
}

func decode_TL_inputStickerSetAnimatedEmojiAnimations(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetAnimatedEmojiAnimations)
	return decode_body_TL_inputStickerSetAnimatedEmojiAnimations(m)
}
func decode_body_TL_inputStickerSetAnimatedEmojiAnimations(_ *DecodeBuf) TL {
	tl := TL_inputStickerSetAnimatedEmojiAnimations{}
	return tl
}

func decode_TL_inputStickerSetPremiumGifts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetPremiumGifts)
	return decode_body_TL_inputStickerSetPremiumGifts(m)
}
func decode_body_TL_inputStickerSetPremiumGifts(_ *DecodeBuf) TL {
	tl := TL_inputStickerSetPremiumGifts{}
	return tl
}

func decode_TL_inputStickerSetEmojiGenericAnimations(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetEmojiGenericAnimations)
	return decode_body_TL_inputStickerSetEmojiGenericAnimations(m)
}
func decode_body_TL_inputStickerSetEmojiGenericAnimations(_ *DecodeBuf) TL {
	tl := TL_inputStickerSetEmojiGenericAnimations{}
	return tl
}

func decode_TL_inputStickerSetEmojiDefaultStatuses(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetEmojiDefaultStatuses)
	return decode_body_TL_inputStickerSetEmojiDefaultStatuses(m)
}
func decode_body_TL_inputStickerSetEmojiDefaultStatuses(_ *DecodeBuf) TL {
	tl := TL_inputStickerSetEmojiDefaultStatuses{}
	return tl
}

func decode_TL_inputStickerSetEmojiDefaultTopicIcons(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetEmojiDefaultTopicIcons)
	return decode_body_TL_inputStickerSetEmojiDefaultTopicIcons(m)
}
func decode_body_TL_inputStickerSetEmojiDefaultTopicIcons(_ *DecodeBuf) TL {
	tl := TL_inputStickerSetEmojiDefaultTopicIcons{}
	return tl
}

func decode_TL_inputStickerSetEmojiChannelDefaultStatuses(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetEmojiChannelDefaultStatuses)
	return decode_body_TL_inputStickerSetEmojiChannelDefaultStatuses(m)
}
func decode_body_TL_inputStickerSetEmojiChannelDefaultStatuses(_ *DecodeBuf) TL {
	tl := TL_inputStickerSetEmojiChannelDefaultStatuses{}
	return tl
}

func decode_TL_stickerSet(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stickerSet)
	return decode_body_TL_stickerSet(m)
}
func decode_body_TL_stickerSet(m *DecodeBuf) TL {
	tl := TL_stickerSet{}
	flags := m.Int()
	tl.Archived = flags&(1<<1) != 0
	tl.Official = flags&(1<<2) != 0
	tl.Masks = flags&(1<<3) != 0
	tl.Emojis = flags&(1<<7) != 0
	tl.TextColor = flags&(1<<9) != 0
	tl.ChannelEmojiStatus = flags&(1<<10) != 0
	tl.Creator = flags&(1<<11) != 0
	if flags&(1<<0) != 0 {
		tl.InstalledDate = Ref(m.Int())
	}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Title = m.String()
	tl.ShortName = m.String()
	if flags&(1<<4) != 0 {
		tl.Thumbs = m.Vector()
	}
	if flags&(1<<4) != 0 {
		tl.ThumbDCID = Ref(m.Int())
	}
	if flags&(1<<4) != 0 {
		tl.ThumbVersion = Ref(m.Int())
	}
	if flags&(1<<8) != 0 {
		tl.ThumbDocumentID = Ref(m.Long())
	}
	tl.Count = m.Int()
	tl.Hash = m.Int()
	return tl
}

func decode_TL_messages_stickerSet(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_stickerSet)
	return decode_body_TL_messages_stickerSet(m)
}
func decode_body_TL_messages_stickerSet(m *DecodeBuf) TL {
	tl := TL_messages_stickerSet{}
	tl.Set = decode_TL_stickerSet(m).(TL_stickerSet)
	tl.Packs = DecodeBuf_GenericVector[TL_stickerPack](m)
	tl.Keywords = DecodeBuf_GenericVector[TL_stickerKeyword](m)
	tl.Documents = m.Vector()
	return tl
}

func decode_TL_messages_stickerSetNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_stickerSetNotModified)
	return decode_body_TL_messages_stickerSetNotModified(m)
}
func decode_body_TL_messages_stickerSetNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_stickerSetNotModified{}
	return tl
}

func decode_TL_botCommand(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botCommand)
	return decode_body_TL_botCommand(m)
}
func decode_body_TL_botCommand(m *DecodeBuf) TL {
	tl := TL_botCommand{}
	tl.Command = m.String()
	tl.Description = m.String()
	return tl
}

func decode_TL_botInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInfo)
	return decode_body_TL_botInfo(m)
}
func decode_body_TL_botInfo(m *DecodeBuf) TL {
	tl := TL_botInfo{}
	flags := m.Int()
	tl.HasPreviewMedias = flags&(1<<6) != 0
	if flags&(1<<0) != 0 {
		tl.UserID = Ref(m.Long())
	}
	if flags&(1<<1) != 0 {
		tl.Description = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.DescriptionPhoto = m.Object()
	}
	if flags&(1<<5) != 0 {
		tl.DescriptionDocument = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.Commands = DecodeBuf_GenericVector[TL_botCommand](m)
	}
	if flags&(1<<3) != 0 {
		tl.MenuButton = m.Object()
	}
	if flags&(1<<7) != 0 {
		tl.PrivacyPolicyURL = Ref(m.String())
	}
	return tl
}

func decode_TL_keyboardButton(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButton)
	return decode_body_TL_keyboardButton(m)
}
func decode_body_TL_keyboardButton(m *DecodeBuf) TL {
	tl := TL_keyboardButton{}
	tl.Text = m.String()
	return tl
}

func decode_TL_keyboardButtonURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonURL)
	return decode_body_TL_keyboardButtonURL(m)
}
func decode_body_TL_keyboardButtonURL(m *DecodeBuf) TL {
	tl := TL_keyboardButtonURL{}
	tl.Text = m.String()
	tl.URL = m.String()
	return tl
}

func decode_TL_keyboardButtonCallback(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonCallback)
	return decode_body_TL_keyboardButtonCallback(m)
}
func decode_body_TL_keyboardButtonCallback(m *DecodeBuf) TL {
	tl := TL_keyboardButtonCallback{}
	flags := m.Int()
	tl.RequiresPassword = flags&(1<<0) != 0
	tl.Text = m.String()
	tl.Data = m.StringBytes()
	return tl
}

func decode_TL_keyboardButtonRequestPhone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonRequestPhone)
	return decode_body_TL_keyboardButtonRequestPhone(m)
}
func decode_body_TL_keyboardButtonRequestPhone(m *DecodeBuf) TL {
	tl := TL_keyboardButtonRequestPhone{}
	tl.Text = m.String()
	return tl
}

func decode_TL_keyboardButtonRequestGeoLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonRequestGeoLocation)
	return decode_body_TL_keyboardButtonRequestGeoLocation(m)
}
func decode_body_TL_keyboardButtonRequestGeoLocation(m *DecodeBuf) TL {
	tl := TL_keyboardButtonRequestGeoLocation{}
	tl.Text = m.String()
	return tl
}

func decode_TL_keyboardButtonSwitchInline(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonSwitchInline)
	return decode_body_TL_keyboardButtonSwitchInline(m)
}
func decode_body_TL_keyboardButtonSwitchInline(m *DecodeBuf) TL {
	tl := TL_keyboardButtonSwitchInline{}
	flags := m.Int()
	tl.SamePeer = flags&(1<<0) != 0
	tl.Text = m.String()
	tl.Query = m.String()
	if flags&(1<<1) != 0 {
		tl.PeerTypes = m.Vector()
	}
	return tl
}

func decode_TL_keyboardButtonGame(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonGame)
	return decode_body_TL_keyboardButtonGame(m)
}
func decode_body_TL_keyboardButtonGame(m *DecodeBuf) TL {
	tl := TL_keyboardButtonGame{}
	tl.Text = m.String()
	return tl
}

func decode_TL_keyboardButtonBuy(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonBuy)
	return decode_body_TL_keyboardButtonBuy(m)
}
func decode_body_TL_keyboardButtonBuy(m *DecodeBuf) TL {
	tl := TL_keyboardButtonBuy{}
	tl.Text = m.String()
	return tl
}

func decode_TL_keyboardButtonURLAuth(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonURLAuth)
	return decode_body_TL_keyboardButtonURLAuth(m)
}
func decode_body_TL_keyboardButtonURLAuth(m *DecodeBuf) TL {
	tl := TL_keyboardButtonURLAuth{}
	flags := m.Int()
	tl.Text = m.String()
	if flags&(1<<0) != 0 {
		tl.FwdText = Ref(m.String())
	}
	tl.URL = m.String()
	tl.ButtonID = m.Int()
	return tl
}

func decode_TL_inputKeyboardButtonURLAuth(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputKeyboardButtonURLAuth)
	return decode_body_TL_inputKeyboardButtonURLAuth(m)
}
func decode_body_TL_inputKeyboardButtonURLAuth(m *DecodeBuf) TL {
	tl := TL_inputKeyboardButtonURLAuth{}
	flags := m.Int()
	tl.RequestWriteAccess = flags&(1<<0) != 0
	tl.Text = m.String()
	if flags&(1<<1) != 0 {
		tl.FwdText = Ref(m.String())
	}
	tl.URL = m.String()
	tl.Bot = m.Object()
	return tl
}

func decode_TL_keyboardButtonRequestPoll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonRequestPoll)
	return decode_body_TL_keyboardButtonRequestPoll(m)
}
func decode_body_TL_keyboardButtonRequestPoll(m *DecodeBuf) TL {
	tl := TL_keyboardButtonRequestPoll{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Quiz = Ref(m.Bool())
	}
	tl.Text = m.String()
	return tl
}

func decode_TL_inputKeyboardButtonUserProfile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputKeyboardButtonUserProfile)
	return decode_body_TL_inputKeyboardButtonUserProfile(m)
}
func decode_body_TL_inputKeyboardButtonUserProfile(m *DecodeBuf) TL {
	tl := TL_inputKeyboardButtonUserProfile{}
	tl.Text = m.String()
	tl.UserID = m.Object()
	return tl
}

func decode_TL_keyboardButtonUserProfile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonUserProfile)
	return decode_body_TL_keyboardButtonUserProfile(m)
}
func decode_body_TL_keyboardButtonUserProfile(m *DecodeBuf) TL {
	tl := TL_keyboardButtonUserProfile{}
	tl.Text = m.String()
	tl.UserID = m.Long()
	return tl
}

func decode_TL_keyboardButtonWebView(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonWebView)
	return decode_body_TL_keyboardButtonWebView(m)
}
func decode_body_TL_keyboardButtonWebView(m *DecodeBuf) TL {
	tl := TL_keyboardButtonWebView{}
	tl.Text = m.String()
	tl.URL = m.String()
	return tl
}

func decode_TL_keyboardButtonSimpleWebView(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonSimpleWebView)
	return decode_body_TL_keyboardButtonSimpleWebView(m)
}
func decode_body_TL_keyboardButtonSimpleWebView(m *DecodeBuf) TL {
	tl := TL_keyboardButtonSimpleWebView{}
	tl.Text = m.String()
	tl.URL = m.String()
	return tl
}

func decode_TL_keyboardButtonRequestPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonRequestPeer)
	return decode_body_TL_keyboardButtonRequestPeer(m)
}
func decode_body_TL_keyboardButtonRequestPeer(m *DecodeBuf) TL {
	tl := TL_keyboardButtonRequestPeer{}
	tl.Text = m.String()
	tl.ButtonID = m.Int()
	tl.PeerType = m.Object()
	tl.MaxQuantity = m.Int()
	return tl
}

func decode_TL_inputKeyboardButtonRequestPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputKeyboardButtonRequestPeer)
	return decode_body_TL_inputKeyboardButtonRequestPeer(m)
}
func decode_body_TL_inputKeyboardButtonRequestPeer(m *DecodeBuf) TL {
	tl := TL_inputKeyboardButtonRequestPeer{}
	flags := m.Int()
	tl.NameRequested = flags&(1<<0) != 0
	tl.UsernameRequested = flags&(1<<1) != 0
	tl.PhotoRequested = flags&(1<<2) != 0
	tl.Text = m.String()
	tl.ButtonID = m.Int()
	tl.PeerType = m.Object()
	tl.MaxQuantity = m.Int()
	return tl
}

func decode_TL_keyboardButtonRow(m *DecodeBuf) TL {
	m.constructorAssert(CRC_keyboardButtonRow)
	return decode_body_TL_keyboardButtonRow(m)
}
func decode_body_TL_keyboardButtonRow(m *DecodeBuf) TL {
	tl := TL_keyboardButtonRow{}
	tl.Buttons = m.Vector()
	return tl
}

func decode_TL_replyKeyboardHide(m *DecodeBuf) TL {
	m.constructorAssert(CRC_replyKeyboardHide)
	return decode_body_TL_replyKeyboardHide(m)
}
func decode_body_TL_replyKeyboardHide(m *DecodeBuf) TL {
	tl := TL_replyKeyboardHide{}
	flags := m.Int()
	tl.Selective = flags&(1<<2) != 0
	return tl
}

func decode_TL_replyKeyboardForceReply(m *DecodeBuf) TL {
	m.constructorAssert(CRC_replyKeyboardForceReply)
	return decode_body_TL_replyKeyboardForceReply(m)
}
func decode_body_TL_replyKeyboardForceReply(m *DecodeBuf) TL {
	tl := TL_replyKeyboardForceReply{}
	flags := m.Int()
	tl.SingleUse = flags&(1<<1) != 0
	tl.Selective = flags&(1<<2) != 0
	if flags&(1<<3) != 0 {
		tl.Placeholder = Ref(m.String())
	}
	return tl
}

func decode_TL_replyKeyboardMarkup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_replyKeyboardMarkup)
	return decode_body_TL_replyKeyboardMarkup(m)
}
func decode_body_TL_replyKeyboardMarkup(m *DecodeBuf) TL {
	tl := TL_replyKeyboardMarkup{}
	flags := m.Int()
	tl.Resize = flags&(1<<0) != 0
	tl.SingleUse = flags&(1<<1) != 0
	tl.Selective = flags&(1<<2) != 0
	tl.Persistent = flags&(1<<4) != 0
	tl.Rows = DecodeBuf_GenericVector[TL_keyboardButtonRow](m)
	if flags&(1<<3) != 0 {
		tl.Placeholder = Ref(m.String())
	}
	return tl
}

func decode_TL_replyInlineMarkup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_replyInlineMarkup)
	return decode_body_TL_replyInlineMarkup(m)
}
func decode_body_TL_replyInlineMarkup(m *DecodeBuf) TL {
	tl := TL_replyInlineMarkup{}
	tl.Rows = DecodeBuf_GenericVector[TL_keyboardButtonRow](m)
	return tl
}

func decode_TL_messageEntityUnknown(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityUnknown)
	return decode_body_TL_messageEntityUnknown(m)
}
func decode_body_TL_messageEntityUnknown(m *DecodeBuf) TL {
	tl := TL_messageEntityUnknown{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityMention(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityMention)
	return decode_body_TL_messageEntityMention(m)
}
func decode_body_TL_messageEntityMention(m *DecodeBuf) TL {
	tl := TL_messageEntityMention{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityHashtag(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityHashtag)
	return decode_body_TL_messageEntityHashtag(m)
}
func decode_body_TL_messageEntityHashtag(m *DecodeBuf) TL {
	tl := TL_messageEntityHashtag{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityBotCommand(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityBotCommand)
	return decode_body_TL_messageEntityBotCommand(m)
}
func decode_body_TL_messageEntityBotCommand(m *DecodeBuf) TL {
	tl := TL_messageEntityBotCommand{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityURL)
	return decode_body_TL_messageEntityURL(m)
}
func decode_body_TL_messageEntityURL(m *DecodeBuf) TL {
	tl := TL_messageEntityURL{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityEmail(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityEmail)
	return decode_body_TL_messageEntityEmail(m)
}
func decode_body_TL_messageEntityEmail(m *DecodeBuf) TL {
	tl := TL_messageEntityEmail{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityBold(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityBold)
	return decode_body_TL_messageEntityBold(m)
}
func decode_body_TL_messageEntityBold(m *DecodeBuf) TL {
	tl := TL_messageEntityBold{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityItalic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityItalic)
	return decode_body_TL_messageEntityItalic(m)
}
func decode_body_TL_messageEntityItalic(m *DecodeBuf) TL {
	tl := TL_messageEntityItalic{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityCode)
	return decode_body_TL_messageEntityCode(m)
}
func decode_body_TL_messageEntityCode(m *DecodeBuf) TL {
	tl := TL_messageEntityCode{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityPre(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityPre)
	return decode_body_TL_messageEntityPre(m)
}
func decode_body_TL_messageEntityPre(m *DecodeBuf) TL {
	tl := TL_messageEntityPre{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	tl.Language = m.String()
	return tl
}

func decode_TL_messageEntityTextURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityTextURL)
	return decode_body_TL_messageEntityTextURL(m)
}
func decode_body_TL_messageEntityTextURL(m *DecodeBuf) TL {
	tl := TL_messageEntityTextURL{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	tl.URL = m.String()
	return tl
}

func decode_TL_messageEntityMentionName(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityMentionName)
	return decode_body_TL_messageEntityMentionName(m)
}
func decode_body_TL_messageEntityMentionName(m *DecodeBuf) TL {
	tl := TL_messageEntityMentionName{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	tl.UserID = m.Long()
	return tl
}

func decode_TL_inputMessageEntityMentionName(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessageEntityMentionName)
	return decode_body_TL_inputMessageEntityMentionName(m)
}
func decode_body_TL_inputMessageEntityMentionName(m *DecodeBuf) TL {
	tl := TL_inputMessageEntityMentionName{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	tl.UserID = m.Object()
	return tl
}

func decode_TL_messageEntityPhone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityPhone)
	return decode_body_TL_messageEntityPhone(m)
}
func decode_body_TL_messageEntityPhone(m *DecodeBuf) TL {
	tl := TL_messageEntityPhone{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityCashtag(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityCashtag)
	return decode_body_TL_messageEntityCashtag(m)
}
func decode_body_TL_messageEntityCashtag(m *DecodeBuf) TL {
	tl := TL_messageEntityCashtag{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityUnderline(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityUnderline)
	return decode_body_TL_messageEntityUnderline(m)
}
func decode_body_TL_messageEntityUnderline(m *DecodeBuf) TL {
	tl := TL_messageEntityUnderline{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityStrike(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityStrike)
	return decode_body_TL_messageEntityStrike(m)
}
func decode_body_TL_messageEntityStrike(m *DecodeBuf) TL {
	tl := TL_messageEntityStrike{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityBankCard(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityBankCard)
	return decode_body_TL_messageEntityBankCard(m)
}
func decode_body_TL_messageEntityBankCard(m *DecodeBuf) TL {
	tl := TL_messageEntityBankCard{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntitySpoiler(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntitySpoiler)
	return decode_body_TL_messageEntitySpoiler(m)
}
func decode_body_TL_messageEntitySpoiler(m *DecodeBuf) TL {
	tl := TL_messageEntitySpoiler{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_messageEntityCustomEmoji(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityCustomEmoji)
	return decode_body_TL_messageEntityCustomEmoji(m)
}
func decode_body_TL_messageEntityCustomEmoji(m *DecodeBuf) TL {
	tl := TL_messageEntityCustomEmoji{}
	tl.Offset = m.Int()
	tl.Length = m.Int()
	tl.DocumentID = m.Long()
	return tl
}

func decode_TL_messageEntityBlockquote(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageEntityBlockquote)
	return decode_body_TL_messageEntityBlockquote(m)
}
func decode_body_TL_messageEntityBlockquote(m *DecodeBuf) TL {
	tl := TL_messageEntityBlockquote{}
	flags := m.Int()
	tl.Collapsed = flags&(1<<0) != 0
	tl.Offset = m.Int()
	tl.Length = m.Int()
	return tl
}

func decode_TL_inputChannelEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputChannelEmpty)
	return decode_body_TL_inputChannelEmpty(m)
}
func decode_body_TL_inputChannelEmpty(_ *DecodeBuf) TL {
	tl := TL_inputChannelEmpty{}
	return tl
}

func decode_TL_inputChannel(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputChannel)
	return decode_body_TL_inputChannel(m)
}
func decode_body_TL_inputChannel(m *DecodeBuf) TL {
	tl := TL_inputChannel{}
	tl.ChannelID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputChannelFromMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputChannelFromMessage)
	return decode_body_TL_inputChannelFromMessage(m)
}
func decode_body_TL_inputChannelFromMessage(m *DecodeBuf) TL {
	tl := TL_inputChannelFromMessage{}
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	tl.ChannelID = m.Long()
	return tl
}

func decode_TL_contacts_resolvedPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_resolvedPeer)
	return decode_body_TL_contacts_resolvedPeer(m)
}
func decode_body_TL_contacts_resolvedPeer(m *DecodeBuf) TL {
	tl := TL_contacts_resolvedPeer{}
	tl.Peer = m.Object()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messageRange(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageRange)
	return decode_body_TL_messageRange(m)
}
func decode_body_TL_messageRange(m *DecodeBuf) TL {
	tl := TL_messageRange{}
	tl.MinID = m.Int()
	tl.MaxID = m.Int()
	return tl
}

func decode_TL_updates_channelDifferenceEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updates_channelDifferenceEmpty)
	return decode_body_TL_updates_channelDifferenceEmpty(m)
}
func decode_body_TL_updates_channelDifferenceEmpty(m *DecodeBuf) TL {
	tl := TL_updates_channelDifferenceEmpty{}
	flags := m.Int()
	tl.Final = flags&(1<<0) != 0
	tl.PTS = m.Int()
	if flags&(1<<1) != 0 {
		tl.Timeout = Ref(m.Int())
	}
	return tl
}

func decode_TL_updates_channelDifferenceTooLong(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updates_channelDifferenceTooLong)
	return decode_body_TL_updates_channelDifferenceTooLong(m)
}
func decode_body_TL_updates_channelDifferenceTooLong(m *DecodeBuf) TL {
	tl := TL_updates_channelDifferenceTooLong{}
	flags := m.Int()
	tl.Final = flags&(1<<0) != 0
	if flags&(1<<1) != 0 {
		tl.Timeout = Ref(m.Int())
	}
	tl.Dialog = m.Object()
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_updates_channelDifference(m *DecodeBuf) TL {
	m.constructorAssert(CRC_updates_channelDifference)
	return decode_body_TL_updates_channelDifference(m)
}
func decode_body_TL_updates_channelDifference(m *DecodeBuf) TL {
	tl := TL_updates_channelDifference{}
	flags := m.Int()
	tl.Final = flags&(1<<0) != 0
	tl.PTS = m.Int()
	if flags&(1<<1) != 0 {
		tl.Timeout = Ref(m.Int())
	}
	tl.NewMessages = m.Vector()
	tl.OtherUpdates = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_channelMessagesFilterEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelMessagesFilterEmpty)
	return decode_body_TL_channelMessagesFilterEmpty(m)
}
func decode_body_TL_channelMessagesFilterEmpty(_ *DecodeBuf) TL {
	tl := TL_channelMessagesFilterEmpty{}
	return tl
}

func decode_TL_channelMessagesFilter(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelMessagesFilter)
	return decode_body_TL_channelMessagesFilter(m)
}
func decode_body_TL_channelMessagesFilter(m *DecodeBuf) TL {
	tl := TL_channelMessagesFilter{}
	flags := m.Int()
	tl.ExcludeNewMessages = flags&(1<<1) != 0
	tl.Ranges = DecodeBuf_GenericVector[TL_messageRange](m)
	return tl
}

func decode_TL_channelParticipant(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipant)
	return decode_body_TL_channelParticipant(m)
}
func decode_body_TL_channelParticipant(m *DecodeBuf) TL {
	tl := TL_channelParticipant{}
	flags := m.Int()
	tl.UserID = m.Long()
	tl.Date = m.Int()
	if flags&(1<<0) != 0 {
		tl.SubscriptionUntilDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_channelParticipantSelf(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantSelf)
	return decode_body_TL_channelParticipantSelf(m)
}
func decode_body_TL_channelParticipantSelf(m *DecodeBuf) TL {
	tl := TL_channelParticipantSelf{}
	flags := m.Int()
	tl.ViaRequest = flags&(1<<0) != 0
	tl.UserID = m.Long()
	tl.InviterID = m.Long()
	tl.Date = m.Int()
	if flags&(1<<1) != 0 {
		tl.SubscriptionUntilDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_channelParticipantCreator(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantCreator)
	return decode_body_TL_channelParticipantCreator(m)
}
func decode_body_TL_channelParticipantCreator(m *DecodeBuf) TL {
	tl := TL_channelParticipantCreator{}
	flags := m.Int()
	tl.UserID = m.Long()
	tl.AdminRights = decode_TL_chatAdminRights(m).(TL_chatAdminRights)
	if flags&(1<<0) != 0 {
		tl.Rank = Ref(m.String())
	}
	return tl
}

func decode_TL_channelParticipantAdmin(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantAdmin)
	return decode_body_TL_channelParticipantAdmin(m)
}
func decode_body_TL_channelParticipantAdmin(m *DecodeBuf) TL {
	tl := TL_channelParticipantAdmin{}
	flags := m.Int()
	tl.CanEdit = flags&(1<<0) != 0
	tl.Self = flags&(1<<1) != 0
	tl.UserID = m.Long()
	if flags&(1<<1) != 0 {
		tl.InviterID = Ref(m.Long())
	}
	tl.PromotedBy = m.Long()
	tl.Date = m.Int()
	tl.AdminRights = decode_TL_chatAdminRights(m).(TL_chatAdminRights)
	if flags&(1<<2) != 0 {
		tl.Rank = Ref(m.String())
	}
	return tl
}

func decode_TL_channelParticipantBanned(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantBanned)
	return decode_body_TL_channelParticipantBanned(m)
}
func decode_body_TL_channelParticipantBanned(m *DecodeBuf) TL {
	tl := TL_channelParticipantBanned{}
	flags := m.Int()
	tl.Left = flags&(1<<0) != 0
	tl.Peer = m.Object()
	tl.KickedBy = m.Long()
	tl.Date = m.Int()
	tl.BannedRights = decode_TL_chatBannedRights(m).(TL_chatBannedRights)
	return tl
}

func decode_TL_channelParticipantLeft(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantLeft)
	return decode_body_TL_channelParticipantLeft(m)
}
func decode_body_TL_channelParticipantLeft(m *DecodeBuf) TL {
	tl := TL_channelParticipantLeft{}
	tl.Peer = m.Object()
	return tl
}

func decode_TL_channelParticipantsRecent(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantsRecent)
	return decode_body_TL_channelParticipantsRecent(m)
}
func decode_body_TL_channelParticipantsRecent(_ *DecodeBuf) TL {
	tl := TL_channelParticipantsRecent{}
	return tl
}

func decode_TL_channelParticipantsAdmins(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantsAdmins)
	return decode_body_TL_channelParticipantsAdmins(m)
}
func decode_body_TL_channelParticipantsAdmins(_ *DecodeBuf) TL {
	tl := TL_channelParticipantsAdmins{}
	return tl
}

func decode_TL_channelParticipantsKicked(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantsKicked)
	return decode_body_TL_channelParticipantsKicked(m)
}
func decode_body_TL_channelParticipantsKicked(m *DecodeBuf) TL {
	tl := TL_channelParticipantsKicked{}
	tl.Q = m.String()
	return tl
}

func decode_TL_channelParticipantsBots(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantsBots)
	return decode_body_TL_channelParticipantsBots(m)
}
func decode_body_TL_channelParticipantsBots(_ *DecodeBuf) TL {
	tl := TL_channelParticipantsBots{}
	return tl
}

func decode_TL_channelParticipantsBanned(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantsBanned)
	return decode_body_TL_channelParticipantsBanned(m)
}
func decode_body_TL_channelParticipantsBanned(m *DecodeBuf) TL {
	tl := TL_channelParticipantsBanned{}
	tl.Q = m.String()
	return tl
}

func decode_TL_channelParticipantsSearch(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantsSearch)
	return decode_body_TL_channelParticipantsSearch(m)
}
func decode_body_TL_channelParticipantsSearch(m *DecodeBuf) TL {
	tl := TL_channelParticipantsSearch{}
	tl.Q = m.String()
	return tl
}

func decode_TL_channelParticipantsContacts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantsContacts)
	return decode_body_TL_channelParticipantsContacts(m)
}
func decode_body_TL_channelParticipantsContacts(m *DecodeBuf) TL {
	tl := TL_channelParticipantsContacts{}
	tl.Q = m.String()
	return tl
}

func decode_TL_channelParticipantsMentions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelParticipantsMentions)
	return decode_body_TL_channelParticipantsMentions(m)
}
func decode_body_TL_channelParticipantsMentions(m *DecodeBuf) TL {
	tl := TL_channelParticipantsMentions{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Q = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.TopMsgID = Ref(m.Int())
	}
	return tl
}

func decode_TL_channels_channelParticipants(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channels_channelParticipants)
	return decode_body_TL_channels_channelParticipants(m)
}
func decode_body_TL_channels_channelParticipants(m *DecodeBuf) TL {
	tl := TL_channels_channelParticipants{}
	tl.Count = m.Int()
	tl.Participants = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_channels_channelParticipantsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channels_channelParticipantsNotModified)
	return decode_body_TL_channels_channelParticipantsNotModified(m)
}
func decode_body_TL_channels_channelParticipantsNotModified(_ *DecodeBuf) TL {
	tl := TL_channels_channelParticipantsNotModified{}
	return tl
}

func decode_TL_channels_channelParticipant(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channels_channelParticipant)
	return decode_body_TL_channels_channelParticipant(m)
}
func decode_body_TL_channels_channelParticipant(m *DecodeBuf) TL {
	tl := TL_channels_channelParticipant{}
	tl.Participant = m.Object()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_help_termsOfService(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_termsOfService)
	return decode_body_TL_help_termsOfService(m)
}
func decode_body_TL_help_termsOfService(m *DecodeBuf) TL {
	tl := TL_help_termsOfService{}
	flags := m.Int()
	tl.Popup = flags&(1<<0) != 0
	tl.ID = decode_TL_dataJSON(m).(TL_dataJSON)
	tl.Text = m.String()
	tl.Entities = m.Vector()
	if flags&(1<<1) != 0 {
		tl.MinAgeConfirm = Ref(m.Int())
	}
	return tl
}

func decode_TL_messages_savedGIFsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_savedGIFsNotModified)
	return decode_body_TL_messages_savedGIFsNotModified(m)
}
func decode_body_TL_messages_savedGIFsNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_savedGIFsNotModified{}
	return tl
}

func decode_TL_messages_savedGIFs(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_savedGIFs)
	return decode_body_TL_messages_savedGIFs(m)
}
func decode_body_TL_messages_savedGIFs(m *DecodeBuf) TL {
	tl := TL_messages_savedGIFs{}
	tl.Hash = m.Long()
	tl.GIFs = m.Vector()
	return tl
}

func decode_TL_inputBotInlineMessageMediaAuto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageMediaAuto)
	return decode_body_TL_inputBotInlineMessageMediaAuto(m)
}
func decode_body_TL_inputBotInlineMessageMediaAuto(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageMediaAuto{}
	flags := m.Int()
	tl.InvertMedia = flags&(1<<3) != 0
	tl.Message = m.String()
	if flags&(1<<1) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_inputBotInlineMessageText(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageText)
	return decode_body_TL_inputBotInlineMessageText(m)
}
func decode_body_TL_inputBotInlineMessageText(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageText{}
	flags := m.Int()
	tl.NoWebpage = flags&(1<<0) != 0
	tl.InvertMedia = flags&(1<<3) != 0
	tl.Message = m.String()
	if flags&(1<<1) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_inputBotInlineMessageMediaGeo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageMediaGeo)
	return decode_body_TL_inputBotInlineMessageMediaGeo(m)
}
func decode_body_TL_inputBotInlineMessageMediaGeo(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageMediaGeo{}
	flags := m.Int()
	tl.GeoPoint = m.Object()
	if flags&(1<<0) != 0 {
		tl.Heading = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.Period = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.ProximityNotificationRadius = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_inputBotInlineMessageMediaVenue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageMediaVenue)
	return decode_body_TL_inputBotInlineMessageMediaVenue(m)
}
func decode_body_TL_inputBotInlineMessageMediaVenue(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageMediaVenue{}
	flags := m.Int()
	tl.GeoPoint = m.Object()
	tl.Title = m.String()
	tl.Address = m.String()
	tl.Provider = m.String()
	tl.VenueID = m.String()
	tl.VenueType = m.String()
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_inputBotInlineMessageMediaContact(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageMediaContact)
	return decode_body_TL_inputBotInlineMessageMediaContact(m)
}
func decode_body_TL_inputBotInlineMessageMediaContact(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageMediaContact{}
	flags := m.Int()
	tl.PhoneNumber = m.String()
	tl.FirstName = m.String()
	tl.LastName = m.String()
	tl.Vcard = m.String()
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_inputBotInlineMessageGame(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageGame)
	return decode_body_TL_inputBotInlineMessageGame(m)
}
func decode_body_TL_inputBotInlineMessageGame(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageGame{}
	flags := m.Int()
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_inputBotInlineMessageMediaInvoice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageMediaInvoice)
	return decode_body_TL_inputBotInlineMessageMediaInvoice(m)
}
func decode_body_TL_inputBotInlineMessageMediaInvoice(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageMediaInvoice{}
	flags := m.Int()
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<0) != 0 {
		tl.Photo = Ref(decode_TL_inputWebDocument(m).(TL_inputWebDocument))
	}
	tl.Invoice = decode_TL_invoice(m).(TL_invoice)
	tl.Payload = m.StringBytes()
	tl.Provider = m.String()
	tl.ProviderData = decode_TL_dataJSON(m).(TL_dataJSON)
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_inputBotInlineMessageMediaWebPage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageMediaWebPage)
	return decode_body_TL_inputBotInlineMessageMediaWebPage(m)
}
func decode_body_TL_inputBotInlineMessageMediaWebPage(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageMediaWebPage{}
	flags := m.Int()
	tl.InvertMedia = flags&(1<<3) != 0
	tl.ForceLargeMedia = flags&(1<<4) != 0
	tl.ForceSmallMedia = flags&(1<<5) != 0
	tl.Optional = flags&(1<<6) != 0
	tl.Message = m.String()
	if flags&(1<<1) != 0 {
		tl.Entities = m.Vector()
	}
	tl.URL = m.String()
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_inputBotInlineResult(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineResult)
	return decode_body_TL_inputBotInlineResult(m)
}
func decode_body_TL_inputBotInlineResult(m *DecodeBuf) TL {
	tl := TL_inputBotInlineResult{}
	flags := m.Int()
	tl.ID = m.String()
	tl.Type = m.String()
	if flags&(1<<1) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Description = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.URL = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.Thumb = Ref(decode_TL_inputWebDocument(m).(TL_inputWebDocument))
	}
	if flags&(1<<5) != 0 {
		tl.Content = Ref(decode_TL_inputWebDocument(m).(TL_inputWebDocument))
	}
	tl.SendMessage = m.Object()
	return tl
}

func decode_TL_inputBotInlineResultPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineResultPhoto)
	return decode_body_TL_inputBotInlineResultPhoto(m)
}
func decode_body_TL_inputBotInlineResultPhoto(m *DecodeBuf) TL {
	tl := TL_inputBotInlineResultPhoto{}
	tl.ID = m.String()
	tl.Type = m.String()
	tl.Photo = m.Object()
	tl.SendMessage = m.Object()
	return tl
}

func decode_TL_inputBotInlineResultDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineResultDocument)
	return decode_body_TL_inputBotInlineResultDocument(m)
}
func decode_body_TL_inputBotInlineResultDocument(m *DecodeBuf) TL {
	tl := TL_inputBotInlineResultDocument{}
	flags := m.Int()
	tl.ID = m.String()
	tl.Type = m.String()
	if flags&(1<<1) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Description = Ref(m.String())
	}
	tl.Document = m.Object()
	tl.SendMessage = m.Object()
	return tl
}

func decode_TL_inputBotInlineResultGame(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineResultGame)
	return decode_body_TL_inputBotInlineResultGame(m)
}
func decode_body_TL_inputBotInlineResultGame(m *DecodeBuf) TL {
	tl := TL_inputBotInlineResultGame{}
	tl.ID = m.String()
	tl.ShortName = m.String()
	tl.SendMessage = m.Object()
	return tl
}

func decode_TL_botInlineMessageMediaAuto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInlineMessageMediaAuto)
	return decode_body_TL_botInlineMessageMediaAuto(m)
}
func decode_body_TL_botInlineMessageMediaAuto(m *DecodeBuf) TL {
	tl := TL_botInlineMessageMediaAuto{}
	flags := m.Int()
	tl.InvertMedia = flags&(1<<3) != 0
	tl.Message = m.String()
	if flags&(1<<1) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_botInlineMessageText(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInlineMessageText)
	return decode_body_TL_botInlineMessageText(m)
}
func decode_body_TL_botInlineMessageText(m *DecodeBuf) TL {
	tl := TL_botInlineMessageText{}
	flags := m.Int()
	tl.NoWebpage = flags&(1<<0) != 0
	tl.InvertMedia = flags&(1<<3) != 0
	tl.Message = m.String()
	if flags&(1<<1) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_botInlineMessageMediaGeo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInlineMessageMediaGeo)
	return decode_body_TL_botInlineMessageMediaGeo(m)
}
func decode_body_TL_botInlineMessageMediaGeo(m *DecodeBuf) TL {
	tl := TL_botInlineMessageMediaGeo{}
	flags := m.Int()
	tl.Geo = m.Object()
	if flags&(1<<0) != 0 {
		tl.Heading = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.Period = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.ProximityNotificationRadius = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_botInlineMessageMediaVenue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInlineMessageMediaVenue)
	return decode_body_TL_botInlineMessageMediaVenue(m)
}
func decode_body_TL_botInlineMessageMediaVenue(m *DecodeBuf) TL {
	tl := TL_botInlineMessageMediaVenue{}
	flags := m.Int()
	tl.Geo = m.Object()
	tl.Title = m.String()
	tl.Address = m.String()
	tl.Provider = m.String()
	tl.VenueID = m.String()
	tl.VenueType = m.String()
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_botInlineMessageMediaContact(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInlineMessageMediaContact)
	return decode_body_TL_botInlineMessageMediaContact(m)
}
func decode_body_TL_botInlineMessageMediaContact(m *DecodeBuf) TL {
	tl := TL_botInlineMessageMediaContact{}
	flags := m.Int()
	tl.PhoneNumber = m.String()
	tl.FirstName = m.String()
	tl.LastName = m.String()
	tl.Vcard = m.String()
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_botInlineMessageMediaInvoice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInlineMessageMediaInvoice)
	return decode_body_TL_botInlineMessageMediaInvoice(m)
}
func decode_body_TL_botInlineMessageMediaInvoice(m *DecodeBuf) TL {
	tl := TL_botInlineMessageMediaInvoice{}
	flags := m.Int()
	tl.ShippingAddressRequested = flags&(1<<1) != 0
	tl.Test = flags&(1<<3) != 0
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<0) != 0 {
		tl.Photo = m.Object()
	}
	tl.Currency = m.String()
	tl.TotalAmount = m.Long()
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_botInlineMessageMediaWebPage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInlineMessageMediaWebPage)
	return decode_body_TL_botInlineMessageMediaWebPage(m)
}
func decode_body_TL_botInlineMessageMediaWebPage(m *DecodeBuf) TL {
	tl := TL_botInlineMessageMediaWebPage{}
	flags := m.Int()
	tl.InvertMedia = flags&(1<<3) != 0
	tl.ForceLargeMedia = flags&(1<<4) != 0
	tl.ForceSmallMedia = flags&(1<<5) != 0
	tl.Manual = flags&(1<<7) != 0
	tl.Safe = flags&(1<<8) != 0
	tl.Message = m.String()
	if flags&(1<<1) != 0 {
		tl.Entities = m.Vector()
	}
	tl.URL = m.String()
	if flags&(1<<2) != 0 {
		tl.ReplyMarkup = m.Object()
	}
	return tl
}

func decode_TL_botInlineResult(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInlineResult)
	return decode_body_TL_botInlineResult(m)
}
func decode_body_TL_botInlineResult(m *DecodeBuf) TL {
	tl := TL_botInlineResult{}
	flags := m.Int()
	tl.ID = m.String()
	tl.Type = m.String()
	if flags&(1<<1) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Description = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.URL = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.Thumb = m.Object()
	}
	if flags&(1<<5) != 0 {
		tl.Content = m.Object()
	}
	tl.SendMessage = m.Object()
	return tl
}

func decode_TL_botInlineMediaResult(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botInlineMediaResult)
	return decode_body_TL_botInlineMediaResult(m)
}
func decode_body_TL_botInlineMediaResult(m *DecodeBuf) TL {
	tl := TL_botInlineMediaResult{}
	flags := m.Int()
	tl.ID = m.String()
	tl.Type = m.String()
	if flags&(1<<0) != 0 {
		tl.Photo = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.Document = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.Description = Ref(m.String())
	}
	tl.SendMessage = m.Object()
	return tl
}

func decode_TL_messages_botResults(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_botResults)
	return decode_body_TL_messages_botResults(m)
}
func decode_body_TL_messages_botResults(m *DecodeBuf) TL {
	tl := TL_messages_botResults{}
	flags := m.Int()
	tl.Gallery = flags&(1<<0) != 0
	tl.QueryID = m.Long()
	if flags&(1<<1) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.SwitchPM = Ref(decode_TL_inlineBotSwitchPM(m).(TL_inlineBotSwitchPM))
	}
	if flags&(1<<3) != 0 {
		tl.SwitchWebview = Ref(decode_TL_inlineBotWebView(m).(TL_inlineBotWebView))
	}
	tl.Results = m.Vector()
	tl.CacheTime = m.Int()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_exportedMessageLink(m *DecodeBuf) TL {
	m.constructorAssert(CRC_exportedMessageLink)
	return decode_body_TL_exportedMessageLink(m)
}
func decode_body_TL_exportedMessageLink(m *DecodeBuf) TL {
	tl := TL_exportedMessageLink{}
	tl.Link = m.String()
	tl.HTML = m.String()
	return tl
}

func decode_TL_messageFwdHeader(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageFwdHeader)
	return decode_body_TL_messageFwdHeader(m)
}
func decode_body_TL_messageFwdHeader(m *DecodeBuf) TL {
	tl := TL_messageFwdHeader{}
	flags := m.Int()
	tl.Imported = flags&(1<<7) != 0
	tl.SavedOut = flags&(1<<11) != 0
	if flags&(1<<0) != 0 {
		tl.FromID = m.Object()
	}
	if flags&(1<<5) != 0 {
		tl.FromName = Ref(m.String())
	}
	tl.Date = m.Int()
	if flags&(1<<2) != 0 {
		tl.ChannelPost = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.PostAuthor = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.SavedFromPeer = m.Object()
	}
	if flags&(1<<4) != 0 {
		tl.SavedFromMsgID = Ref(m.Int())
	}
	if flags&(1<<8) != 0 {
		tl.SavedFromID = m.Object()
	}
	if flags&(1<<9) != 0 {
		tl.SavedFromName = Ref(m.String())
	}
	if flags&(1<<10) != 0 {
		tl.SavedDate = Ref(m.Int())
	}
	if flags&(1<<6) != 0 {
		tl.PSAType = Ref(m.String())
	}
	return tl
}

func decode_TL_auth_codeTypeSMS(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_codeTypeSMS)
	return decode_body_TL_auth_codeTypeSMS(m)
}
func decode_body_TL_auth_codeTypeSMS(_ *DecodeBuf) TL {
	tl := TL_auth_codeTypeSMS{}
	return tl
}

func decode_TL_auth_codeTypeCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_codeTypeCall)
	return decode_body_TL_auth_codeTypeCall(m)
}
func decode_body_TL_auth_codeTypeCall(_ *DecodeBuf) TL {
	tl := TL_auth_codeTypeCall{}
	return tl
}

func decode_TL_auth_codeTypeFlashCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_codeTypeFlashCall)
	return decode_body_TL_auth_codeTypeFlashCall(m)
}
func decode_body_TL_auth_codeTypeFlashCall(_ *DecodeBuf) TL {
	tl := TL_auth_codeTypeFlashCall{}
	return tl
}

func decode_TL_auth_codeTypeMissedCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_codeTypeMissedCall)
	return decode_body_TL_auth_codeTypeMissedCall(m)
}
func decode_body_TL_auth_codeTypeMissedCall(_ *DecodeBuf) TL {
	tl := TL_auth_codeTypeMissedCall{}
	return tl
}

func decode_TL_auth_codeTypeFragmentSMS(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_codeTypeFragmentSMS)
	return decode_body_TL_auth_codeTypeFragmentSMS(m)
}
func decode_body_TL_auth_codeTypeFragmentSMS(_ *DecodeBuf) TL {
	tl := TL_auth_codeTypeFragmentSMS{}
	return tl
}

func decode_TL_auth_sentCodeTypeApp(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeApp)
	return decode_body_TL_auth_sentCodeTypeApp(m)
}
func decode_body_TL_auth_sentCodeTypeApp(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeApp{}
	tl.Length = m.Int()
	return tl
}

func decode_TL_auth_sentCodeTypeSMS(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeSMS)
	return decode_body_TL_auth_sentCodeTypeSMS(m)
}
func decode_body_TL_auth_sentCodeTypeSMS(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeSMS{}
	tl.Length = m.Int()
	return tl
}

func decode_TL_auth_sentCodeTypeCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeCall)
	return decode_body_TL_auth_sentCodeTypeCall(m)
}
func decode_body_TL_auth_sentCodeTypeCall(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeCall{}
	tl.Length = m.Int()
	return tl
}

func decode_TL_auth_sentCodeTypeFlashCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeFlashCall)
	return decode_body_TL_auth_sentCodeTypeFlashCall(m)
}
func decode_body_TL_auth_sentCodeTypeFlashCall(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeFlashCall{}
	tl.Pattern = m.String()
	return tl
}

func decode_TL_auth_sentCodeTypeMissedCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeMissedCall)
	return decode_body_TL_auth_sentCodeTypeMissedCall(m)
}
func decode_body_TL_auth_sentCodeTypeMissedCall(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeMissedCall{}
	tl.Prefix = m.String()
	tl.Length = m.Int()
	return tl
}

func decode_TL_auth_sentCodeTypeEmailCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeEmailCode)
	return decode_body_TL_auth_sentCodeTypeEmailCode(m)
}
func decode_body_TL_auth_sentCodeTypeEmailCode(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeEmailCode{}
	flags := m.Int()
	tl.AppleSigninAllowed = flags&(1<<0) != 0
	tl.GoogleSigninAllowed = flags&(1<<1) != 0
	tl.EmailPattern = m.String()
	tl.Length = m.Int()
	if flags&(1<<3) != 0 {
		tl.ResetAvailablePeriod = Ref(m.Int())
	}
	if flags&(1<<4) != 0 {
		tl.ResetPendingDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_auth_sentCodeTypeSetUpEmailRequired(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeSetUpEmailRequired)
	return decode_body_TL_auth_sentCodeTypeSetUpEmailRequired(m)
}
func decode_body_TL_auth_sentCodeTypeSetUpEmailRequired(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeSetUpEmailRequired{}
	flags := m.Int()
	tl.AppleSigninAllowed = flags&(1<<0) != 0
	tl.GoogleSigninAllowed = flags&(1<<1) != 0
	return tl
}

func decode_TL_auth_sentCodeTypeFragmentSMS(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeFragmentSMS)
	return decode_body_TL_auth_sentCodeTypeFragmentSMS(m)
}
func decode_body_TL_auth_sentCodeTypeFragmentSMS(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeFragmentSMS{}
	tl.URL = m.String()
	tl.Length = m.Int()
	return tl
}

func decode_TL_auth_sentCodeTypeFirebaseSMS(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeFirebaseSMS)
	return decode_body_TL_auth_sentCodeTypeFirebaseSMS(m)
}
func decode_body_TL_auth_sentCodeTypeFirebaseSMS(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeFirebaseSMS{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Nonce = m.StringBytes()
	}
	if flags&(1<<2) != 0 {
		tl.PlayIntegrityProjectID = Ref(m.Long())
	}
	if flags&(1<<2) != 0 {
		tl.PlayIntegrityNonce = m.StringBytes()
	}
	if flags&(1<<1) != 0 {
		tl.Receipt = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.PushTimeout = Ref(m.Int())
	}
	tl.Length = m.Int()
	return tl
}

func decode_TL_auth_sentCodeTypeSMSWord(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeSMSWord)
	return decode_body_TL_auth_sentCodeTypeSMSWord(m)
}
func decode_body_TL_auth_sentCodeTypeSMSWord(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeSMSWord{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Beginning = Ref(m.String())
	}
	return tl
}

func decode_TL_auth_sentCodeTypeSMSPhrase(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_sentCodeTypeSMSPhrase)
	return decode_body_TL_auth_sentCodeTypeSMSPhrase(m)
}
func decode_body_TL_auth_sentCodeTypeSMSPhrase(m *DecodeBuf) TL {
	tl := TL_auth_sentCodeTypeSMSPhrase{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Beginning = Ref(m.String())
	}
	return tl
}

func decode_TL_messages_botCallbackAnswer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_botCallbackAnswer)
	return decode_body_TL_messages_botCallbackAnswer(m)
}
func decode_body_TL_messages_botCallbackAnswer(m *DecodeBuf) TL {
	tl := TL_messages_botCallbackAnswer{}
	flags := m.Int()
	tl.Alert = flags&(1<<1) != 0
	tl.HasURL = flags&(1<<3) != 0
	tl.NativeUI = flags&(1<<4) != 0
	if flags&(1<<0) != 0 {
		tl.Message = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.URL = Ref(m.String())
	}
	tl.CacheTime = m.Int()
	return tl
}

func decode_TL_messages_messageEditData(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_messageEditData)
	return decode_body_TL_messages_messageEditData(m)
}
func decode_body_TL_messages_messageEditData(m *DecodeBuf) TL {
	tl := TL_messages_messageEditData{}
	flags := m.Int()
	tl.Caption = flags&(1<<0) != 0
	return tl
}

func decode_TL_inputBotInlineMessageID(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageID)
	return decode_body_TL_inputBotInlineMessageID(m)
}
func decode_body_TL_inputBotInlineMessageID(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageID{}
	tl.DCID = m.Int()
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputBotInlineMessageID64(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotInlineMessageID64)
	return decode_body_TL_inputBotInlineMessageID64(m)
}
func decode_body_TL_inputBotInlineMessageID64(m *DecodeBuf) TL {
	tl := TL_inputBotInlineMessageID64{}
	tl.DCID = m.Int()
	tl.OwnerID = m.Long()
	tl.ID = m.Int()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inlineBotSwitchPM(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inlineBotSwitchPM)
	return decode_body_TL_inlineBotSwitchPM(m)
}
func decode_body_TL_inlineBotSwitchPM(m *DecodeBuf) TL {
	tl := TL_inlineBotSwitchPM{}
	tl.Text = m.String()
	tl.StartParam = m.String()
	return tl
}

func decode_TL_messages_peerDialogs(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_peerDialogs)
	return decode_body_TL_messages_peerDialogs(m)
}
func decode_body_TL_messages_peerDialogs(m *DecodeBuf) TL {
	tl := TL_messages_peerDialogs{}
	tl.Dialogs = m.Vector()
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	tl.State = decode_TL_updates_state(m).(TL_updates_state)
	return tl
}

func decode_TL_topPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeer)
	return decode_body_TL_topPeer(m)
}
func decode_body_TL_topPeer(m *DecodeBuf) TL {
	tl := TL_topPeer{}
	tl.Peer = m.Object()
	tl.Rating = m.Double()
	return tl
}

func decode_TL_topPeerCategoryBotsPM(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryBotsPM)
	return decode_body_TL_topPeerCategoryBotsPM(m)
}
func decode_body_TL_topPeerCategoryBotsPM(_ *DecodeBuf) TL {
	tl := TL_topPeerCategoryBotsPM{}
	return tl
}

func decode_TL_topPeerCategoryBotsInline(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryBotsInline)
	return decode_body_TL_topPeerCategoryBotsInline(m)
}
func decode_body_TL_topPeerCategoryBotsInline(_ *DecodeBuf) TL {
	tl := TL_topPeerCategoryBotsInline{}
	return tl
}

func decode_TL_topPeerCategoryCorrespondents(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryCorrespondents)
	return decode_body_TL_topPeerCategoryCorrespondents(m)
}
func decode_body_TL_topPeerCategoryCorrespondents(_ *DecodeBuf) TL {
	tl := TL_topPeerCategoryCorrespondents{}
	return tl
}

func decode_TL_topPeerCategoryGroups(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryGroups)
	return decode_body_TL_topPeerCategoryGroups(m)
}
func decode_body_TL_topPeerCategoryGroups(_ *DecodeBuf) TL {
	tl := TL_topPeerCategoryGroups{}
	return tl
}

func decode_TL_topPeerCategoryChannels(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryChannels)
	return decode_body_TL_topPeerCategoryChannels(m)
}
func decode_body_TL_topPeerCategoryChannels(_ *DecodeBuf) TL {
	tl := TL_topPeerCategoryChannels{}
	return tl
}

func decode_TL_topPeerCategoryPhoneCalls(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryPhoneCalls)
	return decode_body_TL_topPeerCategoryPhoneCalls(m)
}
func decode_body_TL_topPeerCategoryPhoneCalls(_ *DecodeBuf) TL {
	tl := TL_topPeerCategoryPhoneCalls{}
	return tl
}

func decode_TL_topPeerCategoryForwardUsers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryForwardUsers)
	return decode_body_TL_topPeerCategoryForwardUsers(m)
}
func decode_body_TL_topPeerCategoryForwardUsers(_ *DecodeBuf) TL {
	tl := TL_topPeerCategoryForwardUsers{}
	return tl
}

func decode_TL_topPeerCategoryForwardChats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryForwardChats)
	return decode_body_TL_topPeerCategoryForwardChats(m)
}
func decode_body_TL_topPeerCategoryForwardChats(_ *DecodeBuf) TL {
	tl := TL_topPeerCategoryForwardChats{}
	return tl
}

func decode_TL_topPeerCategoryBotsApp(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryBotsApp)
	return decode_body_TL_topPeerCategoryBotsApp(m)
}
func decode_body_TL_topPeerCategoryBotsApp(_ *DecodeBuf) TL {
	tl := TL_topPeerCategoryBotsApp{}
	return tl
}

func decode_TL_topPeerCategoryPeers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_topPeerCategoryPeers)
	return decode_body_TL_topPeerCategoryPeers(m)
}
func decode_body_TL_topPeerCategoryPeers(m *DecodeBuf) TL {
	tl := TL_topPeerCategoryPeers{}
	tl.Category = m.Object()
	tl.Count = m.Int()
	tl.Peers = DecodeBuf_GenericVector[TL_topPeer](m)
	return tl
}

func decode_TL_contacts_topPeersNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_topPeersNotModified)
	return decode_body_TL_contacts_topPeersNotModified(m)
}
func decode_body_TL_contacts_topPeersNotModified(_ *DecodeBuf) TL {
	tl := TL_contacts_topPeersNotModified{}
	return tl
}

func decode_TL_contacts_topPeers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_topPeers)
	return decode_body_TL_contacts_topPeers(m)
}
func decode_body_TL_contacts_topPeers(m *DecodeBuf) TL {
	tl := TL_contacts_topPeers{}
	tl.Categories = DecodeBuf_GenericVector[TL_topPeerCategoryPeers](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_contacts_topPeersDisabled(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_topPeersDisabled)
	return decode_body_TL_contacts_topPeersDisabled(m)
}
func decode_body_TL_contacts_topPeersDisabled(_ *DecodeBuf) TL {
	tl := TL_contacts_topPeersDisabled{}
	return tl
}

func decode_TL_draftMessageEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_draftMessageEmpty)
	return decode_body_TL_draftMessageEmpty(m)
}
func decode_body_TL_draftMessageEmpty(m *DecodeBuf) TL {
	tl := TL_draftMessageEmpty{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Date = Ref(m.Int())
	}
	return tl
}

func decode_TL_draftMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_draftMessage)
	return decode_body_TL_draftMessage(m)
}
func decode_body_TL_draftMessage(m *DecodeBuf) TL {
	tl := TL_draftMessage{}
	flags := m.Int()
	tl.NoWebpage = flags&(1<<1) != 0
	tl.InvertMedia = flags&(1<<6) != 0
	if flags&(1<<4) != 0 {
		tl.ReplyTo = m.Object()
	}
	tl.Message = m.String()
	if flags&(1<<3) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<5) != 0 {
		tl.Media = m.Object()
	}
	tl.Date = m.Int()
	if flags&(1<<7) != 0 {
		tl.Effect = Ref(m.Long())
	}
	return tl
}

func decode_TL_messages_featuredStickersNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_featuredStickersNotModified)
	return decode_body_TL_messages_featuredStickersNotModified(m)
}
func decode_body_TL_messages_featuredStickersNotModified(m *DecodeBuf) TL {
	tl := TL_messages_featuredStickersNotModified{}
	tl.Count = m.Int()
	return tl
}

func decode_TL_messages_featuredStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_featuredStickers)
	return decode_body_TL_messages_featuredStickers(m)
}
func decode_body_TL_messages_featuredStickers(m *DecodeBuf) TL {
	tl := TL_messages_featuredStickers{}
	flags := m.Int()
	tl.Premium = flags&(1<<0) != 0
	tl.Hash = m.Long()
	tl.Count = m.Int()
	tl.Sets = m.Vector()
	tl.Unread = m.VectorLong()
	return tl
}

func decode_TL_messages_recentStickersNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_recentStickersNotModified)
	return decode_body_TL_messages_recentStickersNotModified(m)
}
func decode_body_TL_messages_recentStickersNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_recentStickersNotModified{}
	return tl
}

func decode_TL_messages_recentStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_recentStickers)
	return decode_body_TL_messages_recentStickers(m)
}
func decode_body_TL_messages_recentStickers(m *DecodeBuf) TL {
	tl := TL_messages_recentStickers{}
	tl.Hash = m.Long()
	tl.Packs = DecodeBuf_GenericVector[TL_stickerPack](m)
	tl.Stickers = m.Vector()
	tl.Dates = m.VectorInt()
	return tl
}

func decode_TL_messages_archivedStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_archivedStickers)
	return decode_body_TL_messages_archivedStickers(m)
}
func decode_body_TL_messages_archivedStickers(m *DecodeBuf) TL {
	tl := TL_messages_archivedStickers{}
	tl.Count = m.Int()
	tl.Sets = m.Vector()
	return tl
}

func decode_TL_messages_stickerSetInstallResultSuccess(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_stickerSetInstallResultSuccess)
	return decode_body_TL_messages_stickerSetInstallResultSuccess(m)
}
func decode_body_TL_messages_stickerSetInstallResultSuccess(_ *DecodeBuf) TL {
	tl := TL_messages_stickerSetInstallResultSuccess{}
	return tl
}

func decode_TL_messages_stickerSetInstallResultArchive(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_stickerSetInstallResultArchive)
	return decode_body_TL_messages_stickerSetInstallResultArchive(m)
}
func decode_body_TL_messages_stickerSetInstallResultArchive(m *DecodeBuf) TL {
	tl := TL_messages_stickerSetInstallResultArchive{}
	tl.Sets = m.Vector()
	return tl
}

func decode_TL_stickerSetCovered(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stickerSetCovered)
	return decode_body_TL_stickerSetCovered(m)
}
func decode_body_TL_stickerSetCovered(m *DecodeBuf) TL {
	tl := TL_stickerSetCovered{}
	tl.Set = decode_TL_stickerSet(m).(TL_stickerSet)
	tl.Cover = m.Object()
	return tl
}

func decode_TL_stickerSetMultiCovered(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stickerSetMultiCovered)
	return decode_body_TL_stickerSetMultiCovered(m)
}
func decode_body_TL_stickerSetMultiCovered(m *DecodeBuf) TL {
	tl := TL_stickerSetMultiCovered{}
	tl.Set = decode_TL_stickerSet(m).(TL_stickerSet)
	tl.Covers = m.Vector()
	return tl
}

func decode_TL_stickerSetFullCovered(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stickerSetFullCovered)
	return decode_body_TL_stickerSetFullCovered(m)
}
func decode_body_TL_stickerSetFullCovered(m *DecodeBuf) TL {
	tl := TL_stickerSetFullCovered{}
	tl.Set = decode_TL_stickerSet(m).(TL_stickerSet)
	tl.Packs = DecodeBuf_GenericVector[TL_stickerPack](m)
	tl.Keywords = DecodeBuf_GenericVector[TL_stickerKeyword](m)
	tl.Documents = m.Vector()
	return tl
}

func decode_TL_stickerSetNoCovered(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stickerSetNoCovered)
	return decode_body_TL_stickerSetNoCovered(m)
}
func decode_body_TL_stickerSetNoCovered(m *DecodeBuf) TL {
	tl := TL_stickerSetNoCovered{}
	tl.Set = decode_TL_stickerSet(m).(TL_stickerSet)
	return tl
}

func decode_TL_maskCoords(m *DecodeBuf) TL {
	m.constructorAssert(CRC_maskCoords)
	return decode_body_TL_maskCoords(m)
}
func decode_body_TL_maskCoords(m *DecodeBuf) TL {
	tl := TL_maskCoords{}
	tl.N = m.Int()
	tl.X = m.Double()
	tl.Y = m.Double()
	tl.Zoom = m.Double()
	return tl
}

func decode_TL_inputStickeredMediaPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickeredMediaPhoto)
	return decode_body_TL_inputStickeredMediaPhoto(m)
}
func decode_body_TL_inputStickeredMediaPhoto(m *DecodeBuf) TL {
	tl := TL_inputStickeredMediaPhoto{}
	tl.ID = m.Object()
	return tl
}

func decode_TL_inputStickeredMediaDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickeredMediaDocument)
	return decode_body_TL_inputStickeredMediaDocument(m)
}
func decode_body_TL_inputStickeredMediaDocument(m *DecodeBuf) TL {
	tl := TL_inputStickeredMediaDocument{}
	tl.ID = m.Object()
	return tl
}

func decode_TL_game(m *DecodeBuf) TL {
	m.constructorAssert(CRC_game)
	return decode_body_TL_game(m)
}
func decode_body_TL_game(m *DecodeBuf) TL {
	tl := TL_game{}
	flags := m.Int()
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.ShortName = m.String()
	tl.Title = m.String()
	tl.Description = m.String()
	tl.Photo = m.Object()
	if flags&(1<<0) != 0 {
		tl.Document = m.Object()
	}
	return tl
}

func decode_TL_inputGameID(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputGameID)
	return decode_body_TL_inputGameID(m)
}
func decode_body_TL_inputGameID(m *DecodeBuf) TL {
	tl := TL_inputGameID{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputGameShortName(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputGameShortName)
	return decode_body_TL_inputGameShortName(m)
}
func decode_body_TL_inputGameShortName(m *DecodeBuf) TL {
	tl := TL_inputGameShortName{}
	tl.BotID = m.Object()
	tl.ShortName = m.String()
	return tl
}

func decode_TL_highScore(m *DecodeBuf) TL {
	m.constructorAssert(CRC_highScore)
	return decode_body_TL_highScore(m)
}
func decode_body_TL_highScore(m *DecodeBuf) TL {
	tl := TL_highScore{}
	tl.Pos = m.Int()
	tl.UserID = m.Long()
	tl.Score = m.Int()
	return tl
}

func decode_TL_messages_highScores(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_highScores)
	return decode_body_TL_messages_highScores(m)
}
func decode_body_TL_messages_highScores(m *DecodeBuf) TL {
	tl := TL_messages_highScores{}
	tl.Scores = DecodeBuf_GenericVector[TL_highScore](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_textEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textEmpty)
	return decode_body_TL_textEmpty(m)
}
func decode_body_TL_textEmpty(_ *DecodeBuf) TL {
	tl := TL_textEmpty{}
	return tl
}

func decode_TL_textPlain(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textPlain)
	return decode_body_TL_textPlain(m)
}
func decode_body_TL_textPlain(m *DecodeBuf) TL {
	tl := TL_textPlain{}
	tl.Text = m.String()
	return tl
}

func decode_TL_textBold(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textBold)
	return decode_body_TL_textBold(m)
}
func decode_body_TL_textBold(m *DecodeBuf) TL {
	tl := TL_textBold{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_textItalic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textItalic)
	return decode_body_TL_textItalic(m)
}
func decode_body_TL_textItalic(m *DecodeBuf) TL {
	tl := TL_textItalic{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_textUnderline(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textUnderline)
	return decode_body_TL_textUnderline(m)
}
func decode_body_TL_textUnderline(m *DecodeBuf) TL {
	tl := TL_textUnderline{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_textStrike(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textStrike)
	return decode_body_TL_textStrike(m)
}
func decode_body_TL_textStrike(m *DecodeBuf) TL {
	tl := TL_textStrike{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_textFixed(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textFixed)
	return decode_body_TL_textFixed(m)
}
func decode_body_TL_textFixed(m *DecodeBuf) TL {
	tl := TL_textFixed{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_textURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textURL)
	return decode_body_TL_textURL(m)
}
func decode_body_TL_textURL(m *DecodeBuf) TL {
	tl := TL_textURL{}
	tl.Text = m.Object()
	tl.URL = m.String()
	tl.WebpageID = m.Long()
	return tl
}

func decode_TL_textEmail(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textEmail)
	return decode_body_TL_textEmail(m)
}
func decode_body_TL_textEmail(m *DecodeBuf) TL {
	tl := TL_textEmail{}
	tl.Text = m.Object()
	tl.Email = m.String()
	return tl
}

func decode_TL_textConcat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textConcat)
	return decode_body_TL_textConcat(m)
}
func decode_body_TL_textConcat(m *DecodeBuf) TL {
	tl := TL_textConcat{}
	tl.Texts = m.Vector()
	return tl
}

func decode_TL_textSubscript(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textSubscript)
	return decode_body_TL_textSubscript(m)
}
func decode_body_TL_textSubscript(m *DecodeBuf) TL {
	tl := TL_textSubscript{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_textSuperscript(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textSuperscript)
	return decode_body_TL_textSuperscript(m)
}
func decode_body_TL_textSuperscript(m *DecodeBuf) TL {
	tl := TL_textSuperscript{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_textMarked(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textMarked)
	return decode_body_TL_textMarked(m)
}
func decode_body_TL_textMarked(m *DecodeBuf) TL {
	tl := TL_textMarked{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_textPhone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textPhone)
	return decode_body_TL_textPhone(m)
}
func decode_body_TL_textPhone(m *DecodeBuf) TL {
	tl := TL_textPhone{}
	tl.Text = m.Object()
	tl.Phone = m.String()
	return tl
}

func decode_TL_textImage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textImage)
	return decode_body_TL_textImage(m)
}
func decode_body_TL_textImage(m *DecodeBuf) TL {
	tl := TL_textImage{}
	tl.DocumentID = m.Long()
	tl.W = m.Int()
	tl.H = m.Int()
	return tl
}

func decode_TL_textAnchor(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textAnchor)
	return decode_body_TL_textAnchor(m)
}
func decode_body_TL_textAnchor(m *DecodeBuf) TL {
	tl := TL_textAnchor{}
	tl.Text = m.Object()
	tl.Name = m.String()
	return tl
}

func decode_TL_pageBlockUnsupported(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockUnsupported)
	return decode_body_TL_pageBlockUnsupported(m)
}
func decode_body_TL_pageBlockUnsupported(_ *DecodeBuf) TL {
	tl := TL_pageBlockUnsupported{}
	return tl
}

func decode_TL_pageBlockTitle(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockTitle)
	return decode_body_TL_pageBlockTitle(m)
}
func decode_body_TL_pageBlockTitle(m *DecodeBuf) TL {
	tl := TL_pageBlockTitle{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_pageBlockSubtitle(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockSubtitle)
	return decode_body_TL_pageBlockSubtitle(m)
}
func decode_body_TL_pageBlockSubtitle(m *DecodeBuf) TL {
	tl := TL_pageBlockSubtitle{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_pageBlockAuthorDate(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockAuthorDate)
	return decode_body_TL_pageBlockAuthorDate(m)
}
func decode_body_TL_pageBlockAuthorDate(m *DecodeBuf) TL {
	tl := TL_pageBlockAuthorDate{}
	tl.Author = m.Object()
	tl.PublishedDate = m.Int()
	return tl
}

func decode_TL_pageBlockHeader(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockHeader)
	return decode_body_TL_pageBlockHeader(m)
}
func decode_body_TL_pageBlockHeader(m *DecodeBuf) TL {
	tl := TL_pageBlockHeader{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_pageBlockSubheader(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockSubheader)
	return decode_body_TL_pageBlockSubheader(m)
}
func decode_body_TL_pageBlockSubheader(m *DecodeBuf) TL {
	tl := TL_pageBlockSubheader{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_pageBlockParagraph(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockParagraph)
	return decode_body_TL_pageBlockParagraph(m)
}
func decode_body_TL_pageBlockParagraph(m *DecodeBuf) TL {
	tl := TL_pageBlockParagraph{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_pageBlockPreformatted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockPreformatted)
	return decode_body_TL_pageBlockPreformatted(m)
}
func decode_body_TL_pageBlockPreformatted(m *DecodeBuf) TL {
	tl := TL_pageBlockPreformatted{}
	tl.Text = m.Object()
	tl.Language = m.String()
	return tl
}

func decode_TL_pageBlockFooter(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockFooter)
	return decode_body_TL_pageBlockFooter(m)
}
func decode_body_TL_pageBlockFooter(m *DecodeBuf) TL {
	tl := TL_pageBlockFooter{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_pageBlockDivider(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockDivider)
	return decode_body_TL_pageBlockDivider(m)
}
func decode_body_TL_pageBlockDivider(_ *DecodeBuf) TL {
	tl := TL_pageBlockDivider{}
	return tl
}

func decode_TL_pageBlockAnchor(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockAnchor)
	return decode_body_TL_pageBlockAnchor(m)
}
func decode_body_TL_pageBlockAnchor(m *DecodeBuf) TL {
	tl := TL_pageBlockAnchor{}
	tl.Name = m.String()
	return tl
}

func decode_TL_pageBlockList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockList)
	return decode_body_TL_pageBlockList(m)
}
func decode_body_TL_pageBlockList(m *DecodeBuf) TL {
	tl := TL_pageBlockList{}
	tl.Items = m.Vector()
	return tl
}

func decode_TL_pageBlockBlockquote(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockBlockquote)
	return decode_body_TL_pageBlockBlockquote(m)
}
func decode_body_TL_pageBlockBlockquote(m *DecodeBuf) TL {
	tl := TL_pageBlockBlockquote{}
	tl.Text = m.Object()
	tl.Caption = m.Object()
	return tl
}

func decode_TL_pageBlockPullquote(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockPullquote)
	return decode_body_TL_pageBlockPullquote(m)
}
func decode_body_TL_pageBlockPullquote(m *DecodeBuf) TL {
	tl := TL_pageBlockPullquote{}
	tl.Text = m.Object()
	tl.Caption = m.Object()
	return tl
}

func decode_TL_pageBlockPhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockPhoto)
	return decode_body_TL_pageBlockPhoto(m)
}
func decode_body_TL_pageBlockPhoto(m *DecodeBuf) TL {
	tl := TL_pageBlockPhoto{}
	flags := m.Int()
	tl.PhotoID = m.Long()
	tl.Caption = decode_TL_pageCaption(m).(TL_pageCaption)
	if flags&(1<<0) != 0 {
		tl.URL = Ref(m.String())
	}
	if flags&(1<<0) != 0 {
		tl.WebpageID = Ref(m.Long())
	}
	return tl
}

func decode_TL_pageBlockVideo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockVideo)
	return decode_body_TL_pageBlockVideo(m)
}
func decode_body_TL_pageBlockVideo(m *DecodeBuf) TL {
	tl := TL_pageBlockVideo{}
	flags := m.Int()
	tl.Autoplay = flags&(1<<0) != 0
	tl.Loop = flags&(1<<1) != 0
	tl.VideoID = m.Long()
	tl.Caption = decode_TL_pageCaption(m).(TL_pageCaption)
	return tl
}

func decode_TL_pageBlockCover(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockCover)
	return decode_body_TL_pageBlockCover(m)
}
func decode_body_TL_pageBlockCover(m *DecodeBuf) TL {
	tl := TL_pageBlockCover{}
	tl.Cover = m.Object()
	return tl
}

func decode_TL_pageBlockEmbed(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockEmbed)
	return decode_body_TL_pageBlockEmbed(m)
}
func decode_body_TL_pageBlockEmbed(m *DecodeBuf) TL {
	tl := TL_pageBlockEmbed{}
	flags := m.Int()
	tl.FullWidth = flags&(1<<0) != 0
	tl.AllowScrolling = flags&(1<<3) != 0
	if flags&(1<<1) != 0 {
		tl.URL = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.HTML = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.PosterPhotoID = Ref(m.Long())
	}
	if flags&(1<<5) != 0 {
		tl.W = Ref(m.Int())
	}
	if flags&(1<<5) != 0 {
		tl.H = Ref(m.Int())
	}
	tl.Caption = decode_TL_pageCaption(m).(TL_pageCaption)
	return tl
}

func decode_TL_pageBlockEmbedPost(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockEmbedPost)
	return decode_body_TL_pageBlockEmbedPost(m)
}
func decode_body_TL_pageBlockEmbedPost(m *DecodeBuf) TL {
	tl := TL_pageBlockEmbedPost{}
	tl.URL = m.String()
	tl.WebpageID = m.Long()
	tl.AuthorPhotoID = m.Long()
	tl.Author = m.String()
	tl.Date = m.Int()
	tl.Blocks = m.Vector()
	tl.Caption = decode_TL_pageCaption(m).(TL_pageCaption)
	return tl
}

func decode_TL_pageBlockCollage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockCollage)
	return decode_body_TL_pageBlockCollage(m)
}
func decode_body_TL_pageBlockCollage(m *DecodeBuf) TL {
	tl := TL_pageBlockCollage{}
	tl.Items = m.Vector()
	tl.Caption = decode_TL_pageCaption(m).(TL_pageCaption)
	return tl
}

func decode_TL_pageBlockSlideshow(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockSlideshow)
	return decode_body_TL_pageBlockSlideshow(m)
}
func decode_body_TL_pageBlockSlideshow(m *DecodeBuf) TL {
	tl := TL_pageBlockSlideshow{}
	tl.Items = m.Vector()
	tl.Caption = decode_TL_pageCaption(m).(TL_pageCaption)
	return tl
}

func decode_TL_pageBlockChannel(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockChannel)
	return decode_body_TL_pageBlockChannel(m)
}
func decode_body_TL_pageBlockChannel(m *DecodeBuf) TL {
	tl := TL_pageBlockChannel{}
	tl.Channel = m.Object()
	return tl
}

func decode_TL_pageBlockAudio(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockAudio)
	return decode_body_TL_pageBlockAudio(m)
}
func decode_body_TL_pageBlockAudio(m *DecodeBuf) TL {
	tl := TL_pageBlockAudio{}
	tl.AudioID = m.Long()
	tl.Caption = decode_TL_pageCaption(m).(TL_pageCaption)
	return tl
}

func decode_TL_pageBlockKicker(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockKicker)
	return decode_body_TL_pageBlockKicker(m)
}
func decode_body_TL_pageBlockKicker(m *DecodeBuf) TL {
	tl := TL_pageBlockKicker{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_pageBlockTable(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockTable)
	return decode_body_TL_pageBlockTable(m)
}
func decode_body_TL_pageBlockTable(m *DecodeBuf) TL {
	tl := TL_pageBlockTable{}
	flags := m.Int()
	tl.Bordered = flags&(1<<0) != 0
	tl.Striped = flags&(1<<1) != 0
	tl.Title = m.Object()
	tl.Rows = DecodeBuf_GenericVector[TL_pageTableRow](m)
	return tl
}

func decode_TL_pageBlockOrderedList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockOrderedList)
	return decode_body_TL_pageBlockOrderedList(m)
}
func decode_body_TL_pageBlockOrderedList(m *DecodeBuf) TL {
	tl := TL_pageBlockOrderedList{}
	tl.Items = m.Vector()
	return tl
}

func decode_TL_pageBlockDetails(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockDetails)
	return decode_body_TL_pageBlockDetails(m)
}
func decode_body_TL_pageBlockDetails(m *DecodeBuf) TL {
	tl := TL_pageBlockDetails{}
	flags := m.Int()
	tl.Open = flags&(1<<0) != 0
	tl.Blocks = m.Vector()
	tl.Title = m.Object()
	return tl
}

func decode_TL_pageBlockRelatedArticles(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockRelatedArticles)
	return decode_body_TL_pageBlockRelatedArticles(m)
}
func decode_body_TL_pageBlockRelatedArticles(m *DecodeBuf) TL {
	tl := TL_pageBlockRelatedArticles{}
	tl.Title = m.Object()
	tl.Articles = DecodeBuf_GenericVector[TL_pageRelatedArticle](m)
	return tl
}

func decode_TL_pageBlockMap(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageBlockMap)
	return decode_body_TL_pageBlockMap(m)
}
func decode_body_TL_pageBlockMap(m *DecodeBuf) TL {
	tl := TL_pageBlockMap{}
	tl.Geo = m.Object()
	tl.Zoom = m.Int()
	tl.W = m.Int()
	tl.H = m.Int()
	tl.Caption = decode_TL_pageCaption(m).(TL_pageCaption)
	return tl
}

func decode_TL_phoneCallDiscardReasonMissed(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallDiscardReasonMissed)
	return decode_body_TL_phoneCallDiscardReasonMissed(m)
}
func decode_body_TL_phoneCallDiscardReasonMissed(_ *DecodeBuf) TL {
	tl := TL_phoneCallDiscardReasonMissed{}
	return tl
}

func decode_TL_phoneCallDiscardReasonDisconnect(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallDiscardReasonDisconnect)
	return decode_body_TL_phoneCallDiscardReasonDisconnect(m)
}
func decode_body_TL_phoneCallDiscardReasonDisconnect(_ *DecodeBuf) TL {
	tl := TL_phoneCallDiscardReasonDisconnect{}
	return tl
}

func decode_TL_phoneCallDiscardReasonHangup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallDiscardReasonHangup)
	return decode_body_TL_phoneCallDiscardReasonHangup(m)
}
func decode_body_TL_phoneCallDiscardReasonHangup(_ *DecodeBuf) TL {
	tl := TL_phoneCallDiscardReasonHangup{}
	return tl
}

func decode_TL_phoneCallDiscardReasonBusy(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallDiscardReasonBusy)
	return decode_body_TL_phoneCallDiscardReasonBusy(m)
}
func decode_body_TL_phoneCallDiscardReasonBusy(_ *DecodeBuf) TL {
	tl := TL_phoneCallDiscardReasonBusy{}
	return tl
}

func decode_TL_dataJSON(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dataJSON)
	return decode_body_TL_dataJSON(m)
}
func decode_body_TL_dataJSON(m *DecodeBuf) TL {
	tl := TL_dataJSON{}
	tl.Data = m.String()
	return tl
}

func decode_TL_labeledPrice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_labeledPrice)
	return decode_body_TL_labeledPrice(m)
}
func decode_body_TL_labeledPrice(m *DecodeBuf) TL {
	tl := TL_labeledPrice{}
	tl.Label = m.String()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_invoice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_invoice)
	return decode_body_TL_invoice(m)
}
func decode_body_TL_invoice(m *DecodeBuf) TL {
	tl := TL_invoice{}
	flags := m.Int()
	tl.Test = flags&(1<<0) != 0
	tl.NameRequested = flags&(1<<1) != 0
	tl.PhoneRequested = flags&(1<<2) != 0
	tl.EmailRequested = flags&(1<<3) != 0
	tl.ShippingAddressRequested = flags&(1<<4) != 0
	tl.Flexible = flags&(1<<5) != 0
	tl.PhoneToProvider = flags&(1<<6) != 0
	tl.EmailToProvider = flags&(1<<7) != 0
	tl.Recurring = flags&(1<<9) != 0
	tl.Currency = m.String()
	tl.Prices = DecodeBuf_GenericVector[TL_labeledPrice](m)
	if flags&(1<<8) != 0 {
		tl.MaxTipAmount = Ref(m.Long())
	}
	if flags&(1<<8) != 0 {
		tl.SuggestedTipAmounts = m.VectorLong()
	}
	if flags&(1<<10) != 0 {
		tl.TermsURL = Ref(m.String())
	}
	return tl
}

func decode_TL_paymentCharge(m *DecodeBuf) TL {
	m.constructorAssert(CRC_paymentCharge)
	return decode_body_TL_paymentCharge(m)
}
func decode_body_TL_paymentCharge(m *DecodeBuf) TL {
	tl := TL_paymentCharge{}
	tl.ID = m.String()
	tl.ProviderChargeID = m.String()
	return tl
}

func decode_TL_postAddress(m *DecodeBuf) TL {
	m.constructorAssert(CRC_postAddress)
	return decode_body_TL_postAddress(m)
}
func decode_body_TL_postAddress(m *DecodeBuf) TL {
	tl := TL_postAddress{}
	tl.StreetLine1 = m.String()
	tl.StreetLine2 = m.String()
	tl.City = m.String()
	tl.State = m.String()
	tl.CountryISO2 = m.String()
	tl.PostCode = m.String()
	return tl
}

func decode_TL_paymentRequestedInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_paymentRequestedInfo)
	return decode_body_TL_paymentRequestedInfo(m)
}
func decode_body_TL_paymentRequestedInfo(m *DecodeBuf) TL {
	tl := TL_paymentRequestedInfo{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Name = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Phone = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Email = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.ShippingAddress = Ref(decode_TL_postAddress(m).(TL_postAddress))
	}
	return tl
}

func decode_TL_paymentSavedCredentialsCard(m *DecodeBuf) TL {
	m.constructorAssert(CRC_paymentSavedCredentialsCard)
	return decode_body_TL_paymentSavedCredentialsCard(m)
}
func decode_body_TL_paymentSavedCredentialsCard(m *DecodeBuf) TL {
	tl := TL_paymentSavedCredentialsCard{}
	tl.ID = m.String()
	tl.Title = m.String()
	return tl
}

func decode_TL_webDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webDocument)
	return decode_body_TL_webDocument(m)
}
func decode_body_TL_webDocument(m *DecodeBuf) TL {
	tl := TL_webDocument{}
	tl.URL = m.String()
	tl.AccessHash = m.Long()
	tl.Size = m.Int()
	tl.MIMEType = m.String()
	tl.Attributes = m.Vector()
	return tl
}

func decode_TL_webDocumentNoProxy(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webDocumentNoProxy)
	return decode_body_TL_webDocumentNoProxy(m)
}
func decode_body_TL_webDocumentNoProxy(m *DecodeBuf) TL {
	tl := TL_webDocumentNoProxy{}
	tl.URL = m.String()
	tl.Size = m.Int()
	tl.MIMEType = m.String()
	tl.Attributes = m.Vector()
	return tl
}

func decode_TL_inputWebDocument(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputWebDocument)
	return decode_body_TL_inputWebDocument(m)
}
func decode_body_TL_inputWebDocument(m *DecodeBuf) TL {
	tl := TL_inputWebDocument{}
	tl.URL = m.String()
	tl.Size = m.Int()
	tl.MIMEType = m.String()
	tl.Attributes = m.Vector()
	return tl
}

func decode_TL_inputWebFileLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputWebFileLocation)
	return decode_body_TL_inputWebFileLocation(m)
}
func decode_body_TL_inputWebFileLocation(m *DecodeBuf) TL {
	tl := TL_inputWebFileLocation{}
	tl.URL = m.String()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputWebFileGeoPointLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputWebFileGeoPointLocation)
	return decode_body_TL_inputWebFileGeoPointLocation(m)
}
func decode_body_TL_inputWebFileGeoPointLocation(m *DecodeBuf) TL {
	tl := TL_inputWebFileGeoPointLocation{}
	tl.GeoPoint = m.Object()
	tl.AccessHash = m.Long()
	tl.W = m.Int()
	tl.H = m.Int()
	tl.Zoom = m.Int()
	tl.Scale = m.Int()
	return tl
}

func decode_TL_inputWebFileAudioAlbumThumbLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputWebFileAudioAlbumThumbLocation)
	return decode_body_TL_inputWebFileAudioAlbumThumbLocation(m)
}
func decode_body_TL_inputWebFileAudioAlbumThumbLocation(m *DecodeBuf) TL {
	tl := TL_inputWebFileAudioAlbumThumbLocation{}
	flags := m.Int()
	tl.Small = flags&(1<<2) != 0
	if flags&(1<<0) != 0 {
		tl.Document = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Performer = Ref(m.String())
	}
	return tl
}

func decode_TL_upload_webFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_upload_webFile)
	return decode_body_TL_upload_webFile(m)
}
func decode_body_TL_upload_webFile(m *DecodeBuf) TL {
	tl := TL_upload_webFile{}
	tl.Size = m.Int()
	tl.MIMEType = m.String()
	tl.FileType = m.Object()
	tl.Mtime = m.Int()
	tl.Bytes = m.StringBytes()
	return tl
}

func decode_TL_payments_paymentForm(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_paymentForm)
	return decode_body_TL_payments_paymentForm(m)
}
func decode_body_TL_payments_paymentForm(m *DecodeBuf) TL {
	tl := TL_payments_paymentForm{}
	flags := m.Int()
	tl.CanSaveCredentials = flags&(1<<2) != 0
	tl.PasswordMissing = flags&(1<<3) != 0
	tl.FormID = m.Long()
	tl.BotID = m.Long()
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<5) != 0 {
		tl.Photo = m.Object()
	}
	tl.Invoice = decode_TL_invoice(m).(TL_invoice)
	tl.ProviderID = m.Long()
	tl.URL = m.String()
	if flags&(1<<4) != 0 {
		tl.NativeProvider = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.NativeParams = Ref(decode_TL_dataJSON(m).(TL_dataJSON))
	}
	if flags&(1<<6) != 0 {
		tl.AdditionalMethods = DecodeBuf_GenericVector[TL_paymentFormMethod](m)
	}
	if flags&(1<<0) != 0 {
		tl.SavedInfo = Ref(decode_TL_paymentRequestedInfo(m).(TL_paymentRequestedInfo))
	}
	if flags&(1<<1) != 0 {
		tl.SavedCredentials = DecodeBuf_GenericVector[TL_paymentSavedCredentialsCard](m)
	}
	tl.Users = m.Vector()
	return tl
}

func decode_TL_payments_paymentFormStars(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_paymentFormStars)
	return decode_body_TL_payments_paymentFormStars(m)
}
func decode_body_TL_payments_paymentFormStars(m *DecodeBuf) TL {
	tl := TL_payments_paymentFormStars{}
	flags := m.Int()
	tl.FormID = m.Long()
	tl.BotID = m.Long()
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<5) != 0 {
		tl.Photo = m.Object()
	}
	tl.Invoice = decode_TL_invoice(m).(TL_invoice)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_payments_validatedRequestedInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_validatedRequestedInfo)
	return decode_body_TL_payments_validatedRequestedInfo(m)
}
func decode_body_TL_payments_validatedRequestedInfo(m *DecodeBuf) TL {
	tl := TL_payments_validatedRequestedInfo{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.ID = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.ShippingOptions = DecodeBuf_GenericVector[TL_shippingOption](m)
	}
	return tl
}

func decode_TL_payments_paymentResult(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_paymentResult)
	return decode_body_TL_payments_paymentResult(m)
}
func decode_body_TL_payments_paymentResult(m *DecodeBuf) TL {
	tl := TL_payments_paymentResult{}
	tl.Updates = m.Object()
	return tl
}

func decode_TL_payments_paymentVerificationNeeded(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_paymentVerificationNeeded)
	return decode_body_TL_payments_paymentVerificationNeeded(m)
}
func decode_body_TL_payments_paymentVerificationNeeded(m *DecodeBuf) TL {
	tl := TL_payments_paymentVerificationNeeded{}
	tl.URL = m.String()
	return tl
}

func decode_TL_payments_paymentReceipt(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_paymentReceipt)
	return decode_body_TL_payments_paymentReceipt(m)
}
func decode_body_TL_payments_paymentReceipt(m *DecodeBuf) TL {
	tl := TL_payments_paymentReceipt{}
	flags := m.Int()
	tl.Date = m.Int()
	tl.BotID = m.Long()
	tl.ProviderID = m.Long()
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<2) != 0 {
		tl.Photo = m.Object()
	}
	tl.Invoice = decode_TL_invoice(m).(TL_invoice)
	if flags&(1<<0) != 0 {
		tl.Info = Ref(decode_TL_paymentRequestedInfo(m).(TL_paymentRequestedInfo))
	}
	if flags&(1<<1) != 0 {
		tl.Shipping = Ref(decode_TL_shippingOption(m).(TL_shippingOption))
	}
	if flags&(1<<3) != 0 {
		tl.TipAmount = Ref(m.Long())
	}
	tl.Currency = m.String()
	tl.TotalAmount = m.Long()
	tl.CredentialsTitle = m.String()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_payments_paymentReceiptStars(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_paymentReceiptStars)
	return decode_body_TL_payments_paymentReceiptStars(m)
}
func decode_body_TL_payments_paymentReceiptStars(m *DecodeBuf) TL {
	tl := TL_payments_paymentReceiptStars{}
	flags := m.Int()
	tl.Date = m.Int()
	tl.BotID = m.Long()
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<2) != 0 {
		tl.Photo = m.Object()
	}
	tl.Invoice = decode_TL_invoice(m).(TL_invoice)
	tl.Currency = m.String()
	tl.TotalAmount = m.Long()
	tl.TransactionID = m.String()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_payments_savedInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_savedInfo)
	return decode_body_TL_payments_savedInfo(m)
}
func decode_body_TL_payments_savedInfo(m *DecodeBuf) TL {
	tl := TL_payments_savedInfo{}
	flags := m.Int()
	tl.HasSavedCredentials = flags&(1<<1) != 0
	if flags&(1<<0) != 0 {
		tl.SavedInfo = Ref(decode_TL_paymentRequestedInfo(m).(TL_paymentRequestedInfo))
	}
	return tl
}

func decode_TL_inputPaymentCredentialsSaved(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPaymentCredentialsSaved)
	return decode_body_TL_inputPaymentCredentialsSaved(m)
}
func decode_body_TL_inputPaymentCredentialsSaved(m *DecodeBuf) TL {
	tl := TL_inputPaymentCredentialsSaved{}
	tl.ID = m.String()
	tl.TmpPassword = m.StringBytes()
	return tl
}

func decode_TL_inputPaymentCredentials(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPaymentCredentials)
	return decode_body_TL_inputPaymentCredentials(m)
}
func decode_body_TL_inputPaymentCredentials(m *DecodeBuf) TL {
	tl := TL_inputPaymentCredentials{}
	flags := m.Int()
	tl.Save = flags&(1<<0) != 0
	tl.Data = decode_TL_dataJSON(m).(TL_dataJSON)
	return tl
}

func decode_TL_inputPaymentCredentialsApplePay(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPaymentCredentialsApplePay)
	return decode_body_TL_inputPaymentCredentialsApplePay(m)
}
func decode_body_TL_inputPaymentCredentialsApplePay(m *DecodeBuf) TL {
	tl := TL_inputPaymentCredentialsApplePay{}
	tl.PaymentData = decode_TL_dataJSON(m).(TL_dataJSON)
	return tl
}

func decode_TL_inputPaymentCredentialsGooglePay(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPaymentCredentialsGooglePay)
	return decode_body_TL_inputPaymentCredentialsGooglePay(m)
}
func decode_body_TL_inputPaymentCredentialsGooglePay(m *DecodeBuf) TL {
	tl := TL_inputPaymentCredentialsGooglePay{}
	tl.PaymentToken = decode_TL_dataJSON(m).(TL_dataJSON)
	return tl
}

func decode_TL_account_tmpPassword(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_tmpPassword)
	return decode_body_TL_account_tmpPassword(m)
}
func decode_body_TL_account_tmpPassword(m *DecodeBuf) TL {
	tl := TL_account_tmpPassword{}
	tl.TmpPassword = m.StringBytes()
	tl.ValidUntil = m.Int()
	return tl
}

func decode_TL_shippingOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_shippingOption)
	return decode_body_TL_shippingOption(m)
}
func decode_body_TL_shippingOption(m *DecodeBuf) TL {
	tl := TL_shippingOption{}
	tl.ID = m.String()
	tl.Title = m.String()
	tl.Prices = DecodeBuf_GenericVector[TL_labeledPrice](m)
	return tl
}

func decode_TL_inputStickerSetItem(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStickerSetItem)
	return decode_body_TL_inputStickerSetItem(m)
}
func decode_body_TL_inputStickerSetItem(m *DecodeBuf) TL {
	tl := TL_inputStickerSetItem{}
	flags := m.Int()
	tl.Document = m.Object()
	tl.Emoji = m.String()
	if flags&(1<<0) != 0 {
		tl.MaskCoords = Ref(decode_TL_maskCoords(m).(TL_maskCoords))
	}
	if flags&(1<<1) != 0 {
		tl.Keywords = Ref(m.String())
	}
	return tl
}

func decode_TL_inputPhoneCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputPhoneCall)
	return decode_body_TL_inputPhoneCall(m)
}
func decode_body_TL_inputPhoneCall(m *DecodeBuf) TL {
	tl := TL_inputPhoneCall{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_phoneCallEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallEmpty)
	return decode_body_TL_phoneCallEmpty(m)
}
func decode_body_TL_phoneCallEmpty(m *DecodeBuf) TL {
	tl := TL_phoneCallEmpty{}
	tl.ID = m.Long()
	return tl
}

func decode_TL_phoneCallWaiting(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallWaiting)
	return decode_body_TL_phoneCallWaiting(m)
}
func decode_body_TL_phoneCallWaiting(m *DecodeBuf) TL {
	tl := TL_phoneCallWaiting{}
	flags := m.Int()
	tl.Video = flags&(1<<6) != 0
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Date = m.Int()
	tl.AdminID = m.Long()
	tl.ParticipantID = m.Long()
	tl.Protocol = decode_TL_phoneCallProtocol(m).(TL_phoneCallProtocol)
	if flags&(1<<0) != 0 {
		tl.ReceiveDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_phoneCallRequested(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallRequested)
	return decode_body_TL_phoneCallRequested(m)
}
func decode_body_TL_phoneCallRequested(m *DecodeBuf) TL {
	tl := TL_phoneCallRequested{}
	flags := m.Int()
	tl.Video = flags&(1<<6) != 0
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Date = m.Int()
	tl.AdminID = m.Long()
	tl.ParticipantID = m.Long()
	tl.GAHash = m.StringBytes()
	tl.Protocol = decode_TL_phoneCallProtocol(m).(TL_phoneCallProtocol)
	return tl
}

func decode_TL_phoneCallAccepted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallAccepted)
	return decode_body_TL_phoneCallAccepted(m)
}
func decode_body_TL_phoneCallAccepted(m *DecodeBuf) TL {
	tl := TL_phoneCallAccepted{}
	flags := m.Int()
	tl.Video = flags&(1<<6) != 0
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Date = m.Int()
	tl.AdminID = m.Long()
	tl.ParticipantID = m.Long()
	tl.GB = m.StringBytes()
	tl.Protocol = decode_TL_phoneCallProtocol(m).(TL_phoneCallProtocol)
	return tl
}

func decode_TL_phoneCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCall)
	return decode_body_TL_phoneCall(m)
}
func decode_body_TL_phoneCall(m *DecodeBuf) TL {
	tl := TL_phoneCall{}
	flags := m.Int()
	tl.P2PAllowed = flags&(1<<5) != 0
	tl.Video = flags&(1<<6) != 0
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Date = m.Int()
	tl.AdminID = m.Long()
	tl.ParticipantID = m.Long()
	tl.GAOrB = m.StringBytes()
	tl.KeyFingerprint = m.Long()
	tl.Protocol = decode_TL_phoneCallProtocol(m).(TL_phoneCallProtocol)
	tl.Connections = m.Vector()
	tl.StartDate = m.Int()
	if flags&(1<<7) != 0 {
		tl.CustomParameters = Ref(decode_TL_dataJSON(m).(TL_dataJSON))
	}
	return tl
}

func decode_TL_phoneCallDiscarded(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallDiscarded)
	return decode_body_TL_phoneCallDiscarded(m)
}
func decode_body_TL_phoneCallDiscarded(m *DecodeBuf) TL {
	tl := TL_phoneCallDiscarded{}
	flags := m.Int()
	tl.NeedRating = flags&(1<<2) != 0
	tl.NeedDebug = flags&(1<<3) != 0
	tl.Video = flags&(1<<6) != 0
	tl.ID = m.Long()
	if flags&(1<<0) != 0 {
		tl.Reason = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.Duration = Ref(m.Int())
	}
	return tl
}

func decode_TL_phoneConnection(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneConnection)
	return decode_body_TL_phoneConnection(m)
}
func decode_body_TL_phoneConnection(m *DecodeBuf) TL {
	tl := TL_phoneConnection{}
	flags := m.Int()
	tl.TCP = flags&(1<<0) != 0
	tl.ID = m.Long()
	tl.IP = m.String()
	tl.IPv6 = m.String()
	tl.Port = m.Int()
	tl.PeerTag = m.StringBytes()
	return tl
}

func decode_TL_phoneConnectionWebrtc(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneConnectionWebrtc)
	return decode_body_TL_phoneConnectionWebrtc(m)
}
func decode_body_TL_phoneConnectionWebrtc(m *DecodeBuf) TL {
	tl := TL_phoneConnectionWebrtc{}
	flags := m.Int()
	tl.Turn = flags&(1<<0) != 0
	tl.STUN = flags&(1<<1) != 0
	tl.ID = m.Long()
	tl.IP = m.String()
	tl.IPv6 = m.String()
	tl.Port = m.Int()
	tl.Username = m.String()
	tl.Password = m.String()
	return tl
}

func decode_TL_phoneCallProtocol(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phoneCallProtocol)
	return decode_body_TL_phoneCallProtocol(m)
}
func decode_body_TL_phoneCallProtocol(m *DecodeBuf) TL {
	tl := TL_phoneCallProtocol{}
	flags := m.Int()
	tl.UDPP2P = flags&(1<<0) != 0
	tl.UDPReflector = flags&(1<<1) != 0
	tl.MinLayer = m.Int()
	tl.MaxLayer = m.Int()
	tl.LibraryVersions = m.VectorString()
	return tl
}

func decode_TL_phone_phoneCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phone_phoneCall)
	return decode_body_TL_phone_phoneCall(m)
}
func decode_body_TL_phone_phoneCall(m *DecodeBuf) TL {
	tl := TL_phone_phoneCall{}
	tl.PhoneCall = m.Object()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_upload_cdnFileReuploadNeeded(m *DecodeBuf) TL {
	m.constructorAssert(CRC_upload_cdnFileReuploadNeeded)
	return decode_body_TL_upload_cdnFileReuploadNeeded(m)
}
func decode_body_TL_upload_cdnFileReuploadNeeded(m *DecodeBuf) TL {
	tl := TL_upload_cdnFileReuploadNeeded{}
	tl.RequestToken = m.StringBytes()
	return tl
}

func decode_TL_upload_cdnFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_upload_cdnFile)
	return decode_body_TL_upload_cdnFile(m)
}
func decode_body_TL_upload_cdnFile(m *DecodeBuf) TL {
	tl := TL_upload_cdnFile{}
	tl.Bytes = m.StringBytes()
	return tl
}

func decode_TL_cdnPublicKey(m *DecodeBuf) TL {
	m.constructorAssert(CRC_cdnPublicKey)
	return decode_body_TL_cdnPublicKey(m)
}
func decode_body_TL_cdnPublicKey(m *DecodeBuf) TL {
	tl := TL_cdnPublicKey{}
	tl.DCID = m.Int()
	tl.PublicKey = m.String()
	return tl
}

func decode_TL_cdnConfig(m *DecodeBuf) TL {
	m.constructorAssert(CRC_cdnConfig)
	return decode_body_TL_cdnConfig(m)
}
func decode_body_TL_cdnConfig(m *DecodeBuf) TL {
	tl := TL_cdnConfig{}
	tl.PublicKeys = DecodeBuf_GenericVector[TL_cdnPublicKey](m)
	return tl
}

func decode_TL_langPackString(m *DecodeBuf) TL {
	m.constructorAssert(CRC_langPackString)
	return decode_body_TL_langPackString(m)
}
func decode_body_TL_langPackString(m *DecodeBuf) TL {
	tl := TL_langPackString{}
	tl.Key = m.String()
	tl.Value = m.String()
	return tl
}

func decode_TL_langPackStringPluralized(m *DecodeBuf) TL {
	m.constructorAssert(CRC_langPackStringPluralized)
	return decode_body_TL_langPackStringPluralized(m)
}
func decode_body_TL_langPackStringPluralized(m *DecodeBuf) TL {
	tl := TL_langPackStringPluralized{}
	flags := m.Int()
	tl.Key = m.String()
	if flags&(1<<0) != 0 {
		tl.ZeroValue = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.OneValue = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.TwoValue = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.FewValue = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.ManyValue = Ref(m.String())
	}
	tl.OtherValue = m.String()
	return tl
}

func decode_TL_langPackStringDeleted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_langPackStringDeleted)
	return decode_body_TL_langPackStringDeleted(m)
}
func decode_body_TL_langPackStringDeleted(m *DecodeBuf) TL {
	tl := TL_langPackStringDeleted{}
	tl.Key = m.String()
	return tl
}

func decode_TL_langPackDifference(m *DecodeBuf) TL {
	m.constructorAssert(CRC_langPackDifference)
	return decode_body_TL_langPackDifference(m)
}
func decode_body_TL_langPackDifference(m *DecodeBuf) TL {
	tl := TL_langPackDifference{}
	tl.LangCode = m.String()
	tl.FromVersion = m.Int()
	tl.Version = m.Int()
	tl.Strings = m.Vector()
	return tl
}

func decode_TL_langPackLanguage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_langPackLanguage)
	return decode_body_TL_langPackLanguage(m)
}
func decode_body_TL_langPackLanguage(m *DecodeBuf) TL {
	tl := TL_langPackLanguage{}
	flags := m.Int()
	tl.Official = flags&(1<<0) != 0
	tl.RTL = flags&(1<<2) != 0
	tl.Beta = flags&(1<<3) != 0
	tl.Name = m.String()
	tl.NativeName = m.String()
	tl.LangCode = m.String()
	if flags&(1<<1) != 0 {
		tl.BaseLangCode = Ref(m.String())
	}
	tl.PluralCode = m.String()
	tl.StringsCount = m.Int()
	tl.TranslatedCount = m.Int()
	tl.TranslationsURL = m.String()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeTitle(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeTitle)
	return decode_body_TL_channelAdminLogEventActionChangeTitle(m)
}
func decode_body_TL_channelAdminLogEventActionChangeTitle(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeTitle{}
	tl.PrevValue = m.String()
	tl.NewValue = m.String()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeAbout(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeAbout)
	return decode_body_TL_channelAdminLogEventActionChangeAbout(m)
}
func decode_body_TL_channelAdminLogEventActionChangeAbout(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeAbout{}
	tl.PrevValue = m.String()
	tl.NewValue = m.String()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeUsername(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeUsername)
	return decode_body_TL_channelAdminLogEventActionChangeUsername(m)
}
func decode_body_TL_channelAdminLogEventActionChangeUsername(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeUsername{}
	tl.PrevValue = m.String()
	tl.NewValue = m.String()
	return tl
}

func decode_TL_channelAdminLogEventActionChangePhoto(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangePhoto)
	return decode_body_TL_channelAdminLogEventActionChangePhoto(m)
}
func decode_body_TL_channelAdminLogEventActionChangePhoto(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangePhoto{}
	tl.PrevPhoto = m.Object()
	tl.NewPhoto = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionToggleInvites(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionToggleInvites)
	return decode_body_TL_channelAdminLogEventActionToggleInvites(m)
}
func decode_body_TL_channelAdminLogEventActionToggleInvites(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionToggleInvites{}
	tl.NewValue = m.Bool()
	return tl
}

func decode_TL_channelAdminLogEventActionToggleSignatures(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionToggleSignatures)
	return decode_body_TL_channelAdminLogEventActionToggleSignatures(m)
}
func decode_body_TL_channelAdminLogEventActionToggleSignatures(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionToggleSignatures{}
	tl.NewValue = m.Bool()
	return tl
}

func decode_TL_channelAdminLogEventActionUpdatePinned(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionUpdatePinned)
	return decode_body_TL_channelAdminLogEventActionUpdatePinned(m)
}
func decode_body_TL_channelAdminLogEventActionUpdatePinned(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionUpdatePinned{}
	tl.Message = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionEditMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionEditMessage)
	return decode_body_TL_channelAdminLogEventActionEditMessage(m)
}
func decode_body_TL_channelAdminLogEventActionEditMessage(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionEditMessage{}
	tl.PrevMessage = m.Object()
	tl.NewMessage = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionDeleteMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionDeleteMessage)
	return decode_body_TL_channelAdminLogEventActionDeleteMessage(m)
}
func decode_body_TL_channelAdminLogEventActionDeleteMessage(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionDeleteMessage{}
	tl.Message = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantJoin(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantJoin)
	return decode_body_TL_channelAdminLogEventActionParticipantJoin(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantJoin(_ *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantJoin{}
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantLeave(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantLeave)
	return decode_body_TL_channelAdminLogEventActionParticipantLeave(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantLeave(_ *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantLeave{}
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantInvite)
	return decode_body_TL_channelAdminLogEventActionParticipantInvite(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantInvite(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantInvite{}
	tl.Participant = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantToggleBan(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantToggleBan)
	return decode_body_TL_channelAdminLogEventActionParticipantToggleBan(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantToggleBan(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantToggleBan{}
	tl.PrevParticipant = m.Object()
	tl.NewParticipant = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantToggleAdmin(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantToggleAdmin)
	return decode_body_TL_channelAdminLogEventActionParticipantToggleAdmin(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantToggleAdmin(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantToggleAdmin{}
	tl.PrevParticipant = m.Object()
	tl.NewParticipant = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeStickerSet(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeStickerSet)
	return decode_body_TL_channelAdminLogEventActionChangeStickerSet(m)
}
func decode_body_TL_channelAdminLogEventActionChangeStickerSet(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeStickerSet{}
	tl.PrevStickerset = m.Object()
	tl.NewStickerset = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionTogglePreHistoryHidden(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionTogglePreHistoryHidden)
	return decode_body_TL_channelAdminLogEventActionTogglePreHistoryHidden(m)
}
func decode_body_TL_channelAdminLogEventActionTogglePreHistoryHidden(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionTogglePreHistoryHidden{}
	tl.NewValue = m.Bool()
	return tl
}

func decode_TL_channelAdminLogEventActionDefaultBannedRights(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionDefaultBannedRights)
	return decode_body_TL_channelAdminLogEventActionDefaultBannedRights(m)
}
func decode_body_TL_channelAdminLogEventActionDefaultBannedRights(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionDefaultBannedRights{}
	tl.PrevBannedRights = decode_TL_chatBannedRights(m).(TL_chatBannedRights)
	tl.NewBannedRights = decode_TL_chatBannedRights(m).(TL_chatBannedRights)
	return tl
}

func decode_TL_channelAdminLogEventActionStopPoll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionStopPoll)
	return decode_body_TL_channelAdminLogEventActionStopPoll(m)
}
func decode_body_TL_channelAdminLogEventActionStopPoll(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionStopPoll{}
	tl.Message = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeLinkedChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeLinkedChat)
	return decode_body_TL_channelAdminLogEventActionChangeLinkedChat(m)
}
func decode_body_TL_channelAdminLogEventActionChangeLinkedChat(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeLinkedChat{}
	tl.PrevValue = m.Long()
	tl.NewValue = m.Long()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeLocation)
	return decode_body_TL_channelAdminLogEventActionChangeLocation(m)
}
func decode_body_TL_channelAdminLogEventActionChangeLocation(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeLocation{}
	tl.PrevValue = m.Object()
	tl.NewValue = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionToggleSlowMode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionToggleSlowMode)
	return decode_body_TL_channelAdminLogEventActionToggleSlowMode(m)
}
func decode_body_TL_channelAdminLogEventActionToggleSlowMode(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionToggleSlowMode{}
	tl.PrevValue = m.Int()
	tl.NewValue = m.Int()
	return tl
}

func decode_TL_channelAdminLogEventActionStartGroupCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionStartGroupCall)
	return decode_body_TL_channelAdminLogEventActionStartGroupCall(m)
}
func decode_body_TL_channelAdminLogEventActionStartGroupCall(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionStartGroupCall{}
	tl.Call = decode_TL_inputGroupCall(m).(TL_inputGroupCall)
	return tl
}

func decode_TL_channelAdminLogEventActionDiscardGroupCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionDiscardGroupCall)
	return decode_body_TL_channelAdminLogEventActionDiscardGroupCall(m)
}
func decode_body_TL_channelAdminLogEventActionDiscardGroupCall(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionDiscardGroupCall{}
	tl.Call = decode_TL_inputGroupCall(m).(TL_inputGroupCall)
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantMute(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantMute)
	return decode_body_TL_channelAdminLogEventActionParticipantMute(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantMute(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantMute{}
	tl.Participant = decode_TL_groupCallParticipant(m).(TL_groupCallParticipant)
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantUnmute(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantUnmute)
	return decode_body_TL_channelAdminLogEventActionParticipantUnmute(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantUnmute(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantUnmute{}
	tl.Participant = decode_TL_groupCallParticipant(m).(TL_groupCallParticipant)
	return tl
}

func decode_TL_channelAdminLogEventActionToggleGroupCallSetting(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionToggleGroupCallSetting)
	return decode_body_TL_channelAdminLogEventActionToggleGroupCallSetting(m)
}
func decode_body_TL_channelAdminLogEventActionToggleGroupCallSetting(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionToggleGroupCallSetting{}
	tl.JoinMuted = m.Bool()
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantJoinByInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantJoinByInvite)
	return decode_body_TL_channelAdminLogEventActionParticipantJoinByInvite(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantJoinByInvite(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantJoinByInvite{}
	flags := m.Int()
	tl.ViaChatlist = flags&(1<<0) != 0
	tl.Invite = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionExportedInviteDelete(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionExportedInviteDelete)
	return decode_body_TL_channelAdminLogEventActionExportedInviteDelete(m)
}
func decode_body_TL_channelAdminLogEventActionExportedInviteDelete(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionExportedInviteDelete{}
	tl.Invite = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionExportedInviteRevoke(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionExportedInviteRevoke)
	return decode_body_TL_channelAdminLogEventActionExportedInviteRevoke(m)
}
func decode_body_TL_channelAdminLogEventActionExportedInviteRevoke(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionExportedInviteRevoke{}
	tl.Invite = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionExportedInviteEdit(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionExportedInviteEdit)
	return decode_body_TL_channelAdminLogEventActionExportedInviteEdit(m)
}
func decode_body_TL_channelAdminLogEventActionExportedInviteEdit(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionExportedInviteEdit{}
	tl.PrevInvite = m.Object()
	tl.NewInvite = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantVolume(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantVolume)
	return decode_body_TL_channelAdminLogEventActionParticipantVolume(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantVolume(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantVolume{}
	tl.Participant = decode_TL_groupCallParticipant(m).(TL_groupCallParticipant)
	return tl
}

func decode_TL_channelAdminLogEventActionChangeHistoryTTL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeHistoryTTL)
	return decode_body_TL_channelAdminLogEventActionChangeHistoryTTL(m)
}
func decode_body_TL_channelAdminLogEventActionChangeHistoryTTL(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeHistoryTTL{}
	tl.PrevValue = m.Int()
	tl.NewValue = m.Int()
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantJoinByRequest(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantJoinByRequest)
	return decode_body_TL_channelAdminLogEventActionParticipantJoinByRequest(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantJoinByRequest(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantJoinByRequest{}
	tl.Invite = m.Object()
	tl.ApprovedBy = m.Long()
	return tl
}

func decode_TL_channelAdminLogEventActionToggleNoForwards(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionToggleNoForwards)
	return decode_body_TL_channelAdminLogEventActionToggleNoForwards(m)
}
func decode_body_TL_channelAdminLogEventActionToggleNoForwards(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionToggleNoForwards{}
	tl.NewValue = m.Bool()
	return tl
}

func decode_TL_channelAdminLogEventActionSendMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionSendMessage)
	return decode_body_TL_channelAdminLogEventActionSendMessage(m)
}
func decode_body_TL_channelAdminLogEventActionSendMessage(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionSendMessage{}
	tl.Message = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeAvailableReactions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeAvailableReactions)
	return decode_body_TL_channelAdminLogEventActionChangeAvailableReactions(m)
}
func decode_body_TL_channelAdminLogEventActionChangeAvailableReactions(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeAvailableReactions{}
	tl.PrevValue = m.Object()
	tl.NewValue = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeUsernames(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeUsernames)
	return decode_body_TL_channelAdminLogEventActionChangeUsernames(m)
}
func decode_body_TL_channelAdminLogEventActionChangeUsernames(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeUsernames{}
	tl.PrevValue = m.VectorString()
	tl.NewValue = m.VectorString()
	return tl
}

func decode_TL_channelAdminLogEventActionToggleForum(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionToggleForum)
	return decode_body_TL_channelAdminLogEventActionToggleForum(m)
}
func decode_body_TL_channelAdminLogEventActionToggleForum(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionToggleForum{}
	tl.NewValue = m.Bool()
	return tl
}

func decode_TL_channelAdminLogEventActionCreateTopic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionCreateTopic)
	return decode_body_TL_channelAdminLogEventActionCreateTopic(m)
}
func decode_body_TL_channelAdminLogEventActionCreateTopic(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionCreateTopic{}
	tl.Topic = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionEditTopic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionEditTopic)
	return decode_body_TL_channelAdminLogEventActionEditTopic(m)
}
func decode_body_TL_channelAdminLogEventActionEditTopic(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionEditTopic{}
	tl.PrevTopic = m.Object()
	tl.NewTopic = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionDeleteTopic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionDeleteTopic)
	return decode_body_TL_channelAdminLogEventActionDeleteTopic(m)
}
func decode_body_TL_channelAdminLogEventActionDeleteTopic(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionDeleteTopic{}
	tl.Topic = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionPINTopic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionPINTopic)
	return decode_body_TL_channelAdminLogEventActionPINTopic(m)
}
func decode_body_TL_channelAdminLogEventActionPINTopic(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionPINTopic{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.PrevTopic = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.NewTopic = m.Object()
	}
	return tl
}

func decode_TL_channelAdminLogEventActionToggleAntiSpam(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionToggleAntiSpam)
	return decode_body_TL_channelAdminLogEventActionToggleAntiSpam(m)
}
func decode_body_TL_channelAdminLogEventActionToggleAntiSpam(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionToggleAntiSpam{}
	tl.NewValue = m.Bool()
	return tl
}

func decode_TL_channelAdminLogEventActionChangePeerColor(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangePeerColor)
	return decode_body_TL_channelAdminLogEventActionChangePeerColor(m)
}
func decode_body_TL_channelAdminLogEventActionChangePeerColor(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangePeerColor{}
	tl.PrevValue = decode_TL_peerColor(m).(TL_peerColor)
	tl.NewValue = decode_TL_peerColor(m).(TL_peerColor)
	return tl
}

func decode_TL_channelAdminLogEventActionChangeProfilePeerColor(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeProfilePeerColor)
	return decode_body_TL_channelAdminLogEventActionChangeProfilePeerColor(m)
}
func decode_body_TL_channelAdminLogEventActionChangeProfilePeerColor(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeProfilePeerColor{}
	tl.PrevValue = decode_TL_peerColor(m).(TL_peerColor)
	tl.NewValue = decode_TL_peerColor(m).(TL_peerColor)
	return tl
}

func decode_TL_channelAdminLogEventActionChangeWallpaper(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeWallpaper)
	return decode_body_TL_channelAdminLogEventActionChangeWallpaper(m)
}
func decode_body_TL_channelAdminLogEventActionChangeWallpaper(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeWallpaper{}
	tl.PrevValue = m.Object()
	tl.NewValue = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeEmojiStatus(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeEmojiStatus)
	return decode_body_TL_channelAdminLogEventActionChangeEmojiStatus(m)
}
func decode_body_TL_channelAdminLogEventActionChangeEmojiStatus(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeEmojiStatus{}
	tl.PrevValue = m.Object()
	tl.NewValue = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionChangeEmojiStickerSet(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionChangeEmojiStickerSet)
	return decode_body_TL_channelAdminLogEventActionChangeEmojiStickerSet(m)
}
func decode_body_TL_channelAdminLogEventActionChangeEmojiStickerSet(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionChangeEmojiStickerSet{}
	tl.PrevStickerset = m.Object()
	tl.NewStickerset = m.Object()
	return tl
}

func decode_TL_channelAdminLogEventActionToggleSignatureProfiles(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionToggleSignatureProfiles)
	return decode_body_TL_channelAdminLogEventActionToggleSignatureProfiles(m)
}
func decode_body_TL_channelAdminLogEventActionToggleSignatureProfiles(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionToggleSignatureProfiles{}
	tl.NewValue = m.Bool()
	return tl
}

func decode_TL_channelAdminLogEventActionParticipantSubExtend(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventActionParticipantSubExtend)
	return decode_body_TL_channelAdminLogEventActionParticipantSubExtend(m)
}
func decode_body_TL_channelAdminLogEventActionParticipantSubExtend(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventActionParticipantSubExtend{}
	tl.PrevParticipant = m.Object()
	tl.NewParticipant = m.Object()
	return tl
}

func decode_TL_channelAdminLogEvent(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEvent)
	return decode_body_TL_channelAdminLogEvent(m)
}
func decode_body_TL_channelAdminLogEvent(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEvent{}
	tl.ID = m.Long()
	tl.Date = m.Int()
	tl.UserID = m.Long()
	tl.Action = m.Object()
	return tl
}

func decode_TL_channels_adminLogResults(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channels_adminLogResults)
	return decode_body_TL_channels_adminLogResults(m)
}
func decode_body_TL_channels_adminLogResults(m *DecodeBuf) TL {
	tl := TL_channels_adminLogResults{}
	tl.Events = DecodeBuf_GenericVector[TL_channelAdminLogEvent](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_channelAdminLogEventsFilter(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelAdminLogEventsFilter)
	return decode_body_TL_channelAdminLogEventsFilter(m)
}
func decode_body_TL_channelAdminLogEventsFilter(m *DecodeBuf) TL {
	tl := TL_channelAdminLogEventsFilter{}
	flags := m.Int()
	tl.Join = flags&(1<<0) != 0
	tl.Leave = flags&(1<<1) != 0
	tl.Invite = flags&(1<<2) != 0
	tl.Ban = flags&(1<<3) != 0
	tl.Unban = flags&(1<<4) != 0
	tl.Kick = flags&(1<<5) != 0
	tl.Unkick = flags&(1<<6) != 0
	tl.Promote = flags&(1<<7) != 0
	tl.Demote = flags&(1<<8) != 0
	tl.Info = flags&(1<<9) != 0
	tl.Settings = flags&(1<<10) != 0
	tl.Pinned = flags&(1<<11) != 0
	tl.Edit = flags&(1<<12) != 0
	tl.Delete = flags&(1<<13) != 0
	tl.GroupCall = flags&(1<<14) != 0
	tl.Invites = flags&(1<<15) != 0
	tl.Send = flags&(1<<16) != 0
	tl.Forums = flags&(1<<17) != 0
	tl.SubExtend = flags&(1<<18) != 0
	return tl
}

func decode_TL_popularContact(m *DecodeBuf) TL {
	m.constructorAssert(CRC_popularContact)
	return decode_body_TL_popularContact(m)
}
func decode_body_TL_popularContact(m *DecodeBuf) TL {
	tl := TL_popularContact{}
	tl.ClientID = m.Long()
	tl.Importers = m.Int()
	return tl
}

func decode_TL_messages_favedStickersNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_favedStickersNotModified)
	return decode_body_TL_messages_favedStickersNotModified(m)
}
func decode_body_TL_messages_favedStickersNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_favedStickersNotModified{}
	return tl
}

func decode_TL_messages_favedStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_favedStickers)
	return decode_body_TL_messages_favedStickers(m)
}
func decode_body_TL_messages_favedStickers(m *DecodeBuf) TL {
	tl := TL_messages_favedStickers{}
	tl.Hash = m.Long()
	tl.Packs = DecodeBuf_GenericVector[TL_stickerPack](m)
	tl.Stickers = m.Vector()
	return tl
}

func decode_TL_recentMeURLUnknown(m *DecodeBuf) TL {
	m.constructorAssert(CRC_recentMeURLUnknown)
	return decode_body_TL_recentMeURLUnknown(m)
}
func decode_body_TL_recentMeURLUnknown(m *DecodeBuf) TL {
	tl := TL_recentMeURLUnknown{}
	tl.URL = m.String()
	return tl
}

func decode_TL_recentMeURLUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_recentMeURLUser)
	return decode_body_TL_recentMeURLUser(m)
}
func decode_body_TL_recentMeURLUser(m *DecodeBuf) TL {
	tl := TL_recentMeURLUser{}
	tl.URL = m.String()
	tl.UserID = m.Long()
	return tl
}

func decode_TL_recentMeURLChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_recentMeURLChat)
	return decode_body_TL_recentMeURLChat(m)
}
func decode_body_TL_recentMeURLChat(m *DecodeBuf) TL {
	tl := TL_recentMeURLChat{}
	tl.URL = m.String()
	tl.ChatID = m.Long()
	return tl
}

func decode_TL_recentMeURLChatInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_recentMeURLChatInvite)
	return decode_body_TL_recentMeURLChatInvite(m)
}
func decode_body_TL_recentMeURLChatInvite(m *DecodeBuf) TL {
	tl := TL_recentMeURLChatInvite{}
	tl.URL = m.String()
	tl.ChatInvite = m.Object()
	return tl
}

func decode_TL_recentMeURLStickerSet(m *DecodeBuf) TL {
	m.constructorAssert(CRC_recentMeURLStickerSet)
	return decode_body_TL_recentMeURLStickerSet(m)
}
func decode_body_TL_recentMeURLStickerSet(m *DecodeBuf) TL {
	tl := TL_recentMeURLStickerSet{}
	tl.URL = m.String()
	tl.Set = m.Object()
	return tl
}

func decode_TL_help_recentMeURLs(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_recentMeURLs)
	return decode_body_TL_help_recentMeURLs(m)
}
func decode_body_TL_help_recentMeURLs(m *DecodeBuf) TL {
	tl := TL_help_recentMeURLs{}
	tl.URLs = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_inputSingleMedia(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputSingleMedia)
	return decode_body_TL_inputSingleMedia(m)
}
func decode_body_TL_inputSingleMedia(m *DecodeBuf) TL {
	tl := TL_inputSingleMedia{}
	flags := m.Int()
	tl.Media = m.Object()
	tl.RandomID = m.Long()
	tl.Message = m.String()
	if flags&(1<<0) != 0 {
		tl.Entities = m.Vector()
	}
	return tl
}

func decode_TL_webAuthorization(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webAuthorization)
	return decode_body_TL_webAuthorization(m)
}
func decode_body_TL_webAuthorization(m *DecodeBuf) TL {
	tl := TL_webAuthorization{}
	tl.Hash = m.Long()
	tl.BotID = m.Long()
	tl.Domain = m.String()
	tl.Browser = m.String()
	tl.Platform = m.String()
	tl.DateCreated = m.Int()
	tl.DateActive = m.Int()
	tl.IP = m.String()
	tl.Region = m.String()
	return tl
}

func decode_TL_account_webAuthorizations(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_webAuthorizations)
	return decode_body_TL_account_webAuthorizations(m)
}
func decode_body_TL_account_webAuthorizations(m *DecodeBuf) TL {
	tl := TL_account_webAuthorizations{}
	tl.Authorizations = DecodeBuf_GenericVector[TL_webAuthorization](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_inputMessageID(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessageID)
	return decode_body_TL_inputMessageID(m)
}
func decode_body_TL_inputMessageID(m *DecodeBuf) TL {
	tl := TL_inputMessageID{}
	tl.ID = m.Int()
	return tl
}

func decode_TL_inputMessageReplyTo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessageReplyTo)
	return decode_body_TL_inputMessageReplyTo(m)
}
func decode_body_TL_inputMessageReplyTo(m *DecodeBuf) TL {
	tl := TL_inputMessageReplyTo{}
	tl.ID = m.Int()
	return tl
}

func decode_TL_inputMessagePinned(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessagePinned)
	return decode_body_TL_inputMessagePinned(m)
}
func decode_body_TL_inputMessagePinned(_ *DecodeBuf) TL {
	tl := TL_inputMessagePinned{}
	return tl
}

func decode_TL_inputMessageCallbackQuery(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMessageCallbackQuery)
	return decode_body_TL_inputMessageCallbackQuery(m)
}
func decode_body_TL_inputMessageCallbackQuery(m *DecodeBuf) TL {
	tl := TL_inputMessageCallbackQuery{}
	tl.ID = m.Int()
	tl.QueryID = m.Long()
	return tl
}

func decode_TL_inputDialogPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputDialogPeer)
	return decode_body_TL_inputDialogPeer(m)
}
func decode_body_TL_inputDialogPeer(m *DecodeBuf) TL {
	tl := TL_inputDialogPeer{}
	tl.Peer = m.Object()
	return tl
}

func decode_TL_inputDialogPeerFolder(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputDialogPeerFolder)
	return decode_body_TL_inputDialogPeerFolder(m)
}
func decode_body_TL_inputDialogPeerFolder(m *DecodeBuf) TL {
	tl := TL_inputDialogPeerFolder{}
	tl.FolderID = m.Int()
	return tl
}

func decode_TL_dialogPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dialogPeer)
	return decode_body_TL_dialogPeer(m)
}
func decode_body_TL_dialogPeer(m *DecodeBuf) TL {
	tl := TL_dialogPeer{}
	tl.Peer = m.Object()
	return tl
}

func decode_TL_dialogPeerFolder(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dialogPeerFolder)
	return decode_body_TL_dialogPeerFolder(m)
}
func decode_body_TL_dialogPeerFolder(m *DecodeBuf) TL {
	tl := TL_dialogPeerFolder{}
	tl.FolderID = m.Int()
	return tl
}

func decode_TL_messages_foundStickerSetsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_foundStickerSetsNotModified)
	return decode_body_TL_messages_foundStickerSetsNotModified(m)
}
func decode_body_TL_messages_foundStickerSetsNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_foundStickerSetsNotModified{}
	return tl
}

func decode_TL_messages_foundStickerSets(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_foundStickerSets)
	return decode_body_TL_messages_foundStickerSets(m)
}
func decode_body_TL_messages_foundStickerSets(m *DecodeBuf) TL {
	tl := TL_messages_foundStickerSets{}
	tl.Hash = m.Long()
	tl.Sets = m.Vector()
	return tl
}

func decode_TL_fileHash(m *DecodeBuf) TL {
	m.constructorAssert(CRC_fileHash)
	return decode_body_TL_fileHash(m)
}
func decode_body_TL_fileHash(m *DecodeBuf) TL {
	tl := TL_fileHash{}
	tl.Offset = m.Long()
	tl.Limit = m.Int()
	tl.Hash = m.StringBytes()
	return tl
}

func decode_TL_inputClientProxy(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputClientProxy)
	return decode_body_TL_inputClientProxy(m)
}
func decode_body_TL_inputClientProxy(m *DecodeBuf) TL {
	tl := TL_inputClientProxy{}
	tl.Address = m.String()
	tl.Port = m.Int()
	return tl
}

func decode_TL_help_termsOfServiceUpdateEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_termsOfServiceUpdateEmpty)
	return decode_body_TL_help_termsOfServiceUpdateEmpty(m)
}
func decode_body_TL_help_termsOfServiceUpdateEmpty(m *DecodeBuf) TL {
	tl := TL_help_termsOfServiceUpdateEmpty{}
	tl.Expires = m.Int()
	return tl
}

func decode_TL_help_termsOfServiceUpdate(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_termsOfServiceUpdate)
	return decode_body_TL_help_termsOfServiceUpdate(m)
}
func decode_body_TL_help_termsOfServiceUpdate(m *DecodeBuf) TL {
	tl := TL_help_termsOfServiceUpdate{}
	tl.Expires = m.Int()
	tl.TermsOfService = decode_TL_help_termsOfService(m).(TL_help_termsOfService)
	return tl
}

func decode_TL_inputSecureFileUploaded(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputSecureFileUploaded)
	return decode_body_TL_inputSecureFileUploaded(m)
}
func decode_body_TL_inputSecureFileUploaded(m *DecodeBuf) TL {
	tl := TL_inputSecureFileUploaded{}
	tl.ID = m.Long()
	tl.Parts = m.Int()
	tl.MD5Checksum = m.String()
	tl.FileHash = m.StringBytes()
	tl.Secret = m.StringBytes()
	return tl
}

func decode_TL_inputSecureFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputSecureFile)
	return decode_body_TL_inputSecureFile(m)
}
func decode_body_TL_inputSecureFile(m *DecodeBuf) TL {
	tl := TL_inputSecureFile{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_secureFileEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureFileEmpty)
	return decode_body_TL_secureFileEmpty(m)
}
func decode_body_TL_secureFileEmpty(_ *DecodeBuf) TL {
	tl := TL_secureFileEmpty{}
	return tl
}

func decode_TL_secureFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureFile)
	return decode_body_TL_secureFile(m)
}
func decode_body_TL_secureFile(m *DecodeBuf) TL {
	tl := TL_secureFile{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Size = m.Long()
	tl.DCID = m.Int()
	tl.Date = m.Int()
	tl.FileHash = m.StringBytes()
	tl.Secret = m.StringBytes()
	return tl
}

func decode_TL_secureData(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureData)
	return decode_body_TL_secureData(m)
}
func decode_body_TL_secureData(m *DecodeBuf) TL {
	tl := TL_secureData{}
	tl.Data = m.StringBytes()
	tl.DataHash = m.StringBytes()
	tl.Secret = m.StringBytes()
	return tl
}

func decode_TL_securePlainPhone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_securePlainPhone)
	return decode_body_TL_securePlainPhone(m)
}
func decode_body_TL_securePlainPhone(m *DecodeBuf) TL {
	tl := TL_securePlainPhone{}
	tl.Phone = m.String()
	return tl
}

func decode_TL_securePlainEmail(m *DecodeBuf) TL {
	m.constructorAssert(CRC_securePlainEmail)
	return decode_body_TL_securePlainEmail(m)
}
func decode_body_TL_securePlainEmail(m *DecodeBuf) TL {
	tl := TL_securePlainEmail{}
	tl.Email = m.String()
	return tl
}

func decode_TL_secureValueTypePersonalDetails(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypePersonalDetails)
	return decode_body_TL_secureValueTypePersonalDetails(m)
}
func decode_body_TL_secureValueTypePersonalDetails(_ *DecodeBuf) TL {
	tl := TL_secureValueTypePersonalDetails{}
	return tl
}

func decode_TL_secureValueTypePassport(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypePassport)
	return decode_body_TL_secureValueTypePassport(m)
}
func decode_body_TL_secureValueTypePassport(_ *DecodeBuf) TL {
	tl := TL_secureValueTypePassport{}
	return tl
}

func decode_TL_secureValueTypeDriverLicense(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypeDriverLicense)
	return decode_body_TL_secureValueTypeDriverLicense(m)
}
func decode_body_TL_secureValueTypeDriverLicense(_ *DecodeBuf) TL {
	tl := TL_secureValueTypeDriverLicense{}
	return tl
}

func decode_TL_secureValueTypeIdentityCard(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypeIdentityCard)
	return decode_body_TL_secureValueTypeIdentityCard(m)
}
func decode_body_TL_secureValueTypeIdentityCard(_ *DecodeBuf) TL {
	tl := TL_secureValueTypeIdentityCard{}
	return tl
}

func decode_TL_secureValueTypeInternalPassport(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypeInternalPassport)
	return decode_body_TL_secureValueTypeInternalPassport(m)
}
func decode_body_TL_secureValueTypeInternalPassport(_ *DecodeBuf) TL {
	tl := TL_secureValueTypeInternalPassport{}
	return tl
}

func decode_TL_secureValueTypeAddress(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypeAddress)
	return decode_body_TL_secureValueTypeAddress(m)
}
func decode_body_TL_secureValueTypeAddress(_ *DecodeBuf) TL {
	tl := TL_secureValueTypeAddress{}
	return tl
}

func decode_TL_secureValueTypeUtilityBill(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypeUtilityBill)
	return decode_body_TL_secureValueTypeUtilityBill(m)
}
func decode_body_TL_secureValueTypeUtilityBill(_ *DecodeBuf) TL {
	tl := TL_secureValueTypeUtilityBill{}
	return tl
}

func decode_TL_secureValueTypeBankStatement(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypeBankStatement)
	return decode_body_TL_secureValueTypeBankStatement(m)
}
func decode_body_TL_secureValueTypeBankStatement(_ *DecodeBuf) TL {
	tl := TL_secureValueTypeBankStatement{}
	return tl
}

func decode_TL_secureValueTypeRentalAgreement(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypeRentalAgreement)
	return decode_body_TL_secureValueTypeRentalAgreement(m)
}
func decode_body_TL_secureValueTypeRentalAgreement(_ *DecodeBuf) TL {
	tl := TL_secureValueTypeRentalAgreement{}
	return tl
}

func decode_TL_secureValueTypePassportRegistration(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypePassportRegistration)
	return decode_body_TL_secureValueTypePassportRegistration(m)
}
func decode_body_TL_secureValueTypePassportRegistration(_ *DecodeBuf) TL {
	tl := TL_secureValueTypePassportRegistration{}
	return tl
}

func decode_TL_secureValueTypeTemporaryRegistration(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypeTemporaryRegistration)
	return decode_body_TL_secureValueTypeTemporaryRegistration(m)
}
func decode_body_TL_secureValueTypeTemporaryRegistration(_ *DecodeBuf) TL {
	tl := TL_secureValueTypeTemporaryRegistration{}
	return tl
}

func decode_TL_secureValueTypePhone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypePhone)
	return decode_body_TL_secureValueTypePhone(m)
}
func decode_body_TL_secureValueTypePhone(_ *DecodeBuf) TL {
	tl := TL_secureValueTypePhone{}
	return tl
}

func decode_TL_secureValueTypeEmail(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueTypeEmail)
	return decode_body_TL_secureValueTypeEmail(m)
}
func decode_body_TL_secureValueTypeEmail(_ *DecodeBuf) TL {
	tl := TL_secureValueTypeEmail{}
	return tl
}

func decode_TL_secureValue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValue)
	return decode_body_TL_secureValue(m)
}
func decode_body_TL_secureValue(m *DecodeBuf) TL {
	tl := TL_secureValue{}
	flags := m.Int()
	tl.Type = m.Object()
	if flags&(1<<0) != 0 {
		tl.Data = Ref(decode_TL_secureData(m).(TL_secureData))
	}
	if flags&(1<<1) != 0 {
		tl.FrontSide = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.ReverseSide = m.Object()
	}
	if flags&(1<<3) != 0 {
		tl.Selfie = m.Object()
	}
	if flags&(1<<6) != 0 {
		tl.Translation = m.Vector()
	}
	if flags&(1<<4) != 0 {
		tl.Files = m.Vector()
	}
	if flags&(1<<5) != 0 {
		tl.PlainData = m.Object()
	}
	tl.Hash = m.StringBytes()
	return tl
}

func decode_TL_inputSecureValue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputSecureValue)
	return decode_body_TL_inputSecureValue(m)
}
func decode_body_TL_inputSecureValue(m *DecodeBuf) TL {
	tl := TL_inputSecureValue{}
	flags := m.Int()
	tl.Type = m.Object()
	if flags&(1<<0) != 0 {
		tl.Data = Ref(decode_TL_secureData(m).(TL_secureData))
	}
	if flags&(1<<1) != 0 {
		tl.FrontSide = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.ReverseSide = m.Object()
	}
	if flags&(1<<3) != 0 {
		tl.Selfie = m.Object()
	}
	if flags&(1<<6) != 0 {
		tl.Translation = m.Vector()
	}
	if flags&(1<<4) != 0 {
		tl.Files = m.Vector()
	}
	if flags&(1<<5) != 0 {
		tl.PlainData = m.Object()
	}
	return tl
}

func decode_TL_secureValueHash(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueHash)
	return decode_body_TL_secureValueHash(m)
}
func decode_body_TL_secureValueHash(m *DecodeBuf) TL {
	tl := TL_secureValueHash{}
	tl.Type = m.Object()
	tl.Hash = m.StringBytes()
	return tl
}

func decode_TL_secureValueErrorData(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueErrorData)
	return decode_body_TL_secureValueErrorData(m)
}
func decode_body_TL_secureValueErrorData(m *DecodeBuf) TL {
	tl := TL_secureValueErrorData{}
	tl.Type = m.Object()
	tl.DataHash = m.StringBytes()
	tl.Field = m.String()
	tl.Text = m.String()
	return tl
}

func decode_TL_secureValueErrorFrontSide(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueErrorFrontSide)
	return decode_body_TL_secureValueErrorFrontSide(m)
}
func decode_body_TL_secureValueErrorFrontSide(m *DecodeBuf) TL {
	tl := TL_secureValueErrorFrontSide{}
	tl.Type = m.Object()
	tl.FileHash = m.StringBytes()
	tl.Text = m.String()
	return tl
}

func decode_TL_secureValueErrorReverseSide(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueErrorReverseSide)
	return decode_body_TL_secureValueErrorReverseSide(m)
}
func decode_body_TL_secureValueErrorReverseSide(m *DecodeBuf) TL {
	tl := TL_secureValueErrorReverseSide{}
	tl.Type = m.Object()
	tl.FileHash = m.StringBytes()
	tl.Text = m.String()
	return tl
}

func decode_TL_secureValueErrorSelfie(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueErrorSelfie)
	return decode_body_TL_secureValueErrorSelfie(m)
}
func decode_body_TL_secureValueErrorSelfie(m *DecodeBuf) TL {
	tl := TL_secureValueErrorSelfie{}
	tl.Type = m.Object()
	tl.FileHash = m.StringBytes()
	tl.Text = m.String()
	return tl
}

func decode_TL_secureValueErrorFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueErrorFile)
	return decode_body_TL_secureValueErrorFile(m)
}
func decode_body_TL_secureValueErrorFile(m *DecodeBuf) TL {
	tl := TL_secureValueErrorFile{}
	tl.Type = m.Object()
	tl.FileHash = m.StringBytes()
	tl.Text = m.String()
	return tl
}

func decode_TL_secureValueErrorFiles(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueErrorFiles)
	return decode_body_TL_secureValueErrorFiles(m)
}
func decode_body_TL_secureValueErrorFiles(m *DecodeBuf) TL {
	tl := TL_secureValueErrorFiles{}
	tl.Type = m.Object()
	tl.FileHash = m.VectorBytes()
	tl.Text = m.String()
	return tl
}

func decode_TL_secureValueError(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueError)
	return decode_body_TL_secureValueError(m)
}
func decode_body_TL_secureValueError(m *DecodeBuf) TL {
	tl := TL_secureValueError{}
	tl.Type = m.Object()
	tl.Hash = m.StringBytes()
	tl.Text = m.String()
	return tl
}

func decode_TL_secureValueErrorTranslationFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueErrorTranslationFile)
	return decode_body_TL_secureValueErrorTranslationFile(m)
}
func decode_body_TL_secureValueErrorTranslationFile(m *DecodeBuf) TL {
	tl := TL_secureValueErrorTranslationFile{}
	tl.Type = m.Object()
	tl.FileHash = m.StringBytes()
	tl.Text = m.String()
	return tl
}

func decode_TL_secureValueErrorTranslationFiles(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureValueErrorTranslationFiles)
	return decode_body_TL_secureValueErrorTranslationFiles(m)
}
func decode_body_TL_secureValueErrorTranslationFiles(m *DecodeBuf) TL {
	tl := TL_secureValueErrorTranslationFiles{}
	tl.Type = m.Object()
	tl.FileHash = m.VectorBytes()
	tl.Text = m.String()
	return tl
}

func decode_TL_secureCredentialsEncrypted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureCredentialsEncrypted)
	return decode_body_TL_secureCredentialsEncrypted(m)
}
func decode_body_TL_secureCredentialsEncrypted(m *DecodeBuf) TL {
	tl := TL_secureCredentialsEncrypted{}
	tl.Data = m.StringBytes()
	tl.Hash = m.StringBytes()
	tl.Secret = m.StringBytes()
	return tl
}

func decode_TL_account_authorizationForm(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_authorizationForm)
	return decode_body_TL_account_authorizationForm(m)
}
func decode_body_TL_account_authorizationForm(m *DecodeBuf) TL {
	tl := TL_account_authorizationForm{}
	flags := m.Int()
	tl.RequiredTypes = m.Vector()
	tl.Values = DecodeBuf_GenericVector[TL_secureValue](m)
	tl.Errors = m.Vector()
	tl.Users = m.Vector()
	if flags&(1<<0) != 0 {
		tl.PrivacyPolicyURL = Ref(m.String())
	}
	return tl
}

func decode_TL_account_sentEmailCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_sentEmailCode)
	return decode_body_TL_account_sentEmailCode(m)
}
func decode_body_TL_account_sentEmailCode(m *DecodeBuf) TL {
	tl := TL_account_sentEmailCode{}
	tl.EmailPattern = m.String()
	tl.Length = m.Int()
	return tl
}

func decode_TL_help_deepLinkInfoEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_deepLinkInfoEmpty)
	return decode_body_TL_help_deepLinkInfoEmpty(m)
}
func decode_body_TL_help_deepLinkInfoEmpty(_ *DecodeBuf) TL {
	tl := TL_help_deepLinkInfoEmpty{}
	return tl
}

func decode_TL_help_deepLinkInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_deepLinkInfo)
	return decode_body_TL_help_deepLinkInfo(m)
}
func decode_body_TL_help_deepLinkInfo(m *DecodeBuf) TL {
	tl := TL_help_deepLinkInfo{}
	flags := m.Int()
	tl.UpdateApp = flags&(1<<0) != 0
	tl.Message = m.String()
	if flags&(1<<1) != 0 {
		tl.Entities = m.Vector()
	}
	return tl
}

func decode_TL_savedPhoneContact(m *DecodeBuf) TL {
	m.constructorAssert(CRC_savedPhoneContact)
	return decode_body_TL_savedPhoneContact(m)
}
func decode_body_TL_savedPhoneContact(m *DecodeBuf) TL {
	tl := TL_savedPhoneContact{}
	tl.Phone = m.String()
	tl.FirstName = m.String()
	tl.LastName = m.String()
	tl.Date = m.Int()
	return tl
}

func decode_TL_account_takeout(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_takeout)
	return decode_body_TL_account_takeout(m)
}
func decode_body_TL_account_takeout(m *DecodeBuf) TL {
	tl := TL_account_takeout{}
	tl.ID = m.Long()
	return tl
}

func decode_TL_passwordKDFAlgoUnknown(m *DecodeBuf) TL {
	m.constructorAssert(CRC_passwordKDFAlgoUnknown)
	return decode_body_TL_passwordKDFAlgoUnknown(m)
}
func decode_body_TL_passwordKDFAlgoUnknown(_ *DecodeBuf) TL {
	tl := TL_passwordKDFAlgoUnknown{}
	return tl
}

func decode_TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow(m *DecodeBuf) TL {
	m.constructorAssert(CRC_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)
	return decode_body_TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow(m)
}
func decode_body_TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow(m *DecodeBuf) TL {
	tl := TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow{}
	tl.Salt1 = m.StringBytes()
	tl.Salt2 = m.StringBytes()
	tl.G = m.Int()
	tl.P = m.StringBytes()
	return tl
}

func decode_TL_securePasswordKDFAlgoUnknown(m *DecodeBuf) TL {
	m.constructorAssert(CRC_securePasswordKDFAlgoUnknown)
	return decode_body_TL_securePasswordKDFAlgoUnknown(m)
}
func decode_body_TL_securePasswordKDFAlgoUnknown(_ *DecodeBuf) TL {
	tl := TL_securePasswordKDFAlgoUnknown{}
	return tl
}

func decode_TL_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000(m *DecodeBuf) TL {
	m.constructorAssert(CRC_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000)
	return decode_body_TL_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000(m)
}
func decode_body_TL_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000(m *DecodeBuf) TL {
	tl := TL_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000{}
	tl.Salt = m.StringBytes()
	return tl
}

func decode_TL_securePasswordKDFAlgoSHA512(m *DecodeBuf) TL {
	m.constructorAssert(CRC_securePasswordKDFAlgoSHA512)
	return decode_body_TL_securePasswordKDFAlgoSHA512(m)
}
func decode_body_TL_securePasswordKDFAlgoSHA512(m *DecodeBuf) TL {
	tl := TL_securePasswordKDFAlgoSHA512{}
	tl.Salt = m.StringBytes()
	return tl
}

func decode_TL_secureSecretSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureSecretSettings)
	return decode_body_TL_secureSecretSettings(m)
}
func decode_body_TL_secureSecretSettings(m *DecodeBuf) TL {
	tl := TL_secureSecretSettings{}
	tl.SecureAlgo = m.Object()
	tl.SecureSecret = m.StringBytes()
	tl.SecureSecretID = m.Long()
	return tl
}

func decode_TL_inputCheckPasswordEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputCheckPasswordEmpty)
	return decode_body_TL_inputCheckPasswordEmpty(m)
}
func decode_body_TL_inputCheckPasswordEmpty(_ *DecodeBuf) TL {
	tl := TL_inputCheckPasswordEmpty{}
	return tl
}

func decode_TL_inputCheckPasswordSRP(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputCheckPasswordSRP)
	return decode_body_TL_inputCheckPasswordSRP(m)
}
func decode_body_TL_inputCheckPasswordSRP(m *DecodeBuf) TL {
	tl := TL_inputCheckPasswordSRP{}
	tl.SrpID = m.Long()
	tl.A = m.StringBytes()
	tl.M1 = m.StringBytes()
	return tl
}

func decode_TL_secureRequiredType(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureRequiredType)
	return decode_body_TL_secureRequiredType(m)
}
func decode_body_TL_secureRequiredType(m *DecodeBuf) TL {
	tl := TL_secureRequiredType{}
	flags := m.Int()
	tl.NativeNames = flags&(1<<0) != 0
	tl.SelfieRequired = flags&(1<<1) != 0
	tl.TranslationRequired = flags&(1<<2) != 0
	tl.Type = m.Object()
	return tl
}

func decode_TL_secureRequiredTypeOneOf(m *DecodeBuf) TL {
	m.constructorAssert(CRC_secureRequiredTypeOneOf)
	return decode_body_TL_secureRequiredTypeOneOf(m)
}
func decode_body_TL_secureRequiredTypeOneOf(m *DecodeBuf) TL {
	tl := TL_secureRequiredTypeOneOf{}
	tl.Types = m.Vector()
	return tl
}

func decode_TL_help_passportConfigNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_passportConfigNotModified)
	return decode_body_TL_help_passportConfigNotModified(m)
}
func decode_body_TL_help_passportConfigNotModified(_ *DecodeBuf) TL {
	tl := TL_help_passportConfigNotModified{}
	return tl
}

func decode_TL_help_passportConfig(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_passportConfig)
	return decode_body_TL_help_passportConfig(m)
}
func decode_body_TL_help_passportConfig(m *DecodeBuf) TL {
	tl := TL_help_passportConfig{}
	tl.Hash = m.Int()
	tl.CountriesLangs = decode_TL_dataJSON(m).(TL_dataJSON)
	return tl
}

func decode_TL_inputAppEvent(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputAppEvent)
	return decode_body_TL_inputAppEvent(m)
}
func decode_body_TL_inputAppEvent(m *DecodeBuf) TL {
	tl := TL_inputAppEvent{}
	tl.Time = m.Double()
	tl.Type = m.String()
	tl.Peer = m.Long()
	tl.Data = m.Object()
	return tl
}

func decode_TL_jsonObjectValue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_jsonObjectValue)
	return decode_body_TL_jsonObjectValue(m)
}
func decode_body_TL_jsonObjectValue(m *DecodeBuf) TL {
	tl := TL_jsonObjectValue{}
	tl.Key = m.String()
	tl.Value = m.Object()
	return tl
}

func decode_TL_jsonNull(m *DecodeBuf) TL {
	m.constructorAssert(CRC_jsonNull)
	return decode_body_TL_jsonNull(m)
}
func decode_body_TL_jsonNull(_ *DecodeBuf) TL {
	tl := TL_jsonNull{}
	return tl
}

func decode_TL_jsonBool(m *DecodeBuf) TL {
	m.constructorAssert(CRC_jsonBool)
	return decode_body_TL_jsonBool(m)
}
func decode_body_TL_jsonBool(m *DecodeBuf) TL {
	tl := TL_jsonBool{}
	tl.Value = m.Bool()
	return tl
}

func decode_TL_jsonNumber(m *DecodeBuf) TL {
	m.constructorAssert(CRC_jsonNumber)
	return decode_body_TL_jsonNumber(m)
}
func decode_body_TL_jsonNumber(m *DecodeBuf) TL {
	tl := TL_jsonNumber{}
	tl.Value = m.Double()
	return tl
}

func decode_TL_jsonString(m *DecodeBuf) TL {
	m.constructorAssert(CRC_jsonString)
	return decode_body_TL_jsonString(m)
}
func decode_body_TL_jsonString(m *DecodeBuf) TL {
	tl := TL_jsonString{}
	tl.Value = m.String()
	return tl
}

func decode_TL_jsonArray(m *DecodeBuf) TL {
	m.constructorAssert(CRC_jsonArray)
	return decode_body_TL_jsonArray(m)
}
func decode_body_TL_jsonArray(m *DecodeBuf) TL {
	tl := TL_jsonArray{}
	tl.Value = m.Vector()
	return tl
}

func decode_TL_jsonObject(m *DecodeBuf) TL {
	m.constructorAssert(CRC_jsonObject)
	return decode_body_TL_jsonObject(m)
}
func decode_body_TL_jsonObject(m *DecodeBuf) TL {
	tl := TL_jsonObject{}
	tl.Value = DecodeBuf_GenericVector[TL_jsonObjectValue](m)
	return tl
}

func decode_TL_pageTableCell(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageTableCell)
	return decode_body_TL_pageTableCell(m)
}
func decode_body_TL_pageTableCell(m *DecodeBuf) TL {
	tl := TL_pageTableCell{}
	flags := m.Int()
	tl.Header = flags&(1<<0) != 0
	tl.AlignCenter = flags&(1<<3) != 0
	tl.AlignRight = flags&(1<<4) != 0
	tl.ValignMiddle = flags&(1<<5) != 0
	tl.ValignBottom = flags&(1<<6) != 0
	if flags&(1<<7) != 0 {
		tl.Text = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.Colspan = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.Rowspan = Ref(m.Int())
	}
	return tl
}

func decode_TL_pageTableRow(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageTableRow)
	return decode_body_TL_pageTableRow(m)
}
func decode_body_TL_pageTableRow(m *DecodeBuf) TL {
	tl := TL_pageTableRow{}
	tl.Cells = DecodeBuf_GenericVector[TL_pageTableCell](m)
	return tl
}

func decode_TL_pageCaption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageCaption)
	return decode_body_TL_pageCaption(m)
}
func decode_body_TL_pageCaption(m *DecodeBuf) TL {
	tl := TL_pageCaption{}
	tl.Text = m.Object()
	tl.Credit = m.Object()
	return tl
}

func decode_TL_pageListItemText(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageListItemText)
	return decode_body_TL_pageListItemText(m)
}
func decode_body_TL_pageListItemText(m *DecodeBuf) TL {
	tl := TL_pageListItemText{}
	tl.Text = m.Object()
	return tl
}

func decode_TL_pageListItemBlocks(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageListItemBlocks)
	return decode_body_TL_pageListItemBlocks(m)
}
func decode_body_TL_pageListItemBlocks(m *DecodeBuf) TL {
	tl := TL_pageListItemBlocks{}
	tl.Blocks = m.Vector()
	return tl
}

func decode_TL_pageListOrderedItemText(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageListOrderedItemText)
	return decode_body_TL_pageListOrderedItemText(m)
}
func decode_body_TL_pageListOrderedItemText(m *DecodeBuf) TL {
	tl := TL_pageListOrderedItemText{}
	tl.Num = m.String()
	tl.Text = m.Object()
	return tl
}

func decode_TL_pageListOrderedItemBlocks(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageListOrderedItemBlocks)
	return decode_body_TL_pageListOrderedItemBlocks(m)
}
func decode_body_TL_pageListOrderedItemBlocks(m *DecodeBuf) TL {
	tl := TL_pageListOrderedItemBlocks{}
	tl.Num = m.String()
	tl.Blocks = m.Vector()
	return tl
}

func decode_TL_pageRelatedArticle(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pageRelatedArticle)
	return decode_body_TL_pageRelatedArticle(m)
}
func decode_body_TL_pageRelatedArticle(m *DecodeBuf) TL {
	tl := TL_pageRelatedArticle{}
	flags := m.Int()
	tl.URL = m.String()
	tl.WebpageID = m.Long()
	if flags&(1<<0) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Description = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.PhotoID = Ref(m.Long())
	}
	if flags&(1<<3) != 0 {
		tl.Author = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.PublishedDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_page(m *DecodeBuf) TL {
	m.constructorAssert(CRC_page)
	return decode_body_TL_page(m)
}
func decode_body_TL_page(m *DecodeBuf) TL {
	tl := TL_page{}
	flags := m.Int()
	tl.Part = flags&(1<<0) != 0
	tl.RTL = flags&(1<<1) != 0
	tl.V2 = flags&(1<<2) != 0
	tl.URL = m.String()
	tl.Blocks = m.Vector()
	tl.Photos = m.Vector()
	tl.Documents = m.Vector()
	if flags&(1<<3) != 0 {
		tl.Views = Ref(m.Int())
	}
	return tl
}

func decode_TL_help_supportName(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_supportName)
	return decode_body_TL_help_supportName(m)
}
func decode_body_TL_help_supportName(m *DecodeBuf) TL {
	tl := TL_help_supportName{}
	tl.Name = m.String()
	return tl
}

func decode_TL_help_userInfoEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_userInfoEmpty)
	return decode_body_TL_help_userInfoEmpty(m)
}
func decode_body_TL_help_userInfoEmpty(_ *DecodeBuf) TL {
	tl := TL_help_userInfoEmpty{}
	return tl
}

func decode_TL_help_userInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_userInfo)
	return decode_body_TL_help_userInfo(m)
}
func decode_body_TL_help_userInfo(m *DecodeBuf) TL {
	tl := TL_help_userInfo{}
	tl.Message = m.String()
	tl.Entities = m.Vector()
	tl.Author = m.String()
	tl.Date = m.Int()
	return tl
}

func decode_TL_pollAnswer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pollAnswer)
	return decode_body_TL_pollAnswer(m)
}
func decode_body_TL_pollAnswer(m *DecodeBuf) TL {
	tl := TL_pollAnswer{}
	tl.Text = decode_TL_textWithEntities(m).(TL_textWithEntities)
	tl.Option = m.StringBytes()
	return tl
}

func decode_TL_poll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_poll)
	return decode_body_TL_poll(m)
}
func decode_body_TL_poll(m *DecodeBuf) TL {
	tl := TL_poll{}
	tl.ID = m.Long()
	flags := m.Int()
	tl.Closed = flags&(1<<0) != 0
	tl.PublicVoters = flags&(1<<1) != 0
	tl.MultipleChoice = flags&(1<<2) != 0
	tl.Quiz = flags&(1<<3) != 0
	tl.Question = decode_TL_textWithEntities(m).(TL_textWithEntities)
	tl.Answers = DecodeBuf_GenericVector[TL_pollAnswer](m)
	if flags&(1<<4) != 0 {
		tl.ClosePeriod = Ref(m.Int())
	}
	if flags&(1<<5) != 0 {
		tl.CloseDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_pollAnswerVoters(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pollAnswerVoters)
	return decode_body_TL_pollAnswerVoters(m)
}
func decode_body_TL_pollAnswerVoters(m *DecodeBuf) TL {
	tl := TL_pollAnswerVoters{}
	flags := m.Int()
	tl.Chosen = flags&(1<<0) != 0
	tl.Correct = flags&(1<<1) != 0
	tl.Option = m.StringBytes()
	tl.Voters = m.Int()
	return tl
}

func decode_TL_pollResults(m *DecodeBuf) TL {
	m.constructorAssert(CRC_pollResults)
	return decode_body_TL_pollResults(m)
}
func decode_body_TL_pollResults(m *DecodeBuf) TL {
	tl := TL_pollResults{}
	flags := m.Int()
	tl.Min = flags&(1<<0) != 0
	if flags&(1<<1) != 0 {
		tl.Results = DecodeBuf_GenericVector[TL_pollAnswerVoters](m)
	}
	if flags&(1<<2) != 0 {
		tl.TotalVoters = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.RecentVoters = m.Vector()
	}
	if flags&(1<<4) != 0 {
		tl.Solution = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.SolutionEntities = m.Vector()
	}
	return tl
}

func decode_TL_chatOnlines(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatOnlines)
	return decode_body_TL_chatOnlines(m)
}
func decode_body_TL_chatOnlines(m *DecodeBuf) TL {
	tl := TL_chatOnlines{}
	tl.Onlines = m.Int()
	return tl
}

func decode_TL_statsURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsURL)
	return decode_body_TL_statsURL(m)
}
func decode_body_TL_statsURL(m *DecodeBuf) TL {
	tl := TL_statsURL{}
	tl.URL = m.String()
	return tl
}

func decode_TL_chatAdminRights(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatAdminRights)
	return decode_body_TL_chatAdminRights(m)
}
func decode_body_TL_chatAdminRights(m *DecodeBuf) TL {
	tl := TL_chatAdminRights{}
	flags := m.Int()
	tl.ChangeInfo = flags&(1<<0) != 0
	tl.PostMessages = flags&(1<<1) != 0
	tl.EditMessages = flags&(1<<2) != 0
	tl.DeleteMessages = flags&(1<<3) != 0
	tl.BanUsers = flags&(1<<4) != 0
	tl.InviteUsers = flags&(1<<5) != 0
	tl.PINMessages = flags&(1<<7) != 0
	tl.AddAdmins = flags&(1<<9) != 0
	tl.Anonymous = flags&(1<<10) != 0
	tl.ManageCall = flags&(1<<11) != 0
	tl.Other = flags&(1<<12) != 0
	tl.ManageTopics = flags&(1<<13) != 0
	tl.PostStories = flags&(1<<14) != 0
	tl.EditStories = flags&(1<<15) != 0
	tl.DeleteStories = flags&(1<<16) != 0
	return tl
}

func decode_TL_chatBannedRights(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatBannedRights)
	return decode_body_TL_chatBannedRights(m)
}
func decode_body_TL_chatBannedRights(m *DecodeBuf) TL {
	tl := TL_chatBannedRights{}
	flags := m.Int()
	tl.ViewMessages = flags&(1<<0) != 0
	tl.SendMessages = flags&(1<<1) != 0
	tl.SendMedia = flags&(1<<2) != 0
	tl.SendStickers = flags&(1<<3) != 0
	tl.SendGIFs = flags&(1<<4) != 0
	tl.SendGames = flags&(1<<5) != 0
	tl.SendInline = flags&(1<<6) != 0
	tl.EmbedLinks = flags&(1<<7) != 0
	tl.SendPolls = flags&(1<<8) != 0
	tl.ChangeInfo = flags&(1<<10) != 0
	tl.InviteUsers = flags&(1<<15) != 0
	tl.PINMessages = flags&(1<<17) != 0
	tl.ManageTopics = flags&(1<<18) != 0
	tl.SendPhotos = flags&(1<<19) != 0
	tl.SendVideos = flags&(1<<20) != 0
	tl.SendRoundvideos = flags&(1<<21) != 0
	tl.SendAudios = flags&(1<<22) != 0
	tl.SendVoices = flags&(1<<23) != 0
	tl.SendDocs = flags&(1<<24) != 0
	tl.SendPlain = flags&(1<<25) != 0
	tl.UntilDate = m.Int()
	return tl
}

func decode_TL_inputWallPaper(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputWallPaper)
	return decode_body_TL_inputWallPaper(m)
}
func decode_body_TL_inputWallPaper(m *DecodeBuf) TL {
	tl := TL_inputWallPaper{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputWallPaperSlug(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputWallPaperSlug)
	return decode_body_TL_inputWallPaperSlug(m)
}
func decode_body_TL_inputWallPaperSlug(m *DecodeBuf) TL {
	tl := TL_inputWallPaperSlug{}
	tl.Slug = m.String()
	return tl
}

func decode_TL_inputWallPaperNoFile(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputWallPaperNoFile)
	return decode_body_TL_inputWallPaperNoFile(m)
}
func decode_body_TL_inputWallPaperNoFile(m *DecodeBuf) TL {
	tl := TL_inputWallPaperNoFile{}
	tl.ID = m.Long()
	return tl
}

func decode_TL_account_wallPapersNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_wallPapersNotModified)
	return decode_body_TL_account_wallPapersNotModified(m)
}
func decode_body_TL_account_wallPapersNotModified(_ *DecodeBuf) TL {
	tl := TL_account_wallPapersNotModified{}
	return tl
}

func decode_TL_account_wallPapers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_wallPapers)
	return decode_body_TL_account_wallPapers(m)
}
func decode_body_TL_account_wallPapers(m *DecodeBuf) TL {
	tl := TL_account_wallPapers{}
	tl.Hash = m.Long()
	tl.Wallpapers = m.Vector()
	return tl
}

func decode_TL_codeSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_codeSettings)
	return decode_body_TL_codeSettings(m)
}
func decode_body_TL_codeSettings(m *DecodeBuf) TL {
	tl := TL_codeSettings{}
	flags := m.Int()
	tl.AllowFlashcall = flags&(1<<0) != 0
	tl.CurrentNumber = flags&(1<<1) != 0
	tl.AllowAppHash = flags&(1<<4) != 0
	tl.AllowMissedCall = flags&(1<<5) != 0
	tl.AllowFirebase = flags&(1<<7) != 0
	tl.UnknownNumber = flags&(1<<9) != 0
	if flags&(1<<6) != 0 {
		tl.LogoutTokens = m.VectorBytes()
	}
	if flags&(1<<8) != 0 {
		tl.Token = Ref(m.String())
	}
	if flags&(1<<8) != 0 {
		tl.AppSandbox = Ref(m.Bool())
	}
	return tl
}

func decode_TL_wallPaperSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_wallPaperSettings)
	return decode_body_TL_wallPaperSettings(m)
}
func decode_body_TL_wallPaperSettings(m *DecodeBuf) TL {
	tl := TL_wallPaperSettings{}
	flags := m.Int()
	tl.Blur = flags&(1<<1) != 0
	tl.Motion = flags&(1<<2) != 0
	if flags&(1<<0) != 0 {
		tl.BackgroundColor = Ref(m.Int())
	}
	if flags&(1<<4) != 0 {
		tl.SecondBackgroundColor = Ref(m.Int())
	}
	if flags&(1<<5) != 0 {
		tl.ThirdBackgroundColor = Ref(m.Int())
	}
	if flags&(1<<6) != 0 {
		tl.FourthBackgroundColor = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.Intensity = Ref(m.Int())
	}
	if flags&(1<<4) != 0 {
		tl.Rotation = Ref(m.Int())
	}
	if flags&(1<<7) != 0 {
		tl.Emoticon = Ref(m.String())
	}
	return tl
}

func decode_TL_autoDownloadSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_autoDownloadSettings)
	return decode_body_TL_autoDownloadSettings(m)
}
func decode_body_TL_autoDownloadSettings(m *DecodeBuf) TL {
	tl := TL_autoDownloadSettings{}
	flags := m.Int()
	tl.Disabled = flags&(1<<0) != 0
	tl.VideoPreloadLarge = flags&(1<<1) != 0
	tl.AudioPreloadNext = flags&(1<<2) != 0
	tl.PhonecallsLessData = flags&(1<<3) != 0
	tl.StoriesPreload = flags&(1<<4) != 0
	tl.PhotoSizeMax = m.Int()
	tl.VideoSizeMax = m.Long()
	tl.FileSizeMax = m.Long()
	tl.VideoUploadMaxbitrate = m.Int()
	tl.SmallQueueActiveOperationsMax = m.Int()
	tl.LargeQueueActiveOperationsMax = m.Int()
	return tl
}

func decode_TL_account_autoDownloadSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_autoDownloadSettings)
	return decode_body_TL_account_autoDownloadSettings(m)
}
func decode_body_TL_account_autoDownloadSettings(m *DecodeBuf) TL {
	tl := TL_account_autoDownloadSettings{}
	tl.Low = decode_TL_autoDownloadSettings(m).(TL_autoDownloadSettings)
	tl.Medium = decode_TL_autoDownloadSettings(m).(TL_autoDownloadSettings)
	tl.High = decode_TL_autoDownloadSettings(m).(TL_autoDownloadSettings)
	return tl
}

func decode_TL_emojiKeyword(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiKeyword)
	return decode_body_TL_emojiKeyword(m)
}
func decode_body_TL_emojiKeyword(m *DecodeBuf) TL {
	tl := TL_emojiKeyword{}
	tl.Keyword = m.String()
	tl.Emoticons = m.VectorString()
	return tl
}

func decode_TL_emojiKeywordDeleted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiKeywordDeleted)
	return decode_body_TL_emojiKeywordDeleted(m)
}
func decode_body_TL_emojiKeywordDeleted(m *DecodeBuf) TL {
	tl := TL_emojiKeywordDeleted{}
	tl.Keyword = m.String()
	tl.Emoticons = m.VectorString()
	return tl
}

func decode_TL_emojiKeywordsDifference(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiKeywordsDifference)
	return decode_body_TL_emojiKeywordsDifference(m)
}
func decode_body_TL_emojiKeywordsDifference(m *DecodeBuf) TL {
	tl := TL_emojiKeywordsDifference{}
	tl.LangCode = m.String()
	tl.FromVersion = m.Int()
	tl.Version = m.Int()
	tl.Keywords = m.Vector()
	return tl
}

func decode_TL_emojiURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiURL)
	return decode_body_TL_emojiURL(m)
}
func decode_body_TL_emojiURL(m *DecodeBuf) TL {
	tl := TL_emojiURL{}
	tl.URL = m.String()
	return tl
}

func decode_TL_emojiLanguage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiLanguage)
	return decode_body_TL_emojiLanguage(m)
}
func decode_body_TL_emojiLanguage(m *DecodeBuf) TL {
	tl := TL_emojiLanguage{}
	tl.LangCode = m.String()
	return tl
}

func decode_TL_folder(m *DecodeBuf) TL {
	m.constructorAssert(CRC_folder)
	return decode_body_TL_folder(m)
}
func decode_body_TL_folder(m *DecodeBuf) TL {
	tl := TL_folder{}
	flags := m.Int()
	tl.AutofillNewBroadcasts = flags&(1<<0) != 0
	tl.AutofillPublicGroups = flags&(1<<1) != 0
	tl.AutofillNewCorrespondents = flags&(1<<2) != 0
	tl.ID = m.Int()
	tl.Title = m.String()
	if flags&(1<<3) != 0 {
		tl.Photo = m.Object()
	}
	return tl
}

func decode_TL_inputFolderPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputFolderPeer)
	return decode_body_TL_inputFolderPeer(m)
}
func decode_body_TL_inputFolderPeer(m *DecodeBuf) TL {
	tl := TL_inputFolderPeer{}
	tl.Peer = m.Object()
	tl.FolderID = m.Int()
	return tl
}

func decode_TL_folderPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_folderPeer)
	return decode_body_TL_folderPeer(m)
}
func decode_body_TL_folderPeer(m *DecodeBuf) TL {
	tl := TL_folderPeer{}
	tl.Peer = m.Object()
	tl.FolderID = m.Int()
	return tl
}

func decode_TL_messages_searchCounter(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_searchCounter)
	return decode_body_TL_messages_searchCounter(m)
}
func decode_body_TL_messages_searchCounter(m *DecodeBuf) TL {
	tl := TL_messages_searchCounter{}
	flags := m.Int()
	tl.Inexact = flags&(1<<1) != 0
	tl.Filter = m.Object()
	tl.Count = m.Int()
	return tl
}

func decode_TL_urlAuthResultRequest(m *DecodeBuf) TL {
	m.constructorAssert(CRC_urlAuthResultRequest)
	return decode_body_TL_urlAuthResultRequest(m)
}
func decode_body_TL_urlAuthResultRequest(m *DecodeBuf) TL {
	tl := TL_urlAuthResultRequest{}
	flags := m.Int()
	tl.RequestWriteAccess = flags&(1<<0) != 0
	tl.Bot = m.Object()
	tl.Domain = m.String()
	return tl
}

func decode_TL_urlAuthResultAccepted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_urlAuthResultAccepted)
	return decode_body_TL_urlAuthResultAccepted(m)
}
func decode_body_TL_urlAuthResultAccepted(m *DecodeBuf) TL {
	tl := TL_urlAuthResultAccepted{}
	tl.URL = m.String()
	return tl
}

func decode_TL_urlAuthResultDefault(m *DecodeBuf) TL {
	m.constructorAssert(CRC_urlAuthResultDefault)
	return decode_body_TL_urlAuthResultDefault(m)
}
func decode_body_TL_urlAuthResultDefault(_ *DecodeBuf) TL {
	tl := TL_urlAuthResultDefault{}
	return tl
}

func decode_TL_channelLocationEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelLocationEmpty)
	return decode_body_TL_channelLocationEmpty(m)
}
func decode_body_TL_channelLocationEmpty(_ *DecodeBuf) TL {
	tl := TL_channelLocationEmpty{}
	return tl
}

func decode_TL_channelLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channelLocation)
	return decode_body_TL_channelLocation(m)
}
func decode_body_TL_channelLocation(m *DecodeBuf) TL {
	tl := TL_channelLocation{}
	tl.GeoPoint = m.Object()
	tl.Address = m.String()
	return tl
}

func decode_TL_peerLocated(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerLocated)
	return decode_body_TL_peerLocated(m)
}
func decode_body_TL_peerLocated(m *DecodeBuf) TL {
	tl := TL_peerLocated{}
	tl.Peer = m.Object()
	tl.Expires = m.Int()
	tl.Distance = m.Int()
	return tl
}

func decode_TL_peerSelfLocated(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerSelfLocated)
	return decode_body_TL_peerSelfLocated(m)
}
func decode_body_TL_peerSelfLocated(m *DecodeBuf) TL {
	tl := TL_peerSelfLocated{}
	tl.Expires = m.Int()
	return tl
}

func decode_TL_restrictionReason(m *DecodeBuf) TL {
	m.constructorAssert(CRC_restrictionReason)
	return decode_body_TL_restrictionReason(m)
}
func decode_body_TL_restrictionReason(m *DecodeBuf) TL {
	tl := TL_restrictionReason{}
	tl.Platform = m.String()
	tl.Reason = m.String()
	tl.Text = m.String()
	return tl
}

func decode_TL_inputTheme(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputTheme)
	return decode_body_TL_inputTheme(m)
}
func decode_body_TL_inputTheme(m *DecodeBuf) TL {
	tl := TL_inputTheme{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputThemeSlug(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputThemeSlug)
	return decode_body_TL_inputThemeSlug(m)
}
func decode_body_TL_inputThemeSlug(m *DecodeBuf) TL {
	tl := TL_inputThemeSlug{}
	tl.Slug = m.String()
	return tl
}

func decode_TL_theme(m *DecodeBuf) TL {
	m.constructorAssert(CRC_theme)
	return decode_body_TL_theme(m)
}
func decode_body_TL_theme(m *DecodeBuf) TL {
	tl := TL_theme{}
	flags := m.Int()
	tl.Creator = flags&(1<<0) != 0
	tl.Default = flags&(1<<1) != 0
	tl.ForChat = flags&(1<<5) != 0
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Slug = m.String()
	tl.Title = m.String()
	if flags&(1<<2) != 0 {
		tl.Document = m.Object()
	}
	if flags&(1<<3) != 0 {
		tl.Settings = DecodeBuf_GenericVector[TL_themeSettings](m)
	}
	if flags&(1<<6) != 0 {
		tl.Emoticon = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.InstallsCount = Ref(m.Int())
	}
	return tl
}

func decode_TL_account_themesNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_themesNotModified)
	return decode_body_TL_account_themesNotModified(m)
}
func decode_body_TL_account_themesNotModified(_ *DecodeBuf) TL {
	tl := TL_account_themesNotModified{}
	return tl
}

func decode_TL_account_themes(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_themes)
	return decode_body_TL_account_themes(m)
}
func decode_body_TL_account_themes(m *DecodeBuf) TL {
	tl := TL_account_themes{}
	tl.Hash = m.Long()
	tl.Themes = DecodeBuf_GenericVector[TL_theme](m)
	return tl
}

func decode_TL_auth_loginToken(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_loginToken)
	return decode_body_TL_auth_loginToken(m)
}
func decode_body_TL_auth_loginToken(m *DecodeBuf) TL {
	tl := TL_auth_loginToken{}
	tl.Expires = m.Int()
	tl.Token = m.StringBytes()
	return tl
}

func decode_TL_auth_loginTokenMigrateTo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_loginTokenMigrateTo)
	return decode_body_TL_auth_loginTokenMigrateTo(m)
}
func decode_body_TL_auth_loginTokenMigrateTo(m *DecodeBuf) TL {
	tl := TL_auth_loginTokenMigrateTo{}
	tl.DCID = m.Int()
	tl.Token = m.StringBytes()
	return tl
}

func decode_TL_auth_loginTokenSuccess(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_loginTokenSuccess)
	return decode_body_TL_auth_loginTokenSuccess(m)
}
func decode_body_TL_auth_loginTokenSuccess(m *DecodeBuf) TL {
	tl := TL_auth_loginTokenSuccess{}
	tl.Authorization = m.Object()
	return tl
}

func decode_TL_account_contentSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_contentSettings)
	return decode_body_TL_account_contentSettings(m)
}
func decode_body_TL_account_contentSettings(m *DecodeBuf) TL {
	tl := TL_account_contentSettings{}
	flags := m.Int()
	tl.SensitiveEnabled = flags&(1<<0) != 0
	tl.SensitiveCanChange = flags&(1<<1) != 0
	return tl
}

func decode_TL_messages_inactiveChats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_inactiveChats)
	return decode_body_TL_messages_inactiveChats(m)
}
func decode_body_TL_messages_inactiveChats(m *DecodeBuf) TL {
	tl := TL_messages_inactiveChats{}
	tl.Dates = m.VectorInt()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_baseThemeClassic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_baseThemeClassic)
	return decode_body_TL_baseThemeClassic(m)
}
func decode_body_TL_baseThemeClassic(_ *DecodeBuf) TL {
	tl := TL_baseThemeClassic{}
	return tl
}

func decode_TL_baseThemeDay(m *DecodeBuf) TL {
	m.constructorAssert(CRC_baseThemeDay)
	return decode_body_TL_baseThemeDay(m)
}
func decode_body_TL_baseThemeDay(_ *DecodeBuf) TL {
	tl := TL_baseThemeDay{}
	return tl
}

func decode_TL_baseThemeNight(m *DecodeBuf) TL {
	m.constructorAssert(CRC_baseThemeNight)
	return decode_body_TL_baseThemeNight(m)
}
func decode_body_TL_baseThemeNight(_ *DecodeBuf) TL {
	tl := TL_baseThemeNight{}
	return tl
}

func decode_TL_baseThemeTinted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_baseThemeTinted)
	return decode_body_TL_baseThemeTinted(m)
}
func decode_body_TL_baseThemeTinted(_ *DecodeBuf) TL {
	tl := TL_baseThemeTinted{}
	return tl
}

func decode_TL_baseThemeArctic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_baseThemeArctic)
	return decode_body_TL_baseThemeArctic(m)
}
func decode_body_TL_baseThemeArctic(_ *DecodeBuf) TL {
	tl := TL_baseThemeArctic{}
	return tl
}

func decode_TL_inputThemeSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputThemeSettings)
	return decode_body_TL_inputThemeSettings(m)
}
func decode_body_TL_inputThemeSettings(m *DecodeBuf) TL {
	tl := TL_inputThemeSettings{}
	flags := m.Int()
	tl.MessageColorsAnimated = flags&(1<<2) != 0
	tl.BaseTheme = m.Object()
	tl.AccentColor = m.Int()
	if flags&(1<<3) != 0 {
		tl.OutboxAccentColor = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.MessageColors = m.VectorInt()
	}
	if flags&(1<<1) != 0 {
		tl.Wallpaper = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.WallpaperSettings = Ref(decode_TL_wallPaperSettings(m).(TL_wallPaperSettings))
	}
	return tl
}

func decode_TL_themeSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_themeSettings)
	return decode_body_TL_themeSettings(m)
}
func decode_body_TL_themeSettings(m *DecodeBuf) TL {
	tl := TL_themeSettings{}
	flags := m.Int()
	tl.MessageColorsAnimated = flags&(1<<2) != 0
	tl.BaseTheme = m.Object()
	tl.AccentColor = m.Int()
	if flags&(1<<3) != 0 {
		tl.OutboxAccentColor = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.MessageColors = m.VectorInt()
	}
	if flags&(1<<1) != 0 {
		tl.Wallpaper = m.Object()
	}
	return tl
}

func decode_TL_webPageAttributeTheme(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webPageAttributeTheme)
	return decode_body_TL_webPageAttributeTheme(m)
}
func decode_body_TL_webPageAttributeTheme(m *DecodeBuf) TL {
	tl := TL_webPageAttributeTheme{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Documents = m.Vector()
	}
	if flags&(1<<1) != 0 {
		tl.Settings = Ref(decode_TL_themeSettings(m).(TL_themeSettings))
	}
	return tl
}

func decode_TL_webPageAttributeStory(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webPageAttributeStory)
	return decode_body_TL_webPageAttributeStory(m)
}
func decode_body_TL_webPageAttributeStory(m *DecodeBuf) TL {
	tl := TL_webPageAttributeStory{}
	flags := m.Int()
	tl.Peer = m.Object()
	tl.ID = m.Int()
	if flags&(1<<0) != 0 {
		tl.Story = m.Object()
	}
	return tl
}

func decode_TL_webPageAttributeStickerSet(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webPageAttributeStickerSet)
	return decode_body_TL_webPageAttributeStickerSet(m)
}
func decode_body_TL_webPageAttributeStickerSet(m *DecodeBuf) TL {
	tl := TL_webPageAttributeStickerSet{}
	flags := m.Int()
	tl.Emojis = flags&(1<<0) != 0
	tl.TextColor = flags&(1<<1) != 0
	tl.Stickers = m.Vector()
	return tl
}

func decode_TL_messages_votesList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_votesList)
	return decode_body_TL_messages_votesList(m)
}
func decode_body_TL_messages_votesList(m *DecodeBuf) TL {
	tl := TL_messages_votesList{}
	flags := m.Int()
	tl.Count = m.Int()
	tl.Votes = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	if flags&(1<<0) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	return tl
}

func decode_TL_bankCardOpenURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_bankCardOpenURL)
	return decode_body_TL_bankCardOpenURL(m)
}
func decode_body_TL_bankCardOpenURL(m *DecodeBuf) TL {
	tl := TL_bankCardOpenURL{}
	tl.URL = m.String()
	tl.Name = m.String()
	return tl
}

func decode_TL_payments_bankCardData(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_bankCardData)
	return decode_body_TL_payments_bankCardData(m)
}
func decode_body_TL_payments_bankCardData(m *DecodeBuf) TL {
	tl := TL_payments_bankCardData{}
	tl.Title = m.String()
	tl.OpenURLs = DecodeBuf_GenericVector[TL_bankCardOpenURL](m)
	return tl
}

func decode_TL_dialogFilter(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dialogFilter)
	return decode_body_TL_dialogFilter(m)
}
func decode_body_TL_dialogFilter(m *DecodeBuf) TL {
	tl := TL_dialogFilter{}
	flags := m.Int()
	tl.Contacts = flags&(1<<0) != 0
	tl.NonContacts = flags&(1<<1) != 0
	tl.Groups = flags&(1<<2) != 0
	tl.Broadcasts = flags&(1<<3) != 0
	tl.Bots = flags&(1<<4) != 0
	tl.ExcludeMuted = flags&(1<<11) != 0
	tl.ExcludeRead = flags&(1<<12) != 0
	tl.ExcludeArchived = flags&(1<<13) != 0
	tl.ID = m.Int()
	tl.Title = m.String()
	if flags&(1<<25) != 0 {
		tl.Emoticon = Ref(m.String())
	}
	if flags&(1<<27) != 0 {
		tl.Color = Ref(m.Int())
	}
	tl.PinnedPeers = m.Vector()
	tl.IncludePeers = m.Vector()
	tl.ExcludePeers = m.Vector()
	return tl
}

func decode_TL_dialogFilterDefault(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dialogFilterDefault)
	return decode_body_TL_dialogFilterDefault(m)
}
func decode_body_TL_dialogFilterDefault(_ *DecodeBuf) TL {
	tl := TL_dialogFilterDefault{}
	return tl
}

func decode_TL_dialogFilterChatlist(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dialogFilterChatlist)
	return decode_body_TL_dialogFilterChatlist(m)
}
func decode_body_TL_dialogFilterChatlist(m *DecodeBuf) TL {
	tl := TL_dialogFilterChatlist{}
	flags := m.Int()
	tl.HasMyInvites = flags&(1<<26) != 0
	tl.ID = m.Int()
	tl.Title = m.String()
	if flags&(1<<25) != 0 {
		tl.Emoticon = Ref(m.String())
	}
	if flags&(1<<27) != 0 {
		tl.Color = Ref(m.Int())
	}
	tl.PinnedPeers = m.Vector()
	tl.IncludePeers = m.Vector()
	return tl
}

func decode_TL_dialogFilterSuggested(m *DecodeBuf) TL {
	m.constructorAssert(CRC_dialogFilterSuggested)
	return decode_body_TL_dialogFilterSuggested(m)
}
func decode_body_TL_dialogFilterSuggested(m *DecodeBuf) TL {
	tl := TL_dialogFilterSuggested{}
	tl.Filter = m.Object()
	tl.Description = m.String()
	return tl
}

func decode_TL_statsDateRangeDays(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsDateRangeDays)
	return decode_body_TL_statsDateRangeDays(m)
}
func decode_body_TL_statsDateRangeDays(m *DecodeBuf) TL {
	tl := TL_statsDateRangeDays{}
	tl.MinDate = m.Int()
	tl.MaxDate = m.Int()
	return tl
}

func decode_TL_statsAbsValueAndPrev(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsAbsValueAndPrev)
	return decode_body_TL_statsAbsValueAndPrev(m)
}
func decode_body_TL_statsAbsValueAndPrev(m *DecodeBuf) TL {
	tl := TL_statsAbsValueAndPrev{}
	tl.Current = m.Double()
	tl.Previous = m.Double()
	return tl
}

func decode_TL_statsPercentValue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsPercentValue)
	return decode_body_TL_statsPercentValue(m)
}
func decode_body_TL_statsPercentValue(m *DecodeBuf) TL {
	tl := TL_statsPercentValue{}
	tl.Part = m.Double()
	tl.Total = m.Double()
	return tl
}

func decode_TL_statsGraphAsync(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsGraphAsync)
	return decode_body_TL_statsGraphAsync(m)
}
func decode_body_TL_statsGraphAsync(m *DecodeBuf) TL {
	tl := TL_statsGraphAsync{}
	tl.Token = m.String()
	return tl
}

func decode_TL_statsGraphError(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsGraphError)
	return decode_body_TL_statsGraphError(m)
}
func decode_body_TL_statsGraphError(m *DecodeBuf) TL {
	tl := TL_statsGraphError{}
	tl.Error = m.String()
	return tl
}

func decode_TL_statsGraph(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsGraph)
	return decode_body_TL_statsGraph(m)
}
func decode_body_TL_statsGraph(m *DecodeBuf) TL {
	tl := TL_statsGraph{}
	flags := m.Int()
	tl.JSON = decode_TL_dataJSON(m).(TL_dataJSON)
	if flags&(1<<0) != 0 {
		tl.ZoomToken = Ref(m.String())
	}
	return tl
}

func decode_TL_stats_broadcastStats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stats_broadcastStats)
	return decode_body_TL_stats_broadcastStats(m)
}
func decode_body_TL_stats_broadcastStats(m *DecodeBuf) TL {
	tl := TL_stats_broadcastStats{}
	tl.Period = decode_TL_statsDateRangeDays(m).(TL_statsDateRangeDays)
	tl.Followers = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.ViewsPerPost = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.SharesPerPost = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.ReactionsPerPost = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.ViewsPerStory = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.SharesPerStory = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.ReactionsPerStory = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.EnabledNotifications = decode_TL_statsPercentValue(m).(TL_statsPercentValue)
	tl.GrowthGraph = m.Object()
	tl.FollowersGraph = m.Object()
	tl.MuteGraph = m.Object()
	tl.TopHoursGraph = m.Object()
	tl.InteractionsGraph = m.Object()
	tl.IVInteractionsGraph = m.Object()
	tl.ViewsBySourceGraph = m.Object()
	tl.NewFollowersBySourceGraph = m.Object()
	tl.LanguagesGraph = m.Object()
	tl.ReactionsByEmotionGraph = m.Object()
	tl.StoryInteractionsGraph = m.Object()
	tl.StoryReactionsByEmotionGraph = m.Object()
	tl.RecentPostsInteractions = m.Vector()
	return tl
}

func decode_TL_help_promoDataEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_promoDataEmpty)
	return decode_body_TL_help_promoDataEmpty(m)
}
func decode_body_TL_help_promoDataEmpty(m *DecodeBuf) TL {
	tl := TL_help_promoDataEmpty{}
	tl.Expires = m.Int()
	return tl
}

func decode_TL_help_promoData(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_promoData)
	return decode_body_TL_help_promoData(m)
}
func decode_body_TL_help_promoData(m *DecodeBuf) TL {
	tl := TL_help_promoData{}
	flags := m.Int()
	tl.Proxy = flags&(1<<0) != 0
	tl.Expires = m.Int()
	tl.Peer = m.Object()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	if flags&(1<<1) != 0 {
		tl.PSAType = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.PSAMessage = Ref(m.String())
	}
	return tl
}

func decode_TL_videoSize(m *DecodeBuf) TL {
	m.constructorAssert(CRC_videoSize)
	return decode_body_TL_videoSize(m)
}
func decode_body_TL_videoSize(m *DecodeBuf) TL {
	tl := TL_videoSize{}
	flags := m.Int()
	tl.Type = m.String()
	tl.W = m.Int()
	tl.H = m.Int()
	tl.Size = m.Int()
	if flags&(1<<0) != 0 {
		tl.VideoStartTS = Ref(m.Double())
	}
	return tl
}

func decode_TL_videoSizeEmojiMarkup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_videoSizeEmojiMarkup)
	return decode_body_TL_videoSizeEmojiMarkup(m)
}
func decode_body_TL_videoSizeEmojiMarkup(m *DecodeBuf) TL {
	tl := TL_videoSizeEmojiMarkup{}
	tl.EmojiID = m.Long()
	tl.BackgroundColors = m.VectorInt()
	return tl
}

func decode_TL_videoSizeStickerMarkup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_videoSizeStickerMarkup)
	return decode_body_TL_videoSizeStickerMarkup(m)
}
func decode_body_TL_videoSizeStickerMarkup(m *DecodeBuf) TL {
	tl := TL_videoSizeStickerMarkup{}
	tl.Stickerset = m.Object()
	tl.StickerID = m.Long()
	tl.BackgroundColors = m.VectorInt()
	return tl
}

func decode_TL_statsGroupTopPoster(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsGroupTopPoster)
	return decode_body_TL_statsGroupTopPoster(m)
}
func decode_body_TL_statsGroupTopPoster(m *DecodeBuf) TL {
	tl := TL_statsGroupTopPoster{}
	tl.UserID = m.Long()
	tl.Messages = m.Int()
	tl.AvgChars = m.Int()
	return tl
}

func decode_TL_statsGroupTopAdmin(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsGroupTopAdmin)
	return decode_body_TL_statsGroupTopAdmin(m)
}
func decode_body_TL_statsGroupTopAdmin(m *DecodeBuf) TL {
	tl := TL_statsGroupTopAdmin{}
	tl.UserID = m.Long()
	tl.Deleted = m.Int()
	tl.Kicked = m.Int()
	tl.Banned = m.Int()
	return tl
}

func decode_TL_statsGroupTopInviter(m *DecodeBuf) TL {
	m.constructorAssert(CRC_statsGroupTopInviter)
	return decode_body_TL_statsGroupTopInviter(m)
}
func decode_body_TL_statsGroupTopInviter(m *DecodeBuf) TL {
	tl := TL_statsGroupTopInviter{}
	tl.UserID = m.Long()
	tl.Invitations = m.Int()
	return tl
}

func decode_TL_stats_megagroupStats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stats_megagroupStats)
	return decode_body_TL_stats_megagroupStats(m)
}
func decode_body_TL_stats_megagroupStats(m *DecodeBuf) TL {
	tl := TL_stats_megagroupStats{}
	tl.Period = decode_TL_statsDateRangeDays(m).(TL_statsDateRangeDays)
	tl.Members = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.Messages = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.Viewers = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.Posters = decode_TL_statsAbsValueAndPrev(m).(TL_statsAbsValueAndPrev)
	tl.GrowthGraph = m.Object()
	tl.MembersGraph = m.Object()
	tl.NewMembersBySourceGraph = m.Object()
	tl.LanguagesGraph = m.Object()
	tl.MessagesGraph = m.Object()
	tl.ActionsGraph = m.Object()
	tl.TopHoursGraph = m.Object()
	tl.WeekdaysGraph = m.Object()
	tl.TopPosters = DecodeBuf_GenericVector[TL_statsGroupTopPoster](m)
	tl.TopAdmins = DecodeBuf_GenericVector[TL_statsGroupTopAdmin](m)
	tl.TopInviters = DecodeBuf_GenericVector[TL_statsGroupTopInviter](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_globalPrivacySettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_globalPrivacySettings)
	return decode_body_TL_globalPrivacySettings(m)
}
func decode_body_TL_globalPrivacySettings(m *DecodeBuf) TL {
	tl := TL_globalPrivacySettings{}
	flags := m.Int()
	tl.ArchiveAndMuteNewNoncontactPeers = flags&(1<<0) != 0
	tl.KeepArchivedUnmuted = flags&(1<<1) != 0
	tl.KeepArchivedFolders = flags&(1<<2) != 0
	tl.HideReadMarks = flags&(1<<3) != 0
	tl.NewNoncontactPeersRequirePremium = flags&(1<<4) != 0
	return tl
}

func decode_TL_help_countryCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_countryCode)
	return decode_body_TL_help_countryCode(m)
}
func decode_body_TL_help_countryCode(m *DecodeBuf) TL {
	tl := TL_help_countryCode{}
	flags := m.Int()
	tl.CountryCode = m.String()
	if flags&(1<<0) != 0 {
		tl.Prefixes = m.VectorString()
	}
	if flags&(1<<1) != 0 {
		tl.Patterns = m.VectorString()
	}
	return tl
}

func decode_TL_help_country(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_country)
	return decode_body_TL_help_country(m)
}
func decode_body_TL_help_country(m *DecodeBuf) TL {
	tl := TL_help_country{}
	flags := m.Int()
	tl.Hidden = flags&(1<<0) != 0
	tl.ISO2 = m.String()
	tl.DefaultName = m.String()
	if flags&(1<<1) != 0 {
		tl.Name = Ref(m.String())
	}
	tl.CountryCodes = DecodeBuf_GenericVector[TL_help_countryCode](m)
	return tl
}

func decode_TL_help_countriesListNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_countriesListNotModified)
	return decode_body_TL_help_countriesListNotModified(m)
}
func decode_body_TL_help_countriesListNotModified(_ *DecodeBuf) TL {
	tl := TL_help_countriesListNotModified{}
	return tl
}

func decode_TL_help_countriesList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_countriesList)
	return decode_body_TL_help_countriesList(m)
}
func decode_body_TL_help_countriesList(m *DecodeBuf) TL {
	tl := TL_help_countriesList{}
	tl.Countries = DecodeBuf_GenericVector[TL_help_country](m)
	tl.Hash = m.Int()
	return tl
}

func decode_TL_messageViews(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageViews)
	return decode_body_TL_messageViews(m)
}
func decode_body_TL_messageViews(m *DecodeBuf) TL {
	tl := TL_messageViews{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Views = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.Forwards = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.Replies = Ref(decode_TL_messageReplies(m).(TL_messageReplies))
	}
	return tl
}

func decode_TL_messages_messageViews(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_messageViews)
	return decode_body_TL_messages_messageViews(m)
}
func decode_body_TL_messages_messageViews(m *DecodeBuf) TL {
	tl := TL_messages_messageViews{}
	tl.Views = DecodeBuf_GenericVector[TL_messageViews](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_discussionMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_discussionMessage)
	return decode_body_TL_messages_discussionMessage(m)
}
func decode_body_TL_messages_discussionMessage(m *DecodeBuf) TL {
	tl := TL_messages_discussionMessage{}
	flags := m.Int()
	tl.Messages = m.Vector()
	if flags&(1<<0) != 0 {
		tl.MaxID = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.ReadInboxMaxID = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.ReadOutboxMaxID = Ref(m.Int())
	}
	tl.UnreadCount = m.Int()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messageReplyHeader(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageReplyHeader)
	return decode_body_TL_messageReplyHeader(m)
}
func decode_body_TL_messageReplyHeader(m *DecodeBuf) TL {
	tl := TL_messageReplyHeader{}
	flags := m.Int()
	tl.ReplyToScheduled = flags&(1<<2) != 0
	tl.ForumTopic = flags&(1<<3) != 0
	tl.Quote = flags&(1<<9) != 0
	if flags&(1<<4) != 0 {
		tl.ReplyToMsgID = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.ReplyToPeerID = m.Object()
	}
	if flags&(1<<5) != 0 {
		tl.ReplyFrom = Ref(decode_TL_messageFwdHeader(m).(TL_messageFwdHeader))
	}
	if flags&(1<<8) != 0 {
		tl.ReplyMedia = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.ReplyToTopID = Ref(m.Int())
	}
	if flags&(1<<6) != 0 {
		tl.QuoteText = Ref(m.String())
	}
	if flags&(1<<7) != 0 {
		tl.QuoteEntities = m.Vector()
	}
	if flags&(1<<10) != 0 {
		tl.QuoteOffset = Ref(m.Int())
	}
	return tl
}

func decode_TL_messageReplyStoryHeader(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageReplyStoryHeader)
	return decode_body_TL_messageReplyStoryHeader(m)
}
func decode_body_TL_messageReplyStoryHeader(m *DecodeBuf) TL {
	tl := TL_messageReplyStoryHeader{}
	tl.Peer = m.Object()
	tl.StoryID = m.Int()
	return tl
}

func decode_TL_messageReplies(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageReplies)
	return decode_body_TL_messageReplies(m)
}
func decode_body_TL_messageReplies(m *DecodeBuf) TL {
	tl := TL_messageReplies{}
	flags := m.Int()
	tl.Comments = flags&(1<<0) != 0
	tl.Replies = m.Int()
	tl.RepliesPTS = m.Int()
	if flags&(1<<1) != 0 {
		tl.RecentRepliers = m.Vector()
	}
	if flags&(1<<0) != 0 {
		tl.ChannelID = Ref(m.Long())
	}
	if flags&(1<<2) != 0 {
		tl.MaxID = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.ReadMaxID = Ref(m.Int())
	}
	return tl
}

func decode_TL_peerBlocked(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerBlocked)
	return decode_body_TL_peerBlocked(m)
}
func decode_body_TL_peerBlocked(m *DecodeBuf) TL {
	tl := TL_peerBlocked{}
	tl.PeerID = m.Object()
	tl.Date = m.Int()
	return tl
}

func decode_TL_stats_messageStats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stats_messageStats)
	return decode_body_TL_stats_messageStats(m)
}
func decode_body_TL_stats_messageStats(m *DecodeBuf) TL {
	tl := TL_stats_messageStats{}
	tl.ViewsGraph = m.Object()
	tl.ReactionsByEmotionGraph = m.Object()
	return tl
}

func decode_TL_groupCallDiscarded(m *DecodeBuf) TL {
	m.constructorAssert(CRC_groupCallDiscarded)
	return decode_body_TL_groupCallDiscarded(m)
}
func decode_body_TL_groupCallDiscarded(m *DecodeBuf) TL {
	tl := TL_groupCallDiscarded{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.Duration = m.Int()
	return tl
}

func decode_TL_groupCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_groupCall)
	return decode_body_TL_groupCall(m)
}
func decode_body_TL_groupCall(m *DecodeBuf) TL {
	tl := TL_groupCall{}
	flags := m.Int()
	tl.JoinMuted = flags&(1<<1) != 0
	tl.CanChangeJoinMuted = flags&(1<<2) != 0
	tl.JoinDateAsc = flags&(1<<6) != 0
	tl.ScheduleStartSubscribed = flags&(1<<8) != 0
	tl.CanStartVideo = flags&(1<<9) != 0
	tl.RecordVideoActive = flags&(1<<11) != 0
	tl.RTMPStream = flags&(1<<12) != 0
	tl.ListenersHidden = flags&(1<<13) != 0
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.ParticipantsCount = m.Int()
	if flags&(1<<3) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.StreamDCID = Ref(m.Int())
	}
	if flags&(1<<5) != 0 {
		tl.RecordStartDate = Ref(m.Int())
	}
	if flags&(1<<7) != 0 {
		tl.ScheduleDate = Ref(m.Int())
	}
	if flags&(1<<10) != 0 {
		tl.UnmutedVideoCount = Ref(m.Int())
	}
	tl.UnmutedVideoLimit = m.Int()
	tl.Version = m.Int()
	return tl
}

func decode_TL_inputGroupCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputGroupCall)
	return decode_body_TL_inputGroupCall(m)
}
func decode_body_TL_inputGroupCall(m *DecodeBuf) TL {
	tl := TL_inputGroupCall{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_groupCallParticipant(m *DecodeBuf) TL {
	m.constructorAssert(CRC_groupCallParticipant)
	return decode_body_TL_groupCallParticipant(m)
}
func decode_body_TL_groupCallParticipant(m *DecodeBuf) TL {
	tl := TL_groupCallParticipant{}
	flags := m.Int()
	tl.Muted = flags&(1<<0) != 0
	tl.Left = flags&(1<<1) != 0
	tl.CanSelfUnmute = flags&(1<<2) != 0
	tl.JustJoined = flags&(1<<4) != 0
	tl.Versioned = flags&(1<<5) != 0
	tl.Min = flags&(1<<8) != 0
	tl.MutedByYou = flags&(1<<9) != 0
	tl.VolumeByAdmin = flags&(1<<10) != 0
	tl.Self = flags&(1<<12) != 0
	tl.VideoJoined = flags&(1<<15) != 0
	tl.Peer = m.Object()
	tl.Date = m.Int()
	if flags&(1<<3) != 0 {
		tl.ActiveDate = Ref(m.Int())
	}
	tl.Source = m.Int()
	if flags&(1<<7) != 0 {
		tl.Volume = Ref(m.Int())
	}
	if flags&(1<<11) != 0 {
		tl.About = Ref(m.String())
	}
	if flags&(1<<13) != 0 {
		tl.RaiseHandRating = Ref(m.Long())
	}
	if flags&(1<<6) != 0 {
		tl.Video = Ref(decode_TL_groupCallParticipantVideo(m).(TL_groupCallParticipantVideo))
	}
	if flags&(1<<14) != 0 {
		tl.Presentation = Ref(decode_TL_groupCallParticipantVideo(m).(TL_groupCallParticipantVideo))
	}
	return tl
}

func decode_TL_phone_groupCall(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phone_groupCall)
	return decode_body_TL_phone_groupCall(m)
}
func decode_body_TL_phone_groupCall(m *DecodeBuf) TL {
	tl := TL_phone_groupCall{}
	tl.Call = m.Object()
	tl.Participants = DecodeBuf_GenericVector[TL_groupCallParticipant](m)
	tl.ParticipantsNextOffset = m.String()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_phone_groupParticipants(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phone_groupParticipants)
	return decode_body_TL_phone_groupParticipants(m)
}
func decode_body_TL_phone_groupParticipants(m *DecodeBuf) TL {
	tl := TL_phone_groupParticipants{}
	tl.Count = m.Int()
	tl.Participants = DecodeBuf_GenericVector[TL_groupCallParticipant](m)
	tl.NextOffset = m.String()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	tl.Version = m.Int()
	return tl
}

func decode_TL_inlineQueryPeerTypeSameBotPM(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inlineQueryPeerTypeSameBotPM)
	return decode_body_TL_inlineQueryPeerTypeSameBotPM(m)
}
func decode_body_TL_inlineQueryPeerTypeSameBotPM(_ *DecodeBuf) TL {
	tl := TL_inlineQueryPeerTypeSameBotPM{}
	return tl
}

func decode_TL_inlineQueryPeerTypePM(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inlineQueryPeerTypePM)
	return decode_body_TL_inlineQueryPeerTypePM(m)
}
func decode_body_TL_inlineQueryPeerTypePM(_ *DecodeBuf) TL {
	tl := TL_inlineQueryPeerTypePM{}
	return tl
}

func decode_TL_inlineQueryPeerTypeChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inlineQueryPeerTypeChat)
	return decode_body_TL_inlineQueryPeerTypeChat(m)
}
func decode_body_TL_inlineQueryPeerTypeChat(_ *DecodeBuf) TL {
	tl := TL_inlineQueryPeerTypeChat{}
	return tl
}

func decode_TL_inlineQueryPeerTypeMegagroup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inlineQueryPeerTypeMegagroup)
	return decode_body_TL_inlineQueryPeerTypeMegagroup(m)
}
func decode_body_TL_inlineQueryPeerTypeMegagroup(_ *DecodeBuf) TL {
	tl := TL_inlineQueryPeerTypeMegagroup{}
	return tl
}

func decode_TL_inlineQueryPeerTypeBroadcast(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inlineQueryPeerTypeBroadcast)
	return decode_body_TL_inlineQueryPeerTypeBroadcast(m)
}
func decode_body_TL_inlineQueryPeerTypeBroadcast(_ *DecodeBuf) TL {
	tl := TL_inlineQueryPeerTypeBroadcast{}
	return tl
}

func decode_TL_inlineQueryPeerTypeBotPM(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inlineQueryPeerTypeBotPM)
	return decode_body_TL_inlineQueryPeerTypeBotPM(m)
}
func decode_body_TL_inlineQueryPeerTypeBotPM(_ *DecodeBuf) TL {
	tl := TL_inlineQueryPeerTypeBotPM{}
	return tl
}

func decode_TL_messages_historyImport(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_historyImport)
	return decode_body_TL_messages_historyImport(m)
}
func decode_body_TL_messages_historyImport(m *DecodeBuf) TL {
	tl := TL_messages_historyImport{}
	tl.ID = m.Long()
	return tl
}

func decode_TL_messages_historyImportParsed(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_historyImportParsed)
	return decode_body_TL_messages_historyImportParsed(m)
}
func decode_body_TL_messages_historyImportParsed(m *DecodeBuf) TL {
	tl := TL_messages_historyImportParsed{}
	flags := m.Int()
	tl.PM = flags&(1<<0) != 0
	tl.Group = flags&(1<<1) != 0
	if flags&(1<<2) != 0 {
		tl.Title = Ref(m.String())
	}
	return tl
}

func decode_TL_messages_affectedFoundMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_affectedFoundMessages)
	return decode_body_TL_messages_affectedFoundMessages(m)
}
func decode_body_TL_messages_affectedFoundMessages(m *DecodeBuf) TL {
	tl := TL_messages_affectedFoundMessages{}
	tl.PTS = m.Int()
	tl.PTSCount = m.Int()
	tl.Offset = m.Int()
	tl.Messages = m.VectorInt()
	return tl
}

func decode_TL_chatInviteImporter(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatInviteImporter)
	return decode_body_TL_chatInviteImporter(m)
}
func decode_body_TL_chatInviteImporter(m *DecodeBuf) TL {
	tl := TL_chatInviteImporter{}
	flags := m.Int()
	tl.Requested = flags&(1<<0) != 0
	tl.ViaChatlist = flags&(1<<3) != 0
	tl.UserID = m.Long()
	tl.Date = m.Int()
	if flags&(1<<2) != 0 {
		tl.About = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.ApprovedBy = Ref(m.Long())
	}
	return tl
}

func decode_TL_messages_exportedChatInvites(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_exportedChatInvites)
	return decode_body_TL_messages_exportedChatInvites(m)
}
func decode_body_TL_messages_exportedChatInvites(m *DecodeBuf) TL {
	tl := TL_messages_exportedChatInvites{}
	tl.Count = m.Int()
	tl.Invites = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_exportedChatInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_exportedChatInvite)
	return decode_body_TL_messages_exportedChatInvite(m)
}
func decode_body_TL_messages_exportedChatInvite(m *DecodeBuf) TL {
	tl := TL_messages_exportedChatInvite{}
	tl.Invite = m.Object()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_exportedChatInviteReplaced(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_exportedChatInviteReplaced)
	return decode_body_TL_messages_exportedChatInviteReplaced(m)
}
func decode_body_TL_messages_exportedChatInviteReplaced(m *DecodeBuf) TL {
	tl := TL_messages_exportedChatInviteReplaced{}
	tl.Invite = m.Object()
	tl.NewInvite = m.Object()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_chatInviteImporters(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_chatInviteImporters)
	return decode_body_TL_messages_chatInviteImporters(m)
}
func decode_body_TL_messages_chatInviteImporters(m *DecodeBuf) TL {
	tl := TL_messages_chatInviteImporters{}
	tl.Count = m.Int()
	tl.Importers = DecodeBuf_GenericVector[TL_chatInviteImporter](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_chatAdminWithInvites(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatAdminWithInvites)
	return decode_body_TL_chatAdminWithInvites(m)
}
func decode_body_TL_chatAdminWithInvites(m *DecodeBuf) TL {
	tl := TL_chatAdminWithInvites{}
	tl.AdminID = m.Long()
	tl.InvitesCount = m.Int()
	tl.RevokedInvitesCount = m.Int()
	return tl
}

func decode_TL_messages_chatAdminsWithInvites(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_chatAdminsWithInvites)
	return decode_body_TL_messages_chatAdminsWithInvites(m)
}
func decode_body_TL_messages_chatAdminsWithInvites(m *DecodeBuf) TL {
	tl := TL_messages_chatAdminsWithInvites{}
	tl.Admins = DecodeBuf_GenericVector[TL_chatAdminWithInvites](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_checkedHistoryImportPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_checkedHistoryImportPeer)
	return decode_body_TL_messages_checkedHistoryImportPeer(m)
}
func decode_body_TL_messages_checkedHistoryImportPeer(m *DecodeBuf) TL {
	tl := TL_messages_checkedHistoryImportPeer{}
	tl.ConfirmText = m.String()
	return tl
}

func decode_TL_phone_joinAsPeers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phone_joinAsPeers)
	return decode_body_TL_phone_joinAsPeers(m)
}
func decode_body_TL_phone_joinAsPeers(m *DecodeBuf) TL {
	tl := TL_phone_joinAsPeers{}
	tl.Peers = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_phone_exportedGroupCallInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phone_exportedGroupCallInvite)
	return decode_body_TL_phone_exportedGroupCallInvite(m)
}
func decode_body_TL_phone_exportedGroupCallInvite(m *DecodeBuf) TL {
	tl := TL_phone_exportedGroupCallInvite{}
	tl.Link = m.String()
	return tl
}

func decode_TL_groupCallParticipantVideoSourceGroup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_groupCallParticipantVideoSourceGroup)
	return decode_body_TL_groupCallParticipantVideoSourceGroup(m)
}
func decode_body_TL_groupCallParticipantVideoSourceGroup(m *DecodeBuf) TL {
	tl := TL_groupCallParticipantVideoSourceGroup{}
	tl.Semantics = m.String()
	tl.Sources = m.VectorInt()
	return tl
}

func decode_TL_groupCallParticipantVideo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_groupCallParticipantVideo)
	return decode_body_TL_groupCallParticipantVideo(m)
}
func decode_body_TL_groupCallParticipantVideo(m *DecodeBuf) TL {
	tl := TL_groupCallParticipantVideo{}
	flags := m.Int()
	tl.Paused = flags&(1<<0) != 0
	tl.Endpoint = m.String()
	tl.SourceGroups = DecodeBuf_GenericVector[TL_groupCallParticipantVideoSourceGroup](m)
	if flags&(1<<1) != 0 {
		tl.AudioSource = Ref(m.Int())
	}
	return tl
}

func decode_TL_stickers_suggestedShortName(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stickers_suggestedShortName)
	return decode_body_TL_stickers_suggestedShortName(m)
}
func decode_body_TL_stickers_suggestedShortName(m *DecodeBuf) TL {
	tl := TL_stickers_suggestedShortName{}
	tl.ShortName = m.String()
	return tl
}

func decode_TL_botCommandScopeDefault(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botCommandScopeDefault)
	return decode_body_TL_botCommandScopeDefault(m)
}
func decode_body_TL_botCommandScopeDefault(_ *DecodeBuf) TL {
	tl := TL_botCommandScopeDefault{}
	return tl
}

func decode_TL_botCommandScopeUsers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botCommandScopeUsers)
	return decode_body_TL_botCommandScopeUsers(m)
}
func decode_body_TL_botCommandScopeUsers(_ *DecodeBuf) TL {
	tl := TL_botCommandScopeUsers{}
	return tl
}

func decode_TL_botCommandScopeChats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botCommandScopeChats)
	return decode_body_TL_botCommandScopeChats(m)
}
func decode_body_TL_botCommandScopeChats(_ *DecodeBuf) TL {
	tl := TL_botCommandScopeChats{}
	return tl
}

func decode_TL_botCommandScopeChatAdmins(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botCommandScopeChatAdmins)
	return decode_body_TL_botCommandScopeChatAdmins(m)
}
func decode_body_TL_botCommandScopeChatAdmins(_ *DecodeBuf) TL {
	tl := TL_botCommandScopeChatAdmins{}
	return tl
}

func decode_TL_botCommandScopePeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botCommandScopePeer)
	return decode_body_TL_botCommandScopePeer(m)
}
func decode_body_TL_botCommandScopePeer(m *DecodeBuf) TL {
	tl := TL_botCommandScopePeer{}
	tl.Peer = m.Object()
	return tl
}

func decode_TL_botCommandScopePeerAdmins(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botCommandScopePeerAdmins)
	return decode_body_TL_botCommandScopePeerAdmins(m)
}
func decode_body_TL_botCommandScopePeerAdmins(m *DecodeBuf) TL {
	tl := TL_botCommandScopePeerAdmins{}
	tl.Peer = m.Object()
	return tl
}

func decode_TL_botCommandScopePeerUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botCommandScopePeerUser)
	return decode_body_TL_botCommandScopePeerUser(m)
}
func decode_body_TL_botCommandScopePeerUser(m *DecodeBuf) TL {
	tl := TL_botCommandScopePeerUser{}
	tl.Peer = m.Object()
	tl.UserID = m.Object()
	return tl
}

func decode_TL_account_resetPasswordFailedWait(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_resetPasswordFailedWait)
	return decode_body_TL_account_resetPasswordFailedWait(m)
}
func decode_body_TL_account_resetPasswordFailedWait(m *DecodeBuf) TL {
	tl := TL_account_resetPasswordFailedWait{}
	tl.RetryDate = m.Int()
	return tl
}

func decode_TL_account_resetPasswordRequestedWait(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_resetPasswordRequestedWait)
	return decode_body_TL_account_resetPasswordRequestedWait(m)
}
func decode_body_TL_account_resetPasswordRequestedWait(m *DecodeBuf) TL {
	tl := TL_account_resetPasswordRequestedWait{}
	tl.UntilDate = m.Int()
	return tl
}

func decode_TL_account_resetPasswordOK(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_resetPasswordOK)
	return decode_body_TL_account_resetPasswordOK(m)
}
func decode_body_TL_account_resetPasswordOK(_ *DecodeBuf) TL {
	tl := TL_account_resetPasswordOK{}
	return tl
}

func decode_TL_sponsoredMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sponsoredMessage)
	return decode_body_TL_sponsoredMessage(m)
}
func decode_body_TL_sponsoredMessage(m *DecodeBuf) TL {
	tl := TL_sponsoredMessage{}
	flags := m.Int()
	tl.Recommended = flags&(1<<5) != 0
	tl.CanReport = flags&(1<<12) != 0
	tl.RandomID = m.StringBytes()
	tl.URL = m.String()
	tl.Title = m.String()
	tl.Message = m.String()
	if flags&(1<<1) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<6) != 0 {
		tl.Photo = m.Object()
	}
	if flags&(1<<14) != 0 {
		tl.Media = m.Object()
	}
	if flags&(1<<13) != 0 {
		tl.Color = Ref(decode_TL_peerColor(m).(TL_peerColor))
	}
	tl.ButtonText = m.String()
	if flags&(1<<7) != 0 {
		tl.SponsorInfo = Ref(m.String())
	}
	if flags&(1<<8) != 0 {
		tl.AdditionalInfo = Ref(m.String())
	}
	return tl
}

func decode_TL_messages_sponsoredMessages(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_sponsoredMessages)
	return decode_body_TL_messages_sponsoredMessages(m)
}
func decode_body_TL_messages_sponsoredMessages(m *DecodeBuf) TL {
	tl := TL_messages_sponsoredMessages{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.PostsBetween = Ref(m.Int())
	}
	tl.Messages = DecodeBuf_GenericVector[TL_sponsoredMessage](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_sponsoredMessagesEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_sponsoredMessagesEmpty)
	return decode_body_TL_messages_sponsoredMessagesEmpty(m)
}
func decode_body_TL_messages_sponsoredMessagesEmpty(_ *DecodeBuf) TL {
	tl := TL_messages_sponsoredMessagesEmpty{}
	return tl
}

func decode_TL_searchResultsCalendarPeriod(m *DecodeBuf) TL {
	m.constructorAssert(CRC_searchResultsCalendarPeriod)
	return decode_body_TL_searchResultsCalendarPeriod(m)
}
func decode_body_TL_searchResultsCalendarPeriod(m *DecodeBuf) TL {
	tl := TL_searchResultsCalendarPeriod{}
	tl.Date = m.Int()
	tl.MinMsgID = m.Int()
	tl.MaxMsgID = m.Int()
	tl.Count = m.Int()
	return tl
}

func decode_TL_messages_searchResultsCalendar(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_searchResultsCalendar)
	return decode_body_TL_messages_searchResultsCalendar(m)
}
func decode_body_TL_messages_searchResultsCalendar(m *DecodeBuf) TL {
	tl := TL_messages_searchResultsCalendar{}
	flags := m.Int()
	tl.Inexact = flags&(1<<0) != 0
	tl.Count = m.Int()
	tl.MinDate = m.Int()
	tl.MinMsgID = m.Int()
	if flags&(1<<1) != 0 {
		tl.OffsetIDOffset = Ref(m.Int())
	}
	tl.Periods = DecodeBuf_GenericVector[TL_searchResultsCalendarPeriod](m)
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_searchResultPosition(m *DecodeBuf) TL {
	m.constructorAssert(CRC_searchResultPosition)
	return decode_body_TL_searchResultPosition(m)
}
func decode_body_TL_searchResultPosition(m *DecodeBuf) TL {
	tl := TL_searchResultPosition{}
	tl.MsgID = m.Int()
	tl.Date = m.Int()
	tl.Offset = m.Int()
	return tl
}

func decode_TL_messages_searchResultsPositions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_searchResultsPositions)
	return decode_body_TL_messages_searchResultsPositions(m)
}
func decode_body_TL_messages_searchResultsPositions(m *DecodeBuf) TL {
	tl := TL_messages_searchResultsPositions{}
	tl.Count = m.Int()
	tl.Positions = DecodeBuf_GenericVector[TL_searchResultPosition](m)
	return tl
}

func decode_TL_channels_sendAsPeers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channels_sendAsPeers)
	return decode_body_TL_channels_sendAsPeers(m)
}
func decode_body_TL_channels_sendAsPeers(m *DecodeBuf) TL {
	tl := TL_channels_sendAsPeers{}
	tl.Peers = DecodeBuf_GenericVector[TL_sendAsPeer](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_users_userFull(m *DecodeBuf) TL {
	m.constructorAssert(CRC_users_userFull)
	return decode_body_TL_users_userFull(m)
}
func decode_body_TL_users_userFull(m *DecodeBuf) TL {
	tl := TL_users_userFull{}
	tl.FullUser = decode_TL_userFull(m).(TL_userFull)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_peerSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_peerSettings)
	return decode_body_TL_messages_peerSettings(m)
}
func decode_body_TL_messages_peerSettings(m *DecodeBuf) TL {
	tl := TL_messages_peerSettings{}
	tl.Settings = decode_TL_peerSettings(m).(TL_peerSettings)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_auth_loggedOut(m *DecodeBuf) TL {
	m.constructorAssert(CRC_auth_loggedOut)
	return decode_body_TL_auth_loggedOut(m)
}
func decode_body_TL_auth_loggedOut(m *DecodeBuf) TL {
	tl := TL_auth_loggedOut{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.FutureAuthToken = m.StringBytes()
	}
	return tl
}

func decode_TL_reactionCount(m *DecodeBuf) TL {
	m.constructorAssert(CRC_reactionCount)
	return decode_body_TL_reactionCount(m)
}
func decode_body_TL_reactionCount(m *DecodeBuf) TL {
	tl := TL_reactionCount{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.ChosenOrder = Ref(m.Int())
	}
	tl.Reaction = m.Object()
	tl.Count = m.Int()
	return tl
}

func decode_TL_messageReactions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageReactions)
	return decode_body_TL_messageReactions(m)
}
func decode_body_TL_messageReactions(m *DecodeBuf) TL {
	tl := TL_messageReactions{}
	flags := m.Int()
	tl.Min = flags&(1<<0) != 0
	tl.CanSeeList = flags&(1<<2) != 0
	tl.ReactionsAsTags = flags&(1<<3) != 0
	tl.Results = DecodeBuf_GenericVector[TL_reactionCount](m)
	if flags&(1<<1) != 0 {
		tl.RecentReactions = DecodeBuf_GenericVector[TL_messagePeerReaction](m)
	}
	if flags&(1<<4) != 0 {
		tl.TopReactors = DecodeBuf_GenericVector[TL_messageReactor](m)
	}
	return tl
}

func decode_TL_messages_messageReactionsList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_messageReactionsList)
	return decode_body_TL_messages_messageReactionsList(m)
}
func decode_body_TL_messages_messageReactionsList(m *DecodeBuf) TL {
	tl := TL_messages_messageReactionsList{}
	flags := m.Int()
	tl.Count = m.Int()
	tl.Reactions = DecodeBuf_GenericVector[TL_messagePeerReaction](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	if flags&(1<<0) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	return tl
}

func decode_TL_availableReaction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_availableReaction)
	return decode_body_TL_availableReaction(m)
}
func decode_body_TL_availableReaction(m *DecodeBuf) TL {
	tl := TL_availableReaction{}
	flags := m.Int()
	tl.Inactive = flags&(1<<0) != 0
	tl.Premium = flags&(1<<2) != 0
	tl.Reaction = m.String()
	tl.Title = m.String()
	tl.StaticIcon = m.Object()
	tl.AppearAnimation = m.Object()
	tl.SelectAnimation = m.Object()
	tl.ActivateAnimation = m.Object()
	tl.EffectAnimation = m.Object()
	if flags&(1<<1) != 0 {
		tl.AroundAnimation = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.CenterIcon = m.Object()
	}
	return tl
}

func decode_TL_messages_availableReactionsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_availableReactionsNotModified)
	return decode_body_TL_messages_availableReactionsNotModified(m)
}
func decode_body_TL_messages_availableReactionsNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_availableReactionsNotModified{}
	return tl
}

func decode_TL_messages_availableReactions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_availableReactions)
	return decode_body_TL_messages_availableReactions(m)
}
func decode_body_TL_messages_availableReactions(m *DecodeBuf) TL {
	tl := TL_messages_availableReactions{}
	tl.Hash = m.Int()
	tl.Reactions = DecodeBuf_GenericVector[TL_availableReaction](m)
	return tl
}

func decode_TL_messagePeerReaction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messagePeerReaction)
	return decode_body_TL_messagePeerReaction(m)
}
func decode_body_TL_messagePeerReaction(m *DecodeBuf) TL {
	tl := TL_messagePeerReaction{}
	flags := m.Int()
	tl.Big = flags&(1<<0) != 0
	tl.Unread = flags&(1<<1) != 0
	tl.My = flags&(1<<2) != 0
	tl.PeerID = m.Object()
	tl.Date = m.Int()
	tl.Reaction = m.Object()
	return tl
}

func decode_TL_groupCallStreamChannel(m *DecodeBuf) TL {
	m.constructorAssert(CRC_groupCallStreamChannel)
	return decode_body_TL_groupCallStreamChannel(m)
}
func decode_body_TL_groupCallStreamChannel(m *DecodeBuf) TL {
	tl := TL_groupCallStreamChannel{}
	tl.Channel = m.Int()
	tl.Scale = m.Int()
	tl.LastTimestampMS = m.Long()
	return tl
}

func decode_TL_phone_groupCallStreamChannels(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phone_groupCallStreamChannels)
	return decode_body_TL_phone_groupCallStreamChannels(m)
}
func decode_body_TL_phone_groupCallStreamChannels(m *DecodeBuf) TL {
	tl := TL_phone_groupCallStreamChannels{}
	tl.Channels = DecodeBuf_GenericVector[TL_groupCallStreamChannel](m)
	return tl
}

func decode_TL_phone_groupCallStreamRTMPURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_phone_groupCallStreamRTMPURL)
	return decode_body_TL_phone_groupCallStreamRTMPURL(m)
}
func decode_body_TL_phone_groupCallStreamRTMPURL(m *DecodeBuf) TL {
	tl := TL_phone_groupCallStreamRTMPURL{}
	tl.URL = m.String()
	tl.Key = m.String()
	return tl
}

func decode_TL_attachMenuBotIconColor(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuBotIconColor)
	return decode_body_TL_attachMenuBotIconColor(m)
}
func decode_body_TL_attachMenuBotIconColor(m *DecodeBuf) TL {
	tl := TL_attachMenuBotIconColor{}
	tl.Name = m.String()
	tl.Color = m.Int()
	return tl
}

func decode_TL_attachMenuBotIcon(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuBotIcon)
	return decode_body_TL_attachMenuBotIcon(m)
}
func decode_body_TL_attachMenuBotIcon(m *DecodeBuf) TL {
	tl := TL_attachMenuBotIcon{}
	flags := m.Int()
	tl.Name = m.String()
	tl.Icon = m.Object()
	if flags&(1<<0) != 0 {
		tl.Colors = DecodeBuf_GenericVector[TL_attachMenuBotIconColor](m)
	}
	return tl
}

func decode_TL_attachMenuBot(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuBot)
	return decode_body_TL_attachMenuBot(m)
}
func decode_body_TL_attachMenuBot(m *DecodeBuf) TL {
	tl := TL_attachMenuBot{}
	flags := m.Int()
	tl.Inactive = flags&(1<<0) != 0
	tl.HasSettings = flags&(1<<1) != 0
	tl.RequestWriteAccess = flags&(1<<2) != 0
	tl.ShowInAttachMenu = flags&(1<<3) != 0
	tl.ShowInSideMenu = flags&(1<<4) != 0
	tl.SideMenuDisclaimerNeeded = flags&(1<<5) != 0
	tl.BotID = m.Long()
	tl.ShortName = m.String()
	if flags&(1<<3) != 0 {
		tl.PeerTypes = m.Vector()
	}
	tl.Icons = DecodeBuf_GenericVector[TL_attachMenuBotIcon](m)
	return tl
}

func decode_TL_attachMenuBotsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuBotsNotModified)
	return decode_body_TL_attachMenuBotsNotModified(m)
}
func decode_body_TL_attachMenuBotsNotModified(_ *DecodeBuf) TL {
	tl := TL_attachMenuBotsNotModified{}
	return tl
}

func decode_TL_attachMenuBots(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuBots)
	return decode_body_TL_attachMenuBots(m)
}
func decode_body_TL_attachMenuBots(m *DecodeBuf) TL {
	tl := TL_attachMenuBots{}
	tl.Hash = m.Long()
	tl.Bots = DecodeBuf_GenericVector[TL_attachMenuBot](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_attachMenuBotsBot(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuBotsBot)
	return decode_body_TL_attachMenuBotsBot(m)
}
func decode_body_TL_attachMenuBotsBot(m *DecodeBuf) TL {
	tl := TL_attachMenuBotsBot{}
	tl.Bot = decode_TL_attachMenuBot(m).(TL_attachMenuBot)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_webViewResultURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webViewResultURL)
	return decode_body_TL_webViewResultURL(m)
}
func decode_body_TL_webViewResultURL(m *DecodeBuf) TL {
	tl := TL_webViewResultURL{}
	flags := m.Int()
	tl.Fullsize = flags&(1<<1) != 0
	if flags&(1<<0) != 0 {
		tl.QueryID = Ref(m.Long())
	}
	tl.URL = m.String()
	return tl
}

func decode_TL_webViewMessageSent(m *DecodeBuf) TL {
	m.constructorAssert(CRC_webViewMessageSent)
	return decode_body_TL_webViewMessageSent(m)
}
func decode_body_TL_webViewMessageSent(m *DecodeBuf) TL {
	tl := TL_webViewMessageSent{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.MsgID = m.Object()
	}
	return tl
}

func decode_TL_botMenuButtonDefault(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botMenuButtonDefault)
	return decode_body_TL_botMenuButtonDefault(m)
}
func decode_body_TL_botMenuButtonDefault(_ *DecodeBuf) TL {
	tl := TL_botMenuButtonDefault{}
	return tl
}

func decode_TL_botMenuButtonCommands(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botMenuButtonCommands)
	return decode_body_TL_botMenuButtonCommands(m)
}
func decode_body_TL_botMenuButtonCommands(_ *DecodeBuf) TL {
	tl := TL_botMenuButtonCommands{}
	return tl
}

func decode_TL_botMenuButton(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botMenuButton)
	return decode_body_TL_botMenuButton(m)
}
func decode_body_TL_botMenuButton(m *DecodeBuf) TL {
	tl := TL_botMenuButton{}
	tl.Text = m.String()
	tl.URL = m.String()
	return tl
}

func decode_TL_account_savedRingtonesNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_savedRingtonesNotModified)
	return decode_body_TL_account_savedRingtonesNotModified(m)
}
func decode_body_TL_account_savedRingtonesNotModified(_ *DecodeBuf) TL {
	tl := TL_account_savedRingtonesNotModified{}
	return tl
}

func decode_TL_account_savedRingtones(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_savedRingtones)
	return decode_body_TL_account_savedRingtones(m)
}
func decode_body_TL_account_savedRingtones(m *DecodeBuf) TL {
	tl := TL_account_savedRingtones{}
	tl.Hash = m.Long()
	tl.Ringtones = m.Vector()
	return tl
}

func decode_TL_notificationSoundDefault(m *DecodeBuf) TL {
	m.constructorAssert(CRC_notificationSoundDefault)
	return decode_body_TL_notificationSoundDefault(m)
}
func decode_body_TL_notificationSoundDefault(_ *DecodeBuf) TL {
	tl := TL_notificationSoundDefault{}
	return tl
}

func decode_TL_notificationSoundNone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_notificationSoundNone)
	return decode_body_TL_notificationSoundNone(m)
}
func decode_body_TL_notificationSoundNone(_ *DecodeBuf) TL {
	tl := TL_notificationSoundNone{}
	return tl
}

func decode_TL_notificationSoundLocal(m *DecodeBuf) TL {
	m.constructorAssert(CRC_notificationSoundLocal)
	return decode_body_TL_notificationSoundLocal(m)
}
func decode_body_TL_notificationSoundLocal(m *DecodeBuf) TL {
	tl := TL_notificationSoundLocal{}
	tl.Title = m.String()
	tl.Data = m.String()
	return tl
}

func decode_TL_notificationSoundRingtone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_notificationSoundRingtone)
	return decode_body_TL_notificationSoundRingtone(m)
}
func decode_body_TL_notificationSoundRingtone(m *DecodeBuf) TL {
	tl := TL_notificationSoundRingtone{}
	tl.ID = m.Long()
	return tl
}

func decode_TL_account_savedRingtone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_savedRingtone)
	return decode_body_TL_account_savedRingtone(m)
}
func decode_body_TL_account_savedRingtone(_ *DecodeBuf) TL {
	tl := TL_account_savedRingtone{}
	return tl
}

func decode_TL_account_savedRingtoneConverted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_savedRingtoneConverted)
	return decode_body_TL_account_savedRingtoneConverted(m)
}
func decode_body_TL_account_savedRingtoneConverted(m *DecodeBuf) TL {
	tl := TL_account_savedRingtoneConverted{}
	tl.Document = m.Object()
	return tl
}

func decode_TL_attachMenuPeerTypeSameBotPM(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuPeerTypeSameBotPM)
	return decode_body_TL_attachMenuPeerTypeSameBotPM(m)
}
func decode_body_TL_attachMenuPeerTypeSameBotPM(_ *DecodeBuf) TL {
	tl := TL_attachMenuPeerTypeSameBotPM{}
	return tl
}

func decode_TL_attachMenuPeerTypeBotPM(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuPeerTypeBotPM)
	return decode_body_TL_attachMenuPeerTypeBotPM(m)
}
func decode_body_TL_attachMenuPeerTypeBotPM(_ *DecodeBuf) TL {
	tl := TL_attachMenuPeerTypeBotPM{}
	return tl
}

func decode_TL_attachMenuPeerTypePM(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuPeerTypePM)
	return decode_body_TL_attachMenuPeerTypePM(m)
}
func decode_body_TL_attachMenuPeerTypePM(_ *DecodeBuf) TL {
	tl := TL_attachMenuPeerTypePM{}
	return tl
}

func decode_TL_attachMenuPeerTypeChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuPeerTypeChat)
	return decode_body_TL_attachMenuPeerTypeChat(m)
}
func decode_body_TL_attachMenuPeerTypeChat(_ *DecodeBuf) TL {
	tl := TL_attachMenuPeerTypeChat{}
	return tl
}

func decode_TL_attachMenuPeerTypeBroadcast(m *DecodeBuf) TL {
	m.constructorAssert(CRC_attachMenuPeerTypeBroadcast)
	return decode_body_TL_attachMenuPeerTypeBroadcast(m)
}
func decode_body_TL_attachMenuPeerTypeBroadcast(_ *DecodeBuf) TL {
	tl := TL_attachMenuPeerTypeBroadcast{}
	return tl
}

func decode_TL_inputInvoiceMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputInvoiceMessage)
	return decode_body_TL_inputInvoiceMessage(m)
}
func decode_body_TL_inputInvoiceMessage(m *DecodeBuf) TL {
	tl := TL_inputInvoiceMessage{}
	tl.Peer = m.Object()
	tl.MsgID = m.Int()
	return tl
}

func decode_TL_inputInvoiceSlug(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputInvoiceSlug)
	return decode_body_TL_inputInvoiceSlug(m)
}
func decode_body_TL_inputInvoiceSlug(m *DecodeBuf) TL {
	tl := TL_inputInvoiceSlug{}
	tl.Slug = m.String()
	return tl
}

func decode_TL_inputInvoicePremiumGiftCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputInvoicePremiumGiftCode)
	return decode_body_TL_inputInvoicePremiumGiftCode(m)
}
func decode_body_TL_inputInvoicePremiumGiftCode(m *DecodeBuf) TL {
	tl := TL_inputInvoicePremiumGiftCode{}
	tl.Purpose = m.Object()
	tl.Option = decode_TL_premiumGiftCodeOption(m).(TL_premiumGiftCodeOption)
	return tl
}

func decode_TL_inputInvoiceStars(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputInvoiceStars)
	return decode_body_TL_inputInvoiceStars(m)
}
func decode_body_TL_inputInvoiceStars(m *DecodeBuf) TL {
	tl := TL_inputInvoiceStars{}
	tl.Purpose = m.Object()
	return tl
}

func decode_TL_inputInvoiceChatInviteSubscription(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputInvoiceChatInviteSubscription)
	return decode_body_TL_inputInvoiceChatInviteSubscription(m)
}
func decode_body_TL_inputInvoiceChatInviteSubscription(m *DecodeBuf) TL {
	tl := TL_inputInvoiceChatInviteSubscription{}
	tl.Hash = m.String()
	return tl
}

func decode_TL_payments_exportedInvoice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_exportedInvoice)
	return decode_body_TL_payments_exportedInvoice(m)
}
func decode_body_TL_payments_exportedInvoice(m *DecodeBuf) TL {
	tl := TL_payments_exportedInvoice{}
	tl.URL = m.String()
	return tl
}

func decode_TL_messages_transcribedAudio(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_transcribedAudio)
	return decode_body_TL_messages_transcribedAudio(m)
}
func decode_body_TL_messages_transcribedAudio(m *DecodeBuf) TL {
	tl := TL_messages_transcribedAudio{}
	flags := m.Int()
	tl.Pending = flags&(1<<0) != 0
	tl.TranscriptionID = m.Long()
	tl.Text = m.String()
	if flags&(1<<1) != 0 {
		tl.TrialRemainsNum = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.TrialRemainsUntilDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_help_premiumPromo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_premiumPromo)
	return decode_body_TL_help_premiumPromo(m)
}
func decode_body_TL_help_premiumPromo(m *DecodeBuf) TL {
	tl := TL_help_premiumPromo{}
	tl.StatusText = m.String()
	tl.StatusEntities = m.Vector()
	tl.VideoSections = m.VectorString()
	tl.Videos = m.Vector()
	tl.PeriodOptions = DecodeBuf_GenericVector[TL_premiumSubscriptionOption](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_inputStorePaymentPremiumSubscription(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStorePaymentPremiumSubscription)
	return decode_body_TL_inputStorePaymentPremiumSubscription(m)
}
func decode_body_TL_inputStorePaymentPremiumSubscription(m *DecodeBuf) TL {
	tl := TL_inputStorePaymentPremiumSubscription{}
	flags := m.Int()
	tl.Restore = flags&(1<<0) != 0
	tl.Upgrade = flags&(1<<1) != 0
	return tl
}

func decode_TL_inputStorePaymentGiftPremium(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStorePaymentGiftPremium)
	return decode_body_TL_inputStorePaymentGiftPremium(m)
}
func decode_body_TL_inputStorePaymentGiftPremium(m *DecodeBuf) TL {
	tl := TL_inputStorePaymentGiftPremium{}
	tl.UserID = m.Object()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_inputStorePaymentPremiumGiftCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStorePaymentPremiumGiftCode)
	return decode_body_TL_inputStorePaymentPremiumGiftCode(m)
}
func decode_body_TL_inputStorePaymentPremiumGiftCode(m *DecodeBuf) TL {
	tl := TL_inputStorePaymentPremiumGiftCode{}
	flags := m.Int()
	tl.Users = m.Vector()
	if flags&(1<<0) != 0 {
		tl.BoostPeer = m.Object()
	}
	tl.Currency = m.String()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_inputStorePaymentPremiumGiveaway(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStorePaymentPremiumGiveaway)
	return decode_body_TL_inputStorePaymentPremiumGiveaway(m)
}
func decode_body_TL_inputStorePaymentPremiumGiveaway(m *DecodeBuf) TL {
	tl := TL_inputStorePaymentPremiumGiveaway{}
	flags := m.Int()
	tl.OnlyNewSubscribers = flags&(1<<0) != 0
	tl.WinnersAreVisible = flags&(1<<3) != 0
	tl.BoostPeer = m.Object()
	if flags&(1<<1) != 0 {
		tl.AdditionalPeers = m.Vector()
	}
	if flags&(1<<2) != 0 {
		tl.CountriesISO2 = m.VectorString()
	}
	if flags&(1<<4) != 0 {
		tl.PrizeDescription = Ref(m.String())
	}
	tl.RandomID = m.Long()
	tl.UntilDate = m.Int()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_inputStorePaymentStarsTopup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStorePaymentStarsTopup)
	return decode_body_TL_inputStorePaymentStarsTopup(m)
}
func decode_body_TL_inputStorePaymentStarsTopup(m *DecodeBuf) TL {
	tl := TL_inputStorePaymentStarsTopup{}
	tl.Stars = m.Long()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_inputStorePaymentStarsGift(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStorePaymentStarsGift)
	return decode_body_TL_inputStorePaymentStarsGift(m)
}
func decode_body_TL_inputStorePaymentStarsGift(m *DecodeBuf) TL {
	tl := TL_inputStorePaymentStarsGift{}
	tl.UserID = m.Object()
	tl.Stars = m.Long()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_inputStorePaymentStarsGiveaway(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStorePaymentStarsGiveaway)
	return decode_body_TL_inputStorePaymentStarsGiveaway(m)
}
func decode_body_TL_inputStorePaymentStarsGiveaway(m *DecodeBuf) TL {
	tl := TL_inputStorePaymentStarsGiveaway{}
	flags := m.Int()
	tl.OnlyNewSubscribers = flags&(1<<0) != 0
	tl.WinnersAreVisible = flags&(1<<3) != 0
	tl.Stars = m.Long()
	tl.BoostPeer = m.Object()
	if flags&(1<<1) != 0 {
		tl.AdditionalPeers = m.Vector()
	}
	if flags&(1<<2) != 0 {
		tl.CountriesISO2 = m.VectorString()
	}
	if flags&(1<<4) != 0 {
		tl.PrizeDescription = Ref(m.String())
	}
	tl.RandomID = m.Long()
	tl.UntilDate = m.Int()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	tl.Users = m.Int()
	return tl
}

func decode_TL_premiumGiftOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_premiumGiftOption)
	return decode_body_TL_premiumGiftOption(m)
}
func decode_body_TL_premiumGiftOption(m *DecodeBuf) TL {
	tl := TL_premiumGiftOption{}
	flags := m.Int()
	tl.Months = m.Int()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	tl.BotURL = m.String()
	if flags&(1<<0) != 0 {
		tl.StoreProduct = Ref(m.String())
	}
	return tl
}

func decode_TL_paymentFormMethod(m *DecodeBuf) TL {
	m.constructorAssert(CRC_paymentFormMethod)
	return decode_body_TL_paymentFormMethod(m)
}
func decode_body_TL_paymentFormMethod(m *DecodeBuf) TL {
	tl := TL_paymentFormMethod{}
	tl.URL = m.String()
	tl.Title = m.String()
	return tl
}

func decode_TL_emojiStatusEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiStatusEmpty)
	return decode_body_TL_emojiStatusEmpty(m)
}
func decode_body_TL_emojiStatusEmpty(_ *DecodeBuf) TL {
	tl := TL_emojiStatusEmpty{}
	return tl
}

func decode_TL_emojiStatus(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiStatus)
	return decode_body_TL_emojiStatus(m)
}
func decode_body_TL_emojiStatus(m *DecodeBuf) TL {
	tl := TL_emojiStatus{}
	tl.DocumentID = m.Long()
	return tl
}

func decode_TL_emojiStatusUntil(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiStatusUntil)
	return decode_body_TL_emojiStatusUntil(m)
}
func decode_body_TL_emojiStatusUntil(m *DecodeBuf) TL {
	tl := TL_emojiStatusUntil{}
	tl.DocumentID = m.Long()
	tl.Until = m.Int()
	return tl
}

func decode_TL_account_emojiStatusesNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_emojiStatusesNotModified)
	return decode_body_TL_account_emojiStatusesNotModified(m)
}
func decode_body_TL_account_emojiStatusesNotModified(_ *DecodeBuf) TL {
	tl := TL_account_emojiStatusesNotModified{}
	return tl
}

func decode_TL_account_emojiStatuses(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_emojiStatuses)
	return decode_body_TL_account_emojiStatuses(m)
}
func decode_body_TL_account_emojiStatuses(m *DecodeBuf) TL {
	tl := TL_account_emojiStatuses{}
	tl.Hash = m.Long()
	tl.Statuses = m.Vector()
	return tl
}

func decode_TL_reactionEmpty(m *DecodeBuf) TL {
	m.constructorAssert(CRC_reactionEmpty)
	return decode_body_TL_reactionEmpty(m)
}
func decode_body_TL_reactionEmpty(_ *DecodeBuf) TL {
	tl := TL_reactionEmpty{}
	return tl
}

func decode_TL_reactionEmoji(m *DecodeBuf) TL {
	m.constructorAssert(CRC_reactionEmoji)
	return decode_body_TL_reactionEmoji(m)
}
func decode_body_TL_reactionEmoji(m *DecodeBuf) TL {
	tl := TL_reactionEmoji{}
	tl.Emoticon = m.String()
	return tl
}

func decode_TL_reactionCustomEmoji(m *DecodeBuf) TL {
	m.constructorAssert(CRC_reactionCustomEmoji)
	return decode_body_TL_reactionCustomEmoji(m)
}
func decode_body_TL_reactionCustomEmoji(m *DecodeBuf) TL {
	tl := TL_reactionCustomEmoji{}
	tl.DocumentID = m.Long()
	return tl
}

func decode_TL_reactionPaid(m *DecodeBuf) TL {
	m.constructorAssert(CRC_reactionPaid)
	return decode_body_TL_reactionPaid(m)
}
func decode_body_TL_reactionPaid(_ *DecodeBuf) TL {
	tl := TL_reactionPaid{}
	return tl
}

func decode_TL_chatReactionsNone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatReactionsNone)
	return decode_body_TL_chatReactionsNone(m)
}
func decode_body_TL_chatReactionsNone(_ *DecodeBuf) TL {
	tl := TL_chatReactionsNone{}
	return tl
}

func decode_TL_chatReactionsAll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatReactionsAll)
	return decode_body_TL_chatReactionsAll(m)
}
func decode_body_TL_chatReactionsAll(m *DecodeBuf) TL {
	tl := TL_chatReactionsAll{}
	flags := m.Int()
	tl.AllowCustom = flags&(1<<0) != 0
	return tl
}

func decode_TL_chatReactionsSome(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatReactionsSome)
	return decode_body_TL_chatReactionsSome(m)
}
func decode_body_TL_chatReactionsSome(m *DecodeBuf) TL {
	tl := TL_chatReactionsSome{}
	tl.Reactions = m.Vector()
	return tl
}

func decode_TL_messages_reactionsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_reactionsNotModified)
	return decode_body_TL_messages_reactionsNotModified(m)
}
func decode_body_TL_messages_reactionsNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_reactionsNotModified{}
	return tl
}

func decode_TL_messages_reactions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_reactions)
	return decode_body_TL_messages_reactions(m)
}
func decode_body_TL_messages_reactions(m *DecodeBuf) TL {
	tl := TL_messages_reactions{}
	tl.Hash = m.Long()
	tl.Reactions = m.Vector()
	return tl
}

func decode_TL_emailVerifyPurposeLoginSetup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emailVerifyPurposeLoginSetup)
	return decode_body_TL_emailVerifyPurposeLoginSetup(m)
}
func decode_body_TL_emailVerifyPurposeLoginSetup(m *DecodeBuf) TL {
	tl := TL_emailVerifyPurposeLoginSetup{}
	tl.PhoneNumber = m.String()
	tl.PhoneCodeHash = m.String()
	return tl
}

func decode_TL_emailVerifyPurposeLoginChange(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emailVerifyPurposeLoginChange)
	return decode_body_TL_emailVerifyPurposeLoginChange(m)
}
func decode_body_TL_emailVerifyPurposeLoginChange(_ *DecodeBuf) TL {
	tl := TL_emailVerifyPurposeLoginChange{}
	return tl
}

func decode_TL_emailVerifyPurposePassport(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emailVerifyPurposePassport)
	return decode_body_TL_emailVerifyPurposePassport(m)
}
func decode_body_TL_emailVerifyPurposePassport(_ *DecodeBuf) TL {
	tl := TL_emailVerifyPurposePassport{}
	return tl
}

func decode_TL_emailVerificationCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emailVerificationCode)
	return decode_body_TL_emailVerificationCode(m)
}
func decode_body_TL_emailVerificationCode(m *DecodeBuf) TL {
	tl := TL_emailVerificationCode{}
	tl.Code = m.String()
	return tl
}

func decode_TL_emailVerificationGoogle(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emailVerificationGoogle)
	return decode_body_TL_emailVerificationGoogle(m)
}
func decode_body_TL_emailVerificationGoogle(m *DecodeBuf) TL {
	tl := TL_emailVerificationGoogle{}
	tl.Token = m.String()
	return tl
}

func decode_TL_emailVerificationApple(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emailVerificationApple)
	return decode_body_TL_emailVerificationApple(m)
}
func decode_body_TL_emailVerificationApple(m *DecodeBuf) TL {
	tl := TL_emailVerificationApple{}
	tl.Token = m.String()
	return tl
}

func decode_TL_account_emailVerified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_emailVerified)
	return decode_body_TL_account_emailVerified(m)
}
func decode_body_TL_account_emailVerified(m *DecodeBuf) TL {
	tl := TL_account_emailVerified{}
	tl.Email = m.String()
	return tl
}

func decode_TL_account_emailVerifiedLogin(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_emailVerifiedLogin)
	return decode_body_TL_account_emailVerifiedLogin(m)
}
func decode_body_TL_account_emailVerifiedLogin(m *DecodeBuf) TL {
	tl := TL_account_emailVerifiedLogin{}
	tl.Email = m.String()
	tl.SentCode = m.Object()
	return tl
}

func decode_TL_premiumSubscriptionOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_premiumSubscriptionOption)
	return decode_body_TL_premiumSubscriptionOption(m)
}
func decode_body_TL_premiumSubscriptionOption(m *DecodeBuf) TL {
	tl := TL_premiumSubscriptionOption{}
	flags := m.Int()
	tl.Current = flags&(1<<1) != 0
	tl.CanPurchaseUpgrade = flags&(1<<2) != 0
	if flags&(1<<3) != 0 {
		tl.Transaction = Ref(m.String())
	}
	tl.Months = m.Int()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	tl.BotURL = m.String()
	if flags&(1<<0) != 0 {
		tl.StoreProduct = Ref(m.String())
	}
	return tl
}

func decode_TL_sendAsPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sendAsPeer)
	return decode_body_TL_sendAsPeer(m)
}
func decode_body_TL_sendAsPeer(m *DecodeBuf) TL {
	tl := TL_sendAsPeer{}
	flags := m.Int()
	tl.PremiumRequired = flags&(1<<0) != 0
	tl.Peer = m.Object()
	return tl
}

func decode_TL_messageExtendedMediaPreview(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageExtendedMediaPreview)
	return decode_body_TL_messageExtendedMediaPreview(m)
}
func decode_body_TL_messageExtendedMediaPreview(m *DecodeBuf) TL {
	tl := TL_messageExtendedMediaPreview{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.W = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.H = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.Thumb = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.VideoDuration = Ref(m.Int())
	}
	return tl
}

func decode_TL_messageExtendedMedia(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageExtendedMedia)
	return decode_body_TL_messageExtendedMedia(m)
}
func decode_body_TL_messageExtendedMedia(m *DecodeBuf) TL {
	tl := TL_messageExtendedMedia{}
	tl.Media = m.Object()
	return tl
}

func decode_TL_stickerKeyword(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stickerKeyword)
	return decode_body_TL_stickerKeyword(m)
}
func decode_body_TL_stickerKeyword(m *DecodeBuf) TL {
	tl := TL_stickerKeyword{}
	tl.DocumentID = m.Long()
	tl.Keyword = m.VectorString()
	return tl
}

func decode_TL_username(m *DecodeBuf) TL {
	m.constructorAssert(CRC_username)
	return decode_body_TL_username(m)
}
func decode_body_TL_username(m *DecodeBuf) TL {
	tl := TL_username{}
	flags := m.Int()
	tl.Editable = flags&(1<<0) != 0
	tl.Active = flags&(1<<1) != 0
	tl.Username = m.String()
	return tl
}

func decode_TL_forumTopicDeleted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_forumTopicDeleted)
	return decode_body_TL_forumTopicDeleted(m)
}
func decode_body_TL_forumTopicDeleted(m *DecodeBuf) TL {
	tl := TL_forumTopicDeleted{}
	tl.ID = m.Int()
	return tl
}

func decode_TL_forumTopic(m *DecodeBuf) TL {
	m.constructorAssert(CRC_forumTopic)
	return decode_body_TL_forumTopic(m)
}
func decode_body_TL_forumTopic(m *DecodeBuf) TL {
	tl := TL_forumTopic{}
	flags := m.Int()
	tl.My = flags&(1<<1) != 0
	tl.Closed = flags&(1<<2) != 0
	tl.Pinned = flags&(1<<3) != 0
	tl.Short = flags&(1<<5) != 0
	tl.Hidden = flags&(1<<6) != 0
	tl.ID = m.Int()
	tl.Date = m.Int()
	tl.Title = m.String()
	tl.IconColor = m.Int()
	if flags&(1<<0) != 0 {
		tl.IconEmojiID = Ref(m.Long())
	}
	tl.TopMessage = m.Int()
	tl.ReadInboxMaxID = m.Int()
	tl.ReadOutboxMaxID = m.Int()
	tl.UnreadCount = m.Int()
	tl.UnreadMentionsCount = m.Int()
	tl.UnreadReactionsCount = m.Int()
	tl.FromID = m.Object()
	tl.NotifySettings = decode_TL_peerNotifySettings(m).(TL_peerNotifySettings)
	if flags&(1<<4) != 0 {
		tl.Draft = m.Object()
	}
	return tl
}

func decode_TL_messages_forumTopics(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_forumTopics)
	return decode_body_TL_messages_forumTopics(m)
}
func decode_body_TL_messages_forumTopics(m *DecodeBuf) TL {
	tl := TL_messages_forumTopics{}
	flags := m.Int()
	tl.OrderByCreateDate = flags&(1<<0) != 0
	tl.Count = m.Int()
	tl.Topics = m.Vector()
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	tl.PTS = m.Int()
	return tl
}

func decode_TL_defaultHistoryTTL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_defaultHistoryTTL)
	return decode_body_TL_defaultHistoryTTL(m)
}
func decode_body_TL_defaultHistoryTTL(m *DecodeBuf) TL {
	tl := TL_defaultHistoryTTL{}
	tl.Period = m.Int()
	return tl
}

func decode_TL_exportedContactToken(m *DecodeBuf) TL {
	m.constructorAssert(CRC_exportedContactToken)
	return decode_body_TL_exportedContactToken(m)
}
func decode_body_TL_exportedContactToken(m *DecodeBuf) TL {
	tl := TL_exportedContactToken{}
	tl.URL = m.String()
	tl.Expires = m.Int()
	return tl
}

func decode_TL_requestPeerTypeUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_requestPeerTypeUser)
	return decode_body_TL_requestPeerTypeUser(m)
}
func decode_body_TL_requestPeerTypeUser(m *DecodeBuf) TL {
	tl := TL_requestPeerTypeUser{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Bot = Ref(m.Bool())
	}
	if flags&(1<<1) != 0 {
		tl.Premium = Ref(m.Bool())
	}
	return tl
}

func decode_TL_requestPeerTypeChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_requestPeerTypeChat)
	return decode_body_TL_requestPeerTypeChat(m)
}
func decode_body_TL_requestPeerTypeChat(m *DecodeBuf) TL {
	tl := TL_requestPeerTypeChat{}
	flags := m.Int()
	tl.Creator = flags&(1<<0) != 0
	tl.BotParticipant = flags&(1<<5) != 0
	if flags&(1<<3) != 0 {
		tl.HasUsername = Ref(m.Bool())
	}
	if flags&(1<<4) != 0 {
		tl.Forum = Ref(m.Bool())
	}
	if flags&(1<<1) != 0 {
		tl.UserAdminRights = Ref(decode_TL_chatAdminRights(m).(TL_chatAdminRights))
	}
	if flags&(1<<2) != 0 {
		tl.BotAdminRights = Ref(decode_TL_chatAdminRights(m).(TL_chatAdminRights))
	}
	return tl
}

func decode_TL_requestPeerTypeBroadcast(m *DecodeBuf) TL {
	m.constructorAssert(CRC_requestPeerTypeBroadcast)
	return decode_body_TL_requestPeerTypeBroadcast(m)
}
func decode_body_TL_requestPeerTypeBroadcast(m *DecodeBuf) TL {
	tl := TL_requestPeerTypeBroadcast{}
	flags := m.Int()
	tl.Creator = flags&(1<<0) != 0
	if flags&(1<<3) != 0 {
		tl.HasUsername = Ref(m.Bool())
	}
	if flags&(1<<1) != 0 {
		tl.UserAdminRights = Ref(decode_TL_chatAdminRights(m).(TL_chatAdminRights))
	}
	if flags&(1<<2) != 0 {
		tl.BotAdminRights = Ref(decode_TL_chatAdminRights(m).(TL_chatAdminRights))
	}
	return tl
}

func decode_TL_emojiListNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiListNotModified)
	return decode_body_TL_emojiListNotModified(m)
}
func decode_body_TL_emojiListNotModified(_ *DecodeBuf) TL {
	tl := TL_emojiListNotModified{}
	return tl
}

func decode_TL_emojiList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiList)
	return decode_body_TL_emojiList(m)
}
func decode_body_TL_emojiList(m *DecodeBuf) TL {
	tl := TL_emojiList{}
	tl.Hash = m.Long()
	tl.DocumentID = m.VectorLong()
	return tl
}

func decode_TL_emojiGroup(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiGroup)
	return decode_body_TL_emojiGroup(m)
}
func decode_body_TL_emojiGroup(m *DecodeBuf) TL {
	tl := TL_emojiGroup{}
	tl.Title = m.String()
	tl.IconEmojiID = m.Long()
	tl.Emoticons = m.VectorString()
	return tl
}

func decode_TL_emojiGroupGreeting(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiGroupGreeting)
	return decode_body_TL_emojiGroupGreeting(m)
}
func decode_body_TL_emojiGroupGreeting(m *DecodeBuf) TL {
	tl := TL_emojiGroupGreeting{}
	tl.Title = m.String()
	tl.IconEmojiID = m.Long()
	tl.Emoticons = m.VectorString()
	return tl
}

func decode_TL_emojiGroupPremium(m *DecodeBuf) TL {
	m.constructorAssert(CRC_emojiGroupPremium)
	return decode_body_TL_emojiGroupPremium(m)
}
func decode_body_TL_emojiGroupPremium(m *DecodeBuf) TL {
	tl := TL_emojiGroupPremium{}
	tl.Title = m.String()
	tl.IconEmojiID = m.Long()
	return tl
}

func decode_TL_messages_emojiGroupsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_emojiGroupsNotModified)
	return decode_body_TL_messages_emojiGroupsNotModified(m)
}
func decode_body_TL_messages_emojiGroupsNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_emojiGroupsNotModified{}
	return tl
}

func decode_TL_messages_emojiGroups(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_emojiGroups)
	return decode_body_TL_messages_emojiGroups(m)
}
func decode_body_TL_messages_emojiGroups(m *DecodeBuf) TL {
	tl := TL_messages_emojiGroups{}
	tl.Hash = m.Int()
	tl.Groups = m.Vector()
	return tl
}

func decode_TL_textWithEntities(m *DecodeBuf) TL {
	m.constructorAssert(CRC_textWithEntities)
	return decode_body_TL_textWithEntities(m)
}
func decode_body_TL_textWithEntities(m *DecodeBuf) TL {
	tl := TL_textWithEntities{}
	tl.Text = m.String()
	tl.Entities = m.Vector()
	return tl
}

func decode_TL_messages_translateResult(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_translateResult)
	return decode_body_TL_messages_translateResult(m)
}
func decode_body_TL_messages_translateResult(m *DecodeBuf) TL {
	tl := TL_messages_translateResult{}
	tl.Result = DecodeBuf_GenericVector[TL_textWithEntities](m)
	return tl
}

func decode_TL_autoSaveSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_autoSaveSettings)
	return decode_body_TL_autoSaveSettings(m)
}
func decode_body_TL_autoSaveSettings(m *DecodeBuf) TL {
	tl := TL_autoSaveSettings{}
	flags := m.Int()
	tl.Photos = flags&(1<<0) != 0
	tl.Videos = flags&(1<<1) != 0
	if flags&(1<<2) != 0 {
		tl.VideoMaxSize = Ref(m.Long())
	}
	return tl
}

func decode_TL_autoSaveException(m *DecodeBuf) TL {
	m.constructorAssert(CRC_autoSaveException)
	return decode_body_TL_autoSaveException(m)
}
func decode_body_TL_autoSaveException(m *DecodeBuf) TL {
	tl := TL_autoSaveException{}
	tl.Peer = m.Object()
	tl.Settings = decode_TL_autoSaveSettings(m).(TL_autoSaveSettings)
	return tl
}

func decode_TL_account_autoSaveSettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_autoSaveSettings)
	return decode_body_TL_account_autoSaveSettings(m)
}
func decode_body_TL_account_autoSaveSettings(m *DecodeBuf) TL {
	tl := TL_account_autoSaveSettings{}
	tl.UsersSettings = decode_TL_autoSaveSettings(m).(TL_autoSaveSettings)
	tl.ChatsSettings = decode_TL_autoSaveSettings(m).(TL_autoSaveSettings)
	tl.BroadcastsSettings = decode_TL_autoSaveSettings(m).(TL_autoSaveSettings)
	tl.Exceptions = DecodeBuf_GenericVector[TL_autoSaveException](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_help_appConfigNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_appConfigNotModified)
	return decode_body_TL_help_appConfigNotModified(m)
}
func decode_body_TL_help_appConfigNotModified(_ *DecodeBuf) TL {
	tl := TL_help_appConfigNotModified{}
	return tl
}

func decode_TL_help_appConfig(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_appConfig)
	return decode_body_TL_help_appConfig(m)
}
func decode_body_TL_help_appConfig(m *DecodeBuf) TL {
	tl := TL_help_appConfig{}
	tl.Hash = m.Int()
	tl.Config = m.Object()
	return tl
}

func decode_TL_inputBotAppID(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotAppID)
	return decode_body_TL_inputBotAppID(m)
}
func decode_body_TL_inputBotAppID(m *DecodeBuf) TL {
	tl := TL_inputBotAppID{}
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	return tl
}

func decode_TL_inputBotAppShortName(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBotAppShortName)
	return decode_body_TL_inputBotAppShortName(m)
}
func decode_body_TL_inputBotAppShortName(m *DecodeBuf) TL {
	tl := TL_inputBotAppShortName{}
	tl.BotID = m.Object()
	tl.ShortName = m.String()
	return tl
}

func decode_TL_botAppNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botAppNotModified)
	return decode_body_TL_botAppNotModified(m)
}
func decode_body_TL_botAppNotModified(_ *DecodeBuf) TL {
	tl := TL_botAppNotModified{}
	return tl
}

func decode_TL_botApp(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botApp)
	return decode_body_TL_botApp(m)
}
func decode_body_TL_botApp(m *DecodeBuf) TL {
	tl := TL_botApp{}
	flags := m.Int()
	tl.ID = m.Long()
	tl.AccessHash = m.Long()
	tl.ShortName = m.String()
	tl.Title = m.String()
	tl.Description = m.String()
	tl.Photo = m.Object()
	if flags&(1<<0) != 0 {
		tl.Document = m.Object()
	}
	tl.Hash = m.Long()
	return tl
}

func decode_TL_messages_botApp(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_botApp)
	return decode_body_TL_messages_botApp(m)
}
func decode_body_TL_messages_botApp(m *DecodeBuf) TL {
	tl := TL_messages_botApp{}
	flags := m.Int()
	tl.Inactive = flags&(1<<0) != 0
	tl.RequestWriteAccess = flags&(1<<1) != 0
	tl.HasSettings = flags&(1<<2) != 0
	tl.App = m.Object()
	return tl
}

func decode_TL_inlineBotWebView(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inlineBotWebView)
	return decode_body_TL_inlineBotWebView(m)
}
func decode_body_TL_inlineBotWebView(m *DecodeBuf) TL {
	tl := TL_inlineBotWebView{}
	tl.Text = m.String()
	tl.URL = m.String()
	return tl
}

func decode_TL_readParticipantDate(m *DecodeBuf) TL {
	m.constructorAssert(CRC_readParticipantDate)
	return decode_body_TL_readParticipantDate(m)
}
func decode_body_TL_readParticipantDate(m *DecodeBuf) TL {
	tl := TL_readParticipantDate{}
	tl.UserID = m.Long()
	tl.Date = m.Int()
	return tl
}

func decode_TL_inputChatlistDialogFilter(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputChatlistDialogFilter)
	return decode_body_TL_inputChatlistDialogFilter(m)
}
func decode_body_TL_inputChatlistDialogFilter(m *DecodeBuf) TL {
	tl := TL_inputChatlistDialogFilter{}
	tl.FilterID = m.Int()
	return tl
}

func decode_TL_exportedChatlistInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_exportedChatlistInvite)
	return decode_body_TL_exportedChatlistInvite(m)
}
func decode_body_TL_exportedChatlistInvite(m *DecodeBuf) TL {
	tl := TL_exportedChatlistInvite{}
	m.Int() //unused flags
	tl.Title = m.String()
	tl.URL = m.String()
	tl.Peers = m.Vector()
	return tl
}

func decode_TL_chatlists_exportedChatlistInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatlists_exportedChatlistInvite)
	return decode_body_TL_chatlists_exportedChatlistInvite(m)
}
func decode_body_TL_chatlists_exportedChatlistInvite(m *DecodeBuf) TL {
	tl := TL_chatlists_exportedChatlistInvite{}
	tl.Filter = m.Object()
	tl.Invite = decode_TL_exportedChatlistInvite(m).(TL_exportedChatlistInvite)
	return tl
}

func decode_TL_chatlists_exportedInvites(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatlists_exportedInvites)
	return decode_body_TL_chatlists_exportedInvites(m)
}
func decode_body_TL_chatlists_exportedInvites(m *DecodeBuf) TL {
	tl := TL_chatlists_exportedInvites{}
	tl.Invites = DecodeBuf_GenericVector[TL_exportedChatlistInvite](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_chatlists_chatlistInviteAlready(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatlists_chatlistInviteAlready)
	return decode_body_TL_chatlists_chatlistInviteAlready(m)
}
func decode_body_TL_chatlists_chatlistInviteAlready(m *DecodeBuf) TL {
	tl := TL_chatlists_chatlistInviteAlready{}
	tl.FilterID = m.Int()
	tl.MissingPeers = m.Vector()
	tl.AlreadyPeers = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_chatlists_chatlistInvite(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatlists_chatlistInvite)
	return decode_body_TL_chatlists_chatlistInvite(m)
}
func decode_body_TL_chatlists_chatlistInvite(m *DecodeBuf) TL {
	tl := TL_chatlists_chatlistInvite{}
	flags := m.Int()
	tl.Title = m.String()
	if flags&(1<<0) != 0 {
		tl.Emoticon = Ref(m.String())
	}
	tl.Peers = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_chatlists_chatlistUpdates(m *DecodeBuf) TL {
	m.constructorAssert(CRC_chatlists_chatlistUpdates)
	return decode_body_TL_chatlists_chatlistUpdates(m)
}
func decode_body_TL_chatlists_chatlistUpdates(m *DecodeBuf) TL {
	tl := TL_chatlists_chatlistUpdates{}
	tl.MissingPeers = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_bots_botInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_bots_botInfo)
	return decode_body_TL_bots_botInfo(m)
}
func decode_body_TL_bots_botInfo(m *DecodeBuf) TL {
	tl := TL_bots_botInfo{}
	tl.Name = m.String()
	tl.About = m.String()
	tl.Description = m.String()
	return tl
}

func decode_TL_messagePeerVote(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messagePeerVote)
	return decode_body_TL_messagePeerVote(m)
}
func decode_body_TL_messagePeerVote(m *DecodeBuf) TL {
	tl := TL_messagePeerVote{}
	tl.Peer = m.Object()
	tl.Option = m.StringBytes()
	tl.Date = m.Int()
	return tl
}

func decode_TL_messagePeerVoteInputOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messagePeerVoteInputOption)
	return decode_body_TL_messagePeerVoteInputOption(m)
}
func decode_body_TL_messagePeerVoteInputOption(m *DecodeBuf) TL {
	tl := TL_messagePeerVoteInputOption{}
	tl.Peer = m.Object()
	tl.Date = m.Int()
	return tl
}

func decode_TL_messagePeerVoteMultiple(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messagePeerVoteMultiple)
	return decode_body_TL_messagePeerVoteMultiple(m)
}
func decode_body_TL_messagePeerVoteMultiple(m *DecodeBuf) TL {
	tl := TL_messagePeerVoteMultiple{}
	tl.Peer = m.Object()
	tl.Options = m.VectorBytes()
	tl.Date = m.Int()
	return tl
}

func decode_TL_storyViews(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyViews)
	return decode_body_TL_storyViews(m)
}
func decode_body_TL_storyViews(m *DecodeBuf) TL {
	tl := TL_storyViews{}
	flags := m.Int()
	tl.HasViewers = flags&(1<<1) != 0
	tl.ViewsCount = m.Int()
	if flags&(1<<2) != 0 {
		tl.ForwardsCount = Ref(m.Int())
	}
	if flags&(1<<3) != 0 {
		tl.Reactions = DecodeBuf_GenericVector[TL_reactionCount](m)
	}
	if flags&(1<<4) != 0 {
		tl.ReactionsCount = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.RecentViewers = m.VectorLong()
	}
	return tl
}

func decode_TL_storyItemDeleted(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyItemDeleted)
	return decode_body_TL_storyItemDeleted(m)
}
func decode_body_TL_storyItemDeleted(m *DecodeBuf) TL {
	tl := TL_storyItemDeleted{}
	tl.ID = m.Int()
	return tl
}

func decode_TL_storyItemSkipped(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyItemSkipped)
	return decode_body_TL_storyItemSkipped(m)
}
func decode_body_TL_storyItemSkipped(m *DecodeBuf) TL {
	tl := TL_storyItemSkipped{}
	flags := m.Int()
	tl.CloseFriends = flags&(1<<8) != 0
	tl.ID = m.Int()
	tl.Date = m.Int()
	tl.ExpireDate = m.Int()
	return tl
}

func decode_TL_storyItem(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyItem)
	return decode_body_TL_storyItem(m)
}
func decode_body_TL_storyItem(m *DecodeBuf) TL {
	tl := TL_storyItem{}
	flags := m.Int()
	tl.Pinned = flags&(1<<5) != 0
	tl.Public = flags&(1<<7) != 0
	tl.CloseFriends = flags&(1<<8) != 0
	tl.Min = flags&(1<<9) != 0
	tl.Noforwards = flags&(1<<10) != 0
	tl.Edited = flags&(1<<11) != 0
	tl.Contacts = flags&(1<<12) != 0
	tl.SelectedContacts = flags&(1<<13) != 0
	tl.Out = flags&(1<<16) != 0
	tl.ID = m.Int()
	tl.Date = m.Int()
	if flags&(1<<18) != 0 {
		tl.FromID = m.Object()
	}
	if flags&(1<<17) != 0 {
		tl.FwdFrom = Ref(decode_TL_storyFwdHeader(m).(TL_storyFwdHeader))
	}
	tl.ExpireDate = m.Int()
	if flags&(1<<0) != 0 {
		tl.Caption = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Entities = m.Vector()
	}
	tl.Media = m.Object()
	if flags&(1<<14) != 0 {
		tl.MediaAreas = m.Vector()
	}
	if flags&(1<<2) != 0 {
		tl.Privacy = m.Vector()
	}
	if flags&(1<<3) != 0 {
		tl.Views = Ref(decode_TL_storyViews(m).(TL_storyViews))
	}
	if flags&(1<<15) != 0 {
		tl.SentReaction = m.Object()
	}
	return tl
}

func decode_TL_stories_allStoriesNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stories_allStoriesNotModified)
	return decode_body_TL_stories_allStoriesNotModified(m)
}
func decode_body_TL_stories_allStoriesNotModified(m *DecodeBuf) TL {
	tl := TL_stories_allStoriesNotModified{}
	m.Int() //unused flags
	tl.State = m.String()
	tl.StealthMode = decode_TL_storiesStealthMode(m).(TL_storiesStealthMode)
	return tl
}

func decode_TL_stories_allStories(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stories_allStories)
	return decode_body_TL_stories_allStories(m)
}
func decode_body_TL_stories_allStories(m *DecodeBuf) TL {
	tl := TL_stories_allStories{}
	flags := m.Int()
	tl.HasMore = flags&(1<<0) != 0
	tl.Count = m.Int()
	tl.State = m.String()
	tl.PeerStories = DecodeBuf_GenericVector[TL_peerStories](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	tl.StealthMode = decode_TL_storiesStealthMode(m).(TL_storiesStealthMode)
	return tl
}

func decode_TL_stories_stories(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stories_stories)
	return decode_body_TL_stories_stories(m)
}
func decode_body_TL_stories_stories(m *DecodeBuf) TL {
	tl := TL_stories_stories{}
	flags := m.Int()
	tl.Count = m.Int()
	tl.Stories = m.Vector()
	if flags&(1<<0) != 0 {
		tl.PinnedToTop = m.VectorInt()
	}
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_storyView(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyView)
	return decode_body_TL_storyView(m)
}
func decode_body_TL_storyView(m *DecodeBuf) TL {
	tl := TL_storyView{}
	flags := m.Int()
	tl.Blocked = flags&(1<<0) != 0
	tl.BlockedMyStoriesFrom = flags&(1<<1) != 0
	tl.UserID = m.Long()
	tl.Date = m.Int()
	if flags&(1<<2) != 0 {
		tl.Reaction = m.Object()
	}
	return tl
}

func decode_TL_storyViewPublicForward(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyViewPublicForward)
	return decode_body_TL_storyViewPublicForward(m)
}
func decode_body_TL_storyViewPublicForward(m *DecodeBuf) TL {
	tl := TL_storyViewPublicForward{}
	flags := m.Int()
	tl.Blocked = flags&(1<<0) != 0
	tl.BlockedMyStoriesFrom = flags&(1<<1) != 0
	tl.Message = m.Object()
	return tl
}

func decode_TL_storyViewPublicRepost(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyViewPublicRepost)
	return decode_body_TL_storyViewPublicRepost(m)
}
func decode_body_TL_storyViewPublicRepost(m *DecodeBuf) TL {
	tl := TL_storyViewPublicRepost{}
	flags := m.Int()
	tl.Blocked = flags&(1<<0) != 0
	tl.BlockedMyStoriesFrom = flags&(1<<1) != 0
	tl.PeerID = m.Object()
	tl.Story = m.Object()
	return tl
}

func decode_TL_stories_storyViewsList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stories_storyViewsList)
	return decode_body_TL_stories_storyViewsList(m)
}
func decode_body_TL_stories_storyViewsList(m *DecodeBuf) TL {
	tl := TL_stories_storyViewsList{}
	flags := m.Int()
	tl.Count = m.Int()
	tl.ViewsCount = m.Int()
	tl.ForwardsCount = m.Int()
	tl.ReactionsCount = m.Int()
	tl.Views = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	if flags&(1<<0) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	return tl
}

func decode_TL_stories_storyViews(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stories_storyViews)
	return decode_body_TL_stories_storyViews(m)
}
func decode_body_TL_stories_storyViews(m *DecodeBuf) TL {
	tl := TL_stories_storyViews{}
	tl.Views = DecodeBuf_GenericVector[TL_storyViews](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_inputReplyToMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReplyToMessage)
	return decode_body_TL_inputReplyToMessage(m)
}
func decode_body_TL_inputReplyToMessage(m *DecodeBuf) TL {
	tl := TL_inputReplyToMessage{}
	flags := m.Int()
	tl.ReplyToMsgID = m.Int()
	if flags&(1<<0) != 0 {
		tl.TopMsgID = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.ReplyToPeerID = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.QuoteText = Ref(m.String())
	}
	if flags&(1<<3) != 0 {
		tl.QuoteEntities = m.Vector()
	}
	if flags&(1<<4) != 0 {
		tl.QuoteOffset = Ref(m.Int())
	}
	return tl
}

func decode_TL_inputReplyToStory(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputReplyToStory)
	return decode_body_TL_inputReplyToStory(m)
}
func decode_body_TL_inputReplyToStory(m *DecodeBuf) TL {
	tl := TL_inputReplyToStory{}
	tl.Peer = m.Object()
	tl.StoryID = m.Int()
	return tl
}

func decode_TL_exportedStoryLink(m *DecodeBuf) TL {
	m.constructorAssert(CRC_exportedStoryLink)
	return decode_body_TL_exportedStoryLink(m)
}
func decode_body_TL_exportedStoryLink(m *DecodeBuf) TL {
	tl := TL_exportedStoryLink{}
	tl.Link = m.String()
	return tl
}

func decode_TL_storiesStealthMode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storiesStealthMode)
	return decode_body_TL_storiesStealthMode(m)
}
func decode_body_TL_storiesStealthMode(m *DecodeBuf) TL {
	tl := TL_storiesStealthMode{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.ActiveUntilDate = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.CooldownUntilDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_mediaAreaCoordinates(m *DecodeBuf) TL {
	m.constructorAssert(CRC_mediaAreaCoordinates)
	return decode_body_TL_mediaAreaCoordinates(m)
}
func decode_body_TL_mediaAreaCoordinates(m *DecodeBuf) TL {
	tl := TL_mediaAreaCoordinates{}
	flags := m.Int()
	tl.X = m.Double()
	tl.Y = m.Double()
	tl.W = m.Double()
	tl.H = m.Double()
	tl.Rotation = m.Double()
	if flags&(1<<0) != 0 {
		tl.Radius = Ref(m.Double())
	}
	return tl
}

func decode_TL_mediaAreaVenue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_mediaAreaVenue)
	return decode_body_TL_mediaAreaVenue(m)
}
func decode_body_TL_mediaAreaVenue(m *DecodeBuf) TL {
	tl := TL_mediaAreaVenue{}
	tl.Coordinates = decode_TL_mediaAreaCoordinates(m).(TL_mediaAreaCoordinates)
	tl.Geo = m.Object()
	tl.Title = m.String()
	tl.Address = m.String()
	tl.Provider = m.String()
	tl.VenueID = m.String()
	tl.VenueType = m.String()
	return tl
}

func decode_TL_inputMediaAreaVenue(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaAreaVenue)
	return decode_body_TL_inputMediaAreaVenue(m)
}
func decode_body_TL_inputMediaAreaVenue(m *DecodeBuf) TL {
	tl := TL_inputMediaAreaVenue{}
	tl.Coordinates = decode_TL_mediaAreaCoordinates(m).(TL_mediaAreaCoordinates)
	tl.QueryID = m.Long()
	tl.ResultID = m.String()
	return tl
}

func decode_TL_mediaAreaGeoPoint(m *DecodeBuf) TL {
	m.constructorAssert(CRC_mediaAreaGeoPoint)
	return decode_body_TL_mediaAreaGeoPoint(m)
}
func decode_body_TL_mediaAreaGeoPoint(m *DecodeBuf) TL {
	tl := TL_mediaAreaGeoPoint{}
	flags := m.Int()
	tl.Coordinates = decode_TL_mediaAreaCoordinates(m).(TL_mediaAreaCoordinates)
	tl.Geo = m.Object()
	if flags&(1<<0) != 0 {
		tl.Address = Ref(decode_TL_geoPointAddress(m).(TL_geoPointAddress))
	}
	return tl
}

func decode_TL_mediaAreaSuggestedReaction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_mediaAreaSuggestedReaction)
	return decode_body_TL_mediaAreaSuggestedReaction(m)
}
func decode_body_TL_mediaAreaSuggestedReaction(m *DecodeBuf) TL {
	tl := TL_mediaAreaSuggestedReaction{}
	flags := m.Int()
	tl.Dark = flags&(1<<0) != 0
	tl.Flipped = flags&(1<<1) != 0
	tl.Coordinates = decode_TL_mediaAreaCoordinates(m).(TL_mediaAreaCoordinates)
	tl.Reaction = m.Object()
	return tl
}

func decode_TL_mediaAreaChannelPost(m *DecodeBuf) TL {
	m.constructorAssert(CRC_mediaAreaChannelPost)
	return decode_body_TL_mediaAreaChannelPost(m)
}
func decode_body_TL_mediaAreaChannelPost(m *DecodeBuf) TL {
	tl := TL_mediaAreaChannelPost{}
	tl.Coordinates = decode_TL_mediaAreaCoordinates(m).(TL_mediaAreaCoordinates)
	tl.ChannelID = m.Long()
	tl.MsgID = m.Int()
	return tl
}

func decode_TL_inputMediaAreaChannelPost(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputMediaAreaChannelPost)
	return decode_body_TL_inputMediaAreaChannelPost(m)
}
func decode_body_TL_inputMediaAreaChannelPost(m *DecodeBuf) TL {
	tl := TL_inputMediaAreaChannelPost{}
	tl.Coordinates = decode_TL_mediaAreaCoordinates(m).(TL_mediaAreaCoordinates)
	tl.Channel = m.Object()
	tl.MsgID = m.Int()
	return tl
}

func decode_TL_mediaAreaURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_mediaAreaURL)
	return decode_body_TL_mediaAreaURL(m)
}
func decode_body_TL_mediaAreaURL(m *DecodeBuf) TL {
	tl := TL_mediaAreaURL{}
	tl.Coordinates = decode_TL_mediaAreaCoordinates(m).(TL_mediaAreaCoordinates)
	tl.URL = m.String()
	return tl
}

func decode_TL_mediaAreaWeather(m *DecodeBuf) TL {
	m.constructorAssert(CRC_mediaAreaWeather)
	return decode_body_TL_mediaAreaWeather(m)
}
func decode_body_TL_mediaAreaWeather(m *DecodeBuf) TL {
	tl := TL_mediaAreaWeather{}
	tl.Coordinates = decode_TL_mediaAreaCoordinates(m).(TL_mediaAreaCoordinates)
	tl.Emoji = m.String()
	tl.TemperatureC = m.Double()
	tl.Color = m.Int()
	return tl
}

func decode_TL_peerStories(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerStories)
	return decode_body_TL_peerStories(m)
}
func decode_body_TL_peerStories(m *DecodeBuf) TL {
	tl := TL_peerStories{}
	flags := m.Int()
	tl.Peer = m.Object()
	if flags&(1<<0) != 0 {
		tl.MaxReadID = Ref(m.Int())
	}
	tl.Stories = m.Vector()
	return tl
}

func decode_TL_stories_peerStories(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stories_peerStories)
	return decode_body_TL_stories_peerStories(m)
}
func decode_body_TL_stories_peerStories(m *DecodeBuf) TL {
	tl := TL_stories_peerStories{}
	tl.Stories = decode_TL_peerStories(m).(TL_peerStories)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_webPage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_webPage)
	return decode_body_TL_messages_webPage(m)
}
func decode_body_TL_messages_webPage(m *DecodeBuf) TL {
	tl := TL_messages_webPage{}
	tl.Webpage = m.Object()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_premiumGiftCodeOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_premiumGiftCodeOption)
	return decode_body_TL_premiumGiftCodeOption(m)
}
func decode_body_TL_premiumGiftCodeOption(m *DecodeBuf) TL {
	tl := TL_premiumGiftCodeOption{}
	flags := m.Int()
	tl.Users = m.Int()
	tl.Months = m.Int()
	if flags&(1<<0) != 0 {
		tl.StoreProduct = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.StoreQuantity = Ref(m.Int())
	}
	tl.Currency = m.String()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_payments_checkedGiftCode(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_checkedGiftCode)
	return decode_body_TL_payments_checkedGiftCode(m)
}
func decode_body_TL_payments_checkedGiftCode(m *DecodeBuf) TL {
	tl := TL_payments_checkedGiftCode{}
	flags := m.Int()
	tl.ViaGiveaway = flags&(1<<2) != 0
	if flags&(1<<4) != 0 {
		tl.FromID = m.Object()
	}
	if flags&(1<<3) != 0 {
		tl.GiveawayMsgID = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.ToID = Ref(m.Long())
	}
	tl.Date = m.Int()
	tl.Months = m.Int()
	if flags&(1<<1) != 0 {
		tl.UsedDate = Ref(m.Int())
	}
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_payments_giveawayInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_giveawayInfo)
	return decode_body_TL_payments_giveawayInfo(m)
}
func decode_body_TL_payments_giveawayInfo(m *DecodeBuf) TL {
	tl := TL_payments_giveawayInfo{}
	flags := m.Int()
	tl.Participating = flags&(1<<0) != 0
	tl.PreparingResults = flags&(1<<3) != 0
	tl.StartDate = m.Int()
	if flags&(1<<1) != 0 {
		tl.JoinedTooEarlyDate = Ref(m.Int())
	}
	if flags&(1<<2) != 0 {
		tl.AdminDisallowedChatID = Ref(m.Long())
	}
	if flags&(1<<4) != 0 {
		tl.DisallowedCountry = Ref(m.String())
	}
	return tl
}

func decode_TL_payments_giveawayInfoResults(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_giveawayInfoResults)
	return decode_body_TL_payments_giveawayInfoResults(m)
}
func decode_body_TL_payments_giveawayInfoResults(m *DecodeBuf) TL {
	tl := TL_payments_giveawayInfoResults{}
	flags := m.Int()
	tl.Winner = flags&(1<<0) != 0
	tl.Refunded = flags&(1<<1) != 0
	tl.StartDate = m.Int()
	if flags&(1<<3) != 0 {
		tl.GiftCodeSlug = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.StarsPrize = Ref(m.Long())
	}
	tl.FinishDate = m.Int()
	tl.WinnersCount = m.Int()
	if flags&(1<<2) != 0 {
		tl.ActivatedCount = Ref(m.Int())
	}
	return tl
}

func decode_TL_prepaidGiveaway(m *DecodeBuf) TL {
	m.constructorAssert(CRC_prepaidGiveaway)
	return decode_body_TL_prepaidGiveaway(m)
}
func decode_body_TL_prepaidGiveaway(m *DecodeBuf) TL {
	tl := TL_prepaidGiveaway{}
	tl.ID = m.Long()
	tl.Months = m.Int()
	tl.Quantity = m.Int()
	tl.Date = m.Int()
	return tl
}

func decode_TL_prepaidStarsGiveaway(m *DecodeBuf) TL {
	m.constructorAssert(CRC_prepaidStarsGiveaway)
	return decode_body_TL_prepaidStarsGiveaway(m)
}
func decode_body_TL_prepaidStarsGiveaway(m *DecodeBuf) TL {
	tl := TL_prepaidStarsGiveaway{}
	tl.ID = m.Long()
	tl.Stars = m.Long()
	tl.Quantity = m.Int()
	tl.Boosts = m.Int()
	tl.Date = m.Int()
	return tl
}

func decode_TL_boost(m *DecodeBuf) TL {
	m.constructorAssert(CRC_boost)
	return decode_body_TL_boost(m)
}
func decode_body_TL_boost(m *DecodeBuf) TL {
	tl := TL_boost{}
	flags := m.Int()
	tl.Gift = flags&(1<<1) != 0
	tl.Giveaway = flags&(1<<2) != 0
	tl.Unclaimed = flags&(1<<3) != 0
	tl.ID = m.String()
	if flags&(1<<0) != 0 {
		tl.UserID = Ref(m.Long())
	}
	if flags&(1<<2) != 0 {
		tl.GiveawayMsgID = Ref(m.Int())
	}
	tl.Date = m.Int()
	tl.Expires = m.Int()
	if flags&(1<<4) != 0 {
		tl.UsedGiftSlug = Ref(m.String())
	}
	if flags&(1<<5) != 0 {
		tl.Multiplier = Ref(m.Int())
	}
	if flags&(1<<6) != 0 {
		tl.Stars = Ref(m.Long())
	}
	return tl
}

func decode_TL_premium_boostsList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_premium_boostsList)
	return decode_body_TL_premium_boostsList(m)
}
func decode_body_TL_premium_boostsList(m *DecodeBuf) TL {
	tl := TL_premium_boostsList{}
	flags := m.Int()
	tl.Count = m.Int()
	tl.Boosts = DecodeBuf_GenericVector[TL_boost](m)
	if flags&(1<<0) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	tl.Users = m.Vector()
	return tl
}

func decode_TL_myBoost(m *DecodeBuf) TL {
	m.constructorAssert(CRC_myBoost)
	return decode_body_TL_myBoost(m)
}
func decode_body_TL_myBoost(m *DecodeBuf) TL {
	tl := TL_myBoost{}
	flags := m.Int()
	tl.Slot = m.Int()
	if flags&(1<<0) != 0 {
		tl.Peer = m.Object()
	}
	tl.Date = m.Int()
	tl.Expires = m.Int()
	if flags&(1<<1) != 0 {
		tl.CooldownUntilDate = Ref(m.Int())
	}
	return tl
}

func decode_TL_premium_myBoosts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_premium_myBoosts)
	return decode_body_TL_premium_myBoosts(m)
}
func decode_body_TL_premium_myBoosts(m *DecodeBuf) TL {
	tl := TL_premium_myBoosts{}
	tl.MyBoosts = DecodeBuf_GenericVector[TL_myBoost](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_premium_boostsStatus(m *DecodeBuf) TL {
	m.constructorAssert(CRC_premium_boostsStatus)
	return decode_body_TL_premium_boostsStatus(m)
}
func decode_body_TL_premium_boostsStatus(m *DecodeBuf) TL {
	tl := TL_premium_boostsStatus{}
	flags := m.Int()
	tl.MyBoost = flags&(1<<2) != 0
	tl.Level = m.Int()
	tl.CurrentLevelBoosts = m.Int()
	tl.Boosts = m.Int()
	if flags&(1<<4) != 0 {
		tl.GiftBoosts = Ref(m.Int())
	}
	if flags&(1<<0) != 0 {
		tl.NextLevelBoosts = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.PremiumAudience = Ref(decode_TL_statsPercentValue(m).(TL_statsPercentValue))
	}
	tl.BoostURL = m.String()
	if flags&(1<<3) != 0 {
		tl.PrepaidGiveaways = m.Vector()
	}
	if flags&(1<<2) != 0 {
		tl.MyBoostSlots = m.VectorInt()
	}
	return tl
}

func decode_TL_storyFwdHeader(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyFwdHeader)
	return decode_body_TL_storyFwdHeader(m)
}
func decode_body_TL_storyFwdHeader(m *DecodeBuf) TL {
	tl := TL_storyFwdHeader{}
	flags := m.Int()
	tl.Modified = flags&(1<<3) != 0
	if flags&(1<<0) != 0 {
		tl.From = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.FromName = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.StoryID = Ref(m.Int())
	}
	return tl
}

func decode_TL_postInteractionCountersMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_postInteractionCountersMessage)
	return decode_body_TL_postInteractionCountersMessage(m)
}
func decode_body_TL_postInteractionCountersMessage(m *DecodeBuf) TL {
	tl := TL_postInteractionCountersMessage{}
	tl.MsgID = m.Int()
	tl.Views = m.Int()
	tl.Forwards = m.Int()
	tl.Reactions = m.Int()
	return tl
}

func decode_TL_postInteractionCountersStory(m *DecodeBuf) TL {
	m.constructorAssert(CRC_postInteractionCountersStory)
	return decode_body_TL_postInteractionCountersStory(m)
}
func decode_body_TL_postInteractionCountersStory(m *DecodeBuf) TL {
	tl := TL_postInteractionCountersStory{}
	tl.StoryID = m.Int()
	tl.Views = m.Int()
	tl.Forwards = m.Int()
	tl.Reactions = m.Int()
	return tl
}

func decode_TL_stats_storyStats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stats_storyStats)
	return decode_body_TL_stats_storyStats(m)
}
func decode_body_TL_stats_storyStats(m *DecodeBuf) TL {
	tl := TL_stats_storyStats{}
	tl.ViewsGraph = m.Object()
	tl.ReactionsByEmotionGraph = m.Object()
	return tl
}

func decode_TL_publicForwardMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_publicForwardMessage)
	return decode_body_TL_publicForwardMessage(m)
}
func decode_body_TL_publicForwardMessage(m *DecodeBuf) TL {
	tl := TL_publicForwardMessage{}
	tl.Message = m.Object()
	return tl
}

func decode_TL_publicForwardStory(m *DecodeBuf) TL {
	m.constructorAssert(CRC_publicForwardStory)
	return decode_body_TL_publicForwardStory(m)
}
func decode_body_TL_publicForwardStory(m *DecodeBuf) TL {
	tl := TL_publicForwardStory{}
	tl.Peer = m.Object()
	tl.Story = m.Object()
	return tl
}

func decode_TL_stats_publicForwards(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stats_publicForwards)
	return decode_body_TL_stats_publicForwards(m)
}
func decode_body_TL_stats_publicForwards(m *DecodeBuf) TL {
	tl := TL_stats_publicForwards{}
	flags := m.Int()
	tl.Count = m.Int()
	tl.Forwards = m.Vector()
	if flags&(1<<0) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_peerColor(m *DecodeBuf) TL {
	m.constructorAssert(CRC_peerColor)
	return decode_body_TL_peerColor(m)
}
func decode_body_TL_peerColor(m *DecodeBuf) TL {
	tl := TL_peerColor{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.Color = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.BackgroundEmojiID = Ref(m.Long())
	}
	return tl
}

func decode_TL_help_peerColorSet(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_peerColorSet)
	return decode_body_TL_help_peerColorSet(m)
}
func decode_body_TL_help_peerColorSet(m *DecodeBuf) TL {
	tl := TL_help_peerColorSet{}
	tl.Colors = m.VectorInt()
	return tl
}

func decode_TL_help_peerColorProfileSet(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_peerColorProfileSet)
	return decode_body_TL_help_peerColorProfileSet(m)
}
func decode_body_TL_help_peerColorProfileSet(m *DecodeBuf) TL {
	tl := TL_help_peerColorProfileSet{}
	tl.PaletteColors = m.VectorInt()
	tl.BgColors = m.VectorInt()
	tl.StoryColors = m.VectorInt()
	return tl
}

func decode_TL_help_peerColorOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_peerColorOption)
	return decode_body_TL_help_peerColorOption(m)
}
func decode_body_TL_help_peerColorOption(m *DecodeBuf) TL {
	tl := TL_help_peerColorOption{}
	flags := m.Int()
	tl.Hidden = flags&(1<<0) != 0
	tl.ColorID = m.Int()
	if flags&(1<<1) != 0 {
		tl.Colors = m.Object()
	}
	if flags&(1<<2) != 0 {
		tl.DarkColors = m.Object()
	}
	if flags&(1<<3) != 0 {
		tl.ChannelMinLevel = Ref(m.Int())
	}
	if flags&(1<<4) != 0 {
		tl.GroupMinLevel = Ref(m.Int())
	}
	return tl
}

func decode_TL_help_peerColorsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_peerColorsNotModified)
	return decode_body_TL_help_peerColorsNotModified(m)
}
func decode_body_TL_help_peerColorsNotModified(_ *DecodeBuf) TL {
	tl := TL_help_peerColorsNotModified{}
	return tl
}

func decode_TL_help_peerColors(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_peerColors)
	return decode_body_TL_help_peerColors(m)
}
func decode_body_TL_help_peerColors(m *DecodeBuf) TL {
	tl := TL_help_peerColors{}
	tl.Hash = m.Int()
	tl.Colors = DecodeBuf_GenericVector[TL_help_peerColorOption](m)
	return tl
}

func decode_TL_storyReaction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyReaction)
	return decode_body_TL_storyReaction(m)
}
func decode_body_TL_storyReaction(m *DecodeBuf) TL {
	tl := TL_storyReaction{}
	tl.PeerID = m.Object()
	tl.Date = m.Int()
	tl.Reaction = m.Object()
	return tl
}

func decode_TL_storyReactionPublicForward(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyReactionPublicForward)
	return decode_body_TL_storyReactionPublicForward(m)
}
func decode_body_TL_storyReactionPublicForward(m *DecodeBuf) TL {
	tl := TL_storyReactionPublicForward{}
	tl.Message = m.Object()
	return tl
}

func decode_TL_storyReactionPublicRepost(m *DecodeBuf) TL {
	m.constructorAssert(CRC_storyReactionPublicRepost)
	return decode_body_TL_storyReactionPublicRepost(m)
}
func decode_body_TL_storyReactionPublicRepost(m *DecodeBuf) TL {
	tl := TL_storyReactionPublicRepost{}
	tl.PeerID = m.Object()
	tl.Story = m.Object()
	return tl
}

func decode_TL_stories_storyReactionsList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stories_storyReactionsList)
	return decode_body_TL_stories_storyReactionsList(m)
}
func decode_body_TL_stories_storyReactionsList(m *DecodeBuf) TL {
	tl := TL_stories_storyReactionsList{}
	flags := m.Int()
	tl.Count = m.Int()
	tl.Reactions = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	if flags&(1<<0) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	return tl
}

func decode_TL_savedDialog(m *DecodeBuf) TL {
	m.constructorAssert(CRC_savedDialog)
	return decode_body_TL_savedDialog(m)
}
func decode_body_TL_savedDialog(m *DecodeBuf) TL {
	tl := TL_savedDialog{}
	flags := m.Int()
	tl.Pinned = flags&(1<<2) != 0
	tl.Peer = m.Object()
	tl.TopMessage = m.Int()
	return tl
}

func decode_TL_messages_savedDialogs(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_savedDialogs)
	return decode_body_TL_messages_savedDialogs(m)
}
func decode_body_TL_messages_savedDialogs(m *DecodeBuf) TL {
	tl := TL_messages_savedDialogs{}
	tl.Dialogs = DecodeBuf_GenericVector[TL_savedDialog](m)
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_savedDialogsSlice(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_savedDialogsSlice)
	return decode_body_TL_messages_savedDialogsSlice(m)
}
func decode_body_TL_messages_savedDialogsSlice(m *DecodeBuf) TL {
	tl := TL_messages_savedDialogsSlice{}
	tl.Count = m.Int()
	tl.Dialogs = DecodeBuf_GenericVector[TL_savedDialog](m)
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_savedDialogsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_savedDialogsNotModified)
	return decode_body_TL_messages_savedDialogsNotModified(m)
}
func decode_body_TL_messages_savedDialogsNotModified(m *DecodeBuf) TL {
	tl := TL_messages_savedDialogsNotModified{}
	tl.Count = m.Int()
	return tl
}

func decode_TL_savedReactionTag(m *DecodeBuf) TL {
	m.constructorAssert(CRC_savedReactionTag)
	return decode_body_TL_savedReactionTag(m)
}
func decode_body_TL_savedReactionTag(m *DecodeBuf) TL {
	tl := TL_savedReactionTag{}
	flags := m.Int()
	tl.Reaction = m.Object()
	if flags&(1<<0) != 0 {
		tl.Title = Ref(m.String())
	}
	tl.Count = m.Int()
	return tl
}

func decode_TL_messages_savedReactionTagsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_savedReactionTagsNotModified)
	return decode_body_TL_messages_savedReactionTagsNotModified(m)
}
func decode_body_TL_messages_savedReactionTagsNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_savedReactionTagsNotModified{}
	return tl
}

func decode_TL_messages_savedReactionTags(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_savedReactionTags)
	return decode_body_TL_messages_savedReactionTags(m)
}
func decode_body_TL_messages_savedReactionTags(m *DecodeBuf) TL {
	tl := TL_messages_savedReactionTags{}
	tl.Tags = DecodeBuf_GenericVector[TL_savedReactionTag](m)
	tl.Hash = m.Long()
	return tl
}

func decode_TL_outboxReadDate(m *DecodeBuf) TL {
	m.constructorAssert(CRC_outboxReadDate)
	return decode_body_TL_outboxReadDate(m)
}
func decode_body_TL_outboxReadDate(m *DecodeBuf) TL {
	tl := TL_outboxReadDate{}
	tl.Date = m.Int()
	return tl
}

func decode_TL_smsjobs_eligibleToJoin(m *DecodeBuf) TL {
	m.constructorAssert(CRC_smsjobs_eligibleToJoin)
	return decode_body_TL_smsjobs_eligibleToJoin(m)
}
func decode_body_TL_smsjobs_eligibleToJoin(m *DecodeBuf) TL {
	tl := TL_smsjobs_eligibleToJoin{}
	tl.TermsURL = m.String()
	tl.MonthlySentSMS = m.Int()
	return tl
}

func decode_TL_smsjobs_status(m *DecodeBuf) TL {
	m.constructorAssert(CRC_smsjobs_status)
	return decode_body_TL_smsjobs_status(m)
}
func decode_body_TL_smsjobs_status(m *DecodeBuf) TL {
	tl := TL_smsjobs_status{}
	flags := m.Int()
	tl.AllowInternational = flags&(1<<0) != 0
	tl.RecentSent = m.Int()
	tl.RecentSince = m.Int()
	tl.RecentRemains = m.Int()
	tl.TotalSent = m.Int()
	tl.TotalSince = m.Int()
	if flags&(1<<1) != 0 {
		tl.LastGiftSlug = Ref(m.String())
	}
	tl.TermsURL = m.String()
	return tl
}

func decode_TL_smsJob(m *DecodeBuf) TL {
	m.constructorAssert(CRC_smsJob)
	return decode_body_TL_smsJob(m)
}
func decode_body_TL_smsJob(m *DecodeBuf) TL {
	tl := TL_smsJob{}
	tl.JobID = m.String()
	tl.PhoneNumber = m.String()
	tl.Text = m.String()
	return tl
}

func decode_TL_businessWeeklyOpen(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessWeeklyOpen)
	return decode_body_TL_businessWeeklyOpen(m)
}
func decode_body_TL_businessWeeklyOpen(m *DecodeBuf) TL {
	tl := TL_businessWeeklyOpen{}
	tl.StartMinute = m.Int()
	tl.EndMinute = m.Int()
	return tl
}

func decode_TL_businessWorkHours(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessWorkHours)
	return decode_body_TL_businessWorkHours(m)
}
func decode_body_TL_businessWorkHours(m *DecodeBuf) TL {
	tl := TL_businessWorkHours{}
	flags := m.Int()
	tl.OpenNow = flags&(1<<0) != 0
	tl.TimezoneID = m.String()
	tl.WeeklyOpen = DecodeBuf_GenericVector[TL_businessWeeklyOpen](m)
	return tl
}

func decode_TL_businessLocation(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessLocation)
	return decode_body_TL_businessLocation(m)
}
func decode_body_TL_businessLocation(m *DecodeBuf) TL {
	tl := TL_businessLocation{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.GeoPoint = m.Object()
	}
	tl.Address = m.String()
	return tl
}

func decode_TL_inputBusinessRecipients(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBusinessRecipients)
	return decode_body_TL_inputBusinessRecipients(m)
}
func decode_body_TL_inputBusinessRecipients(m *DecodeBuf) TL {
	tl := TL_inputBusinessRecipients{}
	flags := m.Int()
	tl.ExistingChats = flags&(1<<0) != 0
	tl.NewChats = flags&(1<<1) != 0
	tl.Contacts = flags&(1<<2) != 0
	tl.NonContacts = flags&(1<<3) != 0
	tl.ExcludeSelected = flags&(1<<5) != 0
	if flags&(1<<4) != 0 {
		tl.Users = m.Vector()
	}
	return tl
}

func decode_TL_businessRecipients(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessRecipients)
	return decode_body_TL_businessRecipients(m)
}
func decode_body_TL_businessRecipients(m *DecodeBuf) TL {
	tl := TL_businessRecipients{}
	flags := m.Int()
	tl.ExistingChats = flags&(1<<0) != 0
	tl.NewChats = flags&(1<<1) != 0
	tl.Contacts = flags&(1<<2) != 0
	tl.NonContacts = flags&(1<<3) != 0
	tl.ExcludeSelected = flags&(1<<5) != 0
	if flags&(1<<4) != 0 {
		tl.Users = m.VectorLong()
	}
	return tl
}

func decode_TL_businessAwayMessageScheduleAlways(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessAwayMessageScheduleAlways)
	return decode_body_TL_businessAwayMessageScheduleAlways(m)
}
func decode_body_TL_businessAwayMessageScheduleAlways(_ *DecodeBuf) TL {
	tl := TL_businessAwayMessageScheduleAlways{}
	return tl
}

func decode_TL_businessAwayMessageScheduleOutsideWorkHours(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessAwayMessageScheduleOutsideWorkHours)
	return decode_body_TL_businessAwayMessageScheduleOutsideWorkHours(m)
}
func decode_body_TL_businessAwayMessageScheduleOutsideWorkHours(_ *DecodeBuf) TL {
	tl := TL_businessAwayMessageScheduleOutsideWorkHours{}
	return tl
}

func decode_TL_businessAwayMessageScheduleCustom(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessAwayMessageScheduleCustom)
	return decode_body_TL_businessAwayMessageScheduleCustom(m)
}
func decode_body_TL_businessAwayMessageScheduleCustom(m *DecodeBuf) TL {
	tl := TL_businessAwayMessageScheduleCustom{}
	tl.StartDate = m.Int()
	tl.EndDate = m.Int()
	return tl
}

func decode_TL_inputBusinessGreetingMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBusinessGreetingMessage)
	return decode_body_TL_inputBusinessGreetingMessage(m)
}
func decode_body_TL_inputBusinessGreetingMessage(m *DecodeBuf) TL {
	tl := TL_inputBusinessGreetingMessage{}
	tl.ShortcutID = m.Int()
	tl.Recipients = decode_TL_inputBusinessRecipients(m).(TL_inputBusinessRecipients)
	tl.NoActivityDays = m.Int()
	return tl
}

func decode_TL_businessGreetingMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessGreetingMessage)
	return decode_body_TL_businessGreetingMessage(m)
}
func decode_body_TL_businessGreetingMessage(m *DecodeBuf) TL {
	tl := TL_businessGreetingMessage{}
	tl.ShortcutID = m.Int()
	tl.Recipients = decode_TL_businessRecipients(m).(TL_businessRecipients)
	tl.NoActivityDays = m.Int()
	return tl
}

func decode_TL_inputBusinessAwayMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBusinessAwayMessage)
	return decode_body_TL_inputBusinessAwayMessage(m)
}
func decode_body_TL_inputBusinessAwayMessage(m *DecodeBuf) TL {
	tl := TL_inputBusinessAwayMessage{}
	flags := m.Int()
	tl.OfflineOnly = flags&(1<<0) != 0
	tl.ShortcutID = m.Int()
	tl.Schedule = m.Object()
	tl.Recipients = decode_TL_inputBusinessRecipients(m).(TL_inputBusinessRecipients)
	return tl
}

func decode_TL_businessAwayMessage(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessAwayMessage)
	return decode_body_TL_businessAwayMessage(m)
}
func decode_body_TL_businessAwayMessage(m *DecodeBuf) TL {
	tl := TL_businessAwayMessage{}
	flags := m.Int()
	tl.OfflineOnly = flags&(1<<0) != 0
	tl.ShortcutID = m.Int()
	tl.Schedule = m.Object()
	tl.Recipients = decode_TL_businessRecipients(m).(TL_businessRecipients)
	return tl
}

func decode_TL_timezone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_timezone)
	return decode_body_TL_timezone(m)
}
func decode_body_TL_timezone(m *DecodeBuf) TL {
	tl := TL_timezone{}
	tl.ID = m.String()
	tl.Name = m.String()
	tl.UtcOffset = m.Int()
	return tl
}

func decode_TL_help_timezonesListNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_timezonesListNotModified)
	return decode_body_TL_help_timezonesListNotModified(m)
}
func decode_body_TL_help_timezonesListNotModified(_ *DecodeBuf) TL {
	tl := TL_help_timezonesListNotModified{}
	return tl
}

func decode_TL_help_timezonesList(m *DecodeBuf) TL {
	m.constructorAssert(CRC_help_timezonesList)
	return decode_body_TL_help_timezonesList(m)
}
func decode_body_TL_help_timezonesList(m *DecodeBuf) TL {
	tl := TL_help_timezonesList{}
	tl.Timezones = DecodeBuf_GenericVector[TL_timezone](m)
	tl.Hash = m.Int()
	return tl
}

func decode_TL_quickReply(m *DecodeBuf) TL {
	m.constructorAssert(CRC_quickReply)
	return decode_body_TL_quickReply(m)
}
func decode_body_TL_quickReply(m *DecodeBuf) TL {
	tl := TL_quickReply{}
	tl.ShortcutID = m.Int()
	tl.Shortcut = m.String()
	tl.TopMessage = m.Int()
	tl.Count = m.Int()
	return tl
}

func decode_TL_inputQuickReplyShortcut(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputQuickReplyShortcut)
	return decode_body_TL_inputQuickReplyShortcut(m)
}
func decode_body_TL_inputQuickReplyShortcut(m *DecodeBuf) TL {
	tl := TL_inputQuickReplyShortcut{}
	tl.Shortcut = m.String()
	return tl
}

func decode_TL_inputQuickReplyShortcutID(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputQuickReplyShortcutID)
	return decode_body_TL_inputQuickReplyShortcutID(m)
}
func decode_body_TL_inputQuickReplyShortcutID(m *DecodeBuf) TL {
	tl := TL_inputQuickReplyShortcutID{}
	tl.ShortcutID = m.Int()
	return tl
}

func decode_TL_messages_quickReplies(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_quickReplies)
	return decode_body_TL_messages_quickReplies(m)
}
func decode_body_TL_messages_quickReplies(m *DecodeBuf) TL {
	tl := TL_messages_quickReplies{}
	tl.QuickReplies = DecodeBuf_GenericVector[TL_quickReply](m)
	tl.Messages = m.Vector()
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_quickRepliesNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_quickRepliesNotModified)
	return decode_body_TL_messages_quickRepliesNotModified(m)
}
func decode_body_TL_messages_quickRepliesNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_quickRepliesNotModified{}
	return tl
}

func decode_TL_connectedBot(m *DecodeBuf) TL {
	m.constructorAssert(CRC_connectedBot)
	return decode_body_TL_connectedBot(m)
}
func decode_body_TL_connectedBot(m *DecodeBuf) TL {
	tl := TL_connectedBot{}
	flags := m.Int()
	tl.CanReply = flags&(1<<0) != 0
	tl.BotID = m.Long()
	tl.Recipients = decode_TL_businessBotRecipients(m).(TL_businessBotRecipients)
	return tl
}

func decode_TL_account_connectedBots(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_connectedBots)
	return decode_body_TL_account_connectedBots(m)
}
func decode_body_TL_account_connectedBots(m *DecodeBuf) TL {
	tl := TL_account_connectedBots{}
	tl.ConnectedBots = DecodeBuf_GenericVector[TL_connectedBot](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_messages_dialogFilters(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_dialogFilters)
	return decode_body_TL_messages_dialogFilters(m)
}
func decode_body_TL_messages_dialogFilters(m *DecodeBuf) TL {
	tl := TL_messages_dialogFilters{}
	flags := m.Int()
	tl.TagsEnabled = flags&(1<<0) != 0
	tl.Filters = m.Vector()
	return tl
}

func decode_TL_birthday(m *DecodeBuf) TL {
	m.constructorAssert(CRC_birthday)
	return decode_body_TL_birthday(m)
}
func decode_body_TL_birthday(m *DecodeBuf) TL {
	tl := TL_birthday{}
	flags := m.Int()
	tl.Day = m.Int()
	tl.Month = m.Int()
	if flags&(1<<0) != 0 {
		tl.Year = Ref(m.Int())
	}
	return tl
}

func decode_TL_botBusinessConnection(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botBusinessConnection)
	return decode_body_TL_botBusinessConnection(m)
}
func decode_body_TL_botBusinessConnection(m *DecodeBuf) TL {
	tl := TL_botBusinessConnection{}
	flags := m.Int()
	tl.CanReply = flags&(1<<0) != 0
	tl.Disabled = flags&(1<<1) != 0
	tl.ConnectionID = m.String()
	tl.UserID = m.Long()
	tl.DCID = m.Int()
	tl.Date = m.Int()
	return tl
}

func decode_TL_inputBusinessIntro(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBusinessIntro)
	return decode_body_TL_inputBusinessIntro(m)
}
func decode_body_TL_inputBusinessIntro(m *DecodeBuf) TL {
	tl := TL_inputBusinessIntro{}
	flags := m.Int()
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<0) != 0 {
		tl.Sticker = m.Object()
	}
	return tl
}

func decode_TL_businessIntro(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessIntro)
	return decode_body_TL_businessIntro(m)
}
func decode_body_TL_businessIntro(m *DecodeBuf) TL {
	tl := TL_businessIntro{}
	flags := m.Int()
	tl.Title = m.String()
	tl.Description = m.String()
	if flags&(1<<0) != 0 {
		tl.Sticker = m.Object()
	}
	return tl
}

func decode_TL_messages_myStickers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_myStickers)
	return decode_body_TL_messages_myStickers(m)
}
func decode_body_TL_messages_myStickers(m *DecodeBuf) TL {
	tl := TL_messages_myStickers{}
	tl.Count = m.Int()
	tl.Sets = m.Vector()
	return tl
}

func decode_TL_inputCollectibleUsername(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputCollectibleUsername)
	return decode_body_TL_inputCollectibleUsername(m)
}
func decode_body_TL_inputCollectibleUsername(m *DecodeBuf) TL {
	tl := TL_inputCollectibleUsername{}
	tl.Username = m.String()
	return tl
}

func decode_TL_inputCollectiblePhone(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputCollectiblePhone)
	return decode_body_TL_inputCollectiblePhone(m)
}
func decode_body_TL_inputCollectiblePhone(m *DecodeBuf) TL {
	tl := TL_inputCollectiblePhone{}
	tl.Phone = m.String()
	return tl
}

func decode_TL_fragment_collectibleInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_fragment_collectibleInfo)
	return decode_body_TL_fragment_collectibleInfo(m)
}
func decode_body_TL_fragment_collectibleInfo(m *DecodeBuf) TL {
	tl := TL_fragment_collectibleInfo{}
	tl.PurchaseDate = m.Int()
	tl.Currency = m.String()
	tl.Amount = m.Long()
	tl.CryptoCurrency = m.String()
	tl.CryptoAmount = m.Long()
	tl.URL = m.String()
	return tl
}

func decode_TL_inputBusinessBotRecipients(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBusinessBotRecipients)
	return decode_body_TL_inputBusinessBotRecipients(m)
}
func decode_body_TL_inputBusinessBotRecipients(m *DecodeBuf) TL {
	tl := TL_inputBusinessBotRecipients{}
	flags := m.Int()
	tl.ExistingChats = flags&(1<<0) != 0
	tl.NewChats = flags&(1<<1) != 0
	tl.Contacts = flags&(1<<2) != 0
	tl.NonContacts = flags&(1<<3) != 0
	tl.ExcludeSelected = flags&(1<<5) != 0
	if flags&(1<<4) != 0 {
		tl.Users = m.Vector()
	}
	if flags&(1<<6) != 0 {
		tl.ExcludeUsers = m.Vector()
	}
	return tl
}

func decode_TL_businessBotRecipients(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessBotRecipients)
	return decode_body_TL_businessBotRecipients(m)
}
func decode_body_TL_businessBotRecipients(m *DecodeBuf) TL {
	tl := TL_businessBotRecipients{}
	flags := m.Int()
	tl.ExistingChats = flags&(1<<0) != 0
	tl.NewChats = flags&(1<<1) != 0
	tl.Contacts = flags&(1<<2) != 0
	tl.NonContacts = flags&(1<<3) != 0
	tl.ExcludeSelected = flags&(1<<5) != 0
	if flags&(1<<4) != 0 {
		tl.Users = m.VectorLong()
	}
	if flags&(1<<6) != 0 {
		tl.ExcludeUsers = m.VectorLong()
	}
	return tl
}

func decode_TL_contactBirthday(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contactBirthday)
	return decode_body_TL_contactBirthday(m)
}
func decode_body_TL_contactBirthday(m *DecodeBuf) TL {
	tl := TL_contactBirthday{}
	tl.ContactID = m.Long()
	tl.Birthday = decode_TL_birthday(m).(TL_birthday)
	return tl
}

func decode_TL_contacts_contactBirthdays(m *DecodeBuf) TL {
	m.constructorAssert(CRC_contacts_contactBirthdays)
	return decode_body_TL_contacts_contactBirthdays(m)
}
func decode_body_TL_contacts_contactBirthdays(m *DecodeBuf) TL {
	tl := TL_contacts_contactBirthdays{}
	tl.Contacts = DecodeBuf_GenericVector[TL_contactBirthday](m)
	tl.Users = m.Vector()
	return tl
}

func decode_TL_missingInvitee(m *DecodeBuf) TL {
	m.constructorAssert(CRC_missingInvitee)
	return decode_body_TL_missingInvitee(m)
}
func decode_body_TL_missingInvitee(m *DecodeBuf) TL {
	tl := TL_missingInvitee{}
	flags := m.Int()
	tl.PremiumWouldAllowInvite = flags&(1<<0) != 0
	tl.PremiumRequiredForPM = flags&(1<<1) != 0
	tl.UserID = m.Long()
	return tl
}

func decode_TL_messages_invitedUsers(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_invitedUsers)
	return decode_body_TL_messages_invitedUsers(m)
}
func decode_body_TL_messages_invitedUsers(m *DecodeBuf) TL {
	tl := TL_messages_invitedUsers{}
	tl.Updates = m.Object()
	tl.MissingInvitees = DecodeBuf_GenericVector[TL_missingInvitee](m)
	return tl
}

func decode_TL_inputBusinessChatLink(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputBusinessChatLink)
	return decode_body_TL_inputBusinessChatLink(m)
}
func decode_body_TL_inputBusinessChatLink(m *DecodeBuf) TL {
	tl := TL_inputBusinessChatLink{}
	flags := m.Int()
	tl.Message = m.String()
	if flags&(1<<0) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<1) != 0 {
		tl.Title = Ref(m.String())
	}
	return tl
}

func decode_TL_businessChatLink(m *DecodeBuf) TL {
	m.constructorAssert(CRC_businessChatLink)
	return decode_body_TL_businessChatLink(m)
}
func decode_body_TL_businessChatLink(m *DecodeBuf) TL {
	tl := TL_businessChatLink{}
	flags := m.Int()
	tl.Link = m.String()
	tl.Message = m.String()
	if flags&(1<<0) != 0 {
		tl.Entities = m.Vector()
	}
	if flags&(1<<1) != 0 {
		tl.Title = Ref(m.String())
	}
	tl.Views = m.Int()
	return tl
}

func decode_TL_account_businessChatLinks(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_businessChatLinks)
	return decode_body_TL_account_businessChatLinks(m)
}
func decode_body_TL_account_businessChatLinks(m *DecodeBuf) TL {
	tl := TL_account_businessChatLinks{}
	tl.Links = DecodeBuf_GenericVector[TL_businessChatLink](m)
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_account_resolvedBusinessChatLinks(m *DecodeBuf) TL {
	m.constructorAssert(CRC_account_resolvedBusinessChatLinks)
	return decode_body_TL_account_resolvedBusinessChatLinks(m)
}
func decode_body_TL_account_resolvedBusinessChatLinks(m *DecodeBuf) TL {
	tl := TL_account_resolvedBusinessChatLinks{}
	flags := m.Int()
	tl.Peer = m.Object()
	tl.Message = m.String()
	if flags&(1<<0) != 0 {
		tl.Entities = m.Vector()
	}
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_requestedPeerUser(m *DecodeBuf) TL {
	m.constructorAssert(CRC_requestedPeerUser)
	return decode_body_TL_requestedPeerUser(m)
}
func decode_body_TL_requestedPeerUser(m *DecodeBuf) TL {
	tl := TL_requestedPeerUser{}
	flags := m.Int()
	tl.UserID = m.Long()
	if flags&(1<<0) != 0 {
		tl.FirstName = Ref(m.String())
	}
	if flags&(1<<0) != 0 {
		tl.LastName = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Username = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Photo = m.Object()
	}
	return tl
}

func decode_TL_requestedPeerChat(m *DecodeBuf) TL {
	m.constructorAssert(CRC_requestedPeerChat)
	return decode_body_TL_requestedPeerChat(m)
}
func decode_body_TL_requestedPeerChat(m *DecodeBuf) TL {
	tl := TL_requestedPeerChat{}
	flags := m.Int()
	tl.ChatID = m.Long()
	if flags&(1<<0) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Photo = m.Object()
	}
	return tl
}

func decode_TL_requestedPeerChannel(m *DecodeBuf) TL {
	m.constructorAssert(CRC_requestedPeerChannel)
	return decode_body_TL_requestedPeerChannel(m)
}
func decode_body_TL_requestedPeerChannel(m *DecodeBuf) TL {
	tl := TL_requestedPeerChannel{}
	flags := m.Int()
	tl.ChannelID = m.Long()
	if flags&(1<<0) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Username = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Photo = m.Object()
	}
	return tl
}

func decode_TL_sponsoredMessageReportOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_sponsoredMessageReportOption)
	return decode_body_TL_sponsoredMessageReportOption(m)
}
func decode_body_TL_sponsoredMessageReportOption(m *DecodeBuf) TL {
	tl := TL_sponsoredMessageReportOption{}
	tl.Text = m.String()
	tl.Option = m.StringBytes()
	return tl
}

func decode_TL_channels_sponsoredMessageReportResultChooseOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channels_sponsoredMessageReportResultChooseOption)
	return decode_body_TL_channels_sponsoredMessageReportResultChooseOption(m)
}
func decode_body_TL_channels_sponsoredMessageReportResultChooseOption(m *DecodeBuf) TL {
	tl := TL_channels_sponsoredMessageReportResultChooseOption{}
	tl.Title = m.String()
	tl.Options = DecodeBuf_GenericVector[TL_sponsoredMessageReportOption](m)
	return tl
}

func decode_TL_channels_sponsoredMessageReportResultAdsHidden(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channels_sponsoredMessageReportResultAdsHidden)
	return decode_body_TL_channels_sponsoredMessageReportResultAdsHidden(m)
}
func decode_body_TL_channels_sponsoredMessageReportResultAdsHidden(_ *DecodeBuf) TL {
	tl := TL_channels_sponsoredMessageReportResultAdsHidden{}
	return tl
}

func decode_TL_channels_sponsoredMessageReportResultReported(m *DecodeBuf) TL {
	m.constructorAssert(CRC_channels_sponsoredMessageReportResultReported)
	return decode_body_TL_channels_sponsoredMessageReportResultReported(m)
}
func decode_body_TL_channels_sponsoredMessageReportResultReported(_ *DecodeBuf) TL {
	tl := TL_channels_sponsoredMessageReportResultReported{}
	return tl
}

func decode_TL_stats_broadcastRevenueStats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stats_broadcastRevenueStats)
	return decode_body_TL_stats_broadcastRevenueStats(m)
}
func decode_body_TL_stats_broadcastRevenueStats(m *DecodeBuf) TL {
	tl := TL_stats_broadcastRevenueStats{}
	tl.TopHoursGraph = m.Object()
	tl.RevenueGraph = m.Object()
	tl.Balances = decode_TL_broadcastRevenueBalances(m).(TL_broadcastRevenueBalances)
	tl.UsdRate = m.Double()
	return tl
}

func decode_TL_stats_broadcastRevenueWithdrawalURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stats_broadcastRevenueWithdrawalURL)
	return decode_body_TL_stats_broadcastRevenueWithdrawalURL(m)
}
func decode_body_TL_stats_broadcastRevenueWithdrawalURL(m *DecodeBuf) TL {
	tl := TL_stats_broadcastRevenueWithdrawalURL{}
	tl.URL = m.String()
	return tl
}

func decode_TL_broadcastRevenueTransactionProceeds(m *DecodeBuf) TL {
	m.constructorAssert(CRC_broadcastRevenueTransactionProceeds)
	return decode_body_TL_broadcastRevenueTransactionProceeds(m)
}
func decode_body_TL_broadcastRevenueTransactionProceeds(m *DecodeBuf) TL {
	tl := TL_broadcastRevenueTransactionProceeds{}
	tl.Amount = m.Long()
	tl.FromDate = m.Int()
	tl.ToDate = m.Int()
	return tl
}

func decode_TL_broadcastRevenueTransactionWithdrawal(m *DecodeBuf) TL {
	m.constructorAssert(CRC_broadcastRevenueTransactionWithdrawal)
	return decode_body_TL_broadcastRevenueTransactionWithdrawal(m)
}
func decode_body_TL_broadcastRevenueTransactionWithdrawal(m *DecodeBuf) TL {
	tl := TL_broadcastRevenueTransactionWithdrawal{}
	flags := m.Int()
	tl.Pending = flags&(1<<0) != 0
	tl.Failed = flags&(1<<2) != 0
	tl.Amount = m.Long()
	tl.Date = m.Int()
	tl.Provider = m.String()
	if flags&(1<<1) != 0 {
		tl.TransactionDate = Ref(m.Int())
	}
	if flags&(1<<1) != 0 {
		tl.TransactionURL = Ref(m.String())
	}
	return tl
}

func decode_TL_broadcastRevenueTransactionRefund(m *DecodeBuf) TL {
	m.constructorAssert(CRC_broadcastRevenueTransactionRefund)
	return decode_body_TL_broadcastRevenueTransactionRefund(m)
}
func decode_body_TL_broadcastRevenueTransactionRefund(m *DecodeBuf) TL {
	tl := TL_broadcastRevenueTransactionRefund{}
	tl.Amount = m.Long()
	tl.Date = m.Int()
	tl.Provider = m.String()
	return tl
}

func decode_TL_stats_broadcastRevenueTransactions(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stats_broadcastRevenueTransactions)
	return decode_body_TL_stats_broadcastRevenueTransactions(m)
}
func decode_body_TL_stats_broadcastRevenueTransactions(m *DecodeBuf) TL {
	tl := TL_stats_broadcastRevenueTransactions{}
	tl.Count = m.Int()
	tl.Transactions = m.Vector()
	return tl
}

func decode_TL_reactionNotificationsFromContacts(m *DecodeBuf) TL {
	m.constructorAssert(CRC_reactionNotificationsFromContacts)
	return decode_body_TL_reactionNotificationsFromContacts(m)
}
func decode_body_TL_reactionNotificationsFromContacts(_ *DecodeBuf) TL {
	tl := TL_reactionNotificationsFromContacts{}
	return tl
}

func decode_TL_reactionNotificationsFromAll(m *DecodeBuf) TL {
	m.constructorAssert(CRC_reactionNotificationsFromAll)
	return decode_body_TL_reactionNotificationsFromAll(m)
}
func decode_body_TL_reactionNotificationsFromAll(_ *DecodeBuf) TL {
	tl := TL_reactionNotificationsFromAll{}
	return tl
}

func decode_TL_reactionsNotifySettings(m *DecodeBuf) TL {
	m.constructorAssert(CRC_reactionsNotifySettings)
	return decode_body_TL_reactionsNotifySettings(m)
}
func decode_body_TL_reactionsNotifySettings(m *DecodeBuf) TL {
	tl := TL_reactionsNotifySettings{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.MessagesNotifyFrom = m.Object()
	}
	if flags&(1<<1) != 0 {
		tl.StoriesNotifyFrom = m.Object()
	}
	tl.Sound = m.Object()
	tl.ShowPreviews = m.Bool()
	return tl
}

func decode_TL_broadcastRevenueBalances(m *DecodeBuf) TL {
	m.constructorAssert(CRC_broadcastRevenueBalances)
	return decode_body_TL_broadcastRevenueBalances(m)
}
func decode_body_TL_broadcastRevenueBalances(m *DecodeBuf) TL {
	tl := TL_broadcastRevenueBalances{}
	flags := m.Int()
	tl.WithdrawalEnabled = flags&(1<<0) != 0
	tl.CurrentBalance = m.Long()
	tl.AvailableBalance = m.Long()
	tl.OverallRevenue = m.Long()
	return tl
}

func decode_TL_availableEffect(m *DecodeBuf) TL {
	m.constructorAssert(CRC_availableEffect)
	return decode_body_TL_availableEffect(m)
}
func decode_body_TL_availableEffect(m *DecodeBuf) TL {
	tl := TL_availableEffect{}
	flags := m.Int()
	tl.PremiumRequired = flags&(1<<2) != 0
	tl.ID = m.Long()
	tl.Emoticon = m.String()
	if flags&(1<<0) != 0 {
		tl.StaticIconID = Ref(m.Long())
	}
	tl.EffectStickerID = m.Long()
	if flags&(1<<1) != 0 {
		tl.EffectAnimationID = Ref(m.Long())
	}
	return tl
}

func decode_TL_messages_availableEffectsNotModified(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_availableEffectsNotModified)
	return decode_body_TL_messages_availableEffectsNotModified(m)
}
func decode_body_TL_messages_availableEffectsNotModified(_ *DecodeBuf) TL {
	tl := TL_messages_availableEffectsNotModified{}
	return tl
}

func decode_TL_messages_availableEffects(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messages_availableEffects)
	return decode_body_TL_messages_availableEffects(m)
}
func decode_body_TL_messages_availableEffects(m *DecodeBuf) TL {
	tl := TL_messages_availableEffects{}
	tl.Hash = m.Int()
	tl.Effects = DecodeBuf_GenericVector[TL_availableEffect](m)
	tl.Documents = m.Vector()
	return tl
}

func decode_TL_factCheck(m *DecodeBuf) TL {
	m.constructorAssert(CRC_factCheck)
	return decode_body_TL_factCheck(m)
}
func decode_body_TL_factCheck(m *DecodeBuf) TL {
	tl := TL_factCheck{}
	flags := m.Int()
	tl.NeedCheck = flags&(1<<0) != 0
	if flags&(1<<1) != 0 {
		tl.Country = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Text = Ref(decode_TL_textWithEntities(m).(TL_textWithEntities))
	}
	tl.Hash = m.Long()
	return tl
}

func decode_TL_starsTransactionPeerUnsupported(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsTransactionPeerUnsupported)
	return decode_body_TL_starsTransactionPeerUnsupported(m)
}
func decode_body_TL_starsTransactionPeerUnsupported(_ *DecodeBuf) TL {
	tl := TL_starsTransactionPeerUnsupported{}
	return tl
}

func decode_TL_starsTransactionPeerAppStore(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsTransactionPeerAppStore)
	return decode_body_TL_starsTransactionPeerAppStore(m)
}
func decode_body_TL_starsTransactionPeerAppStore(_ *DecodeBuf) TL {
	tl := TL_starsTransactionPeerAppStore{}
	return tl
}

func decode_TL_starsTransactionPeerPlayMarket(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsTransactionPeerPlayMarket)
	return decode_body_TL_starsTransactionPeerPlayMarket(m)
}
func decode_body_TL_starsTransactionPeerPlayMarket(_ *DecodeBuf) TL {
	tl := TL_starsTransactionPeerPlayMarket{}
	return tl
}

func decode_TL_starsTransactionPeerPremiumBot(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsTransactionPeerPremiumBot)
	return decode_body_TL_starsTransactionPeerPremiumBot(m)
}
func decode_body_TL_starsTransactionPeerPremiumBot(_ *DecodeBuf) TL {
	tl := TL_starsTransactionPeerPremiumBot{}
	return tl
}

func decode_TL_starsTransactionPeerFragment(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsTransactionPeerFragment)
	return decode_body_TL_starsTransactionPeerFragment(m)
}
func decode_body_TL_starsTransactionPeerFragment(_ *DecodeBuf) TL {
	tl := TL_starsTransactionPeerFragment{}
	return tl
}

func decode_TL_starsTransactionPeer(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsTransactionPeer)
	return decode_body_TL_starsTransactionPeer(m)
}
func decode_body_TL_starsTransactionPeer(m *DecodeBuf) TL {
	tl := TL_starsTransactionPeer{}
	tl.Peer = m.Object()
	return tl
}

func decode_TL_starsTransactionPeerAds(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsTransactionPeerAds)
	return decode_body_TL_starsTransactionPeerAds(m)
}
func decode_body_TL_starsTransactionPeerAds(_ *DecodeBuf) TL {
	tl := TL_starsTransactionPeerAds{}
	return tl
}

func decode_TL_starsTopupOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsTopupOption)
	return decode_body_TL_starsTopupOption(m)
}
func decode_body_TL_starsTopupOption(m *DecodeBuf) TL {
	tl := TL_starsTopupOption{}
	flags := m.Int()
	tl.Extended = flags&(1<<1) != 0
	tl.Stars = m.Long()
	if flags&(1<<0) != 0 {
		tl.StoreProduct = Ref(m.String())
	}
	tl.Currency = m.String()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_starsTransaction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsTransaction)
	return decode_body_TL_starsTransaction(m)
}
func decode_body_TL_starsTransaction(m *DecodeBuf) TL {
	tl := TL_starsTransaction{}
	flags := m.Int()
	tl.Refund = flags&(1<<3) != 0
	tl.Pending = flags&(1<<4) != 0
	tl.Failed = flags&(1<<6) != 0
	tl.Gift = flags&(1<<10) != 0
	tl.Reaction = flags&(1<<11) != 0
	tl.ID = m.String()
	tl.Stars = m.Long()
	tl.Date = m.Int()
	tl.Peer = m.Object()
	if flags&(1<<0) != 0 {
		tl.Title = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.Description = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Photo = m.Object()
	}
	if flags&(1<<5) != 0 {
		tl.TransactionDate = Ref(m.Int())
	}
	if flags&(1<<5) != 0 {
		tl.TransactionURL = Ref(m.String())
	}
	if flags&(1<<7) != 0 {
		tl.BotPayload = m.StringBytes()
	}
	if flags&(1<<8) != 0 {
		tl.MsgID = Ref(m.Int())
	}
	if flags&(1<<9) != 0 {
		tl.ExtendedMedia = m.Vector()
	}
	if flags&(1<<12) != 0 {
		tl.SubscriptionPeriod = Ref(m.Int())
	}
	if flags&(1<<13) != 0 {
		tl.GiveawayPostID = Ref(m.Int())
	}
	return tl
}

func decode_TL_payments_starsStatus(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_starsStatus)
	return decode_body_TL_payments_starsStatus(m)
}
func decode_body_TL_payments_starsStatus(m *DecodeBuf) TL {
	tl := TL_payments_starsStatus{}
	flags := m.Int()
	tl.Balance = m.Long()
	if flags&(1<<1) != 0 {
		tl.Subscriptions = DecodeBuf_GenericVector[TL_starsSubscription](m)
	}
	if flags&(1<<2) != 0 {
		tl.SubscriptionsNextOffset = Ref(m.String())
	}
	if flags&(1<<4) != 0 {
		tl.SubscriptionsMissingBalance = Ref(m.Long())
	}
	if flags&(1<<3) != 0 {
		tl.History = DecodeBuf_GenericVector[TL_starsTransaction](m)
	}
	if flags&(1<<0) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_foundStory(m *DecodeBuf) TL {
	m.constructorAssert(CRC_foundStory)
	return decode_body_TL_foundStory(m)
}
func decode_body_TL_foundStory(m *DecodeBuf) TL {
	tl := TL_foundStory{}
	tl.Peer = m.Object()
	tl.Story = m.Object()
	return tl
}

func decode_TL_stories_foundStories(m *DecodeBuf) TL {
	m.constructorAssert(CRC_stories_foundStories)
	return decode_body_TL_stories_foundStories(m)
}
func decode_body_TL_stories_foundStories(m *DecodeBuf) TL {
	tl := TL_stories_foundStories{}
	flags := m.Int()
	tl.Count = m.Int()
	tl.Stories = DecodeBuf_GenericVector[TL_foundStory](m)
	if flags&(1<<0) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	tl.Chats = m.Vector()
	tl.Users = m.Vector()
	return tl
}

func decode_TL_geoPointAddress(m *DecodeBuf) TL {
	m.constructorAssert(CRC_geoPointAddress)
	return decode_body_TL_geoPointAddress(m)
}
func decode_body_TL_geoPointAddress(m *DecodeBuf) TL {
	tl := TL_geoPointAddress{}
	flags := m.Int()
	tl.CountryISO2 = m.String()
	if flags&(1<<0) != 0 {
		tl.State = Ref(m.String())
	}
	if flags&(1<<1) != 0 {
		tl.City = Ref(m.String())
	}
	if flags&(1<<2) != 0 {
		tl.Street = Ref(m.String())
	}
	return tl
}

func decode_TL_starsRevenueStatus(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsRevenueStatus)
	return decode_body_TL_starsRevenueStatus(m)
}
func decode_body_TL_starsRevenueStatus(m *DecodeBuf) TL {
	tl := TL_starsRevenueStatus{}
	flags := m.Int()
	tl.WithdrawalEnabled = flags&(1<<0) != 0
	tl.CurrentBalance = m.Long()
	tl.AvailableBalance = m.Long()
	tl.OverallRevenue = m.Long()
	if flags&(1<<1) != 0 {
		tl.NextWithdrawalAt = Ref(m.Int())
	}
	return tl
}

func decode_TL_payments_starsRevenueStats(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_starsRevenueStats)
	return decode_body_TL_payments_starsRevenueStats(m)
}
func decode_body_TL_payments_starsRevenueStats(m *DecodeBuf) TL {
	tl := TL_payments_starsRevenueStats{}
	tl.RevenueGraph = m.Object()
	tl.Status = decode_TL_starsRevenueStatus(m).(TL_starsRevenueStatus)
	tl.UsdRate = m.Double()
	return tl
}

func decode_TL_payments_starsRevenueWithdrawalURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_starsRevenueWithdrawalURL)
	return decode_body_TL_payments_starsRevenueWithdrawalURL(m)
}
func decode_body_TL_payments_starsRevenueWithdrawalURL(m *DecodeBuf) TL {
	tl := TL_payments_starsRevenueWithdrawalURL{}
	tl.URL = m.String()
	return tl
}

func decode_TL_payments_starsRevenueAdsAccountURL(m *DecodeBuf) TL {
	m.constructorAssert(CRC_payments_starsRevenueAdsAccountURL)
	return decode_body_TL_payments_starsRevenueAdsAccountURL(m)
}
func decode_body_TL_payments_starsRevenueAdsAccountURL(m *DecodeBuf) TL {
	tl := TL_payments_starsRevenueAdsAccountURL{}
	tl.URL = m.String()
	return tl
}

func decode_TL_inputStarsTransaction(m *DecodeBuf) TL {
	m.constructorAssert(CRC_inputStarsTransaction)
	return decode_body_TL_inputStarsTransaction(m)
}
func decode_body_TL_inputStarsTransaction(m *DecodeBuf) TL {
	tl := TL_inputStarsTransaction{}
	flags := m.Int()
	tl.Refund = flags&(1<<0) != 0
	tl.ID = m.String()
	return tl
}

func decode_TL_starsGiftOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsGiftOption)
	return decode_body_TL_starsGiftOption(m)
}
func decode_body_TL_starsGiftOption(m *DecodeBuf) TL {
	tl := TL_starsGiftOption{}
	flags := m.Int()
	tl.Extended = flags&(1<<1) != 0
	tl.Stars = m.Long()
	if flags&(1<<0) != 0 {
		tl.StoreProduct = Ref(m.String())
	}
	tl.Currency = m.String()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_bots_popularAppBots(m *DecodeBuf) TL {
	m.constructorAssert(CRC_bots_popularAppBots)
	return decode_body_TL_bots_popularAppBots(m)
}
func decode_body_TL_bots_popularAppBots(m *DecodeBuf) TL {
	tl := TL_bots_popularAppBots{}
	flags := m.Int()
	if flags&(1<<0) != 0 {
		tl.NextOffset = Ref(m.String())
	}
	tl.Users = m.Vector()
	return tl
}

func decode_TL_botPreviewMedia(m *DecodeBuf) TL {
	m.constructorAssert(CRC_botPreviewMedia)
	return decode_body_TL_botPreviewMedia(m)
}
func decode_body_TL_botPreviewMedia(m *DecodeBuf) TL {
	tl := TL_botPreviewMedia{}
	tl.Date = m.Int()
	tl.Media = m.Object()
	return tl
}

func decode_TL_bots_previewInfo(m *DecodeBuf) TL {
	m.constructorAssert(CRC_bots_previewInfo)
	return decode_body_TL_bots_previewInfo(m)
}
func decode_body_TL_bots_previewInfo(m *DecodeBuf) TL {
	tl := TL_bots_previewInfo{}
	tl.Media = DecodeBuf_GenericVector[TL_botPreviewMedia](m)
	tl.LangCodes = m.VectorString()
	return tl
}

func decode_TL_starsSubscriptionPricing(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsSubscriptionPricing)
	return decode_body_TL_starsSubscriptionPricing(m)
}
func decode_body_TL_starsSubscriptionPricing(m *DecodeBuf) TL {
	tl := TL_starsSubscriptionPricing{}
	tl.Period = m.Int()
	tl.Amount = m.Long()
	return tl
}

func decode_TL_starsSubscription(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsSubscription)
	return decode_body_TL_starsSubscription(m)
}
func decode_body_TL_starsSubscription(m *DecodeBuf) TL {
	tl := TL_starsSubscription{}
	flags := m.Int()
	tl.Canceled = flags&(1<<0) != 0
	tl.CanRefulfill = flags&(1<<1) != 0
	tl.MissingBalance = flags&(1<<2) != 0
	tl.ID = m.String()
	tl.Peer = m.Object()
	tl.UntilDate = m.Int()
	tl.Pricing = decode_TL_starsSubscriptionPricing(m).(TL_starsSubscriptionPricing)
	if flags&(1<<3) != 0 {
		tl.ChatInviteHash = Ref(m.String())
	}
	return tl
}

func decode_TL_messageReactor(m *DecodeBuf) TL {
	m.constructorAssert(CRC_messageReactor)
	return decode_body_TL_messageReactor(m)
}
func decode_body_TL_messageReactor(m *DecodeBuf) TL {
	tl := TL_messageReactor{}
	flags := m.Int()
	tl.Top = flags&(1<<0) != 0
	tl.My = flags&(1<<1) != 0
	tl.Anonymous = flags&(1<<2) != 0
	if flags&(1<<3) != 0 {
		tl.PeerID = m.Object()
	}
	tl.Count = m.Int()
	return tl
}

func decode_TL_starsGiveawayOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsGiveawayOption)
	return decode_body_TL_starsGiveawayOption(m)
}
func decode_body_TL_starsGiveawayOption(m *DecodeBuf) TL {
	tl := TL_starsGiveawayOption{}
	flags := m.Int()
	tl.Extended = flags&(1<<0) != 0
	tl.Default = flags&(1<<1) != 0
	tl.Stars = m.Long()
	tl.YearlyBoosts = m.Int()
	if flags&(1<<2) != 0 {
		tl.StoreProduct = Ref(m.String())
	}
	tl.Currency = m.String()
	tl.Amount = m.Long()
	tl.Winners = DecodeBuf_GenericVector[TL_starsGiveawayWinnersOption](m)
	return tl
}

func decode_TL_starsGiveawayWinnersOption(m *DecodeBuf) TL {
	m.constructorAssert(CRC_starsGiveawayWinnersOption)
	return decode_body_TL_starsGiveawayWinnersOption(m)
}
func decode_body_TL_starsGiveawayWinnersOption(m *DecodeBuf) TL {
	tl := TL_starsGiveawayWinnersOption{}
	flags := m.Int()
	tl.Default = flags&(1<<0) != 0
	tl.Users = m.Int()
	tl.PerUserStars = m.Long()
	return tl
}

func (m *DecodeBuf) ObjectGenerated(constructor uint32) (r TL) {
	objStartOffset := m.off - 4 //4 bytes of constructor name have been already read
	switch constructor {
	case CRC_resPQ:
		r = decode_body_TL_resPQ(m)
	case CRC_pqInnerData:
		r = decode_body_TL_pqInnerData(m)
	case CRC_pqInnerDataDC:
		r = decode_body_TL_pqInnerDataDC(m)
	case CRC_pqInnerDataTemp:
		r = decode_body_TL_pqInnerDataTemp(m)
	case CRC_pqInnerDataTempDC:
		r = decode_body_TL_pqInnerDataTempDC(m)
	case CRC_bindAuthKeyInner:
		r = decode_body_TL_bindAuthKeyInner(m)
	case CRC_serverDHParamsFail:
		r = decode_body_TL_serverDHParamsFail(m)
	case CRC_serverDHParamsOK:
		r = decode_body_TL_serverDHParamsOK(m)
	case CRC_serverDHInnerData:
		r = decode_body_TL_serverDHInnerData(m)
	case CRC_clientDHInnerData:
		r = decode_body_TL_clientDHInnerData(m)
	case CRC_dhGenOK:
		r = decode_body_TL_dhGenOK(m)
	case CRC_dhGenRetry:
		r = decode_body_TL_dhGenRetry(m)
	case CRC_dhGenFail:
		r = decode_body_TL_dhGenFail(m)
	case CRC_destroyAuthKeyOK:
		r = decode_body_TL_destroyAuthKeyOK(m)
	case CRC_destroyAuthKeyNone:
		r = decode_body_TL_destroyAuthKeyNone(m)
	case CRC_destroyAuthKeyFail:
		r = decode_body_TL_destroyAuthKeyFail(m)
	case CRC_msgsACK:
		r = decode_body_TL_msgsACK(m)
	case CRC_badMsgNotification:
		r = decode_body_TL_badMsgNotification(m)
	case CRC_badServerSalt:
		r = decode_body_TL_badServerSalt(m)
	case CRC_msgsStateReq:
		r = decode_body_TL_msgsStateReq(m)
	case CRC_msgsStateInfo:
		r = decode_body_TL_msgsStateInfo(m)
	case CRC_msgsAllInfo:
		r = decode_body_TL_msgsAllInfo(m)
	case CRC_msgDetailedInfo:
		r = decode_body_TL_msgDetailedInfo(m)
	case CRC_msgNewDetailedInfo:
		r = decode_body_TL_msgNewDetailedInfo(m)
	case CRC_msgResendReq:
		r = decode_body_TL_msgResendReq(m)
	case CRC_rpcError:
		r = decode_body_TL_rpcError(m)
	case CRC_rpcAnswerUnknown:
		r = decode_body_TL_rpcAnswerUnknown(m)
	case CRC_rpcAnswerDroppedRunning:
		r = decode_body_TL_rpcAnswerDroppedRunning(m)
	case CRC_rpcAnswerDropped:
		r = decode_body_TL_rpcAnswerDropped(m)
	case CRC_futureSalt:
		r = decode_body_TL_futureSalt(m)
	case CRC_futureSalts:
		r = decode_body_TL_futureSalts(m)
	case CRC_pong:
		r = decode_body_TL_pong(m)
	case CRC_destroySessionOK:
		r = decode_body_TL_destroySessionOK(m)
	case CRC_destroySessionNone:
		r = decode_body_TL_destroySessionNone(m)
	case CRC_newSessionCreated:
		r = decode_body_TL_newSessionCreated(m)
	case CRC_httpWait:
		r = decode_body_TL_httpWait(m)
	case CRC_ipPort:
		r = decode_body_TL_ipPort(m)
	case CRC_ipPortSecret:
		r = decode_body_TL_ipPortSecret(m)
	case CRC_accessPointRule:
		r = decode_body_TL_accessPointRule(m)
	case CRC_help_configSimple:
		r = decode_body_TL_help_configSimple(m)
	case CRC_tlsClientHello:
		r = decode_body_TL_tlsClientHello(m)
	case CRC_tlsBlockString:
		r = decode_body_TL_tlsBlockString(m)
	case CRC_tlsBlockRandom:
		r = decode_body_TL_tlsBlockRandom(m)
	case CRC_tlsBlockZero:
		r = decode_body_TL_tlsBlockZero(m)
	case CRC_tlsBlockDomain:
		r = decode_body_TL_tlsBlockDomain(m)
	case CRC_tlsBlockGrease:
		r = decode_body_TL_tlsBlockGrease(m)
	case CRC_tlsBlockPublicKey:
		r = decode_body_TL_tlsBlockPublicKey(m)
	case CRC_tlsBlockScope:
		r = decode_body_TL_tlsBlockScope(m)
	case CRC_tlsBlockPermutation:
		r = decode_body_TL_tlsBlockPermutation(m)
	case CRC_boolFalse:
		r = decode_body_TL_boolFalse(m)
	case CRC_boolTrue:
		r = decode_body_TL_boolTrue(m)
	case CRC_true:
		r = decode_body_TL_true(m)
	case CRC_error:
		r = decode_body_TL_error(m)
	case CRC_null:
		r = decode_body_TL_null(m)
	case CRC_inputPeerEmpty:
		r = decode_body_TL_inputPeerEmpty(m)
	case CRC_inputPeerSelf:
		r = decode_body_TL_inputPeerSelf(m)
	case CRC_inputPeerChat:
		r = decode_body_TL_inputPeerChat(m)
	case CRC_inputPeerUser:
		r = decode_body_TL_inputPeerUser(m)
	case CRC_inputPeerChannel:
		r = decode_body_TL_inputPeerChannel(m)
	case CRC_inputPeerUserFromMessage:
		r = decode_body_TL_inputPeerUserFromMessage(m)
	case CRC_inputPeerChannelFromMessage:
		r = decode_body_TL_inputPeerChannelFromMessage(m)
	case CRC_inputUserEmpty:
		r = decode_body_TL_inputUserEmpty(m)
	case CRC_inputUserSelf:
		r = decode_body_TL_inputUserSelf(m)
	case CRC_inputUser:
		r = decode_body_TL_inputUser(m)
	case CRC_inputUserFromMessage:
		r = decode_body_TL_inputUserFromMessage(m)
	case CRC_inputPhoneContact:
		r = decode_body_TL_inputPhoneContact(m)
	case CRC_inputFile:
		r = decode_body_TL_inputFile(m)
	case CRC_inputFileBig:
		r = decode_body_TL_inputFileBig(m)
	case CRC_inputFileStoryDocument:
		r = decode_body_TL_inputFileStoryDocument(m)
	case CRC_inputMediaEmpty:
		r = decode_body_TL_inputMediaEmpty(m)
	case CRC_inputMediaUploadedPhoto:
		r = decode_body_TL_inputMediaUploadedPhoto(m)
	case CRC_inputMediaPhoto:
		r = decode_body_TL_inputMediaPhoto(m)
	case CRC_inputMediaGeoPoint:
		r = decode_body_TL_inputMediaGeoPoint(m)
	case CRC_inputMediaContact:
		r = decode_body_TL_inputMediaContact(m)
	case CRC_inputMediaUploadedDocument:
		r = decode_body_TL_inputMediaUploadedDocument(m)
	case CRC_inputMediaDocument:
		r = decode_body_TL_inputMediaDocument(m)
	case CRC_inputMediaVenue:
		r = decode_body_TL_inputMediaVenue(m)
	case CRC_inputMediaPhotoExternal:
		r = decode_body_TL_inputMediaPhotoExternal(m)
	case CRC_inputMediaDocumentExternal:
		r = decode_body_TL_inputMediaDocumentExternal(m)
	case CRC_inputMediaGame:
		r = decode_body_TL_inputMediaGame(m)
	case CRC_inputMediaInvoice:
		r = decode_body_TL_inputMediaInvoice(m)
	case CRC_inputMediaGeoLive:
		r = decode_body_TL_inputMediaGeoLive(m)
	case CRC_inputMediaPoll:
		r = decode_body_TL_inputMediaPoll(m)
	case CRC_inputMediaDice:
		r = decode_body_TL_inputMediaDice(m)
	case CRC_inputMediaStory:
		r = decode_body_TL_inputMediaStory(m)
	case CRC_inputMediaWebPage:
		r = decode_body_TL_inputMediaWebPage(m)
	case CRC_inputMediaPaidMedia:
		r = decode_body_TL_inputMediaPaidMedia(m)
	case CRC_inputChatPhotoEmpty:
		r = decode_body_TL_inputChatPhotoEmpty(m)
	case CRC_inputChatUploadedPhoto:
		r = decode_body_TL_inputChatUploadedPhoto(m)
	case CRC_inputChatPhoto:
		r = decode_body_TL_inputChatPhoto(m)
	case CRC_inputGeoPointEmpty:
		r = decode_body_TL_inputGeoPointEmpty(m)
	case CRC_inputGeoPoint:
		r = decode_body_TL_inputGeoPoint(m)
	case CRC_inputPhotoEmpty:
		r = decode_body_TL_inputPhotoEmpty(m)
	case CRC_inputPhoto:
		r = decode_body_TL_inputPhoto(m)
	case CRC_inputFileLocation:
		r = decode_body_TL_inputFileLocation(m)
	case CRC_inputEncryptedFileLocation:
		r = decode_body_TL_inputEncryptedFileLocation(m)
	case CRC_inputDocumentFileLocation:
		r = decode_body_TL_inputDocumentFileLocation(m)
	case CRC_inputSecureFileLocation:
		r = decode_body_TL_inputSecureFileLocation(m)
	case CRC_inputTakeoutFileLocation:
		r = decode_body_TL_inputTakeoutFileLocation(m)
	case CRC_inputPhotoFileLocation:
		r = decode_body_TL_inputPhotoFileLocation(m)
	case CRC_inputPhotoLegacyFileLocation:
		r = decode_body_TL_inputPhotoLegacyFileLocation(m)
	case CRC_inputPeerPhotoFileLocation:
		r = decode_body_TL_inputPeerPhotoFileLocation(m)
	case CRC_inputStickerSetThumb:
		r = decode_body_TL_inputStickerSetThumb(m)
	case CRC_inputGroupCallStream:
		r = decode_body_TL_inputGroupCallStream(m)
	case CRC_peerUser:
		r = decode_body_TL_peerUser(m)
	case CRC_peerChat:
		r = decode_body_TL_peerChat(m)
	case CRC_peerChannel:
		r = decode_body_TL_peerChannel(m)
	case CRC_storage_fileUnknown:
		r = decode_body_TL_storage_fileUnknown(m)
	case CRC_storage_filePartial:
		r = decode_body_TL_storage_filePartial(m)
	case CRC_storage_fileJPEG:
		r = decode_body_TL_storage_fileJPEG(m)
	case CRC_storage_fileGIF:
		r = decode_body_TL_storage_fileGIF(m)
	case CRC_storage_filePNG:
		r = decode_body_TL_storage_filePNG(m)
	case CRC_storage_filePDF:
		r = decode_body_TL_storage_filePDF(m)
	case CRC_storage_fileMP3:
		r = decode_body_TL_storage_fileMP3(m)
	case CRC_storage_fileMOV:
		r = decode_body_TL_storage_fileMOV(m)
	case CRC_storage_fileMP4:
		r = decode_body_TL_storage_fileMP4(m)
	case CRC_storage_fileWEBP:
		r = decode_body_TL_storage_fileWEBP(m)
	case CRC_userEmpty:
		r = decode_body_TL_userEmpty(m)
	case CRC_user:
		r = decode_body_TL_user(m)
	case CRC_userProfilePhotoEmpty:
		r = decode_body_TL_userProfilePhotoEmpty(m)
	case CRC_userProfilePhoto:
		r = decode_body_TL_userProfilePhoto(m)
	case CRC_userStatusEmpty:
		r = decode_body_TL_userStatusEmpty(m)
	case CRC_userStatusOnline:
		r = decode_body_TL_userStatusOnline(m)
	case CRC_userStatusOffline:
		r = decode_body_TL_userStatusOffline(m)
	case CRC_userStatusRecently:
		r = decode_body_TL_userStatusRecently(m)
	case CRC_userStatusLastWeek:
		r = decode_body_TL_userStatusLastWeek(m)
	case CRC_userStatusLastMonth:
		r = decode_body_TL_userStatusLastMonth(m)
	case CRC_chatEmpty:
		r = decode_body_TL_chatEmpty(m)
	case CRC_chat:
		r = decode_body_TL_chat(m)
	case CRC_chatForbidden:
		r = decode_body_TL_chatForbidden(m)
	case CRC_channel:
		r = decode_body_TL_channel(m)
	case CRC_channelForbidden:
		r = decode_body_TL_channelForbidden(m)
	case CRC_chatFull:
		r = decode_body_TL_chatFull(m)
	case CRC_channelFull:
		r = decode_body_TL_channelFull(m)
	case CRC_chatParticipant:
		r = decode_body_TL_chatParticipant(m)
	case CRC_chatParticipantCreator:
		r = decode_body_TL_chatParticipantCreator(m)
	case CRC_chatParticipantAdmin:
		r = decode_body_TL_chatParticipantAdmin(m)
	case CRC_chatParticipantsForbidden:
		r = decode_body_TL_chatParticipantsForbidden(m)
	case CRC_chatParticipants:
		r = decode_body_TL_chatParticipants(m)
	case CRC_chatPhotoEmpty:
		r = decode_body_TL_chatPhotoEmpty(m)
	case CRC_chatPhoto:
		r = decode_body_TL_chatPhoto(m)
	case CRC_messageEmpty:
		r = decode_body_TL_messageEmpty(m)
	case CRC_message:
		r = decode_body_TL_message(m)
	case CRC_messageService:
		r = decode_body_TL_messageService(m)
	case CRC_messageMediaEmpty:
		r = decode_body_TL_messageMediaEmpty(m)
	case CRC_messageMediaPhoto:
		r = decode_body_TL_messageMediaPhoto(m)
	case CRC_messageMediaGeo:
		r = decode_body_TL_messageMediaGeo(m)
	case CRC_messageMediaContact:
		r = decode_body_TL_messageMediaContact(m)
	case CRC_messageMediaUnsupported:
		r = decode_body_TL_messageMediaUnsupported(m)
	case CRC_messageMediaDocument:
		r = decode_body_TL_messageMediaDocument(m)
	case CRC_messageMediaWebPage:
		r = decode_body_TL_messageMediaWebPage(m)
	case CRC_messageMediaVenue:
		r = decode_body_TL_messageMediaVenue(m)
	case CRC_messageMediaGame:
		r = decode_body_TL_messageMediaGame(m)
	case CRC_messageMediaInvoice:
		r = decode_body_TL_messageMediaInvoice(m)
	case CRC_messageMediaGeoLive:
		r = decode_body_TL_messageMediaGeoLive(m)
	case CRC_messageMediaPoll:
		r = decode_body_TL_messageMediaPoll(m)
	case CRC_messageMediaDice:
		r = decode_body_TL_messageMediaDice(m)
	case CRC_messageMediaStory:
		r = decode_body_TL_messageMediaStory(m)
	case CRC_messageMediaGiveaway:
		r = decode_body_TL_messageMediaGiveaway(m)
	case CRC_messageMediaGiveawayResults:
		r = decode_body_TL_messageMediaGiveawayResults(m)
	case CRC_messageMediaPaidMedia:
		r = decode_body_TL_messageMediaPaidMedia(m)
	case CRC_messageActionEmpty:
		r = decode_body_TL_messageActionEmpty(m)
	case CRC_messageActionChatCreate:
		r = decode_body_TL_messageActionChatCreate(m)
	case CRC_messageActionChatEditTitle:
		r = decode_body_TL_messageActionChatEditTitle(m)
	case CRC_messageActionChatEditPhoto:
		r = decode_body_TL_messageActionChatEditPhoto(m)
	case CRC_messageActionChatDeletePhoto:
		r = decode_body_TL_messageActionChatDeletePhoto(m)
	case CRC_messageActionChatAddUser:
		r = decode_body_TL_messageActionChatAddUser(m)
	case CRC_messageActionChatDeleteUser:
		r = decode_body_TL_messageActionChatDeleteUser(m)
	case CRC_messageActionChatJoinedByLink:
		r = decode_body_TL_messageActionChatJoinedByLink(m)
	case CRC_messageActionChannelCreate:
		r = decode_body_TL_messageActionChannelCreate(m)
	case CRC_messageActionChatMigrateTo:
		r = decode_body_TL_messageActionChatMigrateTo(m)
	case CRC_messageActionChannelMigrateFrom:
		r = decode_body_TL_messageActionChannelMigrateFrom(m)
	case CRC_messageActionPINMessage:
		r = decode_body_TL_messageActionPINMessage(m)
	case CRC_messageActionHistoryClear:
		r = decode_body_TL_messageActionHistoryClear(m)
	case CRC_messageActionGameScore:
		r = decode_body_TL_messageActionGameScore(m)
	case CRC_messageActionPaymentSentMe:
		r = decode_body_TL_messageActionPaymentSentMe(m)
	case CRC_messageActionPaymentSent:
		r = decode_body_TL_messageActionPaymentSent(m)
	case CRC_messageActionPhoneCall:
		r = decode_body_TL_messageActionPhoneCall(m)
	case CRC_messageActionScreenshotTaken:
		r = decode_body_TL_messageActionScreenshotTaken(m)
	case CRC_messageActionCustomAction:
		r = decode_body_TL_messageActionCustomAction(m)
	case CRC_messageActionBotAllowed:
		r = decode_body_TL_messageActionBotAllowed(m)
	case CRC_messageActionSecureValuesSentMe:
		r = decode_body_TL_messageActionSecureValuesSentMe(m)
	case CRC_messageActionSecureValuesSent:
		r = decode_body_TL_messageActionSecureValuesSent(m)
	case CRC_messageActionContactSignUp:
		r = decode_body_TL_messageActionContactSignUp(m)
	case CRC_messageActionGeoProximityReached:
		r = decode_body_TL_messageActionGeoProximityReached(m)
	case CRC_messageActionGroupCall:
		r = decode_body_TL_messageActionGroupCall(m)
	case CRC_messageActionInviteToGroupCall:
		r = decode_body_TL_messageActionInviteToGroupCall(m)
	case CRC_messageActionSetMessagesTTL:
		r = decode_body_TL_messageActionSetMessagesTTL(m)
	case CRC_messageActionGroupCallScheduled:
		r = decode_body_TL_messageActionGroupCallScheduled(m)
	case CRC_messageActionSetChatTheme:
		r = decode_body_TL_messageActionSetChatTheme(m)
	case CRC_messageActionChatJoinedByRequest:
		r = decode_body_TL_messageActionChatJoinedByRequest(m)
	case CRC_messageActionWebViewDataSentMe:
		r = decode_body_TL_messageActionWebViewDataSentMe(m)
	case CRC_messageActionWebViewDataSent:
		r = decode_body_TL_messageActionWebViewDataSent(m)
	case CRC_messageActionGiftPremium:
		r = decode_body_TL_messageActionGiftPremium(m)
	case CRC_messageActionTopicCreate:
		r = decode_body_TL_messageActionTopicCreate(m)
	case CRC_messageActionTopicEdit:
		r = decode_body_TL_messageActionTopicEdit(m)
	case CRC_messageActionSuggestProfilePhoto:
		r = decode_body_TL_messageActionSuggestProfilePhoto(m)
	case CRC_messageActionRequestedPeer:
		r = decode_body_TL_messageActionRequestedPeer(m)
	case CRC_messageActionSetChatWallPaper:
		r = decode_body_TL_messageActionSetChatWallPaper(m)
	case CRC_messageActionGiftCode:
		r = decode_body_TL_messageActionGiftCode(m)
	case CRC_messageActionGiveawayLaunch:
		r = decode_body_TL_messageActionGiveawayLaunch(m)
	case CRC_messageActionGiveawayResults:
		r = decode_body_TL_messageActionGiveawayResults(m)
	case CRC_messageActionBoostApply:
		r = decode_body_TL_messageActionBoostApply(m)
	case CRC_messageActionRequestedPeerSentMe:
		r = decode_body_TL_messageActionRequestedPeerSentMe(m)
	case CRC_messageActionPaymentRefunded:
		r = decode_body_TL_messageActionPaymentRefunded(m)
	case CRC_messageActionGiftStars:
		r = decode_body_TL_messageActionGiftStars(m)
	case CRC_messageActionPrizeStars:
		r = decode_body_TL_messageActionPrizeStars(m)
	case CRC_dialog:
		r = decode_body_TL_dialog(m)
	case CRC_dialogFolder:
		r = decode_body_TL_dialogFolder(m)
	case CRC_photoEmpty:
		r = decode_body_TL_photoEmpty(m)
	case CRC_photo:
		r = decode_body_TL_photo(m)
	case CRC_photoSizeEmpty:
		r = decode_body_TL_photoSizeEmpty(m)
	case CRC_photoSize:
		r = decode_body_TL_photoSize(m)
	case CRC_photoCachedSize:
		r = decode_body_TL_photoCachedSize(m)
	case CRC_photoStrippedSize:
		r = decode_body_TL_photoStrippedSize(m)
	case CRC_photoSizeProgressive:
		r = decode_body_TL_photoSizeProgressive(m)
	case CRC_photoPathSize:
		r = decode_body_TL_photoPathSize(m)
	case CRC_geoPointEmpty:
		r = decode_body_TL_geoPointEmpty(m)
	case CRC_geoPoint:
		r = decode_body_TL_geoPoint(m)
	case CRC_auth_sentCode:
		r = decode_body_TL_auth_sentCode(m)
	case CRC_auth_sentCodeSuccess:
		r = decode_body_TL_auth_sentCodeSuccess(m)
	case CRC_auth_authorization:
		r = decode_body_TL_auth_authorization(m)
	case CRC_auth_authorizationSignUpRequired:
		r = decode_body_TL_auth_authorizationSignUpRequired(m)
	case CRC_auth_exportedAuthorization:
		r = decode_body_TL_auth_exportedAuthorization(m)
	case CRC_inputNotifyPeer:
		r = decode_body_TL_inputNotifyPeer(m)
	case CRC_inputNotifyUsers:
		r = decode_body_TL_inputNotifyUsers(m)
	case CRC_inputNotifyChats:
		r = decode_body_TL_inputNotifyChats(m)
	case CRC_inputNotifyBroadcasts:
		r = decode_body_TL_inputNotifyBroadcasts(m)
	case CRC_inputNotifyForumTopic:
		r = decode_body_TL_inputNotifyForumTopic(m)
	case CRC_inputPeerNotifySettings:
		r = decode_body_TL_inputPeerNotifySettings(m)
	case CRC_peerNotifySettings:
		r = decode_body_TL_peerNotifySettings(m)
	case CRC_peerSettings:
		r = decode_body_TL_peerSettings(m)
	case CRC_wallPaper:
		r = decode_body_TL_wallPaper(m)
	case CRC_wallPaperNoFile:
		r = decode_body_TL_wallPaperNoFile(m)
	case CRC_inputReportReasonSpam:
		r = decode_body_TL_inputReportReasonSpam(m)
	case CRC_inputReportReasonViolence:
		r = decode_body_TL_inputReportReasonViolence(m)
	case CRC_inputReportReasonPornography:
		r = decode_body_TL_inputReportReasonPornography(m)
	case CRC_inputReportReasonChildAbuse:
		r = decode_body_TL_inputReportReasonChildAbuse(m)
	case CRC_inputReportReasonOther:
		r = decode_body_TL_inputReportReasonOther(m)
	case CRC_inputReportReasonCopyright:
		r = decode_body_TL_inputReportReasonCopyright(m)
	case CRC_inputReportReasonGeoIrrelevant:
		r = decode_body_TL_inputReportReasonGeoIrrelevant(m)
	case CRC_inputReportReasonFake:
		r = decode_body_TL_inputReportReasonFake(m)
	case CRC_inputReportReasonIllegalDrugs:
		r = decode_body_TL_inputReportReasonIllegalDrugs(m)
	case CRC_inputReportReasonPersonalDetails:
		r = decode_body_TL_inputReportReasonPersonalDetails(m)
	case CRC_userFull:
		r = decode_body_TL_userFull(m)
	case CRC_contact:
		r = decode_body_TL_contact(m)
	case CRC_importedContact:
		r = decode_body_TL_importedContact(m)
	case CRC_contactStatus:
		r = decode_body_TL_contactStatus(m)
	case CRC_contacts_contactsNotModified:
		r = decode_body_TL_contacts_contactsNotModified(m)
	case CRC_contacts_contacts:
		r = decode_body_TL_contacts_contacts(m)
	case CRC_contacts_importedContacts:
		r = decode_body_TL_contacts_importedContacts(m)
	case CRC_contacts_blocked:
		r = decode_body_TL_contacts_blocked(m)
	case CRC_contacts_blockedSlice:
		r = decode_body_TL_contacts_blockedSlice(m)
	case CRC_messages_dialogs:
		r = decode_body_TL_messages_dialogs(m)
	case CRC_messages_dialogsSlice:
		r = decode_body_TL_messages_dialogsSlice(m)
	case CRC_messages_dialogsNotModified:
		r = decode_body_TL_messages_dialogsNotModified(m)
	case CRC_messages_messages:
		r = decode_body_TL_messages_messages(m)
	case CRC_messages_messagesSlice:
		r = decode_body_TL_messages_messagesSlice(m)
	case CRC_messages_channelMessages:
		r = decode_body_TL_messages_channelMessages(m)
	case CRC_messages_messagesNotModified:
		r = decode_body_TL_messages_messagesNotModified(m)
	case CRC_messages_chats:
		r = decode_body_TL_messages_chats(m)
	case CRC_messages_chatsSlice:
		r = decode_body_TL_messages_chatsSlice(m)
	case CRC_messages_chatFull:
		r = decode_body_TL_messages_chatFull(m)
	case CRC_messages_affectedHistory:
		r = decode_body_TL_messages_affectedHistory(m)
	case CRC_inputMessagesFilterEmpty:
		r = decode_body_TL_inputMessagesFilterEmpty(m)
	case CRC_inputMessagesFilterPhotos:
		r = decode_body_TL_inputMessagesFilterPhotos(m)
	case CRC_inputMessagesFilterVideo:
		r = decode_body_TL_inputMessagesFilterVideo(m)
	case CRC_inputMessagesFilterPhotoVideo:
		r = decode_body_TL_inputMessagesFilterPhotoVideo(m)
	case CRC_inputMessagesFilterDocument:
		r = decode_body_TL_inputMessagesFilterDocument(m)
	case CRC_inputMessagesFilterURL:
		r = decode_body_TL_inputMessagesFilterURL(m)
	case CRC_inputMessagesFilterGIF:
		r = decode_body_TL_inputMessagesFilterGIF(m)
	case CRC_inputMessagesFilterVoice:
		r = decode_body_TL_inputMessagesFilterVoice(m)
	case CRC_inputMessagesFilterMusic:
		r = decode_body_TL_inputMessagesFilterMusic(m)
	case CRC_inputMessagesFilterChatPhotos:
		r = decode_body_TL_inputMessagesFilterChatPhotos(m)
	case CRC_inputMessagesFilterPhoneCalls:
		r = decode_body_TL_inputMessagesFilterPhoneCalls(m)
	case CRC_inputMessagesFilterRoundVoice:
		r = decode_body_TL_inputMessagesFilterRoundVoice(m)
	case CRC_inputMessagesFilterRoundVideo:
		r = decode_body_TL_inputMessagesFilterRoundVideo(m)
	case CRC_inputMessagesFilterMyMentions:
		r = decode_body_TL_inputMessagesFilterMyMentions(m)
	case CRC_inputMessagesFilterGeo:
		r = decode_body_TL_inputMessagesFilterGeo(m)
	case CRC_inputMessagesFilterContacts:
		r = decode_body_TL_inputMessagesFilterContacts(m)
	case CRC_inputMessagesFilterPinned:
		r = decode_body_TL_inputMessagesFilterPinned(m)
	case CRC_updateNewMessage:
		r = decode_body_TL_updateNewMessage(m)
	case CRC_updateMessageID:
		r = decode_body_TL_updateMessageID(m)
	case CRC_updateDeleteMessages:
		r = decode_body_TL_updateDeleteMessages(m)
	case CRC_updateUserTyping:
		r = decode_body_TL_updateUserTyping(m)
	case CRC_updateChatUserTyping:
		r = decode_body_TL_updateChatUserTyping(m)
	case CRC_updateChatParticipants:
		r = decode_body_TL_updateChatParticipants(m)
	case CRC_updateUserStatus:
		r = decode_body_TL_updateUserStatus(m)
	case CRC_updateUserName:
		r = decode_body_TL_updateUserName(m)
	case CRC_updateNewAuthorization:
		r = decode_body_TL_updateNewAuthorization(m)
	case CRC_updateNewEncryptedMessage:
		r = decode_body_TL_updateNewEncryptedMessage(m)
	case CRC_updateEncryptedChatTyping:
		r = decode_body_TL_updateEncryptedChatTyping(m)
	case CRC_updateEncryption:
		r = decode_body_TL_updateEncryption(m)
	case CRC_updateEncryptedMessagesRead:
		r = decode_body_TL_updateEncryptedMessagesRead(m)
	case CRC_updateChatParticipantAdd:
		r = decode_body_TL_updateChatParticipantAdd(m)
	case CRC_updateChatParticipantDelete:
		r = decode_body_TL_updateChatParticipantDelete(m)
	case CRC_updateDCOptions:
		r = decode_body_TL_updateDCOptions(m)
	case CRC_updateNotifySettings:
		r = decode_body_TL_updateNotifySettings(m)
	case CRC_updateServiceNotification:
		r = decode_body_TL_updateServiceNotification(m)
	case CRC_updatePrivacy:
		r = decode_body_TL_updatePrivacy(m)
	case CRC_updateUserPhone:
		r = decode_body_TL_updateUserPhone(m)
	case CRC_updateReadHistoryInbox:
		r = decode_body_TL_updateReadHistoryInbox(m)
	case CRC_updateReadHistoryOutbox:
		r = decode_body_TL_updateReadHistoryOutbox(m)
	case CRC_updateWebPage:
		r = decode_body_TL_updateWebPage(m)
	case CRC_updateReadMessagesContents:
		r = decode_body_TL_updateReadMessagesContents(m)
	case CRC_updateChannelTooLong:
		r = decode_body_TL_updateChannelTooLong(m)
	case CRC_updateChannel:
		r = decode_body_TL_updateChannel(m)
	case CRC_updateNewChannelMessage:
		r = decode_body_TL_updateNewChannelMessage(m)
	case CRC_updateReadChannelInbox:
		r = decode_body_TL_updateReadChannelInbox(m)
	case CRC_updateDeleteChannelMessages:
		r = decode_body_TL_updateDeleteChannelMessages(m)
	case CRC_updateChannelMessageViews:
		r = decode_body_TL_updateChannelMessageViews(m)
	case CRC_updateChatParticipantAdmin:
		r = decode_body_TL_updateChatParticipantAdmin(m)
	case CRC_updateNewStickerSet:
		r = decode_body_TL_updateNewStickerSet(m)
	case CRC_updateStickerSetsOrder:
		r = decode_body_TL_updateStickerSetsOrder(m)
	case CRC_updateStickerSets:
		r = decode_body_TL_updateStickerSets(m)
	case CRC_updateSavedGIFs:
		r = decode_body_TL_updateSavedGIFs(m)
	case CRC_updateBotInlineQuery:
		r = decode_body_TL_updateBotInlineQuery(m)
	case CRC_updateBotInlineSend:
		r = decode_body_TL_updateBotInlineSend(m)
	case CRC_updateEditChannelMessage:
		r = decode_body_TL_updateEditChannelMessage(m)
	case CRC_updateBotCallbackQuery:
		r = decode_body_TL_updateBotCallbackQuery(m)
	case CRC_updateEditMessage:
		r = decode_body_TL_updateEditMessage(m)
	case CRC_updateInlineBotCallbackQuery:
		r = decode_body_TL_updateInlineBotCallbackQuery(m)
	case CRC_updateReadChannelOutbox:
		r = decode_body_TL_updateReadChannelOutbox(m)
	case CRC_updateDraftMessage:
		r = decode_body_TL_updateDraftMessage(m)
	case CRC_updateReadFeaturedStickers:
		r = decode_body_TL_updateReadFeaturedStickers(m)
	case CRC_updateRecentStickers:
		r = decode_body_TL_updateRecentStickers(m)
	case CRC_updateConfig:
		r = decode_body_TL_updateConfig(m)
	case CRC_updatePTSChanged:
		r = decode_body_TL_updatePTSChanged(m)
	case CRC_updateChannelWebPage:
		r = decode_body_TL_updateChannelWebPage(m)
	case CRC_updateDialogPinned:
		r = decode_body_TL_updateDialogPinned(m)
	case CRC_updatePinnedDialogs:
		r = decode_body_TL_updatePinnedDialogs(m)
	case CRC_updateBotWebhookJSON:
		r = decode_body_TL_updateBotWebhookJSON(m)
	case CRC_updateBotWebhookJSONQuery:
		r = decode_body_TL_updateBotWebhookJSONQuery(m)
	case CRC_updateBotShippingQuery:
		r = decode_body_TL_updateBotShippingQuery(m)
	case CRC_updateBotPrecheckoutQuery:
		r = decode_body_TL_updateBotPrecheckoutQuery(m)
	case CRC_updatePhoneCall:
		r = decode_body_TL_updatePhoneCall(m)
	case CRC_updateLangPackTooLong:
		r = decode_body_TL_updateLangPackTooLong(m)
	case CRC_updateLangPack:
		r = decode_body_TL_updateLangPack(m)
	case CRC_updateFavedStickers:
		r = decode_body_TL_updateFavedStickers(m)
	case CRC_updateChannelReadMessagesContents:
		r = decode_body_TL_updateChannelReadMessagesContents(m)
	case CRC_updateContactsReset:
		r = decode_body_TL_updateContactsReset(m)
	case CRC_updateChannelAvailableMessages:
		r = decode_body_TL_updateChannelAvailableMessages(m)
	case CRC_updateDialogUnreadMark:
		r = decode_body_TL_updateDialogUnreadMark(m)
	case CRC_updateMessagePoll:
		r = decode_body_TL_updateMessagePoll(m)
	case CRC_updateChatDefaultBannedRights:
		r = decode_body_TL_updateChatDefaultBannedRights(m)
	case CRC_updateFolderPeers:
		r = decode_body_TL_updateFolderPeers(m)
	case CRC_updatePeerSettings:
		r = decode_body_TL_updatePeerSettings(m)
	case CRC_updatePeerLocated:
		r = decode_body_TL_updatePeerLocated(m)
	case CRC_updateNewScheduledMessage:
		r = decode_body_TL_updateNewScheduledMessage(m)
	case CRC_updateDeleteScheduledMessages:
		r = decode_body_TL_updateDeleteScheduledMessages(m)
	case CRC_updateTheme:
		r = decode_body_TL_updateTheme(m)
	case CRC_updateGeoLiveViewed:
		r = decode_body_TL_updateGeoLiveViewed(m)
	case CRC_updateLoginToken:
		r = decode_body_TL_updateLoginToken(m)
	case CRC_updateMessagePollVote:
		r = decode_body_TL_updateMessagePollVote(m)
	case CRC_updateDialogFilter:
		r = decode_body_TL_updateDialogFilter(m)
	case CRC_updateDialogFilterOrder:
		r = decode_body_TL_updateDialogFilterOrder(m)
	case CRC_updateDialogFilters:
		r = decode_body_TL_updateDialogFilters(m)
	case CRC_updatePhoneCallSignalingData:
		r = decode_body_TL_updatePhoneCallSignalingData(m)
	case CRC_updateChannelMessageForwards:
		r = decode_body_TL_updateChannelMessageForwards(m)
	case CRC_updateReadChannelDiscussionInbox:
		r = decode_body_TL_updateReadChannelDiscussionInbox(m)
	case CRC_updateReadChannelDiscussionOutbox:
		r = decode_body_TL_updateReadChannelDiscussionOutbox(m)
	case CRC_updatePeerBlocked:
		r = decode_body_TL_updatePeerBlocked(m)
	case CRC_updateChannelUserTyping:
		r = decode_body_TL_updateChannelUserTyping(m)
	case CRC_updatePinnedMessages:
		r = decode_body_TL_updatePinnedMessages(m)
	case CRC_updatePinnedChannelMessages:
		r = decode_body_TL_updatePinnedChannelMessages(m)
	case CRC_updateChat:
		r = decode_body_TL_updateChat(m)
	case CRC_updateGroupCallParticipants:
		r = decode_body_TL_updateGroupCallParticipants(m)
	case CRC_updateGroupCall:
		r = decode_body_TL_updateGroupCall(m)
	case CRC_updatePeerHistoryTTL:
		r = decode_body_TL_updatePeerHistoryTTL(m)
	case CRC_updateChatParticipant:
		r = decode_body_TL_updateChatParticipant(m)
	case CRC_updateChannelParticipant:
		r = decode_body_TL_updateChannelParticipant(m)
	case CRC_updateBotStopped:
		r = decode_body_TL_updateBotStopped(m)
	case CRC_updateGroupCallConnection:
		r = decode_body_TL_updateGroupCallConnection(m)
	case CRC_updateBotCommands:
		r = decode_body_TL_updateBotCommands(m)
	case CRC_updatePendingJoinRequests:
		r = decode_body_TL_updatePendingJoinRequests(m)
	case CRC_updateBotChatInviteRequester:
		r = decode_body_TL_updateBotChatInviteRequester(m)
	case CRC_updateMessageReactions:
		r = decode_body_TL_updateMessageReactions(m)
	case CRC_updateAttachMenuBots:
		r = decode_body_TL_updateAttachMenuBots(m)
	case CRC_updateWebViewResultSent:
		r = decode_body_TL_updateWebViewResultSent(m)
	case CRC_updateBotMenuButton:
		r = decode_body_TL_updateBotMenuButton(m)
	case CRC_updateSavedRingtones:
		r = decode_body_TL_updateSavedRingtones(m)
	case CRC_updateTranscribedAudio:
		r = decode_body_TL_updateTranscribedAudio(m)
	case CRC_updateReadFeaturedEmojiStickers:
		r = decode_body_TL_updateReadFeaturedEmojiStickers(m)
	case CRC_updateUserEmojiStatus:
		r = decode_body_TL_updateUserEmojiStatus(m)
	case CRC_updateRecentEmojiStatuses:
		r = decode_body_TL_updateRecentEmojiStatuses(m)
	case CRC_updateRecentReactions:
		r = decode_body_TL_updateRecentReactions(m)
	case CRC_updateMoveStickerSetToTop:
		r = decode_body_TL_updateMoveStickerSetToTop(m)
	case CRC_updateMessageExtendedMedia:
		r = decode_body_TL_updateMessageExtendedMedia(m)
	case CRC_updateChannelPinnedTopic:
		r = decode_body_TL_updateChannelPinnedTopic(m)
	case CRC_updateChannelPinnedTopics:
		r = decode_body_TL_updateChannelPinnedTopics(m)
	case CRC_updateUser:
		r = decode_body_TL_updateUser(m)
	case CRC_updateAutoSaveSettings:
		r = decode_body_TL_updateAutoSaveSettings(m)
	case CRC_updateStory:
		r = decode_body_TL_updateStory(m)
	case CRC_updateReadStories:
		r = decode_body_TL_updateReadStories(m)
	case CRC_updateStoryID:
		r = decode_body_TL_updateStoryID(m)
	case CRC_updateStoriesStealthMode:
		r = decode_body_TL_updateStoriesStealthMode(m)
	case CRC_updateSentStoryReaction:
		r = decode_body_TL_updateSentStoryReaction(m)
	case CRC_updateBotChatBoost:
		r = decode_body_TL_updateBotChatBoost(m)
	case CRC_updateChannelViewForumAsMessages:
		r = decode_body_TL_updateChannelViewForumAsMessages(m)
	case CRC_updatePeerWallpaper:
		r = decode_body_TL_updatePeerWallpaper(m)
	case CRC_updateBotMessageReaction:
		r = decode_body_TL_updateBotMessageReaction(m)
	case CRC_updateBotMessageReactions:
		r = decode_body_TL_updateBotMessageReactions(m)
	case CRC_updateSavedDialogPinned:
		r = decode_body_TL_updateSavedDialogPinned(m)
	case CRC_updatePinnedSavedDialogs:
		r = decode_body_TL_updatePinnedSavedDialogs(m)
	case CRC_updateSavedReactionTags:
		r = decode_body_TL_updateSavedReactionTags(m)
	case CRC_updateSMSJob:
		r = decode_body_TL_updateSMSJob(m)
	case CRC_updateQuickReplies:
		r = decode_body_TL_updateQuickReplies(m)
	case CRC_updateNewQuickReply:
		r = decode_body_TL_updateNewQuickReply(m)
	case CRC_updateDeleteQuickReply:
		r = decode_body_TL_updateDeleteQuickReply(m)
	case CRC_updateQuickReplyMessage:
		r = decode_body_TL_updateQuickReplyMessage(m)
	case CRC_updateDeleteQuickReplyMessages:
		r = decode_body_TL_updateDeleteQuickReplyMessages(m)
	case CRC_updateBotBusinessConnect:
		r = decode_body_TL_updateBotBusinessConnect(m)
	case CRC_updateBotNewBusinessMessage:
		r = decode_body_TL_updateBotNewBusinessMessage(m)
	case CRC_updateBotEditBusinessMessage:
		r = decode_body_TL_updateBotEditBusinessMessage(m)
	case CRC_updateBotDeleteBusinessMessage:
		r = decode_body_TL_updateBotDeleteBusinessMessage(m)
	case CRC_updateNewStoryReaction:
		r = decode_body_TL_updateNewStoryReaction(m)
	case CRC_updateBroadcastRevenueTransactions:
		r = decode_body_TL_updateBroadcastRevenueTransactions(m)
	case CRC_updateStarsBalance:
		r = decode_body_TL_updateStarsBalance(m)
	case CRC_updateBusinessBotCallbackQuery:
		r = decode_body_TL_updateBusinessBotCallbackQuery(m)
	case CRC_updateStarsRevenueStatus:
		r = decode_body_TL_updateStarsRevenueStatus(m)
	case CRC_updateBotPurchasedPaidMedia:
		r = decode_body_TL_updateBotPurchasedPaidMedia(m)
	case CRC_updatePaidReactionPrivacy:
		r = decode_body_TL_updatePaidReactionPrivacy(m)
	case CRC_updates_state:
		r = decode_body_TL_updates_state(m)
	case CRC_updates_differenceEmpty:
		r = decode_body_TL_updates_differenceEmpty(m)
	case CRC_updates_difference:
		r = decode_body_TL_updates_difference(m)
	case CRC_updates_differenceSlice:
		r = decode_body_TL_updates_differenceSlice(m)
	case CRC_updates_differenceTooLong:
		r = decode_body_TL_updates_differenceTooLong(m)
	case CRC_updatesTooLong:
		r = decode_body_TL_updatesTooLong(m)
	case CRC_updateShortMessage:
		r = decode_body_TL_updateShortMessage(m)
	case CRC_updateShortChatMessage:
		r = decode_body_TL_updateShortChatMessage(m)
	case CRC_updateShort:
		r = decode_body_TL_updateShort(m)
	case CRC_updatesCombined:
		r = decode_body_TL_updatesCombined(m)
	case CRC_updates:
		r = decode_body_TL_updates(m)
	case CRC_updateShortSentMessage:
		r = decode_body_TL_updateShortSentMessage(m)
	case CRC_photos_photos:
		r = decode_body_TL_photos_photos(m)
	case CRC_photos_photosSlice:
		r = decode_body_TL_photos_photosSlice(m)
	case CRC_photos_photo:
		r = decode_body_TL_photos_photo(m)
	case CRC_upload_file:
		r = decode_body_TL_upload_file(m)
	case CRC_upload_fileCDNRedirect:
		r = decode_body_TL_upload_fileCDNRedirect(m)
	case CRC_dcOption:
		r = decode_body_TL_dcOption(m)
	case CRC_config:
		r = decode_body_TL_config(m)
	case CRC_nearestDC:
		r = decode_body_TL_nearestDC(m)
	case CRC_help_appUpdate:
		r = decode_body_TL_help_appUpdate(m)
	case CRC_help_noAppUpdate:
		r = decode_body_TL_help_noAppUpdate(m)
	case CRC_help_inviteText:
		r = decode_body_TL_help_inviteText(m)
	case CRC_encryptedChatEmpty:
		r = decode_body_TL_encryptedChatEmpty(m)
	case CRC_encryptedChatWaiting:
		r = decode_body_TL_encryptedChatWaiting(m)
	case CRC_encryptedChatRequested:
		r = decode_body_TL_encryptedChatRequested(m)
	case CRC_encryptedChat:
		r = decode_body_TL_encryptedChat(m)
	case CRC_encryptedChatDiscarded:
		r = decode_body_TL_encryptedChatDiscarded(m)
	case CRC_inputEncryptedChat:
		r = decode_body_TL_inputEncryptedChat(m)
	case CRC_encryptedFileEmpty:
		r = decode_body_TL_encryptedFileEmpty(m)
	case CRC_encryptedFile:
		r = decode_body_TL_encryptedFile(m)
	case CRC_inputEncryptedFileEmpty:
		r = decode_body_TL_inputEncryptedFileEmpty(m)
	case CRC_inputEncryptedFileUploaded:
		r = decode_body_TL_inputEncryptedFileUploaded(m)
	case CRC_inputEncryptedFile:
		r = decode_body_TL_inputEncryptedFile(m)
	case CRC_inputEncryptedFileBigUploaded:
		r = decode_body_TL_inputEncryptedFileBigUploaded(m)
	case CRC_encryptedMessage:
		r = decode_body_TL_encryptedMessage(m)
	case CRC_encryptedMessageService:
		r = decode_body_TL_encryptedMessageService(m)
	case CRC_messages_dhConfigNotModified:
		r = decode_body_TL_messages_dhConfigNotModified(m)
	case CRC_messages_dhConfig:
		r = decode_body_TL_messages_dhConfig(m)
	case CRC_messages_sentEncryptedMessage:
		r = decode_body_TL_messages_sentEncryptedMessage(m)
	case CRC_messages_sentEncryptedFile:
		r = decode_body_TL_messages_sentEncryptedFile(m)
	case CRC_inputDocumentEmpty:
		r = decode_body_TL_inputDocumentEmpty(m)
	case CRC_inputDocument:
		r = decode_body_TL_inputDocument(m)
	case CRC_documentEmpty:
		r = decode_body_TL_documentEmpty(m)
	case CRC_document:
		r = decode_body_TL_document(m)
	case CRC_help_support:
		r = decode_body_TL_help_support(m)
	case CRC_notifyPeer:
		r = decode_body_TL_notifyPeer(m)
	case CRC_notifyUsers:
		r = decode_body_TL_notifyUsers(m)
	case CRC_notifyChats:
		r = decode_body_TL_notifyChats(m)
	case CRC_notifyBroadcasts:
		r = decode_body_TL_notifyBroadcasts(m)
	case CRC_notifyForumTopic:
		r = decode_body_TL_notifyForumTopic(m)
	case CRC_sendMessageTypingAction:
		r = decode_body_TL_sendMessageTypingAction(m)
	case CRC_sendMessageCancelAction:
		r = decode_body_TL_sendMessageCancelAction(m)
	case CRC_sendMessageRecordVideoAction:
		r = decode_body_TL_sendMessageRecordVideoAction(m)
	case CRC_sendMessageUploadVideoAction:
		r = decode_body_TL_sendMessageUploadVideoAction(m)
	case CRC_sendMessageRecordAudioAction:
		r = decode_body_TL_sendMessageRecordAudioAction(m)
	case CRC_sendMessageUploadAudioAction:
		r = decode_body_TL_sendMessageUploadAudioAction(m)
	case CRC_sendMessageUploadPhotoAction:
		r = decode_body_TL_sendMessageUploadPhotoAction(m)
	case CRC_sendMessageUploadDocumentAction:
		r = decode_body_TL_sendMessageUploadDocumentAction(m)
	case CRC_sendMessageGeoLocationAction:
		r = decode_body_TL_sendMessageGeoLocationAction(m)
	case CRC_sendMessageChooseContactAction:
		r = decode_body_TL_sendMessageChooseContactAction(m)
	case CRC_sendMessageGamePlayAction:
		r = decode_body_TL_sendMessageGamePlayAction(m)
	case CRC_sendMessageRecordRoundAction:
		r = decode_body_TL_sendMessageRecordRoundAction(m)
	case CRC_sendMessageUploadRoundAction:
		r = decode_body_TL_sendMessageUploadRoundAction(m)
	case CRC_speakingInGroupCallAction:
		r = decode_body_TL_speakingInGroupCallAction(m)
	case CRC_sendMessageHistoryImportAction:
		r = decode_body_TL_sendMessageHistoryImportAction(m)
	case CRC_sendMessageChooseStickerAction:
		r = decode_body_TL_sendMessageChooseStickerAction(m)
	case CRC_sendMessageEmojiInteraction:
		r = decode_body_TL_sendMessageEmojiInteraction(m)
	case CRC_sendMessageEmojiInteractionSeen:
		r = decode_body_TL_sendMessageEmojiInteractionSeen(m)
	case CRC_contacts_found:
		r = decode_body_TL_contacts_found(m)
	case CRC_inputPrivacyKeyStatusTimestamp:
		r = decode_body_TL_inputPrivacyKeyStatusTimestamp(m)
	case CRC_inputPrivacyKeyChatInvite:
		r = decode_body_TL_inputPrivacyKeyChatInvite(m)
	case CRC_inputPrivacyKeyPhoneCall:
		r = decode_body_TL_inputPrivacyKeyPhoneCall(m)
	case CRC_inputPrivacyKeyPhoneP2P:
		r = decode_body_TL_inputPrivacyKeyPhoneP2P(m)
	case CRC_inputPrivacyKeyForwards:
		r = decode_body_TL_inputPrivacyKeyForwards(m)
	case CRC_inputPrivacyKeyProfilePhoto:
		r = decode_body_TL_inputPrivacyKeyProfilePhoto(m)
	case CRC_inputPrivacyKeyPhoneNumber:
		r = decode_body_TL_inputPrivacyKeyPhoneNumber(m)
	case CRC_inputPrivacyKeyAddedByPhone:
		r = decode_body_TL_inputPrivacyKeyAddedByPhone(m)
	case CRC_inputPrivacyKeyVoiceMessages:
		r = decode_body_TL_inputPrivacyKeyVoiceMessages(m)
	case CRC_inputPrivacyKeyAbout:
		r = decode_body_TL_inputPrivacyKeyAbout(m)
	case CRC_inputPrivacyKeyBirthday:
		r = decode_body_TL_inputPrivacyKeyBirthday(m)
	case CRC_privacyKeyStatusTimestamp:
		r = decode_body_TL_privacyKeyStatusTimestamp(m)
	case CRC_privacyKeyChatInvite:
		r = decode_body_TL_privacyKeyChatInvite(m)
	case CRC_privacyKeyPhoneCall:
		r = decode_body_TL_privacyKeyPhoneCall(m)
	case CRC_privacyKeyPhoneP2P:
		r = decode_body_TL_privacyKeyPhoneP2P(m)
	case CRC_privacyKeyForwards:
		r = decode_body_TL_privacyKeyForwards(m)
	case CRC_privacyKeyProfilePhoto:
		r = decode_body_TL_privacyKeyProfilePhoto(m)
	case CRC_privacyKeyPhoneNumber:
		r = decode_body_TL_privacyKeyPhoneNumber(m)
	case CRC_privacyKeyAddedByPhone:
		r = decode_body_TL_privacyKeyAddedByPhone(m)
	case CRC_privacyKeyVoiceMessages:
		r = decode_body_TL_privacyKeyVoiceMessages(m)
	case CRC_privacyKeyAbout:
		r = decode_body_TL_privacyKeyAbout(m)
	case CRC_privacyKeyBirthday:
		r = decode_body_TL_privacyKeyBirthday(m)
	case CRC_inputPrivacyValueAllowContacts:
		r = decode_body_TL_inputPrivacyValueAllowContacts(m)
	case CRC_inputPrivacyValueAllowAll:
		r = decode_body_TL_inputPrivacyValueAllowAll(m)
	case CRC_inputPrivacyValueAllowUsers:
		r = decode_body_TL_inputPrivacyValueAllowUsers(m)
	case CRC_inputPrivacyValueDisallowContacts:
		r = decode_body_TL_inputPrivacyValueDisallowContacts(m)
	case CRC_inputPrivacyValueDisallowAll:
		r = decode_body_TL_inputPrivacyValueDisallowAll(m)
	case CRC_inputPrivacyValueDisallowUsers:
		r = decode_body_TL_inputPrivacyValueDisallowUsers(m)
	case CRC_inputPrivacyValueAllowChatParticipants:
		r = decode_body_TL_inputPrivacyValueAllowChatParticipants(m)
	case CRC_inputPrivacyValueDisallowChatParticipants:
		r = decode_body_TL_inputPrivacyValueDisallowChatParticipants(m)
	case CRC_inputPrivacyValueAllowCloseFriends:
		r = decode_body_TL_inputPrivacyValueAllowCloseFriends(m)
	case CRC_inputPrivacyValueAllowPremium:
		r = decode_body_TL_inputPrivacyValueAllowPremium(m)
	case CRC_privacyValueAllowContacts:
		r = decode_body_TL_privacyValueAllowContacts(m)
	case CRC_privacyValueAllowAll:
		r = decode_body_TL_privacyValueAllowAll(m)
	case CRC_privacyValueAllowUsers:
		r = decode_body_TL_privacyValueAllowUsers(m)
	case CRC_privacyValueDisallowContacts:
		r = decode_body_TL_privacyValueDisallowContacts(m)
	case CRC_privacyValueDisallowAll:
		r = decode_body_TL_privacyValueDisallowAll(m)
	case CRC_privacyValueDisallowUsers:
		r = decode_body_TL_privacyValueDisallowUsers(m)
	case CRC_privacyValueAllowChatParticipants:
		r = decode_body_TL_privacyValueAllowChatParticipants(m)
	case CRC_privacyValueDisallowChatParticipants:
		r = decode_body_TL_privacyValueDisallowChatParticipants(m)
	case CRC_privacyValueAllowCloseFriends:
		r = decode_body_TL_privacyValueAllowCloseFriends(m)
	case CRC_privacyValueAllowPremium:
		r = decode_body_TL_privacyValueAllowPremium(m)
	case CRC_account_privacyRules:
		r = decode_body_TL_account_privacyRules(m)
	case CRC_accountDaysTTL:
		r = decode_body_TL_accountDaysTTL(m)
	case CRC_documentAttributeImageSize:
		r = decode_body_TL_documentAttributeImageSize(m)
	case CRC_documentAttributeAnimated:
		r = decode_body_TL_documentAttributeAnimated(m)
	case CRC_documentAttributeSticker:
		r = decode_body_TL_documentAttributeSticker(m)
	case CRC_documentAttributeVideo:
		r = decode_body_TL_documentAttributeVideo(m)
	case CRC_documentAttributeAudio:
		r = decode_body_TL_documentAttributeAudio(m)
	case CRC_documentAttributeFilename:
		r = decode_body_TL_documentAttributeFilename(m)
	case CRC_documentAttributeHasStickers:
		r = decode_body_TL_documentAttributeHasStickers(m)
	case CRC_documentAttributeCustomEmoji:
		r = decode_body_TL_documentAttributeCustomEmoji(m)
	case CRC_messages_stickersNotModified:
		r = decode_body_TL_messages_stickersNotModified(m)
	case CRC_messages_stickers:
		r = decode_body_TL_messages_stickers(m)
	case CRC_stickerPack:
		r = decode_body_TL_stickerPack(m)
	case CRC_messages_allStickersNotModified:
		r = decode_body_TL_messages_allStickersNotModified(m)
	case CRC_messages_allStickers:
		r = decode_body_TL_messages_allStickers(m)
	case CRC_messages_affectedMessages:
		r = decode_body_TL_messages_affectedMessages(m)
	case CRC_webPageEmpty:
		r = decode_body_TL_webPageEmpty(m)
	case CRC_webPagePending:
		r = decode_body_TL_webPagePending(m)
	case CRC_webPage:
		r = decode_body_TL_webPage(m)
	case CRC_webPageNotModified:
		r = decode_body_TL_webPageNotModified(m)
	case CRC_authorization:
		r = decode_body_TL_authorization(m)
	case CRC_account_authorizations:
		r = decode_body_TL_account_authorizations(m)
	case CRC_account_password:
		r = decode_body_TL_account_password(m)
	case CRC_account_passwordSettings:
		r = decode_body_TL_account_passwordSettings(m)
	case CRC_account_passwordInputSettings:
		r = decode_body_TL_account_passwordInputSettings(m)
	case CRC_auth_passwordRecovery:
		r = decode_body_TL_auth_passwordRecovery(m)
	case CRC_receivedNotifyMessage:
		r = decode_body_TL_receivedNotifyMessage(m)
	case CRC_chatInviteExported:
		r = decode_body_TL_chatInviteExported(m)
	case CRC_chatInvitePublicJoinRequests:
		r = decode_body_TL_chatInvitePublicJoinRequests(m)
	case CRC_chatInviteAlready:
		r = decode_body_TL_chatInviteAlready(m)
	case CRC_chatInvite:
		r = decode_body_TL_chatInvite(m)
	case CRC_chatInvitePeek:
		r = decode_body_TL_chatInvitePeek(m)
	case CRC_inputStickerSetEmpty:
		r = decode_body_TL_inputStickerSetEmpty(m)
	case CRC_inputStickerSetID:
		r = decode_body_TL_inputStickerSetID(m)
	case CRC_inputStickerSetShortName:
		r = decode_body_TL_inputStickerSetShortName(m)
	case CRC_inputStickerSetAnimatedEmoji:
		r = decode_body_TL_inputStickerSetAnimatedEmoji(m)
	case CRC_inputStickerSetDice:
		r = decode_body_TL_inputStickerSetDice(m)
	case CRC_inputStickerSetAnimatedEmojiAnimations:
		r = decode_body_TL_inputStickerSetAnimatedEmojiAnimations(m)
	case CRC_inputStickerSetPremiumGifts:
		r = decode_body_TL_inputStickerSetPremiumGifts(m)
	case CRC_inputStickerSetEmojiGenericAnimations:
		r = decode_body_TL_inputStickerSetEmojiGenericAnimations(m)
	case CRC_inputStickerSetEmojiDefaultStatuses:
		r = decode_body_TL_inputStickerSetEmojiDefaultStatuses(m)
	case CRC_inputStickerSetEmojiDefaultTopicIcons:
		r = decode_body_TL_inputStickerSetEmojiDefaultTopicIcons(m)
	case CRC_inputStickerSetEmojiChannelDefaultStatuses:
		r = decode_body_TL_inputStickerSetEmojiChannelDefaultStatuses(m)
	case CRC_stickerSet:
		r = decode_body_TL_stickerSet(m)
	case CRC_messages_stickerSet:
		r = decode_body_TL_messages_stickerSet(m)
	case CRC_messages_stickerSetNotModified:
		r = decode_body_TL_messages_stickerSetNotModified(m)
	case CRC_botCommand:
		r = decode_body_TL_botCommand(m)
	case CRC_botInfo:
		r = decode_body_TL_botInfo(m)
	case CRC_keyboardButton:
		r = decode_body_TL_keyboardButton(m)
	case CRC_keyboardButtonURL:
		r = decode_body_TL_keyboardButtonURL(m)
	case CRC_keyboardButtonCallback:
		r = decode_body_TL_keyboardButtonCallback(m)
	case CRC_keyboardButtonRequestPhone:
		r = decode_body_TL_keyboardButtonRequestPhone(m)
	case CRC_keyboardButtonRequestGeoLocation:
		r = decode_body_TL_keyboardButtonRequestGeoLocation(m)
	case CRC_keyboardButtonSwitchInline:
		r = decode_body_TL_keyboardButtonSwitchInline(m)
	case CRC_keyboardButtonGame:
		r = decode_body_TL_keyboardButtonGame(m)
	case CRC_keyboardButtonBuy:
		r = decode_body_TL_keyboardButtonBuy(m)
	case CRC_keyboardButtonURLAuth:
		r = decode_body_TL_keyboardButtonURLAuth(m)
	case CRC_inputKeyboardButtonURLAuth:
		r = decode_body_TL_inputKeyboardButtonURLAuth(m)
	case CRC_keyboardButtonRequestPoll:
		r = decode_body_TL_keyboardButtonRequestPoll(m)
	case CRC_inputKeyboardButtonUserProfile:
		r = decode_body_TL_inputKeyboardButtonUserProfile(m)
	case CRC_keyboardButtonUserProfile:
		r = decode_body_TL_keyboardButtonUserProfile(m)
	case CRC_keyboardButtonWebView:
		r = decode_body_TL_keyboardButtonWebView(m)
	case CRC_keyboardButtonSimpleWebView:
		r = decode_body_TL_keyboardButtonSimpleWebView(m)
	case CRC_keyboardButtonRequestPeer:
		r = decode_body_TL_keyboardButtonRequestPeer(m)
	case CRC_inputKeyboardButtonRequestPeer:
		r = decode_body_TL_inputKeyboardButtonRequestPeer(m)
	case CRC_keyboardButtonRow:
		r = decode_body_TL_keyboardButtonRow(m)
	case CRC_replyKeyboardHide:
		r = decode_body_TL_replyKeyboardHide(m)
	case CRC_replyKeyboardForceReply:
		r = decode_body_TL_replyKeyboardForceReply(m)
	case CRC_replyKeyboardMarkup:
		r = decode_body_TL_replyKeyboardMarkup(m)
	case CRC_replyInlineMarkup:
		r = decode_body_TL_replyInlineMarkup(m)
	case CRC_messageEntityUnknown:
		r = decode_body_TL_messageEntityUnknown(m)
	case CRC_messageEntityMention:
		r = decode_body_TL_messageEntityMention(m)
	case CRC_messageEntityHashtag:
		r = decode_body_TL_messageEntityHashtag(m)
	case CRC_messageEntityBotCommand:
		r = decode_body_TL_messageEntityBotCommand(m)
	case CRC_messageEntityURL:
		r = decode_body_TL_messageEntityURL(m)
	case CRC_messageEntityEmail:
		r = decode_body_TL_messageEntityEmail(m)
	case CRC_messageEntityBold:
		r = decode_body_TL_messageEntityBold(m)
	case CRC_messageEntityItalic:
		r = decode_body_TL_messageEntityItalic(m)
	case CRC_messageEntityCode:
		r = decode_body_TL_messageEntityCode(m)
	case CRC_messageEntityPre:
		r = decode_body_TL_messageEntityPre(m)
	case CRC_messageEntityTextURL:
		r = decode_body_TL_messageEntityTextURL(m)
	case CRC_messageEntityMentionName:
		r = decode_body_TL_messageEntityMentionName(m)
	case CRC_inputMessageEntityMentionName:
		r = decode_body_TL_inputMessageEntityMentionName(m)
	case CRC_messageEntityPhone:
		r = decode_body_TL_messageEntityPhone(m)
	case CRC_messageEntityCashtag:
		r = decode_body_TL_messageEntityCashtag(m)
	case CRC_messageEntityUnderline:
		r = decode_body_TL_messageEntityUnderline(m)
	case CRC_messageEntityStrike:
		r = decode_body_TL_messageEntityStrike(m)
	case CRC_messageEntityBankCard:
		r = decode_body_TL_messageEntityBankCard(m)
	case CRC_messageEntitySpoiler:
		r = decode_body_TL_messageEntitySpoiler(m)
	case CRC_messageEntityCustomEmoji:
		r = decode_body_TL_messageEntityCustomEmoji(m)
	case CRC_messageEntityBlockquote:
		r = decode_body_TL_messageEntityBlockquote(m)
	case CRC_inputChannelEmpty:
		r = decode_body_TL_inputChannelEmpty(m)
	case CRC_inputChannel:
		r = decode_body_TL_inputChannel(m)
	case CRC_inputChannelFromMessage:
		r = decode_body_TL_inputChannelFromMessage(m)
	case CRC_contacts_resolvedPeer:
		r = decode_body_TL_contacts_resolvedPeer(m)
	case CRC_messageRange:
		r = decode_body_TL_messageRange(m)
	case CRC_updates_channelDifferenceEmpty:
		r = decode_body_TL_updates_channelDifferenceEmpty(m)
	case CRC_updates_channelDifferenceTooLong:
		r = decode_body_TL_updates_channelDifferenceTooLong(m)
	case CRC_updates_channelDifference:
		r = decode_body_TL_updates_channelDifference(m)
	case CRC_channelMessagesFilterEmpty:
		r = decode_body_TL_channelMessagesFilterEmpty(m)
	case CRC_channelMessagesFilter:
		r = decode_body_TL_channelMessagesFilter(m)
	case CRC_channelParticipant:
		r = decode_body_TL_channelParticipant(m)
	case CRC_channelParticipantSelf:
		r = decode_body_TL_channelParticipantSelf(m)
	case CRC_channelParticipantCreator:
		r = decode_body_TL_channelParticipantCreator(m)
	case CRC_channelParticipantAdmin:
		r = decode_body_TL_channelParticipantAdmin(m)
	case CRC_channelParticipantBanned:
		r = decode_body_TL_channelParticipantBanned(m)
	case CRC_channelParticipantLeft:
		r = decode_body_TL_channelParticipantLeft(m)
	case CRC_channelParticipantsRecent:
		r = decode_body_TL_channelParticipantsRecent(m)
	case CRC_channelParticipantsAdmins:
		r = decode_body_TL_channelParticipantsAdmins(m)
	case CRC_channelParticipantsKicked:
		r = decode_body_TL_channelParticipantsKicked(m)
	case CRC_channelParticipantsBots:
		r = decode_body_TL_channelParticipantsBots(m)
	case CRC_channelParticipantsBanned:
		r = decode_body_TL_channelParticipantsBanned(m)
	case CRC_channelParticipantsSearch:
		r = decode_body_TL_channelParticipantsSearch(m)
	case CRC_channelParticipantsContacts:
		r = decode_body_TL_channelParticipantsContacts(m)
	case CRC_channelParticipantsMentions:
		r = decode_body_TL_channelParticipantsMentions(m)
	case CRC_channels_channelParticipants:
		r = decode_body_TL_channels_channelParticipants(m)
	case CRC_channels_channelParticipantsNotModified:
		r = decode_body_TL_channels_channelParticipantsNotModified(m)
	case CRC_channels_channelParticipant:
		r = decode_body_TL_channels_channelParticipant(m)
	case CRC_help_termsOfService:
		r = decode_body_TL_help_termsOfService(m)
	case CRC_messages_savedGIFsNotModified:
		r = decode_body_TL_messages_savedGIFsNotModified(m)
	case CRC_messages_savedGIFs:
		r = decode_body_TL_messages_savedGIFs(m)
	case CRC_inputBotInlineMessageMediaAuto:
		r = decode_body_TL_inputBotInlineMessageMediaAuto(m)
	case CRC_inputBotInlineMessageText:
		r = decode_body_TL_inputBotInlineMessageText(m)
	case CRC_inputBotInlineMessageMediaGeo:
		r = decode_body_TL_inputBotInlineMessageMediaGeo(m)
	case CRC_inputBotInlineMessageMediaVenue:
		r = decode_body_TL_inputBotInlineMessageMediaVenue(m)
	case CRC_inputBotInlineMessageMediaContact:
		r = decode_body_TL_inputBotInlineMessageMediaContact(m)
	case CRC_inputBotInlineMessageGame:
		r = decode_body_TL_inputBotInlineMessageGame(m)
	case CRC_inputBotInlineMessageMediaInvoice:
		r = decode_body_TL_inputBotInlineMessageMediaInvoice(m)
	case CRC_inputBotInlineMessageMediaWebPage:
		r = decode_body_TL_inputBotInlineMessageMediaWebPage(m)
	case CRC_inputBotInlineResult:
		r = decode_body_TL_inputBotInlineResult(m)
	case CRC_inputBotInlineResultPhoto:
		r = decode_body_TL_inputBotInlineResultPhoto(m)
	case CRC_inputBotInlineResultDocument:
		r = decode_body_TL_inputBotInlineResultDocument(m)
	case CRC_inputBotInlineResultGame:
		r = decode_body_TL_inputBotInlineResultGame(m)
	case CRC_botInlineMessageMediaAuto:
		r = decode_body_TL_botInlineMessageMediaAuto(m)
	case CRC_botInlineMessageText:
		r = decode_body_TL_botInlineMessageText(m)
	case CRC_botInlineMessageMediaGeo:
		r = decode_body_TL_botInlineMessageMediaGeo(m)
	case CRC_botInlineMessageMediaVenue:
		r = decode_body_TL_botInlineMessageMediaVenue(m)
	case CRC_botInlineMessageMediaContact:
		r = decode_body_TL_botInlineMessageMediaContact(m)
	case CRC_botInlineMessageMediaInvoice:
		r = decode_body_TL_botInlineMessageMediaInvoice(m)
	case CRC_botInlineMessageMediaWebPage:
		r = decode_body_TL_botInlineMessageMediaWebPage(m)
	case CRC_botInlineResult:
		r = decode_body_TL_botInlineResult(m)
	case CRC_botInlineMediaResult:
		r = decode_body_TL_botInlineMediaResult(m)
	case CRC_messages_botResults:
		r = decode_body_TL_messages_botResults(m)
	case CRC_exportedMessageLink:
		r = decode_body_TL_exportedMessageLink(m)
	case CRC_messageFwdHeader:
		r = decode_body_TL_messageFwdHeader(m)
	case CRC_auth_codeTypeSMS:
		r = decode_body_TL_auth_codeTypeSMS(m)
	case CRC_auth_codeTypeCall:
		r = decode_body_TL_auth_codeTypeCall(m)
	case CRC_auth_codeTypeFlashCall:
		r = decode_body_TL_auth_codeTypeFlashCall(m)
	case CRC_auth_codeTypeMissedCall:
		r = decode_body_TL_auth_codeTypeMissedCall(m)
	case CRC_auth_codeTypeFragmentSMS:
		r = decode_body_TL_auth_codeTypeFragmentSMS(m)
	case CRC_auth_sentCodeTypeApp:
		r = decode_body_TL_auth_sentCodeTypeApp(m)
	case CRC_auth_sentCodeTypeSMS:
		r = decode_body_TL_auth_sentCodeTypeSMS(m)
	case CRC_auth_sentCodeTypeCall:
		r = decode_body_TL_auth_sentCodeTypeCall(m)
	case CRC_auth_sentCodeTypeFlashCall:
		r = decode_body_TL_auth_sentCodeTypeFlashCall(m)
	case CRC_auth_sentCodeTypeMissedCall:
		r = decode_body_TL_auth_sentCodeTypeMissedCall(m)
	case CRC_auth_sentCodeTypeEmailCode:
		r = decode_body_TL_auth_sentCodeTypeEmailCode(m)
	case CRC_auth_sentCodeTypeSetUpEmailRequired:
		r = decode_body_TL_auth_sentCodeTypeSetUpEmailRequired(m)
	case CRC_auth_sentCodeTypeFragmentSMS:
		r = decode_body_TL_auth_sentCodeTypeFragmentSMS(m)
	case CRC_auth_sentCodeTypeFirebaseSMS:
		r = decode_body_TL_auth_sentCodeTypeFirebaseSMS(m)
	case CRC_auth_sentCodeTypeSMSWord:
		r = decode_body_TL_auth_sentCodeTypeSMSWord(m)
	case CRC_auth_sentCodeTypeSMSPhrase:
		r = decode_body_TL_auth_sentCodeTypeSMSPhrase(m)
	case CRC_messages_botCallbackAnswer:
		r = decode_body_TL_messages_botCallbackAnswer(m)
	case CRC_messages_messageEditData:
		r = decode_body_TL_messages_messageEditData(m)
	case CRC_inputBotInlineMessageID:
		r = decode_body_TL_inputBotInlineMessageID(m)
	case CRC_inputBotInlineMessageID64:
		r = decode_body_TL_inputBotInlineMessageID64(m)
	case CRC_inlineBotSwitchPM:
		r = decode_body_TL_inlineBotSwitchPM(m)
	case CRC_messages_peerDialogs:
		r = decode_body_TL_messages_peerDialogs(m)
	case CRC_topPeer:
		r = decode_body_TL_topPeer(m)
	case CRC_topPeerCategoryBotsPM:
		r = decode_body_TL_topPeerCategoryBotsPM(m)
	case CRC_topPeerCategoryBotsInline:
		r = decode_body_TL_topPeerCategoryBotsInline(m)
	case CRC_topPeerCategoryCorrespondents:
		r = decode_body_TL_topPeerCategoryCorrespondents(m)
	case CRC_topPeerCategoryGroups:
		r = decode_body_TL_topPeerCategoryGroups(m)
	case CRC_topPeerCategoryChannels:
		r = decode_body_TL_topPeerCategoryChannels(m)
	case CRC_topPeerCategoryPhoneCalls:
		r = decode_body_TL_topPeerCategoryPhoneCalls(m)
	case CRC_topPeerCategoryForwardUsers:
		r = decode_body_TL_topPeerCategoryForwardUsers(m)
	case CRC_topPeerCategoryForwardChats:
		r = decode_body_TL_topPeerCategoryForwardChats(m)
	case CRC_topPeerCategoryBotsApp:
		r = decode_body_TL_topPeerCategoryBotsApp(m)
	case CRC_topPeerCategoryPeers:
		r = decode_body_TL_topPeerCategoryPeers(m)
	case CRC_contacts_topPeersNotModified:
		r = decode_body_TL_contacts_topPeersNotModified(m)
	case CRC_contacts_topPeers:
		r = decode_body_TL_contacts_topPeers(m)
	case CRC_contacts_topPeersDisabled:
		r = decode_body_TL_contacts_topPeersDisabled(m)
	case CRC_draftMessageEmpty:
		r = decode_body_TL_draftMessageEmpty(m)
	case CRC_draftMessage:
		r = decode_body_TL_draftMessage(m)
	case CRC_messages_featuredStickersNotModified:
		r = decode_body_TL_messages_featuredStickersNotModified(m)
	case CRC_messages_featuredStickers:
		r = decode_body_TL_messages_featuredStickers(m)
	case CRC_messages_recentStickersNotModified:
		r = decode_body_TL_messages_recentStickersNotModified(m)
	case CRC_messages_recentStickers:
		r = decode_body_TL_messages_recentStickers(m)
	case CRC_messages_archivedStickers:
		r = decode_body_TL_messages_archivedStickers(m)
	case CRC_messages_stickerSetInstallResultSuccess:
		r = decode_body_TL_messages_stickerSetInstallResultSuccess(m)
	case CRC_messages_stickerSetInstallResultArchive:
		r = decode_body_TL_messages_stickerSetInstallResultArchive(m)
	case CRC_stickerSetCovered:
		r = decode_body_TL_stickerSetCovered(m)
	case CRC_stickerSetMultiCovered:
		r = decode_body_TL_stickerSetMultiCovered(m)
	case CRC_stickerSetFullCovered:
		r = decode_body_TL_stickerSetFullCovered(m)
	case CRC_stickerSetNoCovered:
		r = decode_body_TL_stickerSetNoCovered(m)
	case CRC_maskCoords:
		r = decode_body_TL_maskCoords(m)
	case CRC_inputStickeredMediaPhoto:
		r = decode_body_TL_inputStickeredMediaPhoto(m)
	case CRC_inputStickeredMediaDocument:
		r = decode_body_TL_inputStickeredMediaDocument(m)
	case CRC_game:
		r = decode_body_TL_game(m)
	case CRC_inputGameID:
		r = decode_body_TL_inputGameID(m)
	case CRC_inputGameShortName:
		r = decode_body_TL_inputGameShortName(m)
	case CRC_highScore:
		r = decode_body_TL_highScore(m)
	case CRC_messages_highScores:
		r = decode_body_TL_messages_highScores(m)
	case CRC_textEmpty:
		r = decode_body_TL_textEmpty(m)
	case CRC_textPlain:
		r = decode_body_TL_textPlain(m)
	case CRC_textBold:
		r = decode_body_TL_textBold(m)
	case CRC_textItalic:
		r = decode_body_TL_textItalic(m)
	case CRC_textUnderline:
		r = decode_body_TL_textUnderline(m)
	case CRC_textStrike:
		r = decode_body_TL_textStrike(m)
	case CRC_textFixed:
		r = decode_body_TL_textFixed(m)
	case CRC_textURL:
		r = decode_body_TL_textURL(m)
	case CRC_textEmail:
		r = decode_body_TL_textEmail(m)
	case CRC_textConcat:
		r = decode_body_TL_textConcat(m)
	case CRC_textSubscript:
		r = decode_body_TL_textSubscript(m)
	case CRC_textSuperscript:
		r = decode_body_TL_textSuperscript(m)
	case CRC_textMarked:
		r = decode_body_TL_textMarked(m)
	case CRC_textPhone:
		r = decode_body_TL_textPhone(m)
	case CRC_textImage:
		r = decode_body_TL_textImage(m)
	case CRC_textAnchor:
		r = decode_body_TL_textAnchor(m)
	case CRC_pageBlockUnsupported:
		r = decode_body_TL_pageBlockUnsupported(m)
	case CRC_pageBlockTitle:
		r = decode_body_TL_pageBlockTitle(m)
	case CRC_pageBlockSubtitle:
		r = decode_body_TL_pageBlockSubtitle(m)
	case CRC_pageBlockAuthorDate:
		r = decode_body_TL_pageBlockAuthorDate(m)
	case CRC_pageBlockHeader:
		r = decode_body_TL_pageBlockHeader(m)
	case CRC_pageBlockSubheader:
		r = decode_body_TL_pageBlockSubheader(m)
	case CRC_pageBlockParagraph:
		r = decode_body_TL_pageBlockParagraph(m)
	case CRC_pageBlockPreformatted:
		r = decode_body_TL_pageBlockPreformatted(m)
	case CRC_pageBlockFooter:
		r = decode_body_TL_pageBlockFooter(m)
	case CRC_pageBlockDivider:
		r = decode_body_TL_pageBlockDivider(m)
	case CRC_pageBlockAnchor:
		r = decode_body_TL_pageBlockAnchor(m)
	case CRC_pageBlockList:
		r = decode_body_TL_pageBlockList(m)
	case CRC_pageBlockBlockquote:
		r = decode_body_TL_pageBlockBlockquote(m)
	case CRC_pageBlockPullquote:
		r = decode_body_TL_pageBlockPullquote(m)
	case CRC_pageBlockPhoto:
		r = decode_body_TL_pageBlockPhoto(m)
	case CRC_pageBlockVideo:
		r = decode_body_TL_pageBlockVideo(m)
	case CRC_pageBlockCover:
		r = decode_body_TL_pageBlockCover(m)
	case CRC_pageBlockEmbed:
		r = decode_body_TL_pageBlockEmbed(m)
	case CRC_pageBlockEmbedPost:
		r = decode_body_TL_pageBlockEmbedPost(m)
	case CRC_pageBlockCollage:
		r = decode_body_TL_pageBlockCollage(m)
	case CRC_pageBlockSlideshow:
		r = decode_body_TL_pageBlockSlideshow(m)
	case CRC_pageBlockChannel:
		r = decode_body_TL_pageBlockChannel(m)
	case CRC_pageBlockAudio:
		r = decode_body_TL_pageBlockAudio(m)
	case CRC_pageBlockKicker:
		r = decode_body_TL_pageBlockKicker(m)
	case CRC_pageBlockTable:
		r = decode_body_TL_pageBlockTable(m)
	case CRC_pageBlockOrderedList:
		r = decode_body_TL_pageBlockOrderedList(m)
	case CRC_pageBlockDetails:
		r = decode_body_TL_pageBlockDetails(m)
	case CRC_pageBlockRelatedArticles:
		r = decode_body_TL_pageBlockRelatedArticles(m)
	case CRC_pageBlockMap:
		r = decode_body_TL_pageBlockMap(m)
	case CRC_phoneCallDiscardReasonMissed:
		r = decode_body_TL_phoneCallDiscardReasonMissed(m)
	case CRC_phoneCallDiscardReasonDisconnect:
		r = decode_body_TL_phoneCallDiscardReasonDisconnect(m)
	case CRC_phoneCallDiscardReasonHangup:
		r = decode_body_TL_phoneCallDiscardReasonHangup(m)
	case CRC_phoneCallDiscardReasonBusy:
		r = decode_body_TL_phoneCallDiscardReasonBusy(m)
	case CRC_dataJSON:
		r = decode_body_TL_dataJSON(m)
	case CRC_labeledPrice:
		r = decode_body_TL_labeledPrice(m)
	case CRC_invoice:
		r = decode_body_TL_invoice(m)
	case CRC_paymentCharge:
		r = decode_body_TL_paymentCharge(m)
	case CRC_postAddress:
		r = decode_body_TL_postAddress(m)
	case CRC_paymentRequestedInfo:
		r = decode_body_TL_paymentRequestedInfo(m)
	case CRC_paymentSavedCredentialsCard:
		r = decode_body_TL_paymentSavedCredentialsCard(m)
	case CRC_webDocument:
		r = decode_body_TL_webDocument(m)
	case CRC_webDocumentNoProxy:
		r = decode_body_TL_webDocumentNoProxy(m)
	case CRC_inputWebDocument:
		r = decode_body_TL_inputWebDocument(m)
	case CRC_inputWebFileLocation:
		r = decode_body_TL_inputWebFileLocation(m)
	case CRC_inputWebFileGeoPointLocation:
		r = decode_body_TL_inputWebFileGeoPointLocation(m)
	case CRC_inputWebFileAudioAlbumThumbLocation:
		r = decode_body_TL_inputWebFileAudioAlbumThumbLocation(m)
	case CRC_upload_webFile:
		r = decode_body_TL_upload_webFile(m)
	case CRC_payments_paymentForm:
		r = decode_body_TL_payments_paymentForm(m)
	case CRC_payments_paymentFormStars:
		r = decode_body_TL_payments_paymentFormStars(m)
	case CRC_payments_validatedRequestedInfo:
		r = decode_body_TL_payments_validatedRequestedInfo(m)
	case CRC_payments_paymentResult:
		r = decode_body_TL_payments_paymentResult(m)
	case CRC_payments_paymentVerificationNeeded:
		r = decode_body_TL_payments_paymentVerificationNeeded(m)
	case CRC_payments_paymentReceipt:
		r = decode_body_TL_payments_paymentReceipt(m)
	case CRC_payments_paymentReceiptStars:
		r = decode_body_TL_payments_paymentReceiptStars(m)
	case CRC_payments_savedInfo:
		r = decode_body_TL_payments_savedInfo(m)
	case CRC_inputPaymentCredentialsSaved:
		r = decode_body_TL_inputPaymentCredentialsSaved(m)
	case CRC_inputPaymentCredentials:
		r = decode_body_TL_inputPaymentCredentials(m)
	case CRC_inputPaymentCredentialsApplePay:
		r = decode_body_TL_inputPaymentCredentialsApplePay(m)
	case CRC_inputPaymentCredentialsGooglePay:
		r = decode_body_TL_inputPaymentCredentialsGooglePay(m)
	case CRC_account_tmpPassword:
		r = decode_body_TL_account_tmpPassword(m)
	case CRC_shippingOption:
		r = decode_body_TL_shippingOption(m)
	case CRC_inputStickerSetItem:
		r = decode_body_TL_inputStickerSetItem(m)
	case CRC_inputPhoneCall:
		r = decode_body_TL_inputPhoneCall(m)
	case CRC_phoneCallEmpty:
		r = decode_body_TL_phoneCallEmpty(m)
	case CRC_phoneCallWaiting:
		r = decode_body_TL_phoneCallWaiting(m)
	case CRC_phoneCallRequested:
		r = decode_body_TL_phoneCallRequested(m)
	case CRC_phoneCallAccepted:
		r = decode_body_TL_phoneCallAccepted(m)
	case CRC_phoneCall:
		r = decode_body_TL_phoneCall(m)
	case CRC_phoneCallDiscarded:
		r = decode_body_TL_phoneCallDiscarded(m)
	case CRC_phoneConnection:
		r = decode_body_TL_phoneConnection(m)
	case CRC_phoneConnectionWebrtc:
		r = decode_body_TL_phoneConnectionWebrtc(m)
	case CRC_phoneCallProtocol:
		r = decode_body_TL_phoneCallProtocol(m)
	case CRC_phone_phoneCall:
		r = decode_body_TL_phone_phoneCall(m)
	case CRC_upload_cdnFileReuploadNeeded:
		r = decode_body_TL_upload_cdnFileReuploadNeeded(m)
	case CRC_upload_cdnFile:
		r = decode_body_TL_upload_cdnFile(m)
	case CRC_cdnPublicKey:
		r = decode_body_TL_cdnPublicKey(m)
	case CRC_cdnConfig:
		r = decode_body_TL_cdnConfig(m)
	case CRC_langPackString:
		r = decode_body_TL_langPackString(m)
	case CRC_langPackStringPluralized:
		r = decode_body_TL_langPackStringPluralized(m)
	case CRC_langPackStringDeleted:
		r = decode_body_TL_langPackStringDeleted(m)
	case CRC_langPackDifference:
		r = decode_body_TL_langPackDifference(m)
	case CRC_langPackLanguage:
		r = decode_body_TL_langPackLanguage(m)
	case CRC_channelAdminLogEventActionChangeTitle:
		r = decode_body_TL_channelAdminLogEventActionChangeTitle(m)
	case CRC_channelAdminLogEventActionChangeAbout:
		r = decode_body_TL_channelAdminLogEventActionChangeAbout(m)
	case CRC_channelAdminLogEventActionChangeUsername:
		r = decode_body_TL_channelAdminLogEventActionChangeUsername(m)
	case CRC_channelAdminLogEventActionChangePhoto:
		r = decode_body_TL_channelAdminLogEventActionChangePhoto(m)
	case CRC_channelAdminLogEventActionToggleInvites:
		r = decode_body_TL_channelAdminLogEventActionToggleInvites(m)
	case CRC_channelAdminLogEventActionToggleSignatures:
		r = decode_body_TL_channelAdminLogEventActionToggleSignatures(m)
	case CRC_channelAdminLogEventActionUpdatePinned:
		r = decode_body_TL_channelAdminLogEventActionUpdatePinned(m)
	case CRC_channelAdminLogEventActionEditMessage:
		r = decode_body_TL_channelAdminLogEventActionEditMessage(m)
	case CRC_channelAdminLogEventActionDeleteMessage:
		r = decode_body_TL_channelAdminLogEventActionDeleteMessage(m)
	case CRC_channelAdminLogEventActionParticipantJoin:
		r = decode_body_TL_channelAdminLogEventActionParticipantJoin(m)
	case CRC_channelAdminLogEventActionParticipantLeave:
		r = decode_body_TL_channelAdminLogEventActionParticipantLeave(m)
	case CRC_channelAdminLogEventActionParticipantInvite:
		r = decode_body_TL_channelAdminLogEventActionParticipantInvite(m)
	case CRC_channelAdminLogEventActionParticipantToggleBan:
		r = decode_body_TL_channelAdminLogEventActionParticipantToggleBan(m)
	case CRC_channelAdminLogEventActionParticipantToggleAdmin:
		r = decode_body_TL_channelAdminLogEventActionParticipantToggleAdmin(m)
	case CRC_channelAdminLogEventActionChangeStickerSet:
		r = decode_body_TL_channelAdminLogEventActionChangeStickerSet(m)
	case CRC_channelAdminLogEventActionTogglePreHistoryHidden:
		r = decode_body_TL_channelAdminLogEventActionTogglePreHistoryHidden(m)
	case CRC_channelAdminLogEventActionDefaultBannedRights:
		r = decode_body_TL_channelAdminLogEventActionDefaultBannedRights(m)
	case CRC_channelAdminLogEventActionStopPoll:
		r = decode_body_TL_channelAdminLogEventActionStopPoll(m)
	case CRC_channelAdminLogEventActionChangeLinkedChat:
		r = decode_body_TL_channelAdminLogEventActionChangeLinkedChat(m)
	case CRC_channelAdminLogEventActionChangeLocation:
		r = decode_body_TL_channelAdminLogEventActionChangeLocation(m)
	case CRC_channelAdminLogEventActionToggleSlowMode:
		r = decode_body_TL_channelAdminLogEventActionToggleSlowMode(m)
	case CRC_channelAdminLogEventActionStartGroupCall:
		r = decode_body_TL_channelAdminLogEventActionStartGroupCall(m)
	case CRC_channelAdminLogEventActionDiscardGroupCall:
		r = decode_body_TL_channelAdminLogEventActionDiscardGroupCall(m)
	case CRC_channelAdminLogEventActionParticipantMute:
		r = decode_body_TL_channelAdminLogEventActionParticipantMute(m)
	case CRC_channelAdminLogEventActionParticipantUnmute:
		r = decode_body_TL_channelAdminLogEventActionParticipantUnmute(m)
	case CRC_channelAdminLogEventActionToggleGroupCallSetting:
		r = decode_body_TL_channelAdminLogEventActionToggleGroupCallSetting(m)
	case CRC_channelAdminLogEventActionParticipantJoinByInvite:
		r = decode_body_TL_channelAdminLogEventActionParticipantJoinByInvite(m)
	case CRC_channelAdminLogEventActionExportedInviteDelete:
		r = decode_body_TL_channelAdminLogEventActionExportedInviteDelete(m)
	case CRC_channelAdminLogEventActionExportedInviteRevoke:
		r = decode_body_TL_channelAdminLogEventActionExportedInviteRevoke(m)
	case CRC_channelAdminLogEventActionExportedInviteEdit:
		r = decode_body_TL_channelAdminLogEventActionExportedInviteEdit(m)
	case CRC_channelAdminLogEventActionParticipantVolume:
		r = decode_body_TL_channelAdminLogEventActionParticipantVolume(m)
	case CRC_channelAdminLogEventActionChangeHistoryTTL:
		r = decode_body_TL_channelAdminLogEventActionChangeHistoryTTL(m)
	case CRC_channelAdminLogEventActionParticipantJoinByRequest:
		r = decode_body_TL_channelAdminLogEventActionParticipantJoinByRequest(m)
	case CRC_channelAdminLogEventActionToggleNoForwards:
		r = decode_body_TL_channelAdminLogEventActionToggleNoForwards(m)
	case CRC_channelAdminLogEventActionSendMessage:
		r = decode_body_TL_channelAdminLogEventActionSendMessage(m)
	case CRC_channelAdminLogEventActionChangeAvailableReactions:
		r = decode_body_TL_channelAdminLogEventActionChangeAvailableReactions(m)
	case CRC_channelAdminLogEventActionChangeUsernames:
		r = decode_body_TL_channelAdminLogEventActionChangeUsernames(m)
	case CRC_channelAdminLogEventActionToggleForum:
		r = decode_body_TL_channelAdminLogEventActionToggleForum(m)
	case CRC_channelAdminLogEventActionCreateTopic:
		r = decode_body_TL_channelAdminLogEventActionCreateTopic(m)
	case CRC_channelAdminLogEventActionEditTopic:
		r = decode_body_TL_channelAdminLogEventActionEditTopic(m)
	case CRC_channelAdminLogEventActionDeleteTopic:
		r = decode_body_TL_channelAdminLogEventActionDeleteTopic(m)
	case CRC_channelAdminLogEventActionPINTopic:
		r = decode_body_TL_channelAdminLogEventActionPINTopic(m)
	case CRC_channelAdminLogEventActionToggleAntiSpam:
		r = decode_body_TL_channelAdminLogEventActionToggleAntiSpam(m)
	case CRC_channelAdminLogEventActionChangePeerColor:
		r = decode_body_TL_channelAdminLogEventActionChangePeerColor(m)
	case CRC_channelAdminLogEventActionChangeProfilePeerColor:
		r = decode_body_TL_channelAdminLogEventActionChangeProfilePeerColor(m)
	case CRC_channelAdminLogEventActionChangeWallpaper:
		r = decode_body_TL_channelAdminLogEventActionChangeWallpaper(m)
	case CRC_channelAdminLogEventActionChangeEmojiStatus:
		r = decode_body_TL_channelAdminLogEventActionChangeEmojiStatus(m)
	case CRC_channelAdminLogEventActionChangeEmojiStickerSet:
		r = decode_body_TL_channelAdminLogEventActionChangeEmojiStickerSet(m)
	case CRC_channelAdminLogEventActionToggleSignatureProfiles:
		r = decode_body_TL_channelAdminLogEventActionToggleSignatureProfiles(m)
	case CRC_channelAdminLogEventActionParticipantSubExtend:
		r = decode_body_TL_channelAdminLogEventActionParticipantSubExtend(m)
	case CRC_channelAdminLogEvent:
		r = decode_body_TL_channelAdminLogEvent(m)
	case CRC_channels_adminLogResults:
		r = decode_body_TL_channels_adminLogResults(m)
	case CRC_channelAdminLogEventsFilter:
		r = decode_body_TL_channelAdminLogEventsFilter(m)
	case CRC_popularContact:
		r = decode_body_TL_popularContact(m)
	case CRC_messages_favedStickersNotModified:
		r = decode_body_TL_messages_favedStickersNotModified(m)
	case CRC_messages_favedStickers:
		r = decode_body_TL_messages_favedStickers(m)
	case CRC_recentMeURLUnknown:
		r = decode_body_TL_recentMeURLUnknown(m)
	case CRC_recentMeURLUser:
		r = decode_body_TL_recentMeURLUser(m)
	case CRC_recentMeURLChat:
		r = decode_body_TL_recentMeURLChat(m)
	case CRC_recentMeURLChatInvite:
		r = decode_body_TL_recentMeURLChatInvite(m)
	case CRC_recentMeURLStickerSet:
		r = decode_body_TL_recentMeURLStickerSet(m)
	case CRC_help_recentMeURLs:
		r = decode_body_TL_help_recentMeURLs(m)
	case CRC_inputSingleMedia:
		r = decode_body_TL_inputSingleMedia(m)
	case CRC_webAuthorization:
		r = decode_body_TL_webAuthorization(m)
	case CRC_account_webAuthorizations:
		r = decode_body_TL_account_webAuthorizations(m)
	case CRC_inputMessageID:
		r = decode_body_TL_inputMessageID(m)
	case CRC_inputMessageReplyTo:
		r = decode_body_TL_inputMessageReplyTo(m)
	case CRC_inputMessagePinned:
		r = decode_body_TL_inputMessagePinned(m)
	case CRC_inputMessageCallbackQuery:
		r = decode_body_TL_inputMessageCallbackQuery(m)
	case CRC_inputDialogPeer:
		r = decode_body_TL_inputDialogPeer(m)
	case CRC_inputDialogPeerFolder:
		r = decode_body_TL_inputDialogPeerFolder(m)
	case CRC_dialogPeer:
		r = decode_body_TL_dialogPeer(m)
	case CRC_dialogPeerFolder:
		r = decode_body_TL_dialogPeerFolder(m)
	case CRC_messages_foundStickerSetsNotModified:
		r = decode_body_TL_messages_foundStickerSetsNotModified(m)
	case CRC_messages_foundStickerSets:
		r = decode_body_TL_messages_foundStickerSets(m)
	case CRC_fileHash:
		r = decode_body_TL_fileHash(m)
	case CRC_inputClientProxy:
		r = decode_body_TL_inputClientProxy(m)
	case CRC_help_termsOfServiceUpdateEmpty:
		r = decode_body_TL_help_termsOfServiceUpdateEmpty(m)
	case CRC_help_termsOfServiceUpdate:
		r = decode_body_TL_help_termsOfServiceUpdate(m)
	case CRC_inputSecureFileUploaded:
		r = decode_body_TL_inputSecureFileUploaded(m)
	case CRC_inputSecureFile:
		r = decode_body_TL_inputSecureFile(m)
	case CRC_secureFileEmpty:
		r = decode_body_TL_secureFileEmpty(m)
	case CRC_secureFile:
		r = decode_body_TL_secureFile(m)
	case CRC_secureData:
		r = decode_body_TL_secureData(m)
	case CRC_securePlainPhone:
		r = decode_body_TL_securePlainPhone(m)
	case CRC_securePlainEmail:
		r = decode_body_TL_securePlainEmail(m)
	case CRC_secureValueTypePersonalDetails:
		r = decode_body_TL_secureValueTypePersonalDetails(m)
	case CRC_secureValueTypePassport:
		r = decode_body_TL_secureValueTypePassport(m)
	case CRC_secureValueTypeDriverLicense:
		r = decode_body_TL_secureValueTypeDriverLicense(m)
	case CRC_secureValueTypeIdentityCard:
		r = decode_body_TL_secureValueTypeIdentityCard(m)
	case CRC_secureValueTypeInternalPassport:
		r = decode_body_TL_secureValueTypeInternalPassport(m)
	case CRC_secureValueTypeAddress:
		r = decode_body_TL_secureValueTypeAddress(m)
	case CRC_secureValueTypeUtilityBill:
		r = decode_body_TL_secureValueTypeUtilityBill(m)
	case CRC_secureValueTypeBankStatement:
		r = decode_body_TL_secureValueTypeBankStatement(m)
	case CRC_secureValueTypeRentalAgreement:
		r = decode_body_TL_secureValueTypeRentalAgreement(m)
	case CRC_secureValueTypePassportRegistration:
		r = decode_body_TL_secureValueTypePassportRegistration(m)
	case CRC_secureValueTypeTemporaryRegistration:
		r = decode_body_TL_secureValueTypeTemporaryRegistration(m)
	case CRC_secureValueTypePhone:
		r = decode_body_TL_secureValueTypePhone(m)
	case CRC_secureValueTypeEmail:
		r = decode_body_TL_secureValueTypeEmail(m)
	case CRC_secureValue:
		r = decode_body_TL_secureValue(m)
	case CRC_inputSecureValue:
		r = decode_body_TL_inputSecureValue(m)
	case CRC_secureValueHash:
		r = decode_body_TL_secureValueHash(m)
	case CRC_secureValueErrorData:
		r = decode_body_TL_secureValueErrorData(m)
	case CRC_secureValueErrorFrontSide:
		r = decode_body_TL_secureValueErrorFrontSide(m)
	case CRC_secureValueErrorReverseSide:
		r = decode_body_TL_secureValueErrorReverseSide(m)
	case CRC_secureValueErrorSelfie:
		r = decode_body_TL_secureValueErrorSelfie(m)
	case CRC_secureValueErrorFile:
		r = decode_body_TL_secureValueErrorFile(m)
	case CRC_secureValueErrorFiles:
		r = decode_body_TL_secureValueErrorFiles(m)
	case CRC_secureValueError:
		r = decode_body_TL_secureValueError(m)
	case CRC_secureValueErrorTranslationFile:
		r = decode_body_TL_secureValueErrorTranslationFile(m)
	case CRC_secureValueErrorTranslationFiles:
		r = decode_body_TL_secureValueErrorTranslationFiles(m)
	case CRC_secureCredentialsEncrypted:
		r = decode_body_TL_secureCredentialsEncrypted(m)
	case CRC_account_authorizationForm:
		r = decode_body_TL_account_authorizationForm(m)
	case CRC_account_sentEmailCode:
		r = decode_body_TL_account_sentEmailCode(m)
	case CRC_help_deepLinkInfoEmpty:
		r = decode_body_TL_help_deepLinkInfoEmpty(m)
	case CRC_help_deepLinkInfo:
		r = decode_body_TL_help_deepLinkInfo(m)
	case CRC_savedPhoneContact:
		r = decode_body_TL_savedPhoneContact(m)
	case CRC_account_takeout:
		r = decode_body_TL_account_takeout(m)
	case CRC_passwordKDFAlgoUnknown:
		r = decode_body_TL_passwordKDFAlgoUnknown(m)
	case CRC_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow:
		r = decode_body_TL_passwordKDFAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow(m)
	case CRC_securePasswordKDFAlgoUnknown:
		r = decode_body_TL_securePasswordKDFAlgoUnknown(m)
	case CRC_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000:
		r = decode_body_TL_securePasswordKDFAlgoPBKDF2HMACSHA512iter100000(m)
	case CRC_securePasswordKDFAlgoSHA512:
		r = decode_body_TL_securePasswordKDFAlgoSHA512(m)
	case CRC_secureSecretSettings:
		r = decode_body_TL_secureSecretSettings(m)
	case CRC_inputCheckPasswordEmpty:
		r = decode_body_TL_inputCheckPasswordEmpty(m)
	case CRC_inputCheckPasswordSRP:
		r = decode_body_TL_inputCheckPasswordSRP(m)
	case CRC_secureRequiredType:
		r = decode_body_TL_secureRequiredType(m)
	case CRC_secureRequiredTypeOneOf:
		r = decode_body_TL_secureRequiredTypeOneOf(m)
	case CRC_help_passportConfigNotModified:
		r = decode_body_TL_help_passportConfigNotModified(m)
	case CRC_help_passportConfig:
		r = decode_body_TL_help_passportConfig(m)
	case CRC_inputAppEvent:
		r = decode_body_TL_inputAppEvent(m)
	case CRC_jsonObjectValue:
		r = decode_body_TL_jsonObjectValue(m)
	case CRC_jsonNull:
		r = decode_body_TL_jsonNull(m)
	case CRC_jsonBool:
		r = decode_body_TL_jsonBool(m)
	case CRC_jsonNumber:
		r = decode_body_TL_jsonNumber(m)
	case CRC_jsonString:
		r = decode_body_TL_jsonString(m)
	case CRC_jsonArray:
		r = decode_body_TL_jsonArray(m)
	case CRC_jsonObject:
		r = decode_body_TL_jsonObject(m)
	case CRC_pageTableCell:
		r = decode_body_TL_pageTableCell(m)
	case CRC_pageTableRow:
		r = decode_body_TL_pageTableRow(m)
	case CRC_pageCaption:
		r = decode_body_TL_pageCaption(m)
	case CRC_pageListItemText:
		r = decode_body_TL_pageListItemText(m)
	case CRC_pageListItemBlocks:
		r = decode_body_TL_pageListItemBlocks(m)
	case CRC_pageListOrderedItemText:
		r = decode_body_TL_pageListOrderedItemText(m)
	case CRC_pageListOrderedItemBlocks:
		r = decode_body_TL_pageListOrderedItemBlocks(m)
	case CRC_pageRelatedArticle:
		r = decode_body_TL_pageRelatedArticle(m)
	case CRC_page:
		r = decode_body_TL_page(m)
	case CRC_help_supportName:
		r = decode_body_TL_help_supportName(m)
	case CRC_help_userInfoEmpty:
		r = decode_body_TL_help_userInfoEmpty(m)
	case CRC_help_userInfo:
		r = decode_body_TL_help_userInfo(m)
	case CRC_pollAnswer:
		r = decode_body_TL_pollAnswer(m)
	case CRC_poll:
		r = decode_body_TL_poll(m)
	case CRC_pollAnswerVoters:
		r = decode_body_TL_pollAnswerVoters(m)
	case CRC_pollResults:
		r = decode_body_TL_pollResults(m)
	case CRC_chatOnlines:
		r = decode_body_TL_chatOnlines(m)
	case CRC_statsURL:
		r = decode_body_TL_statsURL(m)
	case CRC_chatAdminRights:
		r = decode_body_TL_chatAdminRights(m)
	case CRC_chatBannedRights:
		r = decode_body_TL_chatBannedRights(m)
	case CRC_inputWallPaper:
		r = decode_body_TL_inputWallPaper(m)
	case CRC_inputWallPaperSlug:
		r = decode_body_TL_inputWallPaperSlug(m)
	case CRC_inputWallPaperNoFile:
		r = decode_body_TL_inputWallPaperNoFile(m)
	case CRC_account_wallPapersNotModified:
		r = decode_body_TL_account_wallPapersNotModified(m)
	case CRC_account_wallPapers:
		r = decode_body_TL_account_wallPapers(m)
	case CRC_codeSettings:
		r = decode_body_TL_codeSettings(m)
	case CRC_wallPaperSettings:
		r = decode_body_TL_wallPaperSettings(m)
	case CRC_autoDownloadSettings:
		r = decode_body_TL_autoDownloadSettings(m)
	case CRC_account_autoDownloadSettings:
		r = decode_body_TL_account_autoDownloadSettings(m)
	case CRC_emojiKeyword:
		r = decode_body_TL_emojiKeyword(m)
	case CRC_emojiKeywordDeleted:
		r = decode_body_TL_emojiKeywordDeleted(m)
	case CRC_emojiKeywordsDifference:
		r = decode_body_TL_emojiKeywordsDifference(m)
	case CRC_emojiURL:
		r = decode_body_TL_emojiURL(m)
	case CRC_emojiLanguage:
		r = decode_body_TL_emojiLanguage(m)
	case CRC_folder:
		r = decode_body_TL_folder(m)
	case CRC_inputFolderPeer:
		r = decode_body_TL_inputFolderPeer(m)
	case CRC_folderPeer:
		r = decode_body_TL_folderPeer(m)
	case CRC_messages_searchCounter:
		r = decode_body_TL_messages_searchCounter(m)
	case CRC_urlAuthResultRequest:
		r = decode_body_TL_urlAuthResultRequest(m)
	case CRC_urlAuthResultAccepted:
		r = decode_body_TL_urlAuthResultAccepted(m)
	case CRC_urlAuthResultDefault:
		r = decode_body_TL_urlAuthResultDefault(m)
	case CRC_channelLocationEmpty:
		r = decode_body_TL_channelLocationEmpty(m)
	case CRC_channelLocation:
		r = decode_body_TL_channelLocation(m)
	case CRC_peerLocated:
		r = decode_body_TL_peerLocated(m)
	case CRC_peerSelfLocated:
		r = decode_body_TL_peerSelfLocated(m)
	case CRC_restrictionReason:
		r = decode_body_TL_restrictionReason(m)
	case CRC_inputTheme:
		r = decode_body_TL_inputTheme(m)
	case CRC_inputThemeSlug:
		r = decode_body_TL_inputThemeSlug(m)
	case CRC_theme:
		r = decode_body_TL_theme(m)
	case CRC_account_themesNotModified:
		r = decode_body_TL_account_themesNotModified(m)
	case CRC_account_themes:
		r = decode_body_TL_account_themes(m)
	case CRC_auth_loginToken:
		r = decode_body_TL_auth_loginToken(m)
	case CRC_auth_loginTokenMigrateTo:
		r = decode_body_TL_auth_loginTokenMigrateTo(m)
	case CRC_auth_loginTokenSuccess:
		r = decode_body_TL_auth_loginTokenSuccess(m)
	case CRC_account_contentSettings:
		r = decode_body_TL_account_contentSettings(m)
	case CRC_messages_inactiveChats:
		r = decode_body_TL_messages_inactiveChats(m)
	case CRC_baseThemeClassic:
		r = decode_body_TL_baseThemeClassic(m)
	case CRC_baseThemeDay:
		r = decode_body_TL_baseThemeDay(m)
	case CRC_baseThemeNight:
		r = decode_body_TL_baseThemeNight(m)
	case CRC_baseThemeTinted:
		r = decode_body_TL_baseThemeTinted(m)
	case CRC_baseThemeArctic:
		r = decode_body_TL_baseThemeArctic(m)
	case CRC_inputThemeSettings:
		r = decode_body_TL_inputThemeSettings(m)
	case CRC_themeSettings:
		r = decode_body_TL_themeSettings(m)
	case CRC_webPageAttributeTheme:
		r = decode_body_TL_webPageAttributeTheme(m)
	case CRC_webPageAttributeStory:
		r = decode_body_TL_webPageAttributeStory(m)
	case CRC_webPageAttributeStickerSet:
		r = decode_body_TL_webPageAttributeStickerSet(m)
	case CRC_messages_votesList:
		r = decode_body_TL_messages_votesList(m)
	case CRC_bankCardOpenURL:
		r = decode_body_TL_bankCardOpenURL(m)
	case CRC_payments_bankCardData:
		r = decode_body_TL_payments_bankCardData(m)
	case CRC_dialogFilter:
		r = decode_body_TL_dialogFilter(m)
	case CRC_dialogFilterDefault:
		r = decode_body_TL_dialogFilterDefault(m)
	case CRC_dialogFilterChatlist:
		r = decode_body_TL_dialogFilterChatlist(m)
	case CRC_dialogFilterSuggested:
		r = decode_body_TL_dialogFilterSuggested(m)
	case CRC_statsDateRangeDays:
		r = decode_body_TL_statsDateRangeDays(m)
	case CRC_statsAbsValueAndPrev:
		r = decode_body_TL_statsAbsValueAndPrev(m)
	case CRC_statsPercentValue:
		r = decode_body_TL_statsPercentValue(m)
	case CRC_statsGraphAsync:
		r = decode_body_TL_statsGraphAsync(m)
	case CRC_statsGraphError:
		r = decode_body_TL_statsGraphError(m)
	case CRC_statsGraph:
		r = decode_body_TL_statsGraph(m)
	case CRC_stats_broadcastStats:
		r = decode_body_TL_stats_broadcastStats(m)
	case CRC_help_promoDataEmpty:
		r = decode_body_TL_help_promoDataEmpty(m)
	case CRC_help_promoData:
		r = decode_body_TL_help_promoData(m)
	case CRC_videoSize:
		r = decode_body_TL_videoSize(m)
	case CRC_videoSizeEmojiMarkup:
		r = decode_body_TL_videoSizeEmojiMarkup(m)
	case CRC_videoSizeStickerMarkup:
		r = decode_body_TL_videoSizeStickerMarkup(m)
	case CRC_statsGroupTopPoster:
		r = decode_body_TL_statsGroupTopPoster(m)
	case CRC_statsGroupTopAdmin:
		r = decode_body_TL_statsGroupTopAdmin(m)
	case CRC_statsGroupTopInviter:
		r = decode_body_TL_statsGroupTopInviter(m)
	case CRC_stats_megagroupStats:
		r = decode_body_TL_stats_megagroupStats(m)
	case CRC_globalPrivacySettings:
		r = decode_body_TL_globalPrivacySettings(m)
	case CRC_help_countryCode:
		r = decode_body_TL_help_countryCode(m)
	case CRC_help_country:
		r = decode_body_TL_help_country(m)
	case CRC_help_countriesListNotModified:
		r = decode_body_TL_help_countriesListNotModified(m)
	case CRC_help_countriesList:
		r = decode_body_TL_help_countriesList(m)
	case CRC_messageViews:
		r = decode_body_TL_messageViews(m)
	case CRC_messages_messageViews:
		r = decode_body_TL_messages_messageViews(m)
	case CRC_messages_discussionMessage:
		r = decode_body_TL_messages_discussionMessage(m)
	case CRC_messageReplyHeader:
		r = decode_body_TL_messageReplyHeader(m)
	case CRC_messageReplyStoryHeader:
		r = decode_body_TL_messageReplyStoryHeader(m)
	case CRC_messageReplies:
		r = decode_body_TL_messageReplies(m)
	case CRC_peerBlocked:
		r = decode_body_TL_peerBlocked(m)
	case CRC_stats_messageStats:
		r = decode_body_TL_stats_messageStats(m)
	case CRC_groupCallDiscarded:
		r = decode_body_TL_groupCallDiscarded(m)
	case CRC_groupCall:
		r = decode_body_TL_groupCall(m)
	case CRC_inputGroupCall:
		r = decode_body_TL_inputGroupCall(m)
	case CRC_groupCallParticipant:
		r = decode_body_TL_groupCallParticipant(m)
	case CRC_phone_groupCall:
		r = decode_body_TL_phone_groupCall(m)
	case CRC_phone_groupParticipants:
		r = decode_body_TL_phone_groupParticipants(m)
	case CRC_inlineQueryPeerTypeSameBotPM:
		r = decode_body_TL_inlineQueryPeerTypeSameBotPM(m)
	case CRC_inlineQueryPeerTypePM:
		r = decode_body_TL_inlineQueryPeerTypePM(m)
	case CRC_inlineQueryPeerTypeChat:
		r = decode_body_TL_inlineQueryPeerTypeChat(m)
	case CRC_inlineQueryPeerTypeMegagroup:
		r = decode_body_TL_inlineQueryPeerTypeMegagroup(m)
	case CRC_inlineQueryPeerTypeBroadcast:
		r = decode_body_TL_inlineQueryPeerTypeBroadcast(m)
	case CRC_inlineQueryPeerTypeBotPM:
		r = decode_body_TL_inlineQueryPeerTypeBotPM(m)
	case CRC_messages_historyImport:
		r = decode_body_TL_messages_historyImport(m)
	case CRC_messages_historyImportParsed:
		r = decode_body_TL_messages_historyImportParsed(m)
	case CRC_messages_affectedFoundMessages:
		r = decode_body_TL_messages_affectedFoundMessages(m)
	case CRC_chatInviteImporter:
		r = decode_body_TL_chatInviteImporter(m)
	case CRC_messages_exportedChatInvites:
		r = decode_body_TL_messages_exportedChatInvites(m)
	case CRC_messages_exportedChatInvite:
		r = decode_body_TL_messages_exportedChatInvite(m)
	case CRC_messages_exportedChatInviteReplaced:
		r = decode_body_TL_messages_exportedChatInviteReplaced(m)
	case CRC_messages_chatInviteImporters:
		r = decode_body_TL_messages_chatInviteImporters(m)
	case CRC_chatAdminWithInvites:
		r = decode_body_TL_chatAdminWithInvites(m)
	case CRC_messages_chatAdminsWithInvites:
		r = decode_body_TL_messages_chatAdminsWithInvites(m)
	case CRC_messages_checkedHistoryImportPeer:
		r = decode_body_TL_messages_checkedHistoryImportPeer(m)
	case CRC_phone_joinAsPeers:
		r = decode_body_TL_phone_joinAsPeers(m)
	case CRC_phone_exportedGroupCallInvite:
		r = decode_body_TL_phone_exportedGroupCallInvite(m)
	case CRC_groupCallParticipantVideoSourceGroup:
		r = decode_body_TL_groupCallParticipantVideoSourceGroup(m)
	case CRC_groupCallParticipantVideo:
		r = decode_body_TL_groupCallParticipantVideo(m)
	case CRC_stickers_suggestedShortName:
		r = decode_body_TL_stickers_suggestedShortName(m)
	case CRC_botCommandScopeDefault:
		r = decode_body_TL_botCommandScopeDefault(m)
	case CRC_botCommandScopeUsers:
		r = decode_body_TL_botCommandScopeUsers(m)
	case CRC_botCommandScopeChats:
		r = decode_body_TL_botCommandScopeChats(m)
	case CRC_botCommandScopeChatAdmins:
		r = decode_body_TL_botCommandScopeChatAdmins(m)
	case CRC_botCommandScopePeer:
		r = decode_body_TL_botCommandScopePeer(m)
	case CRC_botCommandScopePeerAdmins:
		r = decode_body_TL_botCommandScopePeerAdmins(m)
	case CRC_botCommandScopePeerUser:
		r = decode_body_TL_botCommandScopePeerUser(m)
	case CRC_account_resetPasswordFailedWait:
		r = decode_body_TL_account_resetPasswordFailedWait(m)
	case CRC_account_resetPasswordRequestedWait:
		r = decode_body_TL_account_resetPasswordRequestedWait(m)
	case CRC_account_resetPasswordOK:
		r = decode_body_TL_account_resetPasswordOK(m)
	case CRC_sponsoredMessage:
		r = decode_body_TL_sponsoredMessage(m)
	case CRC_messages_sponsoredMessages:
		r = decode_body_TL_messages_sponsoredMessages(m)
	case CRC_messages_sponsoredMessagesEmpty:
		r = decode_body_TL_messages_sponsoredMessagesEmpty(m)
	case CRC_searchResultsCalendarPeriod:
		r = decode_body_TL_searchResultsCalendarPeriod(m)
	case CRC_messages_searchResultsCalendar:
		r = decode_body_TL_messages_searchResultsCalendar(m)
	case CRC_searchResultPosition:
		r = decode_body_TL_searchResultPosition(m)
	case CRC_messages_searchResultsPositions:
		r = decode_body_TL_messages_searchResultsPositions(m)
	case CRC_channels_sendAsPeers:
		r = decode_body_TL_channels_sendAsPeers(m)
	case CRC_users_userFull:
		r = decode_body_TL_users_userFull(m)
	case CRC_messages_peerSettings:
		r = decode_body_TL_messages_peerSettings(m)
	case CRC_auth_loggedOut:
		r = decode_body_TL_auth_loggedOut(m)
	case CRC_reactionCount:
		r = decode_body_TL_reactionCount(m)
	case CRC_messageReactions:
		r = decode_body_TL_messageReactions(m)
	case CRC_messages_messageReactionsList:
		r = decode_body_TL_messages_messageReactionsList(m)
	case CRC_availableReaction:
		r = decode_body_TL_availableReaction(m)
	case CRC_messages_availableReactionsNotModified:
		r = decode_body_TL_messages_availableReactionsNotModified(m)
	case CRC_messages_availableReactions:
		r = decode_body_TL_messages_availableReactions(m)
	case CRC_messagePeerReaction:
		r = decode_body_TL_messagePeerReaction(m)
	case CRC_groupCallStreamChannel:
		r = decode_body_TL_groupCallStreamChannel(m)
	case CRC_phone_groupCallStreamChannels:
		r = decode_body_TL_phone_groupCallStreamChannels(m)
	case CRC_phone_groupCallStreamRTMPURL:
		r = decode_body_TL_phone_groupCallStreamRTMPURL(m)
	case CRC_attachMenuBotIconColor:
		r = decode_body_TL_attachMenuBotIconColor(m)
	case CRC_attachMenuBotIcon:
		r = decode_body_TL_attachMenuBotIcon(m)
	case CRC_attachMenuBot:
		r = decode_body_TL_attachMenuBot(m)
	case CRC_attachMenuBotsNotModified:
		r = decode_body_TL_attachMenuBotsNotModified(m)
	case CRC_attachMenuBots:
		r = decode_body_TL_attachMenuBots(m)
	case CRC_attachMenuBotsBot:
		r = decode_body_TL_attachMenuBotsBot(m)
	case CRC_webViewResultURL:
		r = decode_body_TL_webViewResultURL(m)
	case CRC_webViewMessageSent:
		r = decode_body_TL_webViewMessageSent(m)
	case CRC_botMenuButtonDefault:
		r = decode_body_TL_botMenuButtonDefault(m)
	case CRC_botMenuButtonCommands:
		r = decode_body_TL_botMenuButtonCommands(m)
	case CRC_botMenuButton:
		r = decode_body_TL_botMenuButton(m)
	case CRC_account_savedRingtonesNotModified:
		r = decode_body_TL_account_savedRingtonesNotModified(m)
	case CRC_account_savedRingtones:
		r = decode_body_TL_account_savedRingtones(m)
	case CRC_notificationSoundDefault:
		r = decode_body_TL_notificationSoundDefault(m)
	case CRC_notificationSoundNone:
		r = decode_body_TL_notificationSoundNone(m)
	case CRC_notificationSoundLocal:
		r = decode_body_TL_notificationSoundLocal(m)
	case CRC_notificationSoundRingtone:
		r = decode_body_TL_notificationSoundRingtone(m)
	case CRC_account_savedRingtone:
		r = decode_body_TL_account_savedRingtone(m)
	case CRC_account_savedRingtoneConverted:
		r = decode_body_TL_account_savedRingtoneConverted(m)
	case CRC_attachMenuPeerTypeSameBotPM:
		r = decode_body_TL_attachMenuPeerTypeSameBotPM(m)
	case CRC_attachMenuPeerTypeBotPM:
		r = decode_body_TL_attachMenuPeerTypeBotPM(m)
	case CRC_attachMenuPeerTypePM:
		r = decode_body_TL_attachMenuPeerTypePM(m)
	case CRC_attachMenuPeerTypeChat:
		r = decode_body_TL_attachMenuPeerTypeChat(m)
	case CRC_attachMenuPeerTypeBroadcast:
		r = decode_body_TL_attachMenuPeerTypeBroadcast(m)
	case CRC_inputInvoiceMessage:
		r = decode_body_TL_inputInvoiceMessage(m)
	case CRC_inputInvoiceSlug:
		r = decode_body_TL_inputInvoiceSlug(m)
	case CRC_inputInvoicePremiumGiftCode:
		r = decode_body_TL_inputInvoicePremiumGiftCode(m)
	case CRC_inputInvoiceStars:
		r = decode_body_TL_inputInvoiceStars(m)
	case CRC_inputInvoiceChatInviteSubscription:
		r = decode_body_TL_inputInvoiceChatInviteSubscription(m)
	case CRC_payments_exportedInvoice:
		r = decode_body_TL_payments_exportedInvoice(m)
	case CRC_messages_transcribedAudio:
		r = decode_body_TL_messages_transcribedAudio(m)
	case CRC_help_premiumPromo:
		r = decode_body_TL_help_premiumPromo(m)
	case CRC_inputStorePaymentPremiumSubscription:
		r = decode_body_TL_inputStorePaymentPremiumSubscription(m)
	case CRC_inputStorePaymentGiftPremium:
		r = decode_body_TL_inputStorePaymentGiftPremium(m)
	case CRC_inputStorePaymentPremiumGiftCode:
		r = decode_body_TL_inputStorePaymentPremiumGiftCode(m)
	case CRC_inputStorePaymentPremiumGiveaway:
		r = decode_body_TL_inputStorePaymentPremiumGiveaway(m)
	case CRC_inputStorePaymentStarsTopup:
		r = decode_body_TL_inputStorePaymentStarsTopup(m)
	case CRC_inputStorePaymentStarsGift:
		r = decode_body_TL_inputStorePaymentStarsGift(m)
	case CRC_inputStorePaymentStarsGiveaway:
		r = decode_body_TL_inputStorePaymentStarsGiveaway(m)
	case CRC_premiumGiftOption:
		r = decode_body_TL_premiumGiftOption(m)
	case CRC_paymentFormMethod:
		r = decode_body_TL_paymentFormMethod(m)
	case CRC_emojiStatusEmpty:
		r = decode_body_TL_emojiStatusEmpty(m)
	case CRC_emojiStatus:
		r = decode_body_TL_emojiStatus(m)
	case CRC_emojiStatusUntil:
		r = decode_body_TL_emojiStatusUntil(m)
	case CRC_account_emojiStatusesNotModified:
		r = decode_body_TL_account_emojiStatusesNotModified(m)
	case CRC_account_emojiStatuses:
		r = decode_body_TL_account_emojiStatuses(m)
	case CRC_reactionEmpty:
		r = decode_body_TL_reactionEmpty(m)
	case CRC_reactionEmoji:
		r = decode_body_TL_reactionEmoji(m)
	case CRC_reactionCustomEmoji:
		r = decode_body_TL_reactionCustomEmoji(m)
	case CRC_reactionPaid:
		r = decode_body_TL_reactionPaid(m)
	case CRC_chatReactionsNone:
		r = decode_body_TL_chatReactionsNone(m)
	case CRC_chatReactionsAll:
		r = decode_body_TL_chatReactionsAll(m)
	case CRC_chatReactionsSome:
		r = decode_body_TL_chatReactionsSome(m)
	case CRC_messages_reactionsNotModified:
		r = decode_body_TL_messages_reactionsNotModified(m)
	case CRC_messages_reactions:
		r = decode_body_TL_messages_reactions(m)
	case CRC_emailVerifyPurposeLoginSetup:
		r = decode_body_TL_emailVerifyPurposeLoginSetup(m)
	case CRC_emailVerifyPurposeLoginChange:
		r = decode_body_TL_emailVerifyPurposeLoginChange(m)
	case CRC_emailVerifyPurposePassport:
		r = decode_body_TL_emailVerifyPurposePassport(m)
	case CRC_emailVerificationCode:
		r = decode_body_TL_emailVerificationCode(m)
	case CRC_emailVerificationGoogle:
		r = decode_body_TL_emailVerificationGoogle(m)
	case CRC_emailVerificationApple:
		r = decode_body_TL_emailVerificationApple(m)
	case CRC_account_emailVerified:
		r = decode_body_TL_account_emailVerified(m)
	case CRC_account_emailVerifiedLogin:
		r = decode_body_TL_account_emailVerifiedLogin(m)
	case CRC_premiumSubscriptionOption:
		r = decode_body_TL_premiumSubscriptionOption(m)
	case CRC_sendAsPeer:
		r = decode_body_TL_sendAsPeer(m)
	case CRC_messageExtendedMediaPreview:
		r = decode_body_TL_messageExtendedMediaPreview(m)
	case CRC_messageExtendedMedia:
		r = decode_body_TL_messageExtendedMedia(m)
	case CRC_stickerKeyword:
		r = decode_body_TL_stickerKeyword(m)
	case CRC_username:
		r = decode_body_TL_username(m)
	case CRC_forumTopicDeleted:
		r = decode_body_TL_forumTopicDeleted(m)
	case CRC_forumTopic:
		r = decode_body_TL_forumTopic(m)
	case CRC_messages_forumTopics:
		r = decode_body_TL_messages_forumTopics(m)
	case CRC_defaultHistoryTTL:
		r = decode_body_TL_defaultHistoryTTL(m)
	case CRC_exportedContactToken:
		r = decode_body_TL_exportedContactToken(m)
	case CRC_requestPeerTypeUser:
		r = decode_body_TL_requestPeerTypeUser(m)
	case CRC_requestPeerTypeChat:
		r = decode_body_TL_requestPeerTypeChat(m)
	case CRC_requestPeerTypeBroadcast:
		r = decode_body_TL_requestPeerTypeBroadcast(m)
	case CRC_emojiListNotModified:
		r = decode_body_TL_emojiListNotModified(m)
	case CRC_emojiList:
		r = decode_body_TL_emojiList(m)
	case CRC_emojiGroup:
		r = decode_body_TL_emojiGroup(m)
	case CRC_emojiGroupGreeting:
		r = decode_body_TL_emojiGroupGreeting(m)
	case CRC_emojiGroupPremium:
		r = decode_body_TL_emojiGroupPremium(m)
	case CRC_messages_emojiGroupsNotModified:
		r = decode_body_TL_messages_emojiGroupsNotModified(m)
	case CRC_messages_emojiGroups:
		r = decode_body_TL_messages_emojiGroups(m)
	case CRC_textWithEntities:
		r = decode_body_TL_textWithEntities(m)
	case CRC_messages_translateResult:
		r = decode_body_TL_messages_translateResult(m)
	case CRC_autoSaveSettings:
		r = decode_body_TL_autoSaveSettings(m)
	case CRC_autoSaveException:
		r = decode_body_TL_autoSaveException(m)
	case CRC_account_autoSaveSettings:
		r = decode_body_TL_account_autoSaveSettings(m)
	case CRC_help_appConfigNotModified:
		r = decode_body_TL_help_appConfigNotModified(m)
	case CRC_help_appConfig:
		r = decode_body_TL_help_appConfig(m)
	case CRC_inputBotAppID:
		r = decode_body_TL_inputBotAppID(m)
	case CRC_inputBotAppShortName:
		r = decode_body_TL_inputBotAppShortName(m)
	case CRC_botAppNotModified:
		r = decode_body_TL_botAppNotModified(m)
	case CRC_botApp:
		r = decode_body_TL_botApp(m)
	case CRC_messages_botApp:
		r = decode_body_TL_messages_botApp(m)
	case CRC_inlineBotWebView:
		r = decode_body_TL_inlineBotWebView(m)
	case CRC_readParticipantDate:
		r = decode_body_TL_readParticipantDate(m)
	case CRC_inputChatlistDialogFilter:
		r = decode_body_TL_inputChatlistDialogFilter(m)
	case CRC_exportedChatlistInvite:
		r = decode_body_TL_exportedChatlistInvite(m)
	case CRC_chatlists_exportedChatlistInvite:
		r = decode_body_TL_chatlists_exportedChatlistInvite(m)
	case CRC_chatlists_exportedInvites:
		r = decode_body_TL_chatlists_exportedInvites(m)
	case CRC_chatlists_chatlistInviteAlready:
		r = decode_body_TL_chatlists_chatlistInviteAlready(m)
	case CRC_chatlists_chatlistInvite:
		r = decode_body_TL_chatlists_chatlistInvite(m)
	case CRC_chatlists_chatlistUpdates:
		r = decode_body_TL_chatlists_chatlistUpdates(m)
	case CRC_bots_botInfo:
		r = decode_body_TL_bots_botInfo(m)
	case CRC_messagePeerVote:
		r = decode_body_TL_messagePeerVote(m)
	case CRC_messagePeerVoteInputOption:
		r = decode_body_TL_messagePeerVoteInputOption(m)
	case CRC_messagePeerVoteMultiple:
		r = decode_body_TL_messagePeerVoteMultiple(m)
	case CRC_storyViews:
		r = decode_body_TL_storyViews(m)
	case CRC_storyItemDeleted:
		r = decode_body_TL_storyItemDeleted(m)
	case CRC_storyItemSkipped:
		r = decode_body_TL_storyItemSkipped(m)
	case CRC_storyItem:
		r = decode_body_TL_storyItem(m)
	case CRC_stories_allStoriesNotModified:
		r = decode_body_TL_stories_allStoriesNotModified(m)
	case CRC_stories_allStories:
		r = decode_body_TL_stories_allStories(m)
	case CRC_stories_stories:
		r = decode_body_TL_stories_stories(m)
	case CRC_storyView:
		r = decode_body_TL_storyView(m)
	case CRC_storyViewPublicForward:
		r = decode_body_TL_storyViewPublicForward(m)
	case CRC_storyViewPublicRepost:
		r = decode_body_TL_storyViewPublicRepost(m)
	case CRC_stories_storyViewsList:
		r = decode_body_TL_stories_storyViewsList(m)
	case CRC_stories_storyViews:
		r = decode_body_TL_stories_storyViews(m)
	case CRC_inputReplyToMessage:
		r = decode_body_TL_inputReplyToMessage(m)
	case CRC_inputReplyToStory:
		r = decode_body_TL_inputReplyToStory(m)
	case CRC_exportedStoryLink:
		r = decode_body_TL_exportedStoryLink(m)
	case CRC_storiesStealthMode:
		r = decode_body_TL_storiesStealthMode(m)
	case CRC_mediaAreaCoordinates:
		r = decode_body_TL_mediaAreaCoordinates(m)
	case CRC_mediaAreaVenue:
		r = decode_body_TL_mediaAreaVenue(m)
	case CRC_inputMediaAreaVenue:
		r = decode_body_TL_inputMediaAreaVenue(m)
	case CRC_mediaAreaGeoPoint:
		r = decode_body_TL_mediaAreaGeoPoint(m)
	case CRC_mediaAreaSuggestedReaction:
		r = decode_body_TL_mediaAreaSuggestedReaction(m)
	case CRC_mediaAreaChannelPost:
		r = decode_body_TL_mediaAreaChannelPost(m)
	case CRC_inputMediaAreaChannelPost:
		r = decode_body_TL_inputMediaAreaChannelPost(m)
	case CRC_mediaAreaURL:
		r = decode_body_TL_mediaAreaURL(m)
	case CRC_mediaAreaWeather:
		r = decode_body_TL_mediaAreaWeather(m)
	case CRC_peerStories:
		r = decode_body_TL_peerStories(m)
	case CRC_stories_peerStories:
		r = decode_body_TL_stories_peerStories(m)
	case CRC_messages_webPage:
		r = decode_body_TL_messages_webPage(m)
	case CRC_premiumGiftCodeOption:
		r = decode_body_TL_premiumGiftCodeOption(m)
	case CRC_payments_checkedGiftCode:
		r = decode_body_TL_payments_checkedGiftCode(m)
	case CRC_payments_giveawayInfo:
		r = decode_body_TL_payments_giveawayInfo(m)
	case CRC_payments_giveawayInfoResults:
		r = decode_body_TL_payments_giveawayInfoResults(m)
	case CRC_prepaidGiveaway:
		r = decode_body_TL_prepaidGiveaway(m)
	case CRC_prepaidStarsGiveaway:
		r = decode_body_TL_prepaidStarsGiveaway(m)
	case CRC_boost:
		r = decode_body_TL_boost(m)
	case CRC_premium_boostsList:
		r = decode_body_TL_premium_boostsList(m)
	case CRC_myBoost:
		r = decode_body_TL_myBoost(m)
	case CRC_premium_myBoosts:
		r = decode_body_TL_premium_myBoosts(m)
	case CRC_premium_boostsStatus:
		r = decode_body_TL_premium_boostsStatus(m)
	case CRC_storyFwdHeader:
		r = decode_body_TL_storyFwdHeader(m)
	case CRC_postInteractionCountersMessage:
		r = decode_body_TL_postInteractionCountersMessage(m)
	case CRC_postInteractionCountersStory:
		r = decode_body_TL_postInteractionCountersStory(m)
	case CRC_stats_storyStats:
		r = decode_body_TL_stats_storyStats(m)
	case CRC_publicForwardMessage:
		r = decode_body_TL_publicForwardMessage(m)
	case CRC_publicForwardStory:
		r = decode_body_TL_publicForwardStory(m)
	case CRC_stats_publicForwards:
		r = decode_body_TL_stats_publicForwards(m)
	case CRC_peerColor:
		r = decode_body_TL_peerColor(m)
	case CRC_help_peerColorSet:
		r = decode_body_TL_help_peerColorSet(m)
	case CRC_help_peerColorProfileSet:
		r = decode_body_TL_help_peerColorProfileSet(m)
	case CRC_help_peerColorOption:
		r = decode_body_TL_help_peerColorOption(m)
	case CRC_help_peerColorsNotModified:
		r = decode_body_TL_help_peerColorsNotModified(m)
	case CRC_help_peerColors:
		r = decode_body_TL_help_peerColors(m)
	case CRC_storyReaction:
		r = decode_body_TL_storyReaction(m)
	case CRC_storyReactionPublicForward:
		r = decode_body_TL_storyReactionPublicForward(m)
	case CRC_storyReactionPublicRepost:
		r = decode_body_TL_storyReactionPublicRepost(m)
	case CRC_stories_storyReactionsList:
		r = decode_body_TL_stories_storyReactionsList(m)
	case CRC_savedDialog:
		r = decode_body_TL_savedDialog(m)
	case CRC_messages_savedDialogs:
		r = decode_body_TL_messages_savedDialogs(m)
	case CRC_messages_savedDialogsSlice:
		r = decode_body_TL_messages_savedDialogsSlice(m)
	case CRC_messages_savedDialogsNotModified:
		r = decode_body_TL_messages_savedDialogsNotModified(m)
	case CRC_savedReactionTag:
		r = decode_body_TL_savedReactionTag(m)
	case CRC_messages_savedReactionTagsNotModified:
		r = decode_body_TL_messages_savedReactionTagsNotModified(m)
	case CRC_messages_savedReactionTags:
		r = decode_body_TL_messages_savedReactionTags(m)
	case CRC_outboxReadDate:
		r = decode_body_TL_outboxReadDate(m)
	case CRC_smsjobs_eligibleToJoin:
		r = decode_body_TL_smsjobs_eligibleToJoin(m)
	case CRC_smsjobs_status:
		r = decode_body_TL_smsjobs_status(m)
	case CRC_smsJob:
		r = decode_body_TL_smsJob(m)
	case CRC_businessWeeklyOpen:
		r = decode_body_TL_businessWeeklyOpen(m)
	case CRC_businessWorkHours:
		r = decode_body_TL_businessWorkHours(m)
	case CRC_businessLocation:
		r = decode_body_TL_businessLocation(m)
	case CRC_inputBusinessRecipients:
		r = decode_body_TL_inputBusinessRecipients(m)
	case CRC_businessRecipients:
		r = decode_body_TL_businessRecipients(m)
	case CRC_businessAwayMessageScheduleAlways:
		r = decode_body_TL_businessAwayMessageScheduleAlways(m)
	case CRC_businessAwayMessageScheduleOutsideWorkHours:
		r = decode_body_TL_businessAwayMessageScheduleOutsideWorkHours(m)
	case CRC_businessAwayMessageScheduleCustom:
		r = decode_body_TL_businessAwayMessageScheduleCustom(m)
	case CRC_inputBusinessGreetingMessage:
		r = decode_body_TL_inputBusinessGreetingMessage(m)
	case CRC_businessGreetingMessage:
		r = decode_body_TL_businessGreetingMessage(m)
	case CRC_inputBusinessAwayMessage:
		r = decode_body_TL_inputBusinessAwayMessage(m)
	case CRC_businessAwayMessage:
		r = decode_body_TL_businessAwayMessage(m)
	case CRC_timezone:
		r = decode_body_TL_timezone(m)
	case CRC_help_timezonesListNotModified:
		r = decode_body_TL_help_timezonesListNotModified(m)
	case CRC_help_timezonesList:
		r = decode_body_TL_help_timezonesList(m)
	case CRC_quickReply:
		r = decode_body_TL_quickReply(m)
	case CRC_inputQuickReplyShortcut:
		r = decode_body_TL_inputQuickReplyShortcut(m)
	case CRC_inputQuickReplyShortcutID:
		r = decode_body_TL_inputQuickReplyShortcutID(m)
	case CRC_messages_quickReplies:
		r = decode_body_TL_messages_quickReplies(m)
	case CRC_messages_quickRepliesNotModified:
		r = decode_body_TL_messages_quickRepliesNotModified(m)
	case CRC_connectedBot:
		r = decode_body_TL_connectedBot(m)
	case CRC_account_connectedBots:
		r = decode_body_TL_account_connectedBots(m)
	case CRC_messages_dialogFilters:
		r = decode_body_TL_messages_dialogFilters(m)
	case CRC_birthday:
		r = decode_body_TL_birthday(m)
	case CRC_botBusinessConnection:
		r = decode_body_TL_botBusinessConnection(m)
	case CRC_inputBusinessIntro:
		r = decode_body_TL_inputBusinessIntro(m)
	case CRC_businessIntro:
		r = decode_body_TL_businessIntro(m)
	case CRC_messages_myStickers:
		r = decode_body_TL_messages_myStickers(m)
	case CRC_inputCollectibleUsername:
		r = decode_body_TL_inputCollectibleUsername(m)
	case CRC_inputCollectiblePhone:
		r = decode_body_TL_inputCollectiblePhone(m)
	case CRC_fragment_collectibleInfo:
		r = decode_body_TL_fragment_collectibleInfo(m)
	case CRC_inputBusinessBotRecipients:
		r = decode_body_TL_inputBusinessBotRecipients(m)
	case CRC_businessBotRecipients:
		r = decode_body_TL_businessBotRecipients(m)
	case CRC_contactBirthday:
		r = decode_body_TL_contactBirthday(m)
	case CRC_contacts_contactBirthdays:
		r = decode_body_TL_contacts_contactBirthdays(m)
	case CRC_missingInvitee:
		r = decode_body_TL_missingInvitee(m)
	case CRC_messages_invitedUsers:
		r = decode_body_TL_messages_invitedUsers(m)
	case CRC_inputBusinessChatLink:
		r = decode_body_TL_inputBusinessChatLink(m)
	case CRC_businessChatLink:
		r = decode_body_TL_businessChatLink(m)
	case CRC_account_businessChatLinks:
		r = decode_body_TL_account_businessChatLinks(m)
	case CRC_account_resolvedBusinessChatLinks:
		r = decode_body_TL_account_resolvedBusinessChatLinks(m)
	case CRC_requestedPeerUser:
		r = decode_body_TL_requestedPeerUser(m)
	case CRC_requestedPeerChat:
		r = decode_body_TL_requestedPeerChat(m)
	case CRC_requestedPeerChannel:
		r = decode_body_TL_requestedPeerChannel(m)
	case CRC_sponsoredMessageReportOption:
		r = decode_body_TL_sponsoredMessageReportOption(m)
	case CRC_channels_sponsoredMessageReportResultChooseOption:
		r = decode_body_TL_channels_sponsoredMessageReportResultChooseOption(m)
	case CRC_channels_sponsoredMessageReportResultAdsHidden:
		r = decode_body_TL_channels_sponsoredMessageReportResultAdsHidden(m)
	case CRC_channels_sponsoredMessageReportResultReported:
		r = decode_body_TL_channels_sponsoredMessageReportResultReported(m)
	case CRC_stats_broadcastRevenueStats:
		r = decode_body_TL_stats_broadcastRevenueStats(m)
	case CRC_stats_broadcastRevenueWithdrawalURL:
		r = decode_body_TL_stats_broadcastRevenueWithdrawalURL(m)
	case CRC_broadcastRevenueTransactionProceeds:
		r = decode_body_TL_broadcastRevenueTransactionProceeds(m)
	case CRC_broadcastRevenueTransactionWithdrawal:
		r = decode_body_TL_broadcastRevenueTransactionWithdrawal(m)
	case CRC_broadcastRevenueTransactionRefund:
		r = decode_body_TL_broadcastRevenueTransactionRefund(m)
	case CRC_stats_broadcastRevenueTransactions:
		r = decode_body_TL_stats_broadcastRevenueTransactions(m)
	case CRC_reactionNotificationsFromContacts:
		r = decode_body_TL_reactionNotificationsFromContacts(m)
	case CRC_reactionNotificationsFromAll:
		r = decode_body_TL_reactionNotificationsFromAll(m)
	case CRC_reactionsNotifySettings:
		r = decode_body_TL_reactionsNotifySettings(m)
	case CRC_broadcastRevenueBalances:
		r = decode_body_TL_broadcastRevenueBalances(m)
	case CRC_availableEffect:
		r = decode_body_TL_availableEffect(m)
	case CRC_messages_availableEffectsNotModified:
		r = decode_body_TL_messages_availableEffectsNotModified(m)
	case CRC_messages_availableEffects:
		r = decode_body_TL_messages_availableEffects(m)
	case CRC_factCheck:
		r = decode_body_TL_factCheck(m)
	case CRC_starsTransactionPeerUnsupported:
		r = decode_body_TL_starsTransactionPeerUnsupported(m)
	case CRC_starsTransactionPeerAppStore:
		r = decode_body_TL_starsTransactionPeerAppStore(m)
	case CRC_starsTransactionPeerPlayMarket:
		r = decode_body_TL_starsTransactionPeerPlayMarket(m)
	case CRC_starsTransactionPeerPremiumBot:
		r = decode_body_TL_starsTransactionPeerPremiumBot(m)
	case CRC_starsTransactionPeerFragment:
		r = decode_body_TL_starsTransactionPeerFragment(m)
	case CRC_starsTransactionPeer:
		r = decode_body_TL_starsTransactionPeer(m)
	case CRC_starsTransactionPeerAds:
		r = decode_body_TL_starsTransactionPeerAds(m)
	case CRC_starsTopupOption:
		r = decode_body_TL_starsTopupOption(m)
	case CRC_starsTransaction:
		r = decode_body_TL_starsTransaction(m)
	case CRC_payments_starsStatus:
		r = decode_body_TL_payments_starsStatus(m)
	case CRC_foundStory:
		r = decode_body_TL_foundStory(m)
	case CRC_stories_foundStories:
		r = decode_body_TL_stories_foundStories(m)
	case CRC_geoPointAddress:
		r = decode_body_TL_geoPointAddress(m)
	case CRC_starsRevenueStatus:
		r = decode_body_TL_starsRevenueStatus(m)
	case CRC_payments_starsRevenueStats:
		r = decode_body_TL_payments_starsRevenueStats(m)
	case CRC_payments_starsRevenueWithdrawalURL:
		r = decode_body_TL_payments_starsRevenueWithdrawalURL(m)
	case CRC_payments_starsRevenueAdsAccountURL:
		r = decode_body_TL_payments_starsRevenueAdsAccountURL(m)
	case CRC_inputStarsTransaction:
		r = decode_body_TL_inputStarsTransaction(m)
	case CRC_starsGiftOption:
		r = decode_body_TL_starsGiftOption(m)
	case CRC_bots_popularAppBots:
		r = decode_body_TL_bots_popularAppBots(m)
	case CRC_botPreviewMedia:
		r = decode_body_TL_botPreviewMedia(m)
	case CRC_bots_previewInfo:
		r = decode_body_TL_bots_previewInfo(m)
	case CRC_starsSubscriptionPricing:
		r = decode_body_TL_starsSubscriptionPricing(m)
	case CRC_starsSubscription:
		r = decode_body_TL_starsSubscription(m)
	case CRC_messageReactor:
		r = decode_body_TL_messageReactor(m)
	case CRC_starsGiveawayOption:
		r = decode_body_TL_starsGiveawayOption(m)
	case CRC_starsGiveawayWinnersOption:
		r = decode_body_TL_starsGiveawayWinnersOption(m)

	default:
		m.err = merry.Errorf("Unknown constructor: %08x", constructor)
		return nil
	}

	if m.err != nil {
		m.pushToErrBufStack(objStartOffset, constructor)
		return nil
	}

	return
}
